"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_src_services_email_email_service_ts";
exports.ids = ["_rsc_src_services_email_email_service_ts"];
exports.modules = {

/***/ "(rsc)/./src/services/email/email_service.ts":
/*!*********************************************!*\
  !*** ./src/services/email/email_service.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isEmailServiceConfigured: () => (/* binding */ isEmailServiceConfigured),\n/* harmony export */   isValidEmail: () => (/* binding */ isValidEmail),\n/* harmony export */   sendInvitationReminderEmail: () => (/* binding */ sendInvitationReminderEmail),\n/* harmony export */   sendTeamInvitationEmail: () => (/* binding */ sendTeamInvitationEmail)\n/* harmony export */ });\n/* harmony import */ var resend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! resend */ \"(rsc)/./node_modules/resend/dist/index.mjs\");\n// src/services/email/email_service.ts\n/**\n * Email Service for Massimino\n * Handles email sending using Resend API\n */ \n// Initialize Resend client only if API key is present\nconst RESEND_API_KEY = process.env.RESEND_API_KEY;\nconst resend = RESEND_API_KEY ? new resend__WEBPACK_IMPORTED_MODULE_0__.Resend(RESEND_API_KEY) : null;\n/**\n * Email configuration\n */ const EMAIL_CONFIG = {\n    // Use Resend's dev sender if no verified domain configured\n    from: process.env.EMAIL_FROM || 'Massimino <onboarding@resend.dev>',\n    replyTo: process.env.EMAIL_REPLY_TO || 'support@massimino.app'\n};\n/**\n * Send team invitation email\n */ async function sendTeamInvitationEmail(params) {\n    try {\n        if (!resend) {\n            return {\n                success: false,\n                error: 'Email service not configured (missing RESEND_API_KEY)'\n            };\n        }\n        const inviteUrl = `${process.env.NEXT_PUBLIC_APP_URL}/team_invite/${params.inviteToken}`;\n        const expiresInDays = Math.ceil((params.expiresAt.getTime() - Date.now()) / (1000 * 60 * 60 * 24));\n        // Import the email template dynamically\n        const { TeamInvitationEmail } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@react-email\"), __webpack_require__.e(\"_rsc_src_templates_email_team_invitation_tsx\")]).then(__webpack_require__.bind(__webpack_require__, /*! @/templates/email/team_invitation */ \"(rsc)/./src/templates/email/team_invitation.tsx\"));\n        const { data, error } = await resend.emails.send({\n            from: EMAIL_CONFIG.from,\n            to: params.to,\n            replyTo: EMAIL_CONFIG.replyTo,\n            subject: `You're invited to join ${params.teamName} on Massimino`,\n            react: TeamInvitationEmail({\n                teamName: params.teamName,\n                trainerName: params.trainerName,\n                inviteUrl,\n                message: params.message ?? undefined,\n                expiresInDays\n            })\n        });\n        if (error) {\n            console.error('[EmailService] Failed to send team invitation:', error);\n            return {\n                success: false,\n                error: error.message || 'Failed to send email'\n            };\n        }\n        return {\n            success: true,\n            messageId: data?.id\n        };\n    } catch (error) {\n        console.error('[EmailService] Error sending team invitation email:', error);\n        return {\n            success: false,\n            error: error.message || 'Unknown error'\n        };\n    }\n}\n/**\n * Send reminder email for pending team invitation\n */ async function sendInvitationReminderEmail(params) {\n    try {\n        if (!resend) {\n            return {\n                success: false,\n                error: 'Email service not configured (missing RESEND_API_KEY)'\n            };\n        }\n        const inviteUrl = `${process.env.NEXT_PUBLIC_APP_URL}/team_invite/${params.inviteToken}`;\n        const expiresInDays = Math.ceil((params.expiresAt.getTime() - Date.now()) / (1000 * 60 * 60 * 24));\n        const { TeamInvitationReminderEmail } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@react-email\"), __webpack_require__.e(\"_rsc_src_templates_email_team_invitation_tsx\")]).then(__webpack_require__.bind(__webpack_require__, /*! @/templates/email/team_invitation */ \"(rsc)/./src/templates/email/team_invitation.tsx\"));\n        const { data, error } = await resend.emails.send({\n            from: EMAIL_CONFIG.from,\n            to: params.to,\n            replyTo: EMAIL_CONFIG.replyTo,\n            subject: `Reminder: Join ${params.teamName} on Massimino`,\n            react: TeamInvitationReminderEmail({\n                teamName: params.teamName,\n                trainerName: params.trainerName,\n                inviteUrl,\n                expiresInDays\n            })\n        });\n        if (error) {\n            console.error('[EmailService] Failed to send invitation reminder:', error);\n            return {\n                success: false,\n                error: error.message || 'Failed to send email'\n            };\n        }\n        return {\n            success: true,\n            messageId: data?.id\n        };\n    } catch (error) {\n        console.error('[EmailService] Error sending invitation reminder email:', error);\n        return {\n            success: false,\n            error: error.message || 'Unknown error'\n        };\n    }\n}\n/**\n * Validate email address format\n */ function isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\n/**\n * Check if Resend is properly configured\n */ function isEmailServiceConfigured() {\n    return Boolean(process.env.RESEND_API_KEY);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/email/email_service.ts\n");

/***/ })

};
;