/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/profile/route";
exports.ids = ["app/api/profile/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fprofile%2Froute&page=%2Fapi%2Fprofile%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprofile%2Froute.ts&appDir=%2FUsers%2Fvictorsole%2FDocuments%2FGitHub%2Fmassimino%2Fmassimino%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fvictorsole%2FDocuments%2FGitHub%2Fmassimino%2Fmassimino&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":
/*!**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fprofile%2Froute&page=%2Fapi%2Fprofile%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprofile%2Froute.ts&appDir=%2FUsers%2Fvictorsole%2FDocuments%2FGitHub%2Fmassimino%2Fmassimino%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fvictorsole%2FDocuments%2FGitHub%2Fmassimino%2Fmassimino&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_victorsole_Documents_GitHub_massimino_massimino_src_app_api_profile_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/profile/route.ts */ \"(rsc)/./src/app/api/profile/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/profile/route\",\n        pathname: \"/api/profile\",\n        filename: \"route\",\n        bundlePath: \"app/api/profile/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"/Users/victorsole/Documents/GitHub/massimino/massimino/src/app/api/profile/route.ts\",\n    nextConfigOutput,\n    userland: _Users_victorsole_Documents_GitHub_massimino_massimino_src_app_api_profile_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/profile/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZwcm9maWxlJTJGcm91dGUmcGFnZT0lMkZhcGklMkZwcm9maWxlJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGcHJvZmlsZSUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnZpY3RvcnNvbGUlMkZEb2N1bWVudHMlMkZHaXRIdWIlMkZtYXNzaW1pbm8lMkZtYXNzaW1pbm8lMkZzcmMlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGdmljdG9yc29sZSUyRkRvY3VtZW50cyUyRkdpdEh1YiUyRm1hc3NpbWlubyUyRm1hc3NpbWlubyZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCZpc0dsb2JhbE5vdEZvdW5kRW5hYmxlZD0hIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ3FCO0FBQ2Q7QUFDUztBQUNPO0FBQ0s7QUFDbUM7QUFDakQ7QUFDTztBQUNmO0FBQ3NDO0FBQ3pCO0FBQ007QUFDQztBQUNoQjtBQUM4QztBQUNoSDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxhQUFhLE9BQW9DLElBQUksQ0FBRTtBQUN2RCx3QkFBd0IsTUFBdUM7QUFDL0Q7QUFDQTtB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QjtBQUNsRTtBQUNBLGtCQUFrQiw2RUFBWTtBQUM5QjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDViw2RUFBNkUsZ0ZBQWM7QUFDM0YsaUNBQWlDLFFBQVEsRUFBRSxRQUFRO0FBQ25ELDBCQUEwQix1RUFBUTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLE1BQU07QUFDTjtBQUNBLDRDQUE0Qyw2RkFBZTtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQywyRkFBbUI7QUFDckQ7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsNkVBQVk7QUFDMUI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0IHsgZ2V0UmVxdWVzdE1ldGEgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yZXF1ZXN0LW1ldGFcIjtcbmltcG9ydCB7IGdldFRyYWNlciwgU3BhbktpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvdHJhY2UvdHJhY2VyXCI7XG5pbXBvcnQgeyBub3JtYWxpemVBcHBQYXRoIH0gZnJvbSBcIm5leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9hcHAtcGF0aHNcIjtcbmltcG9ydCB7IE5vZGVOZXh0UmVxdWVzdCwgTm9kZU5leHRSZXNwb25zZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Jhc2UtaHR0cC9ub2RlXCI7XG5pbXBvcnQgeyBOZXh0UmVxdWVzdEFkYXB0ZXIsIHNpZ25hbEZyb21Ob2RlUmVzcG9uc2UgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci93ZWIvc3BlYy1leHRlbnNpb24vYWRhcHRlcnMvbmV4dC1yZXF1ZXN0XCI7XG5pbXBvcnQgeyBCYXNlU2VydmVyU3BhbiB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi90cmFjZS9jb25zdGFudHNcIjtcbmltcG9ydCB7IGdldFJldmFsaWRhdGVSZWFzb24gfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9pbnN0cnVtZW50YXRpb24vdXRpbHNcIjtcbmltcG9ydCB7IHNlbmRSZXNwb25zZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3NlbmQtcmVzcG9uc2VcIjtcbmltcG9ydCB7IGZyb21Ob2RlT3V0Z29pbmdIdHRwSGVhZGVycywgdG9Ob2RlT3V0Z29pbmdIdHRwSGVhZGVycyB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3dlYi91dGlsc1wiO1xuaW1wb3J0IHsgZ2V0Q2FjaGVDb250cm9sSGVhZGVyIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL2NhY2hlLWNvbnRyb2xcIjtcbmltcG9ydCB7IElORklOSVRFX0NBQ0hFLCBORVhUX0NBQ0hFX1RBR1NfSEVBREVSIH0gZnJvbSBcIm5leHQvZGlzdC9saWIvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBOb0ZhbGxiYWNrRXJyb3IgfSBmcm9tIFwibmV4dC9kaXN0L3NoYXJlZC9saWIvbm8tZmFsbGJhY2stZXJyb3IuZXh0ZXJuYWxcIjtcbmltcG9ydCB7IENhY2hlZFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3Jlc3BvbnNlLWNhY2hlXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL3ZpY3RvcnNvbGUvRG9jdW1lbnRzL0dpdEh1Yi9tYXNzaW1pbm8vbWFzc2ltaW5vL3NyYy9hcHAvYXBpL3Byb2ZpbGUvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3Byb2ZpbGUvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9wcm9maWxlXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9wcm9maWxlL3JvdXRlXCJcbiAgICB9LFxuICAgIGRpc3REaXI6IHByb2Nlc3MuZW52Ll9fTkVYVF9SRUxBVElWRV9ESVNUX0RJUiB8fCAnJyxcbiAgICByZWxhdGl2ZVByb2plY3REaXI6IHByb2Nlc3MuZW52Ll9fTkVYVF9SRUxBVElWRV9QUk9KRUNUX0RJUiB8fCAnJyxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy92aWN0b3Jzb2xlL0RvY3VtZW50cy9HaXRIdWIvbWFzc2ltaW5vL21hc3NpbWluby9zcmMvYXBwL2FwaS9wcm9maWxlL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgd29ya0FzeW5jU3RvcmFnZSxcbiAgICAgICAgd29ya1VuaXRBc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIHBhdGNoRmV0Y2gsICB9O1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxLCByZXMsIGN0eCkge1xuICAgIHZhciBfbmV4dENvbmZpZ19leHBlcmltZW50YWw7XG4gICAgbGV0IHNyY1BhZ2UgPSBcIi9hcGkvcHJvZmlsZS9yb3V0ZVwiO1xuICAgIC8vIHR1cmJvcGFjayBkb2Vzbid0IG5vcm1hbGl6ZSBgL2luZGV4YCBpbiB0aGUgcGFnZSBuYW1lXG4gICAgLy8gc28gd2UgbmVlZCB0byB0byBwcm9jZXNzIGR5bmFtaWMgcm91dGVzIHByb3Blcmx5XG4gICAgLy8gVE9ETzogZml4IHR1cmJvcGFjayBwcm92aWRpbmcgZGlmZmVyaW5nIHZhbHVlIGZyb20gd2VicGFja1xuICAgIGlmIChwcm9jZXNzLmVudi5UVVJCT1BBQ0spIHtcbiAgICAgICAgc3JjUGFnZSA9IHNyY1BhZ2UucmVwbGFjZSgvXFwvaW5kZXgkLywgJycpIHx8ICcvJztcbiAgICB9IGVsc2UgaWYgKHNyY1BhZ2UgPT09ICcvaW5kZXgnKSB7XG4gICAgICAgIC8vIHdlIGFsd2F5cyBub3JtYWxpemUgL2luZGV4IHNwZWNpZmljYWxseVxuICAgICAgICBzcmNQYWdlID0gJy8nO1xuICAgIH1cbiAgICBjb25zdCBtdWx0aVpvbmVEcmFmdE1vZGUgPSBwcm9jZXNzLmVudi5fX05FWFRfTVVMVElfWk9ORV9EUkFGVF9NT0RFO1xuICAgIGNvbnN0IHByZXBhcmVSZXN1bHQgPSBhd2FpdCByb3V0ZU1vZHVsZS5wcmVwYXJlKHJlcSwgcmVzLCB7XG4gICAgICAgIHNyY1BhZ2UsXG4gICAgICAgIG11bHRpWm9uZURyYWZ0TW9kZVxuICAgIH0pO1xuICAgIGlmICghcHJlcGFyZVJlc3VsdCkge1xuICAgICAgICByZXMuc3RhdHVzQ29kZSA9IDQwMDtcbiAgICAgICAgcmVzLmVuZCgnQmFkIFJlcXVlc3QnKTtcbiAgICAgICAgY3R4LndhaXRVbnRpbCA9PSBudWxsID8gdm9pZCAwIDogY3R4LndhaXRVbnRpbC5jYWxsKGN0eCwgUHJvbWlzZS5yZXNvbHZlKCkpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgeyBidWlsZElkLCBwYXJhbXMsIG5leHRDb25maWcsIGlzRHJhZnRNb2RlLCBwcmVyZW5kZXJNYW5pZmVzdCwgcm91dGVyU2VydmVyQ29udGV4dCwgaXNPbkRlbWFuZFJldmFsaWRhdGUsIHJldmFsaWRhdGVPbmx5R2VuZXJhdGVkLCByZXNvbHZlZFBhdGhuYW1lIH0gPSBwcmVwYXJlUmVzdWx0O1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRTcmNQYWdlID0gbm9ybWFsaXplQXBwUGF0aChzcmNQYWdlKTtcbiAgICBsZXQgaXNJc3IgPSBCb29sZWFuKHByZXJlbmRlck1hbmlmZXN0LmR5bmFtaWNSb3V0ZXNbbm9ybWFsaXplZFNyY1BhZ2VdIHx8IHByZXJlbmRlck1hbmlmZXN0LnJvdXRlc1tyZXNvbHZlZFBhdGhuYW1lXSk7XG4gICAgaWYgKGlzSXNyICYmICFpc0RyYWZ0TW9kZSkge1xuICAgICAgICBjb25zdCBpc1ByZXJlbmRlcmVkID0gQm9vbGVhbihwcmVyZW5kZXJNYW5pZmVzdC5yb3V0ZXNbcmVzb2x2ZWRQYXRobmFtZV0pO1xuICAgICAgICBjb25zdCBwcmVyZW5kZXJJbmZvID0gcHJlcmVuZGVyTWFuaWZlc3QuZHluYW1pY1JvdXRlc1tub3JtYWxpemVkU3JjUGFnZV07XG4gICAgICAgIGlmIChwcmVyZW5kZXJJbmZvKSB7XG4gICAgICAgICAgICBpZiAocHJlcmVuZGVySW5mby5mYWxsYmFjayA9PT0gZmFsc2UgJiYgIWlzUHJlcmVuZGVyZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTm9GYWxsYmFja0Vycm9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IGNhY2hlS2V5ID0gbnVsbDtcbiAgICBpZiAoaXNJc3IgJiYgIXJvdXRlTW9kdWxlLmlzRGV2ICYmICFpc0RyYWZ0TW9kZSkge1xuICAgICAgICBjYWNoZUtleSA9IHJlc29sdmVkUGF0aG5hbWU7XG4gICAgICAgIC8vIGVuc3VyZSAvaW5kZXggYW5kIC8gaXMgbm9ybWFsaXplZCB0byBvbmUga2V5XG4gICAgICAgIGNhY2hlS2V5ID0gY2FjaGVLZXkgPT09ICcvaW5kZXgnID8gJy8nIDogY2FjaGVLZXk7XG4gICAgfVxuICAgIGNvbnN0IHN1cHBvcnRzRHluYW1pY1Jlc3BvbnNlID0gLy8gSWYgd2UncmUgaW4gZGV2ZWxvcG1lbnQsIHdlIGFsd2F5cyBzdXBwb3J0IGR5bmFtaWMgSFRNTFxuICAgIHJvdXRlTW9kdWxlLmlzRGV2ID09PSB0cnVlIHx8IC8vIElmIHRoaXMgaXMgbm90IFNTRyBvciBkb2VzIG5vdCBoYXZlIHN0YXRpYyBwYXRocywgdGhlbiBpdCBzdXBwb3J0c1xuICAgIC8vIGR5bmFtaWMgSFRNTC5cbiAgICAhaXNJc3I7XG4gICAgLy8gVGhpcyBpcyBhIHJldmFsaWRhdGlvbiByZXF1ZXN0IGlmIHRoZSByZXF1ZXN0IGlzIGZvciBhIHN0YXRpY1xuICAgIC8vIHBhZ2UgYW5kIGl0IGlzIG5vdCBiZWluZyByZXN1bWVkIGZyb20gYSBwb3N0cG9uZWQgcmVuZGVyIGFuZFxuICAgIC8vIGl0IGlzIG5vdCBhIGR5bmFtaWMgUlNDIHJlcXVlc3QgdGhlbiBpdCBpcyBhIHJldmFsaWRhdGlvblxuICAgIC8vIHJlcXVlc3QuXG4gICAgY29uc3QgaXNSZXZhbGlkYXRlID0gaXNJc3IgJiYgIXN1cHBvcnRzRHluYW1pY1Jlc3BvbnNlO1xuICAgIGNvbnN0IG1ldGhvZCA9IHJlcS5tZXRob2QgfHwgJ0dFVCc7XG4gICAgY29uc3QgdHJhY2VyID0gZ2V0VHJhY2VyKCk7XG4gICAgY29uc3QgYWN0aXZlU3BhbiA9IHRyYWNlci5nZXRBY3RpdmVTY29wZVNwYW4oKTtcbiAgICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgICBwYXJhbXMsXG4gICAgICAgIHByZXJlbmRlck1hbmlmZXN0LFxuICAgICAgICByZW5kZXJPcHRzOiB7XG4gICAgICAgICAgICBleHBlcmltZW50YWw6IHtcbiAgICAgICAgICAgICAgICBjYWNoZUNvbXBvbmVudHM6IEJvb2xlYW4obmV4dENvbmZpZy5leHBlcmltZW50YWwuY2FjaGVDb21wb25lbnRzKSxcbiAgICAgICAgICAgICAgICBhdXRoSW50ZXJydXB0czogQm9vbGVhbihuZXh0Q29uZmlnLmV4cGVyaW1lbnRhbC5hdXRoSW50ZXJydXB0cylcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdXBwb3J0c0R5bmFtaWNSZXNwb25zZSxcbiAgICAgICAgICAgIGluY3JlbWVudGFsQ2FjaGU6IGdldFJlcXVlc3RNZXRhKHJlcSwgJ2luY3JlbWVudGFsQ2FjaGUnKSxcbiAgICAgICAgICAgIGNhY2hlTGlmZVByb2ZpbGVzOiAoX25leHRDb25maWdfZXhwZXJpbWVudGFsID0gbmV4dENvbmZpZy5leHBlcmltZW50YWwpID09IG51bGwgPyB2b2lkIDAgOiBfbmV4dENvbmZpZ19leHBlcmltZW50YWwuY2FjaGVMaWZlLFxuICAgICAgICAgICAgaXNSZXZhbGlkYXRlLFxuICAgICAgICAgICAgd2FpdFVudGlsOiBjdHgud2FpdFVudGlsLFxuICAgICAgICAgICAgb25DbG9zZTogKGNiKT0+e1xuICAgICAgICAgICAgICAgIHJlcy5vbignY2xvc2UnLCBjYik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25BZnRlclRhc2tFcnJvcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgb25JbnN0cnVtZW50YXRpb25SZXF1ZXN0RXJyb3I6IChlcnJvciwgX3JlcXVlc3QsIGVycm9yQ29udGV4dCk9PnJvdXRlTW9kdWxlLm9uUmVxdWVzdEVycm9yKHJlcSwgZXJyb3IsIGVycm9yQ29udGV4dCwgcm91dGVyU2VydmVyQ29udGV4dClcbiAgICAgICAgfSxcbiAgICAgICAgc2hhcmVkQ29udGV4dDoge1xuICAgICAgICAgICAgYnVpbGRJZFxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBub2RlTmV4dFJlcSA9IG5ldyBOb2RlTmV4dFJlcXVlc3QocmVxKTtcbiAgICBjb25zdCBub2RlTmV4dFJlcyA9IG5ldyBOb2RlTmV4dFJlc3BvbnNlKHJlcyk7XG4gICAgY29uc3QgbmV4dFJlcSA9IE5leHRSZXF1ZXN0QWRhcHRlci5mcm9tTm9kZU5leHRSZXF1ZXN0KG5vZGVOZXh0UmVxLCBzaWduYWxGcm9tTm9kZVJlc3BvbnNlKHJlcykpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGludm9rZVJvdXRlTW9kdWxlID0gYXN5bmMgKHNwYW4pPT57XG4gICAgICAgICAgICByZXR1cm4gcm91dGVNb2R1bGUuaGFuZGxlKG5leHRSZXEsIGNvbnRleHQpLmZpbmFsbHkoKCk9PntcbiAgICAgICAgICAgICAgICBpZiAoIXNwYW4pIHJldHVybjtcbiAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgICAgICAgICAgICAgICAgICAnaHR0cC5zdGF0dXNfY29kZSc6IHJlcy5zdGF0dXNDb2RlLFxuICAgICAgICAgICAgICAgICAgICAnbmV4dC5yc2MnOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJvb3RTcGFuQXR0cmlidXRlcyA9IHRyYWNlci5nZXRSb290U3BhbkF0dHJpYnV0ZXMoKTtcbiAgICAgICAgICAgICAgICAvLyBXZSB3ZXJlIHVuYWJsZSB0byBnZXQgYXR0cmlidXRlcywgcHJvYmFibHkgT1RFTCBpcyBub3QgZW5hYmxlZFxuICAgICAgICAgICAgICAgIGlmICghcm9vdFNwYW5BdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJvb3RTcGFuQXR0cmlidXRlcy5nZXQoJ25leHQuc3Bhbl90eXBlJykgIT09IEJhc2VTZXJ2ZXJTcGFuLmhhbmRsZVJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBVbmV4cGVjdGVkIHJvb3Qgc3BhbiB0eXBlICcke3Jvb3RTcGFuQXR0cmlidXRlcy5nZXQoJ25leHQuc3Bhbl90eXBlJyl9Jy4gUGxlYXNlIHJlcG9ydCB0aGlzIE5leHQuanMgaXNzdWUgaHR0cHM6Ly9naXRodWIuY29tL3ZlcmNlbC9uZXh0LmpzYCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgcm91dGUgPSByb290U3BhbkF0dHJpYnV0ZXMuZ2V0KCduZXh0LnJvdXRlJyk7XG4gICAgICAgICAgICAgICAgaWYgKHJvdXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBgJHttZXRob2R9ICR7cm91dGV9YDtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICduZXh0LnJvdXRlJzogcm91dGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAnaHR0cC5yb3V0ZSc6IHJvdXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ25leHQuc3Bhbl9uYW1lJzogbmFtZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi51cGRhdGVOYW1lKG5hbWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4udXBkYXRlTmFtZShgJHttZXRob2R9ICR7cmVxLnVybH1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaGFuZGxlUmVzcG9uc2UgPSBhc3luYyAoY3VycmVudFNwYW4pPT57XG4gICAgICAgICAgICB2YXIgX2NhY2hlRW50cnlfdmFsdWU7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZUdlbmVyYXRvciA9IGFzeW5jICh7IHByZXZpb3VzQ2FjaGVFbnRyeSB9KT0+e1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZ2V0UmVxdWVzdE1ldGEocmVxLCAnbWluaW1hbE1vZGUnKSAmJiBpc09uRGVtYW5kUmV2YWxpZGF0ZSAmJiByZXZhbGlkYXRlT25seUdlbmVyYXRlZCAmJiAhcHJldmlvdXNDYWNoZUVudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMuc3RhdHVzQ29kZSA9IDQwNDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9uLWRlbWFuZCByZXZhbGlkYXRlIGFsd2F5cyBzZXRzIHRoaXMgaGVhZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMuc2V0SGVhZGVyKCd4LW5leHRqcy1jYWNoZScsICdSRVZBTElEQVRFRCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmVuZCgnVGhpcyBwYWdlIGNvdWxkIG5vdCBiZSBmb3VuZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBpbnZva2VSb3V0ZU1vZHVsZShjdXJyZW50U3Bhbik7XG4gICAgICAgICAgICAgICAgICAgIHJlcS5mZXRjaE1ldHJpY3MgPSBjb250ZXh0LnJlbmRlck9wdHMuZmV0Y2hNZXRyaWNzO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcGVuZGluZ1dhaXRVbnRpbCA9IGNvbnRleHQucmVuZGVyT3B0cy5wZW5kaW5nV2FpdFVudGlsO1xuICAgICAgICAgICAgICAgICAgICAvLyBBdHRlbXB0IHVzaW5nIHByb3ZpZGVkIHdhaXRVbnRpbCBpZiBhdmFpbGFibGVcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgaXQncyBub3Qgd2UgZmFsbGJhY2sgdG8gc2VuZFJlc3BvbnNlJ3MgaGFuZGxpbmdcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlbmRpbmdXYWl0VW50aWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdHgud2FpdFVudGlsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LndhaXRVbnRpbChwZW5kaW5nV2FpdFVudGlsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nV2FpdFVudGlsID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhY2hlVGFncyA9IGNvbnRleHQucmVuZGVyT3B0cy5jb2xsZWN0ZWRUYWdzO1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgcmVxdWVzdCBpcyBmb3IgYSBzdGF0aWMgcmVzcG9uc2UsIHdlIGNhbiBjYWNoZSBpdCBzbyBsb25nXG4gICAgICAgICAgICAgICAgICAgIC8vIGFzIGl0J3Mgbm90IGVkZ2UuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0lzcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmxvYiA9IGF3YWl0IHJlc3BvbnNlLmJsb2IoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvcHkgdGhlIGhlYWRlcnMgZnJvbSB0aGUgcmVzcG9uc2UuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXJzID0gdG9Ob2RlT3V0Z29pbmdIdHRwSGVhZGVycyhyZXNwb25zZS5oZWFkZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWNoZVRhZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzW05FWFRfQ0FDSEVfVEFHU19IRUFERVJdID0gY2FjaGVUYWdzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoZWFkZXJzWydjb250ZW50LXR5cGUnXSAmJiBibG9iLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzWydjb250ZW50LXR5cGUnXSA9IGJsb2IudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJldmFsaWRhdGUgPSB0eXBlb2YgY29udGV4dC5yZW5kZXJPcHRzLmNvbGxlY3RlZFJldmFsaWRhdGUgPT09ICd1bmRlZmluZWQnIHx8IGNvbnRleHQucmVuZGVyT3B0cy5jb2xsZWN0ZWRSZXZhbGlkYXRlID49IElORklOSVRFX0NBQ0hFID8gZmFsc2UgOiBjb250ZXh0LnJlbmRlck9wdHMuY29sbGVjdGVkUmV2YWxpZGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4cGlyZSA9IHR5cGVvZiBjb250ZXh0LnJlbmRlck9wdHMuY29sbGVjdGVkRXhwaXJlID09PSAndW5kZWZpbmVkJyB8fCBjb250ZXh0LnJlbmRlck9wdHMuY29sbGVjdGVkRXhwaXJlID49IElORklOSVRFX0NBQ0hFID8gdW5kZWZpbmVkIDogY29udGV4dC5yZW5kZXJPcHRzLmNvbGxlY3RlZEV4cGlyZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgY2FjaGUgZW50cnkgZm9yIHRoZSByZXNwb25zZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhY2hlRW50cnkgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2luZDogQ2FjaGVkUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IEJ1ZmZlci5mcm9tKGF3YWl0IGJsb2IuYXJyYXlCdWZmZXIoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlQ29udHJvbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXZhbGlkYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBpcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlRW50cnk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZW5kIHJlc3BvbnNlIHdpdGhvdXQgY2FjaGluZyBpZiBub3QgSVNSXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBzZW5kUmVzcG9uc2Uobm9kZU5leHRSZXEsIG5vZGVOZXh0UmVzLCByZXNwb25zZSwgY29udGV4dC5yZW5kZXJPcHRzLnBlbmRpbmdXYWl0VW50aWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyBhIGJhY2tncm91bmQgcmV2YWxpZGF0ZSB3ZSBuZWVkIHRvIHJlcG9ydFxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgcmVxdWVzdCBlcnJvciBoZXJlIGFzIGl0IHdvbid0IGJlIGJ1YmJsZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzQ2FjaGVFbnRyeSA9PSBudWxsID8gdm9pZCAwIDogcHJldmlvdXNDYWNoZUVudHJ5LmlzU3RhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHJvdXRlTW9kdWxlLm9uUmVxdWVzdEVycm9yKHJlcSwgZXJyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVyS2luZDogJ0FwcCBSb3V0ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlUGF0aDogc3JjUGFnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3V0ZVR5cGU6ICdyb3V0ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2YWxpZGF0ZVJlYXNvbjogZ2V0UmV2YWxpZGF0ZVJlYXNvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUmV2YWxpZGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNPbkRlbWFuZFJldmFsaWRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgcm91dGVyU2VydmVyQ29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBjYWNoZUVudHJ5ID0gYXdhaXQgcm91dGVNb2R1bGUuaGFuZGxlUmVzcG9uc2Uoe1xuICAgICAgICAgICAgICAgIHJlcSxcbiAgICAgICAgICAgICAgICBuZXh0Q29uZmlnLFxuICAgICAgICAgICAgICAgIGNhY2hlS2V5LFxuICAgICAgICAgICAgICAgIHJvdXRlS2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgICAgICAgICBpc0ZhbGxiYWNrOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwcmVyZW5kZXJNYW5pZmVzdCxcbiAgICAgICAgICAgICAgICBpc1JvdXRlUFBSRW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNPbkRlbWFuZFJldmFsaWRhdGUsXG4gICAgICAgICAgICAgICAgcmV2YWxpZGF0ZU9ubHlHZW5lcmF0ZWQsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VHZW5lcmF0b3IsXG4gICAgICAgICAgICAgICAgd2FpdFVudGlsOiBjdHgud2FpdFVudGlsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIHdlIGRvbid0IGNyZWF0ZSBhIGNhY2hlRW50cnkgZm9yIElTUlxuICAgICAgICAgICAgaWYgKCFpc0lzcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChjYWNoZUVudHJ5ID09IG51bGwgPyB2b2lkIDAgOiAoX2NhY2hlRW50cnlfdmFsdWUgPSBjYWNoZUVudHJ5LnZhbHVlKSA9PSBudWxsID8gdm9pZCAwIDogX2NhY2hlRW50cnlfdmFsdWUua2luZCkgIT09IENhY2hlZFJvdXRlS2luZC5BUFBfUk9VVEUpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2NhY2hlRW50cnlfdmFsdWUxO1xuICAgICAgICAgICAgICAgIHRocm93IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXcgRXJyb3IoYEludmFyaWFudDogYXBwLXJvdXRlIHJlY2VpdmVkIGludmFsaWQgY2FjaGUgZW50cnkgJHtjYWNoZUVudHJ5ID09IG51bGwgPyB2b2lkIDAgOiAoX2NhY2hlRW50cnlfdmFsdWUxID0gY2FjaGVFbnRyeS52YWx1ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jYWNoZUVudHJ5X3ZhbHVlMS5raW5kfWApLCBcIl9fTkVYVF9FUlJPUl9DT0RFXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiRTcwMVwiLFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWdldFJlcXVlc3RNZXRhKHJlcSwgJ21pbmltYWxNb2RlJykpIHtcbiAgICAgICAgICAgICAgICByZXMuc2V0SGVhZGVyKCd4LW5leHRqcy1jYWNoZScsIGlzT25EZW1hbmRSZXZhbGlkYXRlID8gJ1JFVkFMSURBVEVEJyA6IGNhY2hlRW50cnkuaXNNaXNzID8gJ01JU1MnIDogY2FjaGVFbnRyeS5pc1N0YWxlID8gJ1NUQUxFJyA6ICdISVQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERyYWZ0IG1vZGUgc2hvdWxkIG5ldmVyIGJlIGNhY2hlZFxuICAgICAgICAgICAgaWYgKGlzRHJhZnRNb2RlKSB7XG4gICAgICAgICAgICAgICAgcmVzLnNldEhlYWRlcignQ2FjaGUtQ29udHJvbCcsICdwcml2YXRlLCBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBoZWFkZXJzID0gZnJvbU5vZGVPdXRnb2luZ0h0dHBIZWFkZXJzKGNhY2hlRW50cnkudmFsdWUuaGVhZGVycyk7XG4gICAgICAgICAgICBpZiAoIShnZXRSZXF1ZXN0TWV0YShyZXEsICdtaW5pbWFsTW9kZScpICYmIGlzSXNyKSkge1xuICAgICAgICAgICAgICAgIGhlYWRlcnMuZGVsZXRlKE5FWFRfQ0FDSEVfVEFHU19IRUFERVIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgY2FjaGUgY29udHJvbCBpcyBhbHJlYWR5IHNldCBvbiB0aGUgcmVzcG9uc2Ugd2UgZG9uJ3RcbiAgICAgICAgICAgIC8vIG92ZXJyaWRlIGl0IHRvIGFsbG93IHVzZXJzIHRvIGN1c3RvbWl6ZSBpdCB2aWEgbmV4dC5jb25maWdcbiAgICAgICAgICAgIGlmIChjYWNoZUVudHJ5LmNhY2hlQ29udHJvbCAmJiAhcmVzLmdldEhlYWRlcignQ2FjaGUtQ29udHJvbCcpICYmICFoZWFkZXJzLmdldCgnQ2FjaGUtQ29udHJvbCcpKSB7XG4gICAgICAgICAgICAgICAgaGVhZGVycy5zZXQoJ0NhY2hlLUNvbnRyb2wnLCBnZXRDYWNoZUNvbnRyb2xIZWFkZXIoY2FjaGVFbnRyeS5jYWNoZUNvbnRyb2wpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHNlbmRSZXNwb25zZShub2RlTmV4dFJlcSwgbm9kZU5leHRSZXMsIG5ldyBSZXNwb25zZShjYWNoZUVudHJ5LnZhbHVlLmJvZHksIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIHN0YXR1czogY2FjaGVFbnRyeS52YWx1ZS5zdGF0dXMgfHwgMjAwXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gVE9ETzogYWN0aXZlU3BhbiBjb2RlIHBhdGggaXMgZm9yIHdoZW4gd3JhcHBlZCBieVxuICAgICAgICAvLyBuZXh0LXNlcnZlciBjYW4gYmUgcmVtb3ZlZCB3aGVuIHRoaXMgaXMgbm8gbG9uZ2VyIHVzZWRcbiAgICAgICAgaWYgKGFjdGl2ZVNwYW4pIHtcbiAgICAgICAgICAgIGF3YWl0IGhhbmRsZVJlc3BvbnNlKGFjdGl2ZVNwYW4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgdHJhY2VyLndpdGhQcm9wYWdhdGVkQ29udGV4dChyZXEuaGVhZGVycywgKCk9PnRyYWNlci50cmFjZShCYXNlU2VydmVyU3Bhbi5oYW5kbGVSZXF1ZXN0LCB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW5OYW1lOiBgJHttZXRob2R9ICR7cmVxLnVybH1gLFxuICAgICAgICAgICAgICAgICAgICBraW5kOiBTcGFuS2luZC5TRVJWRVIsXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdodHRwLm1ldGhvZCc6IG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdodHRwLnRhcmdldCc6IHJlcS51cmxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIGhhbmRsZVJlc3BvbnNlKSk7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gaWYgd2UgYXJlbid0IHdyYXBwZWQgYnkgYmFzZS1zZXJ2ZXIgaGFuZGxlIGhlcmVcbiAgICAgICAgaWYgKCFhY3RpdmVTcGFuICYmICEoZXJyIGluc3RhbmNlb2YgTm9GYWxsYmFja0Vycm9yKSkge1xuICAgICAgICAgICAgYXdhaXQgcm91dGVNb2R1bGUub25SZXF1ZXN0RXJyb3IocmVxLCBlcnIsIHtcbiAgICAgICAgICAgICAgICByb3V0ZXJLaW5kOiAnQXBwIFJvdXRlcicsXG4gICAgICAgICAgICAgICAgcm91dGVQYXRoOiBub3JtYWxpemVkU3JjUGFnZSxcbiAgICAgICAgICAgICAgICByb3V0ZVR5cGU6ICdyb3V0ZScsXG4gICAgICAgICAgICAgICAgcmV2YWxpZGF0ZVJlYXNvbjogZ2V0UmV2YWxpZGF0ZVJlYXNvbih7XG4gICAgICAgICAgICAgICAgICAgIGlzUmV2YWxpZGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgaXNPbkRlbWFuZFJldmFsaWRhdGVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmV0aHJvdyBzbyB0aGF0IHdlIGNhbiBoYW5kbGUgc2VydmluZyBlcnJvciBwYWdlXG4gICAgICAgIC8vIElmIHRoaXMgaXMgZHVyaW5nIHN0YXRpYyBnZW5lcmF0aW9uLCB0aHJvdyB0aGUgZXJyb3IgYWdhaW4uXG4gICAgICAgIGlmIChpc0lzcikgdGhyb3cgZXJyO1xuICAgICAgICAvLyBPdGhlcndpc2UsIHNlbmQgYSA1MDAgcmVzcG9uc2UuXG4gICAgICAgIGF3YWl0IHNlbmRSZXNwb25zZShub2RlTmV4dFJlcSwgbm9kZU5leHRSZXMsIG5ldyBSZXNwb25zZShudWxsLCB7XG4gICAgICAgICAgICBzdGF0dXM6IDUwMFxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fprofile%2Froute&page=%2Fapi%2Fprofile%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprofile%2Froute.ts&appDir=%2FUsers%2Fvictorsole%2FDocuments%2FGitHub%2Fmassimino%2Fmassimino%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fvictorsole%2FDocuments%2FGitHub%2Fmassimino%2Fmassimino&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/profile/route.ts":
/*!**************************************!*\
  !*** ./src/app/api/profile/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth */ \"(rsc)/./node_modules/next-auth/index.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _core_auth_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/core/auth/config */ \"(rsc)/./src/core/auth/config.ts\");\n/* harmony import */ var _core_database_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/core/database/client */ \"(rsc)/./src/core/database/client.ts\");\n// src/app/api/profile/route.ts\n/**\n * Complete Profile API Endpoint\n * Returns FULL user profile data (not just session fields)\n * This is the source of truth for profile pages\n */ \n\n\n\nasync function GET(_request) {\n    try {\n        const session = await (0,next_auth__WEBPACK_IMPORTED_MODULE_1__.getServerSession)(_core_auth_config__WEBPACK_IMPORTED_MODULE_2__.authOptions);\n        if (!session?.user?.id) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                message: 'Authentication required'\n            }, {\n                status: 401\n            });\n        }\n        // Fetch complete user profile from database\n        const user = await _core_database_client__WEBPACK_IMPORTED_MODULE_3__.prisma.users.findUnique({\n            where: {\n                id: session.user.id\n            },\n            select: {\n                // Basic Info\n                id: true,\n                email: true,\n                name: true,\n                surname: true,\n                nickname: true,\n                image: true,\n                role: true,\n                status: true,\n                // Social Media\n                instagramUrl: true,\n                tiktokUrl: true,\n                facebookUrl: true,\n                youtubeUrl: true,\n                linkedinUrl: true,\n                showSocialMedia: true,\n                // Fitness Preferences\n                fitnessGoals: true,\n                experienceLevel: true,\n                preferredWorkoutTypes: true,\n                availableWorkoutDays: true,\n                preferredWorkoutDuration: true,\n                // Location\n                city: true,\n                state: true,\n                country: true,\n                latitude: true,\n                longitude: true,\n                showLocation: true,\n                locationVisibility: true,\n                enableDiscovery: true,\n                // Privacy Settings\n                profileVisibility: true,\n                acceptDMs: true,\n                onlyTrainerDMs: true,\n                showRealName: true,\n                // Trainer Info\n                trainerVerified: true,\n                trainerBio: true,\n                trainerCredentials: true,\n                trainerRating: true,\n                // Reputation & Safety\n                reputationScore: true,\n                warningCount: true,\n                suspendedUntil: true,\n                // Timestamps\n                createdAt: true,\n                updatedAt: true,\n                lastLoginAt: true,\n                emailVerified: true\n            }\n        });\n        if (!user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                message: 'User not found'\n            }, {\n                status: 404\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: user\n        });\n    } catch (error) {\n        console.error('Profile API error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            message: 'Internal server error'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9wcm9maWxlL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLCtCQUErQjtBQUMvQjs7OztDQUlDLEdBRXVEO0FBQ1g7QUFDSTtBQUNEO0FBRXpDLGVBQWVJLElBQUlDLFFBQXFCO0lBQzdDLElBQUk7UUFDRixNQUFNQyxVQUFVLE1BQU1MLDJEQUFnQkEsQ0FBQ0MsMERBQVdBO1FBRWxELElBQUksQ0FBQ0ksU0FBU0MsTUFBTUMsSUFBSTtZQUN0QixPQUFPUixxREFBWUEsQ0FBQ1MsSUFBSSxDQUN0QjtnQkFBRUMsU0FBUztnQkFBT0MsU0FBUztZQUEwQixHQUNyRDtnQkFBRUMsUUFBUTtZQUFJO1FBRWxCO1FBRUEsNENBQTRDO1FBQzVDLE1BQU1MLE9BQU8sTUFBTUoseURBQU1BLENBQUNVLEtBQUssQ0FBQ0MsVUFBVSxDQUFDO1lBQ3pDQyxPQUFPO2dCQUFFUCxJQUFJRixRQUFRQyxJQUFJLENBQUNDLEVBQUU7WUFBQztZQUM3QlEsUUFBUTtnQkFDTixhQUFhO2dCQUNiUixJQUFJO2dCQUNKUyxPQUFPO2dCQUNQQyxNQUFNO2dCQUNOQyxTQUFTO2dCQUNUQyxVQUFVO2dCQUNWQyxPQUFPO2dCQUNQQyxNQUFNO2dCQUNOVixRQUFRO2dCQUVSLGVBQWU7Z0JBQ2ZXLGNBQWM7Z0JBQ2RDLFdBQVc7Z0JBQ1hDLGFBQWE7Z0JBQ2JDLFlBQVk7Z0JBQ1pDLGFBQWE7Z0JBQ2JDLGlCQUFpQjtnQkFFakIsc0JBQXNCO2dCQUN0QkMsY0FBYztnQkFDZEMsaUJBQWlCO2dCQUNqQkMsdUJBQXVCO2dCQUN2QkMsc0JBQXNCO2dCQUN0QkMsMEJBQTBCO2dCQUUxQixXQUFXO2dCQUNYQyxNQUFNO2dCQUNOQyxPQUFPO2dCQUNQQyxTQUFTO2dCQUNUQyxVQUFVO2dCQUNWQyxXQUFXO2dCQUNYQyxjQUFjO2dCQUNkQyxvQkFBb0I7Z0JBQ3BCQyxpQkFBaUI7Z0JBRWpCLG1CQUFtQjtnQkFDbkJDLG1CQUFtQjtnQkFDbkJDLFdBQVc7Z0JBQ1hDLGdCQUFnQjtnQkFDaEJDLGNBQWM7Z0JBRWQsZUFBZTtnQkFDZkMsaUJBQWlCO2dCQUNqQkMsWUFBWTtnQkFDWkMsb0JBQW9CO2dCQUNwQkMsZUFBZTtnQkFFZixzQkFBc0I7Z0JBQ3RCQyxpQkFBaUI7Z0JBQ2pCQyxjQUFjO2dCQUNkQyxnQkFBZ0I7Z0JBRWhCLGFBQWE7Z0JBQ2JDLFdBQVc7Z0JBQ1hDLFdBQVc7Z0JBQ1hDLGFBQWE7Z0JBQ2JDLGVBQWU7WUFDakI7UUFDRjtRQUVBLElBQUksQ0FBQ2pELE1BQU07WUFDVCxPQUFPUCxxREFBWUEsQ0FBQ1MsSUFBSSxDQUN0QjtnQkFBRUMsU0FBUztnQkFBT0MsU0FBUztZQUFpQixHQUM1QztnQkFBRUMsUUFBUTtZQUFJO1FBRWxCO1FBRUEsT0FBT1oscURBQVlBLENBQUNTLElBQUksQ0FBQztZQUN2QkMsU0FBUztZQUNUK0MsTUFBTWxEO1FBQ1I7SUFDRixFQUFFLE9BQU9tRCxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxzQkFBc0JBO1FBQ3BDLE9BQU8xRCxxREFBWUEsQ0FBQ1MsSUFBSSxDQUN0QjtZQUFFQyxTQUFTO1lBQU9DLFNBQVM7UUFBd0IsR0FDbkQ7WUFBRUMsUUFBUTtRQUFJO0lBRWxCO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3Jzb2xlL0RvY3VtZW50cy9HaXRIdWIvbWFzc2ltaW5vL21hc3NpbWluby9zcmMvYXBwL2FwaS9wcm9maWxlL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9hcHAvYXBpL3Byb2ZpbGUvcm91dGUudHNcbi8qKlxuICogQ29tcGxldGUgUHJvZmlsZSBBUEkgRW5kcG9pbnRcbiAqIFJldHVybnMgRlVMTCB1c2VyIHByb2ZpbGUgZGF0YSAobm90IGp1c3Qgc2Vzc2lvbiBmaWVsZHMpXG4gKiBUaGlzIGlzIHRoZSBzb3VyY2Ugb2YgdHJ1dGggZm9yIHByb2ZpbGUgcGFnZXNcbiAqL1xuXG5pbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IHsgZ2V0U2VydmVyU2Vzc2lvbiB9IGZyb20gJ25leHQtYXV0aCc7XG5pbXBvcnQgeyBhdXRoT3B0aW9ucyB9IGZyb20gJ0AvY29yZS9hdXRoL2NvbmZpZyc7XG5pbXBvcnQgeyBwcmlzbWEgfSBmcm9tICdAL2NvcmUvZGF0YWJhc2UvY2xpZW50JztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChfcmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBzZXNzaW9uID0gYXdhaXQgZ2V0U2VydmVyU2Vzc2lvbihhdXRoT3B0aW9ucyk7XG5cbiAgICBpZiAoIXNlc3Npb24/LnVzZXI/LmlkKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdBdXRoZW50aWNhdGlvbiByZXF1aXJlZCcgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMSB9XG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIEZldGNoIGNvbXBsZXRlIHVzZXIgcHJvZmlsZSBmcm9tIGRhdGFiYXNlXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IHByaXNtYS51c2Vycy5maW5kVW5pcXVlKHtcbiAgICAgIHdoZXJlOiB7IGlkOiBzZXNzaW9uLnVzZXIuaWQgfSxcbiAgICAgIHNlbGVjdDoge1xuICAgICAgICAvLyBCYXNpYyBJbmZvXG4gICAgICAgIGlkOiB0cnVlLFxuICAgICAgICBlbWFpbDogdHJ1ZSxcbiAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgc3VybmFtZTogdHJ1ZSxcbiAgICAgICAgbmlja25hbWU6IHRydWUsXG4gICAgICAgIGltYWdlOiB0cnVlLFxuICAgICAgICByb2xlOiB0cnVlLFxuICAgICAgICBzdGF0dXM6IHRydWUsXG5cbiAgICAgICAgLy8gU29jaWFsIE1lZGlhXG4gICAgICAgIGluc3RhZ3JhbVVybDogdHJ1ZSxcbiAgICAgICAgdGlrdG9rVXJsOiB0cnVlLFxuICAgICAgICBmYWNlYm9va1VybDogdHJ1ZSxcbiAgICAgICAgeW91dHViZVVybDogdHJ1ZSxcbiAgICAgICAgbGlua2VkaW5Vcmw6IHRydWUsXG4gICAgICAgIHNob3dTb2NpYWxNZWRpYTogdHJ1ZSxcblxuICAgICAgICAvLyBGaXRuZXNzIFByZWZlcmVuY2VzXG4gICAgICAgIGZpdG5lc3NHb2FsczogdHJ1ZSxcbiAgICAgICAgZXhwZXJpZW5jZUxldmVsOiB0cnVlLFxuICAgICAgICBwcmVmZXJyZWRXb3Jrb3V0VHlwZXM6IHRydWUsXG4gICAgICAgIGF2YWlsYWJsZVdvcmtvdXREYXlzOiB0cnVlLFxuICAgICAgICBwcmVmZXJyZWRXb3Jrb3V0RHVyYXRpb246IHRydWUsXG5cbiAgICAgICAgLy8gTG9jYXRpb25cbiAgICAgICAgY2l0eTogdHJ1ZSxcbiAgICAgICAgc3RhdGU6IHRydWUsXG4gICAgICAgIGNvdW50cnk6IHRydWUsXG4gICAgICAgIGxhdGl0dWRlOiB0cnVlLFxuICAgICAgICBsb25naXR1ZGU6IHRydWUsXG4gICAgICAgIHNob3dMb2NhdGlvbjogdHJ1ZSxcbiAgICAgICAgbG9jYXRpb25WaXNpYmlsaXR5OiB0cnVlLFxuICAgICAgICBlbmFibGVEaXNjb3Zlcnk6IHRydWUsXG5cbiAgICAgICAgLy8gUHJpdmFjeSBTZXR0aW5nc1xuICAgICAgICBwcm9maWxlVmlzaWJpbGl0eTogdHJ1ZSxcbiAgICAgICAgYWNjZXB0RE1zOiB0cnVlLFxuICAgICAgICBvbmx5VHJhaW5lckRNczogdHJ1ZSxcbiAgICAgICAgc2hvd1JlYWxOYW1lOiB0cnVlLFxuXG4gICAgICAgIC8vIFRyYWluZXIgSW5mb1xuICAgICAgICB0cmFpbmVyVmVyaWZpZWQ6IHRydWUsXG4gICAgICAgIHRyYWluZXJCaW86IHRydWUsXG4gICAgICAgIHRyYWluZXJDcmVkZW50aWFsczogdHJ1ZSxcbiAgICAgICAgdHJhaW5lclJhdGluZzogdHJ1ZSxcblxuICAgICAgICAvLyBSZXB1dGF0aW9uICYgU2FmZXR5XG4gICAgICAgIHJlcHV0YXRpb25TY29yZTogdHJ1ZSxcbiAgICAgICAgd2FybmluZ0NvdW50OiB0cnVlLFxuICAgICAgICBzdXNwZW5kZWRVbnRpbDogdHJ1ZSxcblxuICAgICAgICAvLyBUaW1lc3RhbXBzXG4gICAgICAgIGNyZWF0ZWRBdDogdHJ1ZSxcbiAgICAgICAgdXBkYXRlZEF0OiB0cnVlLFxuICAgICAgICBsYXN0TG9naW5BdDogdHJ1ZSxcbiAgICAgICAgZW1haWxWZXJpZmllZDogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogJ1VzZXIgbm90IGZvdW5kJyB9LFxuICAgICAgICB7IHN0YXR1czogNDA0IH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiB1c2VyLFxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1Byb2ZpbGUgQVBJIGVycm9yOicsIGVycm9yKTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKTtcbiAgfVxufSJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJnZXRTZXJ2ZXJTZXNzaW9uIiwiYXV0aE9wdGlvbnMiLCJwcmlzbWEiLCJHRVQiLCJfcmVxdWVzdCIsInNlc3Npb24iLCJ1c2VyIiwiaWQiLCJqc29uIiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJzdGF0dXMiLCJ1c2VycyIsImZpbmRVbmlxdWUiLCJ3aGVyZSIsInNlbGVjdCIsImVtYWlsIiwibmFtZSIsInN1cm5hbWUiLCJuaWNrbmFtZSIsImltYWdlIiwicm9sZSIsImluc3RhZ3JhbVVybCIsInRpa3Rva1VybCIsImZhY2Vib29rVXJsIiwieW91dHViZVVybCIsImxpbmtlZGluVXJsIiwic2hvd1NvY2lhbE1lZGlhIiwiZml0bmVzc0dvYWxzIiwiZXhwZXJpZW5jZUxldmVsIiwicHJlZmVycmVkV29ya291dFR5cGVzIiwiYXZhaWxhYmxlV29ya291dERheXMiLCJwcmVmZXJyZWRXb3Jrb3V0RHVyYXRpb24iLCJjaXR5Iiwic3RhdGUiLCJjb3VudHJ5IiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJzaG93TG9jYXRpb24iLCJsb2NhdGlvblZpc2liaWxpdHkiLCJlbmFibGVEaXNjb3ZlcnkiLCJwcm9maWxlVmlzaWJpbGl0eSIsImFjY2VwdERNcyIsIm9ubHlUcmFpbmVyRE1zIiwic2hvd1JlYWxOYW1lIiwidHJhaW5lclZlcmlmaWVkIiwidHJhaW5lckJpbyIsInRyYWluZXJDcmVkZW50aWFscyIsInRyYWluZXJSYXRpbmciLCJyZXB1dGF0aW9uU2NvcmUiLCJ3YXJuaW5nQ291bnQiLCJzdXNwZW5kZWRVbnRpbCIsImNyZWF0ZWRBdCIsInVwZGF0ZWRBdCIsImxhc3RMb2dpbkF0IiwiZW1haWxWZXJpZmllZCIsImRhdGEiLCJlcnJvciIsImNvbnNvbGUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/profile/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/core/auth/config.ts":
/*!*********************************!*\
  !*** ./src/core/auth/config.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authOptions: () => (/* binding */ authOptions),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var next_auth_providers_google__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/providers/google */ \"(rsc)/./node_modules/next-auth/providers/google.js\");\n/* harmony import */ var next_auth_providers_linkedin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/providers/linkedin */ \"(rsc)/./node_modules/next-auth/providers/linkedin.js\");\n/* harmony import */ var next_auth_providers_facebook__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next-auth/providers/facebook */ \"(rsc)/./node_modules/next-auth/providers/facebook.js\");\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next-auth/providers/credentials */ \"(rsc)/./node_modules/next-auth/providers/credentials.js\");\n/* harmony import */ var _core_database__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/core/database */ \"(rsc)/./src/core/database/index.ts\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/index.js\");\n/* harmony import */ var _prisma_adapter_custom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./prisma-adapter-custom */ \"(rsc)/./src/core/auth/prisma-adapter-custom.ts\");\n// src/lib/auth/config.ts\n/**\n * Authentication Configuration for Massimino\n * Safety-first approach with strict validation and role-based access\n */ // import { PrismaAdapter } from '@next-auth/prisma-adapter'; // Standard adapter doesn't work with lowercase table names\n\n\n\n\n\n\n\n// Define enums as const values since Prisma client may not be available\nconst UserRole = {\n    CLIENT: 'CLIENT',\n    TRAINER: 'TRAINER',\n    ADMIN: 'ADMIN'\n};\nconst UserStatus = {\n    ACTIVE: 'ACTIVE',\n    SUSPENDED: 'SUSPENDED',\n    BANNED: 'BANNED'\n};\n// Environment variable validation\n// Require NEXTAUTH_SECRET always; allow NEXTAUTH_URL to default in development\nconst devDefaultNextAuthUrl =  true ? 'http://localhost:3000' : 0;\nconst requiredEnvVars = {\n    NEXTAUTH_SECRET: process.env.NEXTAUTH_SECRET\n};\n// Ensure NEXTAUTH_URL is defined at runtime for libraries that read it\nif (false) {}\n// Google OAuth configuration (optional)\nconst googleConfig = {\n    GOOGLE_CLIENT_ID: process.env.GOOGLE_CLIENT_ID,\n    GOOGLE_CLIENT_SECRET: process.env.GOOGLE_CLIENT_SECRET\n};\n// LinkedIn OAuth configuration (optional)\nconst linkedinConfig = {\n    LINKEDIN_CLIENT_ID: process.env.LINKEDIN_CLIENT_ID,\n    LINKEDIN_CLIENT_SECRET: process.env.LINKEDIN_CLIENT_SECRET\n};\n// Facebook OAuth configuration (optional)\nconst facebookConfig = {\n    FACEBOOK_CLIENT_ID: process.env.FACEBOOK_CLIENT_ID,\n    FACEBOOK_CLIENT_SECRET: process.env.FACEBOOK_CLIENT_SECRET\n};\n// Validate required environment variables\nfor (const [key, value] of Object.entries(requiredEnvVars)){\n    if (!value) {\n        throw new Error(`Missing required environment variable: ${key}`);\n    }\n}\n// Admin bootstrap via environment variable list (comma-separated emails)\nconst ADMIN_EMAILS = (process.env.ADMIN_EMAILS || '').split(',').map((e)=>e.trim().toLowerCase()).filter(Boolean);\n// Build providers array dynamically\nconst providers = [\n    // Email/Password authentication\n    (0,next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({\n        name: 'credentials',\n        credentials: {\n            email: {\n                label: 'Email',\n                type: 'email'\n            },\n            password: {\n                label: 'Password',\n                type: 'password'\n            }\n        },\n        async authorize (credentials) {\n            if (!credentials?.email || !credentials?.password) {\n                return null;\n            }\n            try {\n                // Find user by email\n                const user = await _core_database__WEBPACK_IMPORTED_MODULE_4__.prisma.users.findUnique({\n                    where: {\n                        email: credentials.email\n                    },\n                    select: {\n                        id: true,\n                        email: true,\n                        name: true,\n                        password: true,\n                        role: true,\n                        status: true,\n                        reputationScore: true,\n                        warningCount: true,\n                        trainerVerified: true,\n                        suspendedUntil: true\n                    }\n                });\n                if (!user || !user.password) {\n                    return null;\n                }\n                // Check password\n                const isValid = await bcryptjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"].compare(credentials.password, user.password);\n                if (!isValid) {\n                    return null;\n                }\n                // Check if user is active\n                if (user.status !== UserStatus.ACTIVE) {\n                    return null;\n                }\n                // Update last login\n                await _core_database__WEBPACK_IMPORTED_MODULE_4__.prisma.users.update({\n                    where: {\n                        id: user.id\n                    },\n                    data: {\n                        lastLoginAt: new Date()\n                    }\n                });\n                return {\n                    id: user.id,\n                    email: user.email,\n                    name: user.name || '',\n                    image: null,\n                    role: user.role,\n                    status: user.status,\n                    reputationScore: user.reputationScore,\n                    warningCount: user.warningCount,\n                    trainerVerified: user.trainerVerified,\n                    suspendedUntil: user.suspendedUntil\n                };\n            } catch (error) {\n                console.error('Auth error:', error);\n                return null;\n            }\n        }\n    })\n];\n// Add Google provider if configured\nif (googleConfig.GOOGLE_CLIENT_ID && googleConfig.GOOGLE_CLIENT_SECRET) {\n    providers.push((0,next_auth_providers_google__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        clientId: googleConfig.GOOGLE_CLIENT_ID,\n        clientSecret: googleConfig.GOOGLE_CLIENT_SECRET,\n        authorization: {\n            params: {\n                scope: 'openid email profile',\n                prompt: 'consent',\n                access_type: 'offline',\n                response_type: 'code'\n            }\n        },\n        profile (profile) {\n            return {\n                id: profile.sub,\n                name: profile.name,\n                email: profile.email,\n                image: profile.picture,\n                role: UserRole.CLIENT,\n                status: UserStatus.ACTIVE,\n                emailVerified: profile.email_verified ? new Date() : null,\n                googleId: profile.sub,\n                reputationScore: 0,\n                warningCount: 0,\n                trainerVerified: false\n            };\n        }\n    }));\n} else if (true) {\n    console.warn('Google OAuth not configured (GOOGLE_CLIENT_ID/SECRET missing).');\n}\n// Add LinkedIn provider if configured\nif (linkedinConfig.LINKEDIN_CLIENT_ID && linkedinConfig.LINKEDIN_CLIENT_SECRET) {\n    providers.push((0,next_auth_providers_linkedin__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n        clientId: linkedinConfig.LINKEDIN_CLIENT_ID,\n        clientSecret: linkedinConfig.LINKEDIN_CLIENT_SECRET,\n        authorization: {\n            params: {\n                scope: 'r_liteprofile r_emailaddress',\n                state: 'random_state_string'\n            }\n        },\n        profile (profile) {\n            return {\n                id: profile.id,\n                name: `${profile.localizedFirstName} ${profile.localizedLastName}`,\n                email: profile.emailAddress,\n                image: profile.profilePicture?.['displayImage~']?.elements?.[0]?.identifiers?.[0]?.identifier || null,\n                role: UserRole.CLIENT,\n                status: UserStatus.ACTIVE,\n                emailVerified: new Date(),\n                linkedinId: profile.id,\n                reputationScore: 0,\n                warningCount: 0,\n                trainerVerified: false\n            };\n        }\n    }));\n} else if (true) {\n    console.warn('LinkedIn OAuth not configured (LINKEDIN_CLIENT_ID/SECRET missing).');\n}\n// Add Facebook provider if configured\nif (facebookConfig.FACEBOOK_CLIENT_ID && facebookConfig.FACEBOOK_CLIENT_SECRET) {\n    providers.push((0,next_auth_providers_facebook__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n        clientId: facebookConfig.FACEBOOK_CLIENT_ID,\n        clientSecret: facebookConfig.FACEBOOK_CLIENT_SECRET,\n        authorization: {\n            params: {\n                scope: 'email,public_profile'\n            }\n        }\n    }));\n} else if (true) {\n    console.warn('Facebook OAuth not configured (FACEBOOK_CLIENT_ID/SECRET missing).');\n}\nconst authOptions = {\n    // Use custom Prisma adapter for lowercase model names (accounts, sessions, verificationtokens)\n    adapter: (0,_prisma_adapter_custom__WEBPACK_IMPORTED_MODULE_6__.CustomPrismaAdapter)(_core_database__WEBPACK_IMPORTED_MODULE_4__.prisma),\n    // Authentication providers\n    providers,\n    // Database session strategy for better security\n    session: {\n        strategy: 'database',\n        // Session expires after 30 days of inactivity\n        maxAge: 30 * 24 * 60 * 60,\n        // Update session activity every 24 hours\n        updateAge: 24 * 60 * 60\n    },\n    // JWT configuration (for API routes)\n    jwt: {\n        // JWT expires after 1 hour for better security\n        maxAge: 60 * 60\n    },\n    // Custom pages for better UX and branding\n    pages: {\n        signIn: '/login',\n        error: '/login',\n        newUser: '/dashboard'\n    },\n    // Security and safety callbacks\n    callbacks: {\n        // Control who can sign in\n        async signIn ({ user, account }) {\n            try {\n                // Safety check: ensure user has a valid email\n                if (!user.email) {\n                    console.warn('Sign-in attempt without email:', {\n                        user,\n                        account\n                    });\n                    return false;\n                }\n                // Check if user exists\n                const existingUser = await _core_database__WEBPACK_IMPORTED_MODULE_4__.prisma.users.findUnique({\n                    where: {\n                        email: user.email\n                    },\n                    select: {\n                        status: true,\n                        suspendedUntil: true\n                    }\n                });\n                if (existingUser) {\n                    // Block banned users\n                    if (existingUser.status === UserStatus.BANNED) {\n                        console.warn('Banned user attempted sign-in:', user.email);\n                        return false;\n                    }\n                    // Check if suspension has expired\n                    if (existingUser.status === UserStatus.SUSPENDED && existingUser.suspendedUntil && existingUser.suspendedUntil > new Date()) {\n                        console.warn('Suspended user attempted sign-in:', user.email);\n                        return false;\n                    }\n                    // Auto-activate users whose suspension has expired\n                    if (existingUser.status === UserStatus.SUSPENDED && existingUser.suspendedUntil && existingUser.suspendedUntil <= new Date()) {\n                        await _core_database__WEBPACK_IMPORTED_MODULE_4__.prisma.users.update({\n                            where: {\n                                email: user.email\n                            },\n                            data: {\n                                status: UserStatus.ACTIVE,\n                                suspendedUntil: null\n                            }\n                        });\n                    }\n                    // Update last login time for security tracking\n                    await _core_database__WEBPACK_IMPORTED_MODULE_4__.prisma.users.update({\n                        where: {\n                            email: user.email\n                        },\n                        data: {\n                            lastLoginAt: new Date()\n                        }\n                    });\n                    // Promote to ADMIN if email is defined in ADMIN_EMAILS list\n                    if (user.email && ADMIN_EMAILS.includes(user.email.toLowerCase())) {\n                        try {\n                            await _core_database__WEBPACK_IMPORTED_MODULE_4__.prisma.users.update({\n                                where: {\n                                    email: user.email\n                                },\n                                data: {\n                                    role: UserRole.ADMIN,\n                                    trainerVerified: true\n                                }\n                            });\n                        } catch (e) {\n                            console.warn('Admin promotion skipped:', e);\n                        }\n                    }\n                } else {\n                    // Allow OAuth providers to create new users automatically\n                    if (account?.provider && account.provider !== 'credentials') {\n                        console.log('Allowing automatic user creation for OAuth provider:', account.provider);\n                        return true;\n                    } else {\n                        // Block credentials login for non-existing users\n                        console.warn('Credentials login attempted for non-existing user:', user.email);\n                        return false;\n                    }\n                }\n                return true;\n            } catch (error) {\n                console.error('Sign-in callback error:', error);\n                return false;\n            }\n        },\n        // Customize session data\n        async session ({ session, user }) {\n            if (session.user && user) {\n                // Add user role and safety info to session\n                const dbUser = await _core_database__WEBPACK_IMPORTED_MODULE_4__.prisma.users.findUnique({\n                    where: {\n                        id: user.id\n                    },\n                    select: {\n                        id: true,\n                        role: true,\n                        status: true,\n                        reputationScore: true,\n                        warningCount: true,\n                        trainerVerified: true,\n                        suspendedUntil: true\n                    }\n                });\n                if (dbUser) {\n                    session.user.id = user.id;\n                    session.user.role = dbUser.role;\n                    session.user.status = dbUser.status;\n                    session.user.reputationScore = dbUser.reputationScore;\n                    session.user.warningCount = dbUser.warningCount;\n                    session.user.trainerVerified = dbUser.trainerVerified;\n                    session.user.suspendedUntil = dbUser.suspendedUntil;\n                    // Safety flag for UI\n                    session.user.isSafe = dbUser.status === UserStatus.ACTIVE && dbUser.reputationScore >= 50;\n                }\n            }\n            return session;\n        },\n        // Handle JWT tokens for API routes\n        async jwt ({ token, user }) {\n            // Store user ID in token on first sign in\n            if (user) {\n                token.userId = user.id;\n                token.role = user.role || UserRole.CLIENT;\n            }\n            return token;\n        },\n        // Handle redirects after authentication\n        async redirect ({ url, baseUrl }) {\n            // Always redirect to app domain for security\n            if (url.startsWith('/')) {\n                return `${baseUrl}${url}`;\n            }\n            // Only allow redirects to same domain\n            if (new URL(url).origin === baseUrl) {\n                return url;\n            }\n            return baseUrl;\n        }\n    },\n    // Event handlers for logging and safety\n    events: {\n        async signIn ({ user, account: _account, isNewUser }) {\n            console.log('User signed in:', {\n                userId: user.id,\n                email: user.email,\n                isNewUser,\n                provider: _account?.provider\n            });\n            // Log new user registrations for safety monitoring\n            if (isNewUser) {\n                console.log('New user registered:', {\n                    userId: user.id,\n                    email: user.email,\n                    provider: _account?.provider,\n                    timestamp: new Date().toISOString()\n                });\n            }\n        },\n        async signOut ({ session, token }) {\n            console.log('User signed out:', {\n                userId: session?.user?.id || token?.userId,\n                timestamp: new Date().toISOString()\n            });\n        },\n        async createUser ({ user }) {\n            console.log('User created in database:', {\n                userId: user.id,\n                email: user.email,\n                role: user.role,\n                timestamp: new Date().toISOString()\n            });\n            // Initialize safety settings for new users\n            try {\n                // Note: SafetySettings model needs to be added to Prisma schema\n                // For now, skip this initialization\n                console.log('Safety settings initialization skipped - model not yet defined');\n            } catch (error) {\n                console.error('Failed to create safety settings for new user:', error);\n            }\n        }\n    },\n    // Security configuration\n    debug: \"development\" === 'development',\n    // Custom logger for better security monitoring\n    logger: {\n        error (code, metadata) {\n            console.error('NextAuth Error:', {\n                code,\n                metadata\n            });\n        },\n        warn (code) {\n            console.warn('NextAuth Warning:', code);\n        },\n        debug (code, metadata) {\n            if (true) {\n                console.debug('NextAuth Debug:', {\n                    code,\n                    metadata\n                });\n            }\n        }\n    }\n};\n// Export type-safe auth configuration\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (authOptions);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/core/auth/config.ts\n");

/***/ }),

/***/ "(rsc)/./src/core/auth/prisma-adapter-custom.ts":
/*!************************************************!*\
  !*** ./src/core/auth/prisma-adapter-custom.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CustomPrismaAdapter: () => (/* binding */ CustomPrismaAdapter)\n/* harmony export */ });\n// src/core/auth/prisma-adapter-custom.ts\n// Custom Prisma Adapter for lowercase model names\n// This adapter wraps the standard PrismaAdapter but uses lowercase table names\nfunction CustomPrismaAdapter(prisma) {\n    return {\n        async createUser (user) {\n            const data = {\n                id: crypto.randomUUID(),\n                email: user.email,\n                emailVerified: user.emailVerified ?? null,\n                name: user.name ?? null,\n                image: user.image ?? null,\n                updatedAt: new Date(),\n                createdAt: new Date()\n            };\n            return await prisma.users.create({\n                data\n            });\n        },\n        async getUser (id) {\n            return await prisma.users.findUnique({\n                where: {\n                    id\n                }\n            });\n        },\n        async getUserByEmail (email) {\n            return await prisma.users.findUnique({\n                where: {\n                    email\n                }\n            });\n        },\n        async getUserByAccount ({ providerAccountId, provider }) {\n            const account = await prisma.accounts.findUnique({\n                where: {\n                    provider_providerAccountId: {\n                        provider,\n                        providerAccountId\n                    }\n                },\n                include: {\n                    users: true\n                }\n            });\n            return account?.users ?? null;\n        },\n        async updateUser ({ id, ...data }) {\n            return await prisma.users.update({\n                where: {\n                    id\n                },\n                data\n            });\n        },\n        async deleteUser (userId) {\n            await prisma.users.delete({\n                where: {\n                    id: userId\n                }\n            });\n        },\n        async linkAccount (account) {\n            await prisma.accounts.create({\n                data: {\n                    id: crypto.randomUUID(),\n                    userId: account.userId,\n                    type: account.type,\n                    provider: account.provider,\n                    providerAccountId: account.providerAccountId,\n                    refresh_token: account.refresh_token ?? null,\n                    access_token: account.access_token ?? null,\n                    expires_at: account.expires_at ?? null,\n                    token_type: account.token_type ?? null,\n                    scope: account.scope ?? null,\n                    id_token: account.id_token ?? null,\n                    session_state: account.session_state ?? null\n                }\n            });\n        },\n        async unlinkAccount ({ providerAccountId, provider }) {\n            await prisma.accounts.delete({\n                where: {\n                    provider_providerAccountId: {\n                        provider,\n                        providerAccountId\n                    }\n                }\n            });\n        },\n        async createSession ({ sessionToken, userId, expires }) {\n            return await prisma.sessions.create({\n                data: {\n                    id: crypto.randomUUID(),\n                    sessionToken,\n                    userId,\n                    expires\n                }\n            });\n        },\n        async getSessionAndUser (sessionToken) {\n            const userAndSession = await prisma.sessions.findUnique({\n                where: {\n                    sessionToken\n                },\n                include: {\n                    users: true\n                }\n            });\n            if (!userAndSession) return null;\n            const { users: user, ...session } = userAndSession;\n            return {\n                user: user,\n                session: session\n            };\n        },\n        async updateSession ({ sessionToken, ...data }) {\n            return await prisma.sessions.update({\n                where: {\n                    sessionToken\n                },\n                data\n            });\n        },\n        async deleteSession (sessionToken) {\n            await prisma.sessions.delete({\n                where: {\n                    sessionToken\n                }\n            });\n        },\n        async createVerificationToken ({ identifier, expires, token }) {\n            return await prisma.verificationtokens.create({\n                data: {\n                    identifier,\n                    expires,\n                    token\n                }\n            });\n        },\n        async useVerificationToken ({ identifier, token }) {\n            try {\n                return await prisma.verificationtokens.delete({\n                    where: {\n                        identifier_token: {\n                            identifier,\n                            token\n                        }\n                    }\n                });\n            } catch (error) {\n                return null;\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/core/auth/prisma-adapter-custom.ts\n");

/***/ }),

/***/ "(rsc)/./src/core/database/client.ts":
/*!*************************************!*\
  !*** ./src/core/database/client.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * Database Client for Massimino\n * Centralized Prisma client instance\n */ \n// Create a single Prisma client instance\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) {\n    globalForPrisma.prisma = prisma;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvY29yZS9kYXRhYmFzZS9jbGllbnQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7OztDQUdDLEdBRTZDO0FBRTlDLHlDQUF5QztBQUN6QyxNQUFNQyxrQkFBa0JDO0FBSWpCLE1BQU1DLFNBQVNGLGdCQUFnQkUsTUFBTSxJQUFJLElBQUlILHdEQUFZQSxHQUFHO0FBRW5FLElBQUlJLElBQXFDLEVBQUU7SUFDekNILGdCQUFnQkUsTUFBTSxHQUFHQTtBQUMzQiIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcnNvbGUvRG9jdW1lbnRzL0dpdEh1Yi9tYXNzaW1pbm8vbWFzc2ltaW5vL3NyYy9jb3JlL2RhdGFiYXNlL2NsaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERhdGFiYXNlIENsaWVudCBmb3IgTWFzc2ltaW5vXG4gKiBDZW50cmFsaXplZCBQcmlzbWEgY2xpZW50IGluc3RhbmNlXG4gKi9cblxuaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQnO1xuXG4vLyBDcmVhdGUgYSBzaW5nbGUgUHJpc21hIGNsaWVudCBpbnN0YW5jZVxuY29uc3QgZ2xvYmFsRm9yUHJpc21hID0gZ2xvYmFsVGhpcyBhcyB1bmtub3duIGFzIHtcbiAgcHJpc21hOiBQcmlzbWFDbGllbnQgfCB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgY29uc3QgcHJpc21hID0gZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/PyBuZXcgUHJpc21hQ2xpZW50KCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBwcmlzbWE7XG59Il0sIm5hbWVzIjpbIlByaXNtYUNsaWVudCIsImdsb2JhbEZvclByaXNtYSIsImdsb2JhbFRoaXMiLCJwcmlzbWEiLCJwcm9jZXNzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/core/database/client.ts\n");

/***/ }),

/***/ "(rsc)/./src/core/database/index.ts":
/*!************************************!*\
  !*** ./src/core/database/index.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModerationAction: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.ModerationAction),\n/* harmony export */   ModerationSource: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.ModerationSource),\n/* harmony export */   UserRole: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.UserRole),\n/* harmony export */   UserStatus: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.UserStatus),\n/* harmony export */   ViolationType: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.ViolationType),\n/* harmony export */   addClientToTrainer: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.addClientToTrainer),\n/* harmony export */   addCoachFeedback: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.addCoachFeedback),\n/* harmony export */   addPersonalRecord: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.addPersonalRecord),\n/* harmony export */   addProgressMetric: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.addProgressMetric),\n/* harmony export */   approveTeamMembership: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.approveTeamMembership),\n/* harmony export */   calculate_session_experience_points: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.calculate_session_experience_points),\n/* harmony export */   checkAppointmentConflict: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.checkAppointmentConflict),\n/* harmony export */   check_and_award_achievements: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.check_and_award_achievements),\n/* harmony export */   completeWorkoutSession: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.completeWorkoutSession),\n/* harmony export */   createAppointment: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.createAppointment),\n/* harmony export */   createChallenge: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.createChallenge),\n/* harmony export */   createExercise: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.createExercise),\n/* harmony export */   createExerciseVariation: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.createExerciseVariation),\n/* harmony export */   createModerationLog: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.createModerationLog),\n/* harmony export */   createMollieCustomer: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.createMollieCustomer),\n/* harmony export */   createMolliePayment: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.createMolliePayment),\n/* harmony export */   createOrUpdateTrainerProfile: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.createOrUpdateTrainerProfile),\n/* harmony export */   createPremiumTeam: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.createPremiumTeam),\n/* harmony export */   createProgressReport: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.createProgressReport),\n/* harmony export */   createSafetyReport: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.createSafetyReport),\n/* harmony export */   createTrainingProgram: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.createTrainingProgram),\n/* harmony export */   createUserViolation: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.createUserViolation),\n/* harmony export */   createWorkoutLogEntry: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.createWorkoutLogEntry),\n/* harmony export */   createWorkoutSession: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.createWorkoutSession),\n/* harmony export */   createWorkoutTemplate: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.createWorkoutTemplate),\n/* harmony export */   deleteExercise: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.deleteExercise),\n/* harmony export */   deleteExerciseVariation: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.deleteExerciseVariation),\n/* harmony export */   deleteTrainingProgram: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.deleteTrainingProgram),\n/* harmony export */   deleteWorkoutLogEntry: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.deleteWorkoutLogEntry),\n/* harmony export */   deleteWorkoutSession: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.deleteWorkoutSession),\n/* harmony export */   deleteWorkoutTemplate: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.deleteWorkoutTemplate),\n/* harmony export */   finalise_session_with_gamification: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.finalise_session_with_gamification),\n/* harmony export */   generateSafetyReport: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.generateSafetyReport),\n/* harmony export */   generateWorkoutAnalytics: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.generateWorkoutAnalytics),\n/* harmony export */   getChallengeLeaderboard: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getChallengeLeaderboard),\n/* harmony export */   getChallenges: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getChallenges),\n/* harmony export */   getClientWorkoutLogs: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getClientWorkoutLogs),\n/* harmony export */   getEquipmentTypes: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getEquipmentTypes),\n/* harmony export */   getExercise: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getExercise),\n/* harmony export */   getExerciseCategories: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getExerciseCategories),\n/* harmony export */   getExerciseVariationById: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getExerciseVariationById),\n/* harmony export */   getExerciseVariations: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getExerciseVariations),\n/* harmony export */   getExercises: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getExercises),\n/* harmony export */   getFeaturedContent: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getFeaturedContent),\n/* harmony export */   getFlaggedUsers: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getFlaggedUsers),\n/* harmony export */   getMarketplacePrograms: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getMarketplacePrograms),\n/* harmony export */   getMarketplaceTemplates: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getMarketplaceTemplates),\n/* harmony export */   getModerationLogs: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getModerationLogs),\n/* harmony export */   getModerationStatistics: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getModerationStatistics),\n/* harmony export */   getMuscleGroups: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getMuscleGroups),\n/* harmony export */   getMyPrograms: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getMyPrograms),\n/* harmony export */   getMyTemplates: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getMyTemplates),\n/* harmony export */   getPaymentByMollieId: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getPaymentByMollieId),\n/* harmony export */   getPendingSafetyReports: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getPendingSafetyReports),\n/* harmony export */   getPersonalRecords: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getPersonalRecords),\n/* harmony export */   getPopularContent: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getPopularContent),\n/* harmony export */   getPrivacyControlledLeaderboard: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getPrivacyControlledLeaderboard),\n/* harmony export */   getProgressMetrics: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getProgressMetrics),\n/* harmony export */   getRecommendedContent: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getRecommendedContent),\n/* harmony export */   getSafetyAnalytics: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getSafetyAnalytics),\n/* harmony export */   getTeamAnalytics: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTeamAnalytics),\n/* harmony export */   getTeamMembers: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTeamMembers),\n/* harmony export */   getTeamMembership: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTeamMembership),\n/* harmony export */   getTeams: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTeams),\n/* harmony export */   getTopRatedContent: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getTopRatedContent),\n/* harmony export */   getTrainerAppointments: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTrainerAppointments),\n/* harmony export */   getTrainerAvailability: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTrainerAvailability),\n/* harmony export */   getTrainerClients: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTrainerClients),\n/* harmony export */   getTrainerEarnings: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTrainerEarnings),\n/* harmony export */   getTrainerPaymentAnalytics: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTrainerPaymentAnalytics),\n/* harmony export */   getTrainerProfileWithStats: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTrainerProfileWithStats),\n/* harmony export */   getTrainerProgressReports: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTrainerProgressReports),\n/* harmony export */   getTrainingProgramById: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getTrainingProgramById),\n/* harmony export */   getTrainingPrograms: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getTrainingPrograms),\n/* harmony export */   getUserPrivacySettings: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getUserPrivacySettings),\n/* harmony export */   getUserProgramSubscriptions: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getUserProgramSubscriptions),\n/* harmony export */   getUserSafetyProfile: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getUserSafetyProfile),\n/* harmony export */   getUserSafetySettings: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getUserSafetySettings),\n/* harmony export */   getUserViolationHistory: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getUserViolationHistory),\n/* harmony export */   getUserWorkoutsUnified: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getUserWorkoutsUnified),\n/* harmony export */   getWorkoutAnalytics: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getWorkoutAnalytics),\n/* harmony export */   getWorkoutLogEntries: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getWorkoutLogEntries),\n/* harmony export */   getWorkoutLogEntry: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getWorkoutLogEntry),\n/* harmony export */   getWorkoutSession: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getWorkoutSession),\n/* harmony export */   getWorkoutSessions: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getWorkoutSessions),\n/* harmony export */   getWorkoutStats: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getWorkoutStats),\n/* harmony export */   getWorkoutTemplateById: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getWorkoutTemplateById),\n/* harmony export */   getWorkoutTemplates: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getWorkoutTemplates),\n/* harmony export */   get_assessment_based_recommendations: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.get_assessment_based_recommendations),\n/* harmony export */   joinChallenge: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.joinChallenge),\n/* harmony export */   joinPremiumTeam: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.joinPremiumTeam),\n/* harmony export */   leaveChallenge: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.leaveChallenge),\n/* harmony export */   leavePremiumTeam: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.leavePremiumTeam),\n/* harmony export */   link_session_to_assessment: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.link_session_to_assessment),\n/* harmony export */   prepare_ai_training_data: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.prepare_ai_training_data),\n/* harmony export */   prisma: () => (/* reexport safe */ _client__WEBPACK_IMPORTED_MODULE_0__.prisma),\n/* harmony export */   processRefund: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.processRefund),\n/* harmony export */   purchaseProgram: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.purchaseProgram),\n/* harmony export */   purchaseTemplate: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.purchaseTemplate),\n/* harmony export */   rateProgram: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.rateProgram),\n/* harmony export */   rateTemplate: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.rateTemplate),\n/* harmony export */   rescheduleAppointment: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.rescheduleAppointment),\n/* harmony export */   searchExercises: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.searchExercises),\n/* harmony export */   searchTrainingPrograms: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.searchTrainingPrograms),\n/* harmony export */   searchWorkoutTemplates: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.searchWorkoutTemplates),\n/* harmony export */   shareProgressReport: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.shareProgressReport),\n/* harmony export */   subscribeToProgram: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.subscribeToProgram),\n/* harmony export */   updateAppointmentStatus: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.updateAppointmentStatus),\n/* harmony export */   updateChallengeProgress: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.updateChallengeProgress),\n/* harmony export */   updateExercise: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.updateExercise),\n/* harmony export */   updateExerciseVariation: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.updateExerciseVariation),\n/* harmony export */   updatePaymentFromMollie: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.updatePaymentFromMollie),\n/* harmony export */   updateProgramProgress: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.updateProgramProgress),\n/* harmony export */   updateSafetyReport: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.updateSafetyReport),\n/* harmony export */   updateTrainingProgram: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.updateTrainingProgram),\n/* harmony export */   updateUserPrivacySettings: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.updateUserPrivacySettings),\n/* harmony export */   updateUserSafetySettings: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.updateUserSafetySettings),\n/* harmony export */   updateUserSafetyStatus: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.updateUserSafetyStatus),\n/* harmony export */   updateWorkoutLogEntry: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.updateWorkoutLogEntry),\n/* harmony export */   updateWorkoutSession: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.updateWorkoutSession),\n/* harmony export */   updateWorkoutTemplate: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.updateWorkoutTemplate)\n/* harmony export */ });\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client */ \"(rsc)/./src/core/database/client.ts\");\n/* harmony import */ var _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./safety-business-queries */ \"(rsc)/./src/core/database/safety-business-queries.ts\");\n/* harmony import */ var _workout_queries__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./workout-queries */ \"(rsc)/./src/core/database/workout-queries.ts\");\n/**\n * Database Exports\n * Centralized export point for all database functionality\n */ // Database client\n\n// Safety, moderation, and business operation queries\n\n// Workout domain queries\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvY29yZS9kYXRhYmFzZS9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7O0NBR0MsR0FFRCxrQkFBa0I7QUFDTztBQUV6QixxREFBcUQ7QUFDWDtBQUUxQyx5QkFBeUI7QUFDUyIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcnNvbGUvRG9jdW1lbnRzL0dpdEh1Yi9tYXNzaW1pbm8vbWFzc2ltaW5vL3NyYy9jb3JlL2RhdGFiYXNlL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGF0YWJhc2UgRXhwb3J0c1xuICogQ2VudHJhbGl6ZWQgZXhwb3J0IHBvaW50IGZvciBhbGwgZGF0YWJhc2UgZnVuY3Rpb25hbGl0eVxuICovXG5cbi8vIERhdGFiYXNlIGNsaWVudFxuZXhwb3J0ICogZnJvbSAnLi9jbGllbnQnO1xuXG4vLyBTYWZldHksIG1vZGVyYXRpb24sIGFuZCBidXNpbmVzcyBvcGVyYXRpb24gcXVlcmllc1xuZXhwb3J0ICogZnJvbSAnLi9zYWZldHktYnVzaW5lc3MtcXVlcmllcyc7XG5cbi8vIFdvcmtvdXQgZG9tYWluIHF1ZXJpZXNcbmV4cG9ydCAqIGZyb20gJy4vd29ya291dC1xdWVyaWVzJzsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/core/database/index.ts\n");

/***/ }),

/***/ "(rsc)/./src/core/database/safety-business-queries.ts":
/*!******************************************************!*\
  !*** ./src/core/database/safety-business-queries.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModerationAction: () => (/* binding */ ModerationAction),\n/* harmony export */   ModerationSource: () => (/* binding */ ModerationSource),\n/* harmony export */   UserRole: () => (/* binding */ UserRole),\n/* harmony export */   UserStatus: () => (/* binding */ UserStatus),\n/* harmony export */   ViolationType: () => (/* binding */ ViolationType),\n/* harmony export */   addClientToTrainer: () => (/* binding */ addClientToTrainer),\n/* harmony export */   approveTeamMembership: () => (/* binding */ approveTeamMembership),\n/* harmony export */   checkAppointmentConflict: () => (/* binding */ checkAppointmentConflict),\n/* harmony export */   createAppointment: () => (/* binding */ createAppointment),\n/* harmony export */   createChallenge: () => (/* binding */ createChallenge),\n/* harmony export */   createModerationLog: () => (/* binding */ createModerationLog),\n/* harmony export */   createMollieCustomer: () => (/* binding */ createMollieCustomer),\n/* harmony export */   createMolliePayment: () => (/* binding */ createMolliePayment),\n/* harmony export */   createOrUpdateTrainerProfile: () => (/* binding */ createOrUpdateTrainerProfile),\n/* harmony export */   createPremiumTeam: () => (/* binding */ createPremiumTeam),\n/* harmony export */   createProgressReport: () => (/* binding */ createProgressReport),\n/* harmony export */   createSafetyReport: () => (/* binding */ createSafetyReport),\n/* harmony export */   createUserViolation: () => (/* binding */ createUserViolation),\n/* harmony export */   generateSafetyReport: () => (/* binding */ generateSafetyReport),\n/* harmony export */   getChallengeLeaderboard: () => (/* binding */ getChallengeLeaderboard),\n/* harmony export */   getChallenges: () => (/* binding */ getChallenges),\n/* harmony export */   getFlaggedUsers: () => (/* binding */ getFlaggedUsers),\n/* harmony export */   getModerationLogs: () => (/* binding */ getModerationLogs),\n/* harmony export */   getModerationStatistics: () => (/* binding */ getModerationStatistics),\n/* harmony export */   getPaymentByMollieId: () => (/* binding */ getPaymentByMollieId),\n/* harmony export */   getPendingSafetyReports: () => (/* binding */ getPendingSafetyReports),\n/* harmony export */   getPrivacyControlledLeaderboard: () => (/* binding */ getPrivacyControlledLeaderboard),\n/* harmony export */   getSafetyAnalytics: () => (/* binding */ getSafetyAnalytics),\n/* harmony export */   getTeamAnalytics: () => (/* binding */ getTeamAnalytics),\n/* harmony export */   getTeamMembers: () => (/* binding */ getTeamMembers),\n/* harmony export */   getTeamMembership: () => (/* binding */ getTeamMembership),\n/* harmony export */   getTeams: () => (/* binding */ getTeams),\n/* harmony export */   getTrainerAppointments: () => (/* binding */ getTrainerAppointments),\n/* harmony export */   getTrainerAvailability: () => (/* binding */ getTrainerAvailability),\n/* harmony export */   getTrainerClients: () => (/* binding */ getTrainerClients),\n/* harmony export */   getTrainerEarnings: () => (/* binding */ getTrainerEarnings),\n/* harmony export */   getTrainerPaymentAnalytics: () => (/* binding */ getTrainerPaymentAnalytics),\n/* harmony export */   getTrainerProfileWithStats: () => (/* binding */ getTrainerProfileWithStats),\n/* harmony export */   getTrainerProgressReports: () => (/* binding */ getTrainerProgressReports),\n/* harmony export */   getUserPrivacySettings: () => (/* binding */ getUserPrivacySettings),\n/* harmony export */   getUserSafetyProfile: () => (/* binding */ getUserSafetyProfile),\n/* harmony export */   getUserSafetySettings: () => (/* binding */ getUserSafetySettings),\n/* harmony export */   getUserViolationHistory: () => (/* binding */ getUserViolationHistory),\n/* harmony export */   joinChallenge: () => (/* binding */ joinChallenge),\n/* harmony export */   joinPremiumTeam: () => (/* binding */ joinPremiumTeam),\n/* harmony export */   leaveChallenge: () => (/* binding */ leaveChallenge),\n/* harmony export */   leavePremiumTeam: () => (/* binding */ leavePremiumTeam),\n/* harmony export */   processRefund: () => (/* binding */ processRefund),\n/* harmony export */   rescheduleAppointment: () => (/* binding */ rescheduleAppointment),\n/* harmony export */   shareProgressReport: () => (/* binding */ shareProgressReport),\n/* harmony export */   updateAppointmentStatus: () => (/* binding */ updateAppointmentStatus),\n/* harmony export */   updateChallengeProgress: () => (/* binding */ updateChallengeProgress),\n/* harmony export */   updatePaymentFromMollie: () => (/* binding */ updatePaymentFromMollie),\n/* harmony export */   updateSafetyReport: () => (/* binding */ updateSafetyReport),\n/* harmony export */   updateUserPrivacySettings: () => (/* binding */ updateUserPrivacySettings),\n/* harmony export */   updateUserSafetySettings: () => (/* binding */ updateUserSafetySettings),\n/* harmony export */   updateUserSafetyStatus: () => (/* binding */ updateUserSafetyStatus)\n/* harmony export */ });\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client */ \"(rsc)/./src/core/database/client.ts\");\n// src/lib/database/queries.ts\n/**\n * Safety-Related Database Queries for Massimino\n * Optimized queries for user safety, moderation, and security operations\n */ \n// Define types locally since Prisma client may not be available\nconst UserRole = {\n    CLIENT: 'CLIENT',\n    TRAINER: 'TRAINER',\n    ADMIN: 'ADMIN'\n};\nconst UserStatus = {\n    ACTIVE: 'ACTIVE',\n    SUSPENDED: 'SUSPENDED',\n    BANNED: 'BANNED'\n};\nconst ViolationType = {\n    HARASSMENT: 'HARASSMENT',\n    HATE_SPEECH: 'HATE_SPEECH',\n    THREAT: 'THREAT',\n    INAPPROPRIATE_CONTENT: 'INAPPROPRIATE_CONTENT',\n    SPAM: 'SPAM',\n    PRIVACY_VIOLATION: 'PRIVACY_VIOLATION'\n};\nconst ModerationAction = {\n    APPROVED: 'APPROVED',\n    FLAGGED: 'FLAGGED',\n    BLOCKED: 'BLOCKED',\n    DELETED: 'DELETED'\n};\nconst ModerationSource = {\n    OPENAI: 'OPENAI',\n    CUSTOM_RULES: 'CUSTOM_RULES',\n    MANUAL: 'MANUAL'\n};\n// ============================================================================\n// USER SAFETY QUERIES\n// ============================================================================\n/**\n * Get comprehensive user safety information\n */ async function getUserSafetyProfile(userId) {\n    const user = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.findUnique({\n        where: {\n            id: userId\n        },\n        select: {\n            id: true,\n            email: true,\n            name: true,\n            image: true,\n            role: true,\n            status: true,\n            reputationScore: true,\n            warningCount: true,\n            trainerVerified: true,\n            suspendedUntil: true,\n            createdAt: true,\n            lastLoginAt: true\n        }\n    });\n    if (!user) {\n        return {\n            user: null,\n            violationCount: 0,\n            recentViolations: 0,\n            suspensionHistory: 0,\n            riskLevel: 'LOW',\n            restrictions: []\n        };\n    }\n    // Get violation statistics\n    const [violationCount, recentViolations, suspensionHistory, lastViolationResult] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.user_violations.count({\n            where: {\n                userId\n            }\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.user_violations.count({\n            where: {\n                userId,\n                createdAt: {\n                    gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)\n                }\n            }\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.user_violations.count({\n            where: {\n                userId,\n                suspensionHours: {\n                    gt: 0\n                }\n            }\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.user_violations.findFirst({\n            where: {\n                userId\n            },\n            orderBy: {\n                createdAt: 'desc'\n            },\n            select: {\n                createdAt: true\n            }\n        })\n    ]);\n    // Calculate risk level\n    const riskLevel = calculateUserRiskLevel(user.reputationScore, violationCount, recentViolations, user.warningCount);\n    // Determine active restrictions\n    const restrictions = determineUserRestrictions(user, violationCount, recentViolations);\n    return {\n        user: user ? {\n            id: user.id,\n            email: user.email,\n            name: user.name || 'Unknown',\n            ...user.image && {\n                image: user.image\n            },\n            role: user.role,\n            status: user.status,\n            reputationScore: user.reputationScore,\n            warningCount: user.warningCount,\n            trainerVerified: user.trainerVerified,\n            suspendedUntil: user.suspendedUntil || null,\n            isSafe: riskLevel === 'LOW' && user.status === UserStatus.ACTIVE,\n            createdAt: user.createdAt,\n            lastLoginAt: user.lastLoginAt || null\n        } : null,\n        violationCount,\n        recentViolations,\n        suspensionHistory,\n        ...lastViolationResult?.createdAt && {\n            lastViolation: lastViolationResult.createdAt\n        },\n        riskLevel,\n        restrictions\n    };\n}\n/**\n * Get users flagged for potential safety concerns\n */ async function getFlaggedUsers(params) {\n    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n    // Get users with safety concerns\n    const users = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.findMany({\n        where: {\n            OR: [\n                {\n                    reputationScore: {\n                        lt: 50\n                    }\n                },\n                {\n                    warningCount: {\n                        gte: 2\n                    }\n                },\n                {\n                    status: {\n                        in: [\n                            UserStatus.SUSPENDED\n                        ]\n                    }\n                }\n            ],\n            ...params.includeRecent && {\n                violations: {\n                    some: {\n                        createdAt: {\n                            gte: thirtyDaysAgo\n                        }\n                    }\n                }\n            }\n        },\n        select: {\n            id: true,\n            name: true,\n            email: true,\n            role: true,\n            reputationScore: true,\n            warningCount: true,\n            user_violations: {\n                select: {\n                    createdAt: true\n                },\n                orderBy: {\n                    createdAt: 'desc'\n                }\n            }\n        },\n        orderBy: [\n            {\n                reputationScore: 'asc'\n            },\n            {\n                warningCount: 'desc'\n            }\n        ],\n        take: params.limit || 50,\n        skip: params.offset || 0\n    });\n    return users.map((user)=>{\n        const violationCount = user.violations.length;\n        const recentViolations = user.violations.filter((v)=>v.createdAt >= thirtyDaysAgo).length;\n        const lastViolation = user.violations[0]?.createdAt;\n        const riskLevel = calculateUserRiskLevel(user.reputationScore, violationCount, recentViolations, user.warningCount);\n        return {\n            id: user.id,\n            name: user.name || 'Unknown',\n            email: user.email,\n            role: user.role,\n            reputationScore: user.reputationScore,\n            warningCount: user.warningCount,\n            violationCount,\n            recentViolations,\n            ...lastViolation && {\n                lastViolation\n            },\n            riskLevel\n        };\n    });\n}\n/**\n * Update user safety status after enforcement action\n */ async function updateUserSafetyStatus(userId, updates) {\n    // Use regular prisma transaction instead of safeTransaction for now\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.$transaction(async (tx)=>{\n        const currentUser = await tx.users.findUniqueOrThrow({\n            where: {\n                id: userId\n            },\n            select: {\n                reputationScore: true\n            }\n        });\n        const newReputationScore = updates.reputationChange ? Math.max(0, currentUser.reputationScore + updates.reputationChange) : undefined;\n        return tx.users.update({\n            where: {\n                id: userId\n            },\n            data: {\n                ...newReputationScore !== undefined && {\n                    reputationScore: newReputationScore\n                },\n                ...updates.warningCount !== undefined && {\n                    warningCount: updates.warningCount\n                },\n                ...updates.status && {\n                    status: updates.status\n                },\n                ...updates.suspendedUntil !== undefined && {\n                    suspendedUntil: updates.suspendedUntil\n                }\n            }\n        });\n    });\n}\n// ============================================================================\n// MODERATION LOG QUERIES\n// ============================================================================\n/**\n * Create moderation log entry\n */ async function createModerationLog(data) {\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.moderation_logs.create({\n        data: {\n            ...data,\n            processedAt: new Date()\n        }\n    });\n}\n/**\n * Get moderation logs with advanced filtering\n */ async function getModerationLogs(params) {\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.moderation_logs.findMany({\n        where: {\n            ...params.userId && {\n                userId: params.userId\n            },\n            ...params.action && {\n                action: params.action\n            },\n            ...params.contentType && {\n                contentType: params.contentType\n            },\n            ...(params.dateFrom || params.dateTo) && {\n                createdAt: {\n                    ...params.dateFrom && {\n                        gte: params.dateFrom\n                    },\n                    ...params.dateTo && {\n                        lte: params.dateTo\n                    }\n                }\n            }\n        },\n        ...params.includeUser && {\n            include: {\n                users: {\n                    select: {\n                        name: true,\n                        role: true\n                    }\n                }\n            }\n        },\n        orderBy: {\n            createdAt: 'desc'\n        },\n        take: params.limit || 50,\n        skip: params.offset || 0\n    });\n}\n/**\n * Get moderation statistics for dashboard\n */ async function getModerationStatistics(timeframe = 'day') {\n    const hoursMap = {\n        day: 24,\n        week: 168,\n        month: 720\n    };\n    const since = new Date(Date.now() - hoursMap[timeframe] * 60 * 60 * 1000);\n    const [logs, reasonCounts] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.moderation_logs.findMany({\n            where: {\n                createdAt: {\n                    gte: since\n                }\n            },\n            select: {\n                action: true,\n                contentType: true,\n                confidence: true,\n                userId: true,\n                flaggedReason: true,\n                users: {\n                    select: {\n                        name: true\n                    }\n                }\n            }\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.moderation_logs.groupBy({\n            by: [\n                'flaggedReason'\n            ],\n            where: {\n                createdAt: {\n                    gte: since\n                },\n                flaggedReason: {\n                    not: null\n                }\n            },\n            _count: {\n                flaggedReason: true\n            },\n            orderBy: {\n                _count: {\n                    flaggedReason: 'desc'\n                }\n            },\n            take: 10\n        })\n    ]);\n    // Calculate statistics\n    const totalActions = logs.length;\n    const actionBreakdown = {};\n    const contentTypeBreakdown = {};\n    const userActivity = {};\n    let totalConfidence = 0;\n    let confidenceCount = 0;\n    logs.forEach((log)=>{\n        // Action breakdown\n        actionBreakdown[log.action] = (actionBreakdown[log.action] || 0) + 1;\n        // Content type breakdown\n        contentTypeBreakdown[log.contentType] = (contentTypeBreakdown[log.contentType] || 0) + 1;\n        // User activity\n        if (log.userId) {\n            if (!userActivity[log.userId]) {\n                const userData = {\n                    count: 0\n                };\n                if (log.users?.name) {\n                    userData.name = log.users.name;\n                }\n                userActivity[log.userId] = userData;\n            }\n            if (userActivity[log.userId]) {\n                userActivity[log.userId].count++;\n            }\n        }\n        // Confidence calculation\n        if (log.confidence !== null) {\n            totalConfidence += log.confidence;\n            confidenceCount++;\n        }\n    });\n    const averageConfidence = confidenceCount > 0 ? totalConfidence / confidenceCount : 0;\n    const topViolationReasons = reasonCounts.map((r)=>({\n            reason: r.flaggedReason ?? 'Unknown',\n            count: r._count.flaggedReason\n        }));\n    const userActivityArray = Object.entries(userActivity).map(([userId, data])=>({\n            userId,\n            actionCount: data.count,\n            ...data.name && {\n                userName: data.name\n            }\n        })).sort((a, b)=>b.actionCount - a.actionCount).slice(0, 10);\n    return {\n        totalActions,\n        actionBreakdown,\n        contentTypeBreakdown,\n        averageConfidence,\n        topViolationReasons,\n        userActivity: userActivityArray\n    };\n}\n// ============================================================================\n// SAFETY REPORTS QUERIES\n// ============================================================================\n/**\n * Create safety report\n */ async function createSafetyReport(data) {\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.safety_reports.create({\n        data: {\n            id: crypto.randomUUID(),\n            ...data,\n            status: 'PENDING',\n            priority: determinePriority(data.violationType, data.description),\n            createdAt: new Date()\n        }\n    });\n}\n/**\n * Get pending safety reports for review\n */ async function getPendingSafetyReports(params) {\n    // @ts-expect-error Prisma type mismatch with local types\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.safety_reports.findMany({\n        where: {\n            status: {\n                in: [\n                    'PENDING',\n                    'INVESTIGATING'\n                ]\n            },\n            ...params.priority && {\n                priority: params.priority\n            }\n        },\n        include: {\n            users_safety_reports_reporterIdTousers: {\n                select: {\n                    name: true,\n                    role: true\n                }\n            },\n            users_safety_reports_reportedUserIdTousers: {\n                select: {\n                    name: true,\n                    role: true,\n                    reputationScore: true\n                }\n            }\n        },\n        orderBy: [\n            {\n                priority: 'desc'\n            },\n            {\n                createdAt: 'asc'\n            }\n        ],\n        take: params.limit || 20,\n        skip: params.offset || 0\n    });\n}\n/**\n * Update safety report status\n */ async function updateSafetyReport(reportId, updates) {\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.safety_reports.update({\n        where: {\n            id: reportId\n        },\n        data: {\n            ...updates,\n            ...updates.status === 'RESOLVED' && {\n                resolvedAt: new Date()\n            },\n            ...updates.assignedTo && {\n                status: updates.status || 'INVESTIGATING'\n            }\n        }\n    });\n}\n// ============================================================================\n// USER VIOLATIONS QUERIES\n// ============================================================================\n/**\n * Create user violation record\n */ async function createUserViolation(data) {\n    // Use regular prisma transaction instead of safeTransaction for now\n    // @ts-expect-error Prisma type mismatch with local types\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.$transaction(async (tx)=>{\n        // Create violation record\n        const violation = await tx.user_violations.create({\n            data: {\n                id: crypto.randomUUID(),\n                ...data,\n                createdAt: new Date()\n            }\n        });\n        // Update user statistics\n        if (data.warningIssued) {\n            await tx.users.update({\n                where: {\n                    id: data.userId\n                },\n                data: {\n                    warningCount: {\n                        increment: 1\n                    },\n                    reputationScore: {\n                        decrement: data.reputationHit\n                    }\n                }\n            });\n        }\n        return violation;\n    });\n}\n/**\n * Get user violation history\n */ async function getUserViolationHistory(userId, params) {\n    // @ts-expect-error Prisma type mismatch with local types\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.user_violations.findMany({\n        where: {\n            userId,\n            ...params?.includeResolved === false && {\n                resolved: false\n            }\n        },\n        orderBy: {\n            createdAt: 'desc'\n        },\n        take: params?.limit || 20,\n        skip: params?.offset || 0\n    });\n}\n// ============================================================================\n// SAFETY SETTINGS QUERIES\n// ============================================================================\n/**\n * Get user safety settings\n */ async function getUserSafetySettings(userId) {\n    // @ts-expect-error Prisma type mismatch with local types\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.safetySettings.findUnique({\n        where: {\n            userId\n        }\n    });\n}\n/**\n * Update user safety settings\n */ async function updateUserSafetySettings(userId, settings) {\n    // @ts-expect-error Prisma type mismatch with local types\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.safetySettings.upsert({\n        where: {\n            userId\n        },\n        create: {\n            userId,\n            ...settings\n        },\n        update: settings\n    });\n}\n// ============================================================================\n// ANALYTICS AND REPORTING QUERIES\n// ============================================================================\n/**\n * Get safety analytics for admin dashboard\n */ async function getSafetyAnalytics(_timeframe = 'month') {\n    // This would be implemented with complex aggregation queries\n    // For now, returning a structured response for the interface\n    return {\n        userGrowth: [],\n        violationTrends: [],\n        moderationEfficiency: {\n            averageResponseTime: 0,\n            automationRate: 0,\n            appealRate: 0\n        },\n        riskDistribution: {\n            'LOW': 0,\n            'MEDIUM': 0,\n            'HIGH': 0,\n            'CRITICAL': 0\n        },\n        trainerSafety: {\n            verifiedTrainers: 0,\n            flaggedTrainers: 0,\n            averageRating: 0\n        }\n    };\n}\n/**\n * Generate safety report for export\n */ async function generateSafetyReport(params) {\n    const summary = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.count(),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.count({\n            where: {\n                status: UserStatus.ACTIVE\n            }\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.count({\n            where: {\n                status: UserStatus.SUSPENDED\n            }\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.count({\n            where: {\n                status: UserStatus.BANNED\n            }\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.user_violations.count({\n            where: {\n                createdAt: {\n                    gte: params.startDate,\n                    lte: params.endDate\n                }\n            }\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.safety_reports.count({\n            where: {\n                status: 'RESOLVED',\n                createdAt: {\n                    gte: params.startDate,\n                    lte: params.endDate\n                }\n            }\n        })\n    ]);\n    return {\n        summary: {\n            totalUsers: summary[0],\n            activeUsers: summary[1],\n            suspendedUsers: summary[2],\n            bannedUsers: summary[3],\n            totalViolations: summary[4],\n            resolvedReports: summary[5]\n        },\n        details: []\n    };\n}\n// ============================================================================\n// UTILITY FUNCTIONS\n// ============================================================================\n/**\n * Calculate user risk level based on various factors\n */ function calculateUserRiskLevel(reputationScore, totalViolations, recentViolations, warningCount) {\n    // High risk indicators\n    if (recentViolations >= 3 || totalViolations >= 10 || warningCount >= 5) {\n        return 'CRITICAL';\n    }\n    if (recentViolations >= 2 || totalViolations >= 5 || warningCount >= 3 || reputationScore < 25) {\n        return 'HIGH';\n    }\n    if (recentViolations >= 1 || totalViolations >= 2 || warningCount >= 1 || reputationScore < 50) {\n        return 'MEDIUM';\n    }\n    return 'LOW';\n}\n/**\n * Determine user restrictions based on safety profile\n */ function determineUserRestrictions(user, totalViolations, recentViolations) {\n    const restrictions = [];\n    if (user.status === UserStatus.SUSPENDED) {\n        restrictions.push('ACCOUNT_SUSPENDED');\n    }\n    if (user.status === UserStatus.BANNED) {\n        restrictions.push('ACCOUNT_BANNED');\n    }\n    if (user.reputationScore < 25) {\n        restrictions.push('NO_DIRECT_MESSAGES');\n    }\n    if (user.warningCount >= 3 || recentViolations >= 2) {\n        restrictions.push('NO_POST_CREATION');\n        restrictions.push('NO_COMMUNITY_CREATION');\n    }\n    if (totalViolations >= 5) {\n        restrictions.push('LIMITED_INTERACTIONS');\n    }\n    return restrictions;\n}\n/**\n * Determine priority for safety reports\n */ function determinePriority(category, description) {\n    // High priority categories\n    if (category === ViolationType.THREAT || category === ViolationType.HATE_SPEECH || category === ViolationType.PRIVACY_VIOLATION) {\n        return 'URGENT';\n    }\n    if (category === ViolationType.HARASSMENT || category === ViolationType.INAPPROPRIATE_CONTENT) {\n        return 'HIGH';\n    }\n    if (category === ViolationType.SPAM) {\n        return 'LOW';\n    }\n    // Check description for urgent keywords\n    const urgentKeywords = [\n        'threat',\n        'danger',\n        'harm',\n        'suicide',\n        'violence'\n    ];\n    if (urgentKeywords.some((keyword)=>description.toLowerCase().includes(keyword))) {\n        return 'URGENT';\n    }\n    return 'MEDIUM';\n}\n// ============================================================================\n// PHASE 5: TRAINER BUSINESS QUERIES\n// ============================================================================\n/**\n * Create or update trainer profile\n */ async function createOrUpdateTrainerProfile(userId, data) {\n    const existingProfile = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_profiles.findUnique({\n        where: {\n            userId\n        }\n    });\n    if (existingProfile) {\n        return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_profiles.update({\n            where: {\n                userId\n            },\n            data\n        });\n    } else {\n        return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_profiles.create({\n            data: {\n                id: crypto.randomUUID(),\n                userId,\n                ...data\n            }\n        });\n    }\n}\n/**\n * Get trainer profile with business stats\n */ async function getTrainerProfileWithStats(trainerId) {\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_profiles.findUnique({\n        where: {\n            id: trainerId\n        },\n        include: {\n            user: {\n                select: {\n                    id: true,\n                    name: true,\n                    email: true,\n                    image: true,\n                    role: true\n                }\n            },\n            _count: {\n                select: {\n                    trainer_clients: {\n                        where: {\n                            status: 'ACTIVE'\n                        }\n                    },\n                    appointments: true,\n                    trainer_reviews: true\n                }\n            }\n        }\n    });\n}\n/**\n * Get trainer clients with pagination and filters\n */ async function getTrainerClients(trainerId, filters = {}) {\n    const { status, search, page = 1, limit = 20 } = filters;\n    const skip = (page - 1) * limit;\n    const where = {\n        trainerId,\n        ...status && {\n            status\n        },\n        ...search && {\n            client: {\n                OR: [\n                    {\n                        name: {\n                            contains: search,\n                            mode: 'insensitive'\n                        }\n                    },\n                    {\n                        email: {\n                            contains: search,\n                            mode: 'insensitive'\n                        }\n                    }\n                ]\n            }\n        }\n    };\n    const [clients, total] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_clients.findMany({\n            where,\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        email: true,\n                        image: true\n                    }\n                },\n                _count: {\n                    select: {\n                        appointments: true,\n                        progress_reports: true\n                    }\n                }\n            },\n            orderBy: {\n                createdAt: 'desc'\n            },\n            skip,\n            take: limit\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_clients.count({\n            where\n        })\n    ]);\n    return {\n        clients,\n        total,\n        page,\n        totalPages: Math.ceil(total / limit)\n    };\n}\n/**\n * Add client to trainer\n */ async function addClientToTrainer(trainerId, clientId, data) {\n    // Check if relationship already exists\n    const existing = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_clients.findUnique({\n        where: {\n            trainerId_clientId: {\n                trainerId,\n                clientId\n            }\n        }\n    });\n    if (existing) {\n        throw new Error('Client is already associated with this trainer');\n    }\n    const relationship = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_clients.create({\n        data: {\n            id: crypto.randomUUID(),\n            trainerId,\n            clientId,\n            status: 'ACTIVE',\n            ...data\n        }\n    });\n    // Update trainer's client counts\n    await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_profiles.update({\n        where: {\n            id: trainerId\n        },\n        data: {\n            activeClients: {\n                increment: 1\n            },\n            totalClients: {\n                increment: 1\n            }\n        }\n    });\n    return relationship;\n}\n/**\n * Create appointment\n */ async function createAppointment(data) {\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.appointments.create({\n        data: {\n            id: crypto.randomUUID(),\n            trainerId: data.trainerId,\n            clientId: data.clientId,\n            title: data.title,\n            description: data.description ?? null,\n            scheduledAt: data.scheduledAt,\n            duration: data.duration || 60,\n            type: data.type || 'PERSONAL_TRAINING',\n            location: data.location ?? null,\n            isVirtual: data.isVirtual ?? false,\n            price: data.price ?? null,\n            currency: data.currency ?? 'USD',\n            status: 'SCHEDULED'\n        }\n    });\n}\n/**\n * Get trainer appointments with filters\n */ async function getTrainerAppointments(trainerId, filters = {}) {\n    const { status, dateRange, clientId, page = 1, limit = 20 } = filters;\n    const skip = (page - 1) * limit;\n    const where = {\n        trainerId,\n        ...status && {\n            status: {\n                in: status\n            }\n        },\n        ...dateRange && {\n            scheduledAt: {\n                gte: dateRange.start,\n                lte: dateRange.end\n            }\n        },\n        ...clientId && {\n            clientId\n        }\n    };\n    const [appointments, total] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.appointments.findMany({\n            where,\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        email: true,\n                        image: true\n                    }\n                },\n                workout_sessions: {\n                    select: {\n                        id: true,\n                        title: true,\n                        isComplete: true\n                    }\n                }\n            },\n            orderBy: {\n                scheduledAt: 'asc'\n            },\n            skip,\n            take: limit\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.appointments.count({\n            where\n        })\n    ]);\n    return {\n        appointments,\n        total,\n        page,\n        totalPages: Math.ceil(total / limit)\n    };\n}\n/**\n * Update appointment status\n */ async function updateAppointmentStatus(appointmentId, status, updates = {}) {\n    const updateData = {\n        status,\n        ...updates\n    };\n    if (status === 'CANCELLED') {\n        updateData.cancelledAt = new Date();\n    } else if (status === 'COMPLETED') {\n        updateData.completedAt = new Date();\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.appointments.update({\n        where: {\n            id: appointmentId\n        },\n        data: updateData\n    });\n}\n/**\n * Create progress report\n */ async function createProgressReport(data) {\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.progress_reports.create({\n        data: {\n            id: crypto.randomUUID(),\n            ...data,\n            reportDate: new Date(),\n            period: data.period || 'MONTHLY'\n        }\n    });\n}\n/**\n * Get trainer's progress reports\n */ async function getTrainerProgressReports(trainerId, filters = {}) {\n    const { clientId, period, isShared, page = 1, limit = 20 } = filters;\n    const skip = (page - 1) * limit;\n    const where = {\n        trainerId,\n        ...clientId && {\n            clientId\n        },\n        ...period && {\n            period\n        },\n        ...isShared !== undefined && {\n            isShared\n        }\n    };\n    const [reports, total] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.progress_reports.findMany({\n            where,\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        email: true,\n                        image: true\n                    }\n                }\n            },\n            orderBy: {\n                reportDate: 'desc'\n            },\n            skip,\n            take: limit\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.progress_reports.count({\n            where\n        })\n    ]);\n    return {\n        reports,\n        total,\n        page,\n        totalPages: Math.ceil(total / limit)\n    };\n}\n/**\n * Share progress report with client\n */ async function shareProgressReport(reportId) {\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.progress_reports.update({\n        where: {\n            id: reportId\n        },\n        data: {\n            isShared: true\n        }\n    });\n}\n/**\n * Get trainer earnings summary\n */ async function getTrainerEarnings(trainerId, period = 'month') {\n    const now = new Date();\n    let startDate;\n    switch(period){\n        case 'week':\n            startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n            break;\n        case 'year':\n            startDate = new Date(now.getFullYear(), 0, 1);\n            break;\n        default:\n            startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n    }\n    const earnings = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.aggregate({\n        where: {\n            trainerId,\n            status: 'COMPLETED',\n            paymentDate: {\n                gte: startDate\n            }\n        },\n        _sum: {\n            amount: true,\n            trainerEarnings: true,\n            platformFee: true\n        },\n        _count: true\n    });\n    return {\n        totalAmount: earnings._sum.amount || 0,\n        trainerEarnings: earnings._sum.trainerEarnings || 0,\n        platformFee: earnings._sum.platformFee || 0,\n        transactionCount: earnings._count,\n        period\n    };\n}\n/**\n * Check for appointment scheduling conflicts\n */ async function checkAppointmentConflict(trainerId, scheduledAt, duration = 60, excludeAppointmentId) {\n    const endTime = new Date(scheduledAt.getTime() + duration * 60 * 1000);\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.appointments.findFirst({\n        where: {\n            trainerId,\n            ...excludeAppointmentId && {\n                id: {\n                    not: excludeAppointmentId\n                }\n            },\n            status: {\n                in: [\n                    'SCHEDULED',\n                    'CONFIRMED',\n                    'IN_PROGRESS'\n                ]\n            },\n            OR: [\n                // Appointment starts during new appointment\n                {\n                    AND: [\n                        {\n                            scheduledAt: {\n                                lte: scheduledAt\n                            }\n                        },\n                        {\n                            scheduledAt: {\n                                gte: new Date(scheduledAt.getTime() - 60 * 60 * 1000)\n                            }\n                        }\n                    ]\n                },\n                // Appointment ends during new appointment\n                {\n                    AND: [\n                        {\n                            scheduledAt: {\n                                lte: endTime\n                            }\n                        },\n                        {\n                            scheduledAt: {\n                                gte: scheduledAt\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    });\n}\n/**\n * Get trainer availability for date range\n */ async function getTrainerAvailability(trainerId, startDate, endDate) {\n    // Get trainer's available hours\n    const trainerProfile = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_profiles.findUnique({\n        where: {\n            id: trainerId\n        },\n        select: {\n            availableHours: true,\n            timezone: true\n        }\n    });\n    // Get existing appointments\n    const appointments = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.appointments.findMany({\n        where: {\n            trainerId,\n            scheduledAt: {\n                gte: startDate,\n                lte: endDate\n            },\n            status: {\n                in: [\n                    'SCHEDULED',\n                    'CONFIRMED',\n                    'IN_PROGRESS'\n                ]\n            }\n        },\n        select: {\n            id: true,\n            scheduledAt: true,\n            duration: true,\n            type: true,\n            title: true\n        }\n    });\n    return {\n        trainerProfile,\n        appointments,\n        dateRange: {\n            startDate,\n            endDate\n        }\n    };\n}\n/**\n * Reschedule appointment\n */ async function rescheduleAppointment(appointmentId, newScheduledAt, reason) {\n    const appointment = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.appointments.findUnique({\n        where: {\n            id: appointmentId\n        }\n    });\n    if (!appointment) {\n        throw new Error('Appointment not found');\n    }\n    // Check for conflicts\n    const conflict = await checkAppointmentConflict(appointment.trainerId, newScheduledAt, appointment.duration, appointmentId);\n    if (conflict) {\n        throw new Error('New time conflicts with existing appointment');\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.appointments.update({\n        where: {\n            id: appointmentId\n        },\n        data: {\n            scheduledAt: newScheduledAt,\n            status: 'RESCHEDULED',\n            trainerNotes: reason ? `Rescheduled: ${reason}` : 'Appointment rescheduled'\n        }\n    });\n}\n// ============================================================================\n// PHASE 5: MOLLIE PAYMENT INTEGRATION\n// ============================================================================\n/**\n * Create payment record with Mollie integration\n */ async function createMolliePayment(data) {\n    const payment = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.create({\n        data: {\n            id: crypto.randomUUID(),\n            trainerId: data.trainerId,\n            clientId: data.clientId,\n            trainerClientId: data.trainerClientId ?? null,\n            amount: data.amount,\n            currency: data.currency,\n            type: data.type,\n            status: 'PENDING',\n            method: 'MOLLIE',\n            molliePaymentId: data.molliePaymentId,\n            mollieCustomerId: data.mollieCustomerId ?? null,\n            description: data.description,\n            ...data.sessionDate ? {\n                sessionDate: data.sessionDate\n            } : {},\n            packageId: data.packageId ?? null,\n            metadata: data.metadata\n        }\n    });\n    console.log('Payment record created:', {\n        paymentId: payment.id,\n        molliePaymentId: data.molliePaymentId,\n        amount: data.amount,\n        currency: data.currency\n    });\n    return payment;\n}\n/**\n * Update payment status from Mollie webhook\n */ async function updatePaymentFromMollie(molliePaymentId, updates) {\n    const payment = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.findFirst({\n        where: {\n            molliePaymentId\n        }\n    });\n    if (!payment) {\n        throw new Error(`Payment not found for Mollie ID: ${molliePaymentId}`);\n    }\n    const updatedPayment = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.update({\n        where: {\n            id: payment.id\n        },\n        data: {\n            status: updates.status,\n            ...updates.paymentDate ? {\n                paymentDate: updates.paymentDate\n            } : {},\n            ...updates.failureReason ? {\n                failureReason: updates.failureReason\n            } : {},\n            ...typeof updates.trainerEarnings === 'number' ? {\n                trainerEarnings: updates.trainerEarnings\n            } : {},\n            ...typeof updates.platformFee === 'number' ? {\n                platformFee: updates.platformFee\n            } : {}\n        }\n    });\n    // Update trainer earnings if payment completed\n    if (updates.status === 'COMPLETED' && updates.trainerEarnings) {\n        await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_profiles.update({\n            where: {\n                id: payment.trainerId\n            },\n            data: {\n                totalEarnings: {\n                    increment: updates.trainerEarnings\n                },\n                monthlyEarnings: {\n                    increment: updates.trainerEarnings\n                }\n            }\n        });\n    }\n    console.log('Payment updated from Mollie:', {\n        paymentId: payment.id,\n        molliePaymentId,\n        status: updates.status\n    });\n    return updatedPayment;\n}\n/**\n * Create Mollie customer record\n */ async function createMollieCustomer(userId, mollieCustomerId) {\n    // Update user record with Mollie customer ID\n    const user = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.findUnique({\n        where: {\n            id: userId\n        }\n    });\n    if (!user) {\n        throw new Error('User not found');\n    }\n    // Store Mollie customer ID in user metadata or separate field\n    // For now, we'll use the payment records to track this\n    console.log('Mollie customer created for user:', userId, mollieCustomerId);\n    return {\n        userId,\n        mollieCustomerId\n    };\n}\n/**\n * Get payment by Mollie payment ID\n */ async function getPaymentByMollieId(molliePaymentId) {\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.findFirst({\n        where: {\n            molliePaymentId\n        },\n        include: {\n            trainer_profiles: {\n                include: {\n                    user: {\n                        select: {\n                            id: true,\n                            name: true,\n                            email: true\n                        }\n                    }\n                }\n            },\n            users: {\n                select: {\n                    id: true,\n                    name: true,\n                    email: true\n                }\n            }\n        }\n    });\n}\n/**\n * Process refund through Mollie\n */ async function processRefund(paymentId, refundAmount, reason) {\n    const payment = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.findUnique({\n        where: {\n            id: paymentId\n        }\n    });\n    if (!payment) {\n        throw new Error('Payment not found');\n    }\n    if (!payment.molliePaymentId) {\n        throw new Error('No Mollie payment ID found');\n    }\n    // Update payment record with refund\n    const updatedPayment = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.update({\n        where: {\n            id: paymentId\n        },\n        data: {\n            refundAmount,\n            status: refundAmount >= payment.amount ? 'REFUNDED' : 'PARTIALLY_REFUNDED',\n            metadata: {\n                ...payment.metadata,\n                refundReason: reason,\n                refundDate: new Date()\n            }\n        }\n    });\n    // Update trainer earnings\n    if (payment.trainerEarnings && refundAmount > 0) {\n        const refundFromEarnings = Math.min(refundAmount, payment.trainerEarnings);\n        await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_profiles.update({\n            where: {\n                id: payment.trainerId\n            },\n            data: {\n                totalEarnings: {\n                    decrement: refundFromEarnings\n                },\n                monthlyEarnings: {\n                    decrement: refundFromEarnings\n                }\n            }\n        });\n    }\n    console.log('Refund processed:', {\n        paymentId,\n        refundAmount,\n        reason\n    });\n    return updatedPayment;\n}\n/**\n * Get trainer payment analytics\n */ async function getTrainerPaymentAnalytics(trainerId, period = 'month') {\n    const now = new Date();\n    let startDate;\n    switch(period){\n        case 'week':\n            startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n            break;\n        case 'year':\n            startDate = new Date(now.getFullYear(), 0, 1);\n            break;\n        default:\n            startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n    }\n    const [payments, paymentsByType, paymentsByStatus] = await Promise.all([\n        // Total earnings\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.aggregate({\n            where: {\n                trainerId,\n                paymentDate: {\n                    gte: startDate\n                },\n                status: 'COMPLETED'\n            },\n            _sum: {\n                amount: true,\n                trainerEarnings: true,\n                platformFee: true\n            },\n            _count: true\n        }),\n        // Payments by type\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.groupBy({\n            by: [\n                'type'\n            ],\n            where: {\n                trainerId,\n                paymentDate: {\n                    gte: startDate\n                }\n            },\n            _sum: {\n                amount: true\n            },\n            _count: true\n        }),\n        // Payments by status\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.groupBy({\n            by: [\n                'status'\n            ],\n            where: {\n                trainerId,\n                paymentDate: {\n                    gte: startDate\n                }\n            },\n            _count: true\n        })\n    ]);\n    return {\n        totalAmount: payments._sum.amount || 0,\n        trainerEarnings: payments._sum.trainerEarnings || 0,\n        platformFee: payments._sum.platformFee || 0,\n        transactionCount: payments._count,\n        paymentsByType,\n        paymentsByStatus,\n        period\n    };\n}\n// ============================================================================\n// PREMIUM TEAMS MANAGEMENT\n// ============================================================================\n/**\n * Create premium team with validation\n */ async function createPremiumTeam(data) {\n    // Validate owner is a trainer\n    const owner = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.findUnique({\n        where: {\n            id: data.ownerId\n        },\n        select: {\n            role: true\n        }\n    });\n    if (!owner || owner.role !== 'TRAINER') {\n        throw new Error('Only trainers can create premium teams');\n    }\n    const team = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_communities.create({\n        data: {\n            id: crypto.randomUUID(),\n            name: data.name,\n            description: data.description,\n            ownerId: data.ownerId,\n            price: data.price,\n            currency: data.currency,\n            billingCycle: data.billingCycle,\n            maxMembers: data.maxMembers ?? null,\n            category: data.category,\n            tags: data.tags || [],\n            features: data.features || [],\n            rules: data.rules ?? null,\n            isPublic: data.isPublic ?? false,\n            requireApproval: data.requireApproval ?? true,\n            trialPeriodDays: data.trialPeriodDays ?? 0,\n            coverImage: data.coverImage ?? null,\n            currentMembers: 0\n        },\n        include: {\n            users: {\n                select: {\n                    id: true,\n                    name: true,\n                    image: true,\n                    trainerVerified: true\n                }\n            }\n        }\n    });\n    console.log('Premium team created:', {\n        teamId: team.id,\n        name: team.name,\n        ownerId: data.ownerId\n    });\n    return team;\n}\n/**\n * Get teams with filtering and pagination\n */ async function getTeams(params) {\n    const page = params.page || 1;\n    const limit = params.limit || 20;\n    const skip = (page - 1) * limit;\n    const where = {\n        isActive: true,\n        ...params.ownerId && {\n            ownerId: params.ownerId\n        },\n        ...params.category && {\n            category: params.category\n        },\n        ...params.isPublic !== undefined && {\n            isPublic: params.isPublic\n        },\n        ...params.search && {\n            OR: [\n                {\n                    name: {\n                        contains: params.search,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    description: {\n                        contains: params.search,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    tags: {\n                        has: params.search\n                    }\n                }\n            ]\n        }\n    };\n    const [teams, total] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_communities.findMany({\n            where,\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        image: true,\n                        trainerVerified: true\n                    }\n                },\n                _count: {\n                    select: {\n                        premium_memberships: {\n                            where: {\n                                status: 'ACTIVE'\n                            }\n                        }\n                    }\n                },\n                ...params.userId && {\n                    premium_memberships: {\n                        where: {\n                            userId: params.userId\n                        },\n                        select: {\n                            status: true,\n                            startDate: true,\n                            endDate: true,\n                            isTrialActive: true\n                        }\n                    }\n                }\n            },\n            orderBy: [\n                {\n                    currentMembers: 'desc'\n                },\n                {\n                    createdAt: 'desc'\n                }\n            ],\n            skip,\n            take: limit\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_communities.count({\n            where\n        })\n    ]);\n    return {\n        teams: teams.map((team)=>({\n                ...team,\n                userMembership: team.premium_memberships?.[0] || null\n            })),\n        pagination: {\n            page,\n            limit,\n            total,\n            totalPages: Math.ceil(total / limit)\n        }\n    };\n}\n/**\n * Join premium team\n */ async function joinPremiumTeam(teamId, userId, paymentId) {\n    // Get team details\n    const team = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_communities.findUnique({\n        where: {\n            id: teamId\n        },\n        select: {\n            id: true,\n            maxMembers: true,\n            currentMembers: true,\n            isActive: true,\n            requireApproval: true,\n            trialPeriodDays: true,\n            price: true\n        }\n    });\n    if (!team) {\n        throw new Error('Team not found');\n    }\n    if (!team.isActive) {\n        throw new Error('Team is not active');\n    }\n    // Check member limits\n    if (team.maxMembers && team.currentMembers >= team.maxMembers) {\n        throw new Error('Team is full');\n    }\n    // Check existing membership\n    const existingMembership = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.findUnique({\n        where: {\n            communityId_userId: {\n                communityId: teamId,\n                userId\n            }\n        }\n    });\n    if (existingMembership && existingMembership.status === 'ACTIVE') {\n        throw new Error('Already a team member');\n    }\n    // Determine membership status and dates\n    const now = new Date();\n    let status = 'ACTIVE';\n    let endDate;\n    let isTrialActive = false;\n    let trialEndsAt;\n    if (team.price > 0 && !paymentId) {\n        status = 'SUSPENDED';\n    } else if (team.requireApproval) {\n        status = 'SUSPENDED';\n    } else if (team.trialPeriodDays > 0) {\n        isTrialActive = true;\n        trialEndsAt = new Date(now.getTime() + team.trialPeriodDays * 24 * 60 * 60 * 1000);\n        endDate = trialEndsAt;\n        status = 'TRIAL';\n    }\n    // Create or update membership\n    const membership = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.upsert({\n        where: {\n            communityId_userId: {\n                communityId: teamId,\n                userId\n            }\n        },\n        update: {\n            status,\n            startDate: now,\n            endDate: endDate ?? null,\n            isTrialActive,\n            trialEndsAt: trialEndsAt ?? null,\n            ...paymentId ? {\n                paymentId\n            } : {},\n            cancelledAt: null,\n            cancellationReason: null\n        },\n        create: {\n            communityId: teamId,\n            userId,\n            status,\n            startDate: now,\n            endDate: endDate ?? null,\n            isTrialActive,\n            trialEndsAt: trialEndsAt ?? null,\n            ...paymentId ? {\n                paymentId\n            } : {}\n        }\n    });\n    // Update team member count if membership is active\n    if (status === 'ACTIVE') {\n        await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_communities.update({\n            where: {\n                id: teamId\n            },\n            data: {\n                currentMembers: {\n                    increment: 1\n                }\n            }\n        });\n    }\n    console.log('User joined premium team:', {\n        teamId,\n        userId,\n        membershipId: membership.id,\n        status\n    });\n    return membership;\n}\n/**\n * Leave premium team\n */ async function leavePremiumTeam(teamId, userId, reason) {\n    const membership = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.findUnique({\n        where: {\n            communityId_userId: {\n                communityId: teamId,\n                userId\n            }\n        }\n    });\n    if (!membership) {\n        throw new Error('Not a team member');\n    }\n    if (membership.status !== 'ACTIVE') {\n        throw new Error('Membership not active');\n    }\n    // Cancel membership\n    const updatedMembership = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.update({\n        where: {\n            id: membership.id\n        },\n        data: {\n            status: 'CANCELLED',\n            cancelledAt: new Date(),\n            cancellationReason: reason || 'User requested cancellation'\n        }\n    });\n    // Update team member count\n    await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_communities.update({\n        where: {\n            id: teamId\n        },\n        data: {\n            currentMembers: {\n                decrement: 1\n            }\n        }\n    });\n    console.log('User left premium team:', {\n        teamId,\n        userId,\n        membershipId: membership.id\n    });\n    return updatedMembership;\n}\n/**\n * Get team membership details\n */ async function getTeamMembership(teamId, userId) {\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.findUnique({\n        where: {\n            communityId_userId: {\n                communityId: teamId,\n                userId\n            }\n        },\n        include: {\n            premium_communities: {\n                select: {\n                    id: true,\n                    name: true,\n                    ownerId: true\n                }\n            },\n            users: {\n                select: {\n                    id: true,\n                    name: true,\n                    image: true\n                }\n            }\n        }\n    });\n}\n/**\n * Get team members with pagination\n */ async function getTeamMembers(teamId, params) {\n    const page = params.page || 1;\n    const limit = params.limit || 20;\n    const skip = (page - 1) * limit;\n    const where = {\n        communityId: teamId,\n        ...params.status && {\n            status: params.status\n        }\n    };\n    const [members, total] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.findMany({\n            where,\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        image: true,\n                        email: true\n                    }\n                }\n            },\n            orderBy: {\n                startDate: 'desc'\n            },\n            skip,\n            take: limit\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.count({\n            where\n        })\n    ]);\n    return {\n        members,\n        pagination: {\n            page,\n            limit,\n            total,\n            totalPages: Math.ceil(total / limit)\n        }\n    };\n}\n/**\n * Approve team membership\n */ async function approveTeamMembership(membershipId, approverId) {\n    const membership = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.findUnique({\n        where: {\n            id: membershipId\n        },\n        include: {\n            premium_communities: {\n                select: {\n                    ownerId: true,\n                    maxMembers: true,\n                    currentMembers: true\n                }\n            }\n        }\n    });\n    if (!membership) {\n        throw new Error('Membership not found');\n    }\n    if (membership.premium_communities.ownerId !== approverId) {\n        throw new Error('Only team owner can approve memberships');\n    }\n    if (membership.status !== 'SUSPENDED') {\n        throw new Error('Membership not pending approval');\n    }\n    // Check member limits\n    if (membership.premium_communities.maxMembers && membership.premium_communities.currentMembers >= membership.premium_communities.maxMembers) {\n        throw new Error('Team is full');\n    }\n    // Approve membership\n    const updatedMembership = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.update({\n        where: {\n            id: membershipId\n        },\n        data: {\n            status: 'ACTIVE',\n            startDate: new Date()\n        }\n    });\n    // Update team member count\n    await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_communities.update({\n        where: {\n            id: membership.communityId\n        },\n        data: {\n            currentMembers: {\n                increment: 1\n            }\n        }\n    });\n    console.log('Team membership approved:', {\n        membershipId,\n        teamId: membership.communityId,\n        userId: membership.userId,\n        approverId\n    });\n    return updatedMembership;\n}\n/**\n * Get team analytics for owner\n */ async function getTeamAnalytics(teamId, ownerId) {\n    // Verify ownership\n    const team = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_communities.findUnique({\n        where: {\n            id: teamId\n        },\n        select: {\n            ownerId: true\n        }\n    });\n    if (!team || team.ownerId !== ownerId) {\n        throw new Error('Access denied - team owner only');\n    }\n    const [memberStats, revenueStats, membershipTrends] = await Promise.all([\n        // Member statistics\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.groupBy({\n            by: [\n                'status'\n            ],\n            where: {\n                communityId: teamId\n            },\n            _count: true\n        }),\n        // Revenue statistics (simplified)\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.aggregate({\n            where: {\n                metadata: {\n                    path: [\n                        'teamId'\n                    ],\n                    equals: teamId\n                },\n                status: 'COMPLETED'\n            },\n            _sum: {\n                amount: true,\n                trainerEarnings: true\n            },\n            _count: true\n        }),\n        // Membership trends (last 30 days)\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.findMany({\n            where: {\n                communityId: teamId,\n                startDate: {\n                    gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)\n                }\n            },\n            select: {\n                startDate: true,\n                status: true\n            },\n            orderBy: {\n                startDate: 'asc'\n            }\n        })\n    ]);\n    return {\n        memberStats: memberStats.reduce((acc, stat)=>{\n            acc[stat.status] = stat._count;\n            return acc;\n        }, {}),\n        revenue: {\n            totalRevenue: revenueStats._sum.amount || 0,\n            trainerEarnings: revenueStats._sum.trainerEarnings || 0,\n            totalPayments: revenueStats._count\n        },\n        trends: {\n            recentJoins: membershipTrends.length,\n            dailyJoins: membershipTrends.reduce((acc, membership)=>{\n                const date = membership.startDate.toISOString().split('T')[0];\n                acc[date] = (acc[date] || 0) + 1;\n                return acc;\n            }, {})\n        }\n    };\n}\n// ============================================================================\n// CHALLENGES & COMPETITIONS\n// ============================================================================\n/**\n * Create challenge with validation\n */ async function createChallenge(data) {\n    const challenge = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenges.create({\n        data: {\n            id: crypto.randomUUID(),\n            title: data.title,\n            description: data.description,\n            creatorId: data.creatorId,\n            type: data.type,\n            category: data.category,\n            difficulty: data.difficulty,\n            startDate: data.startDate,\n            endDate: data.endDate,\n            isPublic: data.isPublic ?? true,\n            maxParticipants: data.maxParticipants ?? null,\n            entryFee: data.entryFee ?? 0,\n            currency: data.currency ?? 'EUR',\n            prizePool: data.prizePool ?? 0,\n            rules: data.rules ?? null,\n            metrics: data.metrics ?? {},\n            rewards: data.rewards ?? [],\n            coverImage: data.coverImage ?? null,\n            tags: data.tags ?? [],\n            status: 'UPCOMING'\n        },\n        include: {\n            users: {\n                select: {\n                    id: true,\n                    name: true,\n                    image: true,\n                    trainerVerified: true\n                }\n            }\n        }\n    });\n    console.log('Challenge created:', {\n        challengeId: challenge.id,\n        title: challenge.title,\n        creatorId: data.creatorId\n    });\n    return challenge;\n}\n/**\n * Get challenges with filtering\n */ async function getChallenges(params) {\n    const page = params.page || 1;\n    const limit = params.limit || 20;\n    const skip = (page - 1) * limit;\n    const where = {\n        ...params.creatorId && {\n            creatorId: params.creatorId\n        },\n        ...params.category && {\n            category: params.category\n        },\n        ...params.difficulty && {\n            difficulty: params.difficulty\n        },\n        ...params.status && {\n            status: params.status\n        },\n        ...params.type && {\n            type: params.type\n        },\n        ...params.isPublic !== undefined && {\n            isPublic: params.isPublic\n        },\n        ...params.search && {\n            OR: [\n                {\n                    title: {\n                        contains: params.search,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    description: {\n                        contains: params.search,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    tags: {\n                        has: params.search\n                    }\n                }\n            ]\n        }\n    };\n    const [challenges, total] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenges.findMany({\n            where,\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        image: true,\n                        trainerVerified: true\n                    }\n                },\n                _count: {\n                    select: {\n                        challenge_participants: {\n                            where: {\n                                status: 'REGISTERED'\n                            }\n                        }\n                    }\n                },\n                ...params.userId && {\n                    challenge_participants: {\n                        where: {\n                            userId: params.userId\n                        },\n                        select: {\n                            status: true,\n                            joinedAt: true,\n                            rank: true\n                        }\n                    }\n                }\n            },\n            orderBy: [\n                {\n                    status: 'asc'\n                },\n                {\n                    startDate: 'asc'\n                },\n                {\n                    createdAt: 'desc'\n                }\n            ],\n            skip,\n            take: limit\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenges.count({\n            where\n        })\n    ]);\n    return {\n        challenges: challenges.map((challenge)=>({\n                ...challenge,\n                userParticipation: challenge.participants?.[0] || null\n            })),\n        pagination: {\n            page,\n            limit,\n            total,\n            totalPages: Math.ceil(total / limit)\n        }\n    };\n}\n/**\n * Join challenge\n */ async function joinChallenge(challengeId, userId, paymentId) {\n    // Get challenge details\n    const challenge = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenges.findUnique({\n        where: {\n            id: challengeId\n        },\n        select: {\n            id: true,\n            status: true,\n            maxParticipants: true,\n            currentParticipants: true,\n            entryFee: true\n        }\n    });\n    if (!challenge) {\n        throw new Error('Challenge not found');\n    }\n    if (challenge.status !== 'UPCOMING') {\n        throw new Error('Challenge is not accepting new participants');\n    }\n    // Check participant limits\n    if (challenge.maxParticipants && challenge.currentParticipants >= challenge.maxParticipants) {\n        throw new Error('Challenge is full');\n    }\n    // Check existing participation\n    const existingParticipation = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_participants.findUnique({\n        where: {\n            challengeId_userId: {\n                challengeId,\n                userId\n            }\n        }\n    });\n    if (existingParticipation) {\n        throw new Error('Already participating in this challenge');\n    }\n    // Determine status based on entry fee\n    const status = challenge.entryFee && challenge.entryFee > 0 && !paymentId ? 'PENDING_PAYMENT' : 'REGISTERED';\n    // Create participation\n    const participation = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_participants.create({\n        data: {\n            id: crypto.randomUUID(),\n            challengeId,\n            userId,\n            status: status,\n            paymentId: paymentId ?? null,\n            currentProgress: {}\n        }\n    });\n    // Update challenge participant count if registered\n    if (status === 'REGISTERED') {\n        await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenges.update({\n            where: {\n                id: challengeId\n            },\n            data: {\n                currentParticipants: {\n                    increment: 1\n                }\n            }\n        });\n    }\n    console.log('User joined challenge:', {\n        challengeId,\n        userId,\n        participationId: participation.id,\n        status\n    });\n    return participation;\n}\n/**\n * Leave challenge\n */ async function leaveChallenge(challengeId, userId) {\n    const participation = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_participants.findUnique({\n        where: {\n            challengeId_userId: {\n                challengeId,\n                userId\n            }\n        },\n        include: {\n            challenges: {\n                select: {\n                    status: true\n                }\n            }\n        }\n    });\n    if (!participation) {\n        throw new Error('Not participating in this challenge');\n    }\n    if (participation.challenges.status === 'ACTIVE') {\n        throw new Error('Cannot leave active challenge');\n    }\n    if (participation.challenges.status === 'COMPLETED') {\n        throw new Error('Cannot leave completed challenge');\n    }\n    // Remove participation\n    await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_participants.delete({\n        where: {\n            id: participation.id\n        }\n    });\n    // Update challenge participant count\n    if (participation.status === 'REGISTERED') {\n        await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenges.update({\n            where: {\n                id: challengeId\n            },\n            data: {\n                currentParticipants: {\n                    decrement: 1\n                }\n            }\n        });\n    }\n    console.log('User left challenge:', {\n        challengeId,\n        userId,\n        participationId: participation.id\n    });\n    return {\n        success: true\n    };\n}\n/**\n * Update challenge progress\n */ async function updateChallengeProgress(challengeId, userId, data) {\n    // Get participation\n    const participation = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_participants.findUnique({\n        where: {\n            challengeId_userId: {\n                challengeId,\n                userId\n            }\n        }\n    });\n    if (!participation) {\n        throw new Error('Not participating in this challenge');\n    }\n    if (participation.status !== 'REGISTERED') {\n        throw new Error('Must be registered to update progress');\n    }\n    // Create progress entry\n    const progressEntry = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_progress.create({\n        data: {\n            id: crypto.randomUUID(),\n            participantId: participation.id,\n            date: data.date,\n            metrics: data.metrics,\n            notes: data.notes ?? null,\n            proofImages: data.proofImages || [],\n            isVerified: false\n        }\n    });\n    // Update aggregated progress\n    const allProgress = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_progress.findMany({\n        where: {\n            participantId: participation.id\n        },\n        orderBy: {\n            date: 'asc'\n        }\n    });\n    const aggregatedProgress = calculateProgressAggregation(allProgress);\n    await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_participants.update({\n        where: {\n            id: participation.id\n        },\n        data: {\n            currentProgress: aggregatedProgress,\n            updatedAt: new Date()\n        }\n    });\n    console.log('Challenge progress updated:', {\n        challengeId,\n        userId,\n        progressId: progressEntry.id\n    });\n    return {\n        progressEntry,\n        aggregatedProgress\n    };\n}\n/**\n * Get challenge leaderboard\n */ async function getChallengeLeaderboard(challengeId, params) {\n    const page = params.page || 1;\n    const limit = params.limit || 50;\n    const skip = (page - 1) * limit;\n    const [leaderboard, total] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_leaderboard.findMany({\n            where: {\n                challengeId\n            },\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        image: true\n                    }\n                }\n            },\n            orderBy: {\n                rank: 'asc'\n            },\n            skip,\n            take: limit\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_leaderboard.count({\n            where: {\n                challengeId\n            }\n        })\n    ]);\n    return {\n        leaderboard,\n        pagination: {\n            page,\n            limit,\n            total,\n            totalPages: Math.ceil(total / limit)\n        }\n    };\n}\n/**\n * Calculate progress aggregation\n */ function calculateProgressAggregation(progressEntries) {\n    const aggregated = {};\n    progressEntries.forEach((entry)=>{\n        if (entry.metrics && typeof entry.metrics === 'object') {\n            Object.keys(entry.metrics).forEach((metric)=>{\n                if (!aggregated[metric]) {\n                    aggregated[metric] = {\n                        total: 0,\n                        count: 0,\n                        latest: 0\n                    };\n                }\n                const value = parseFloat(entry.metrics[metric]) || 0;\n                aggregated[metric].total += value;\n                aggregated[metric].count += 1;\n                aggregated[metric].latest = value;\n            });\n        }\n    });\n    // Calculate averages\n    Object.keys(aggregated).forEach((metric)=>{\n        if (aggregated[metric].count > 0) {\n            aggregated[metric].average = aggregated[metric].total / aggregated[metric].count;\n        }\n    });\n    return aggregated;\n}\n// ============================================================================\n// PRIVACY-CONTROLLED LEADERBOARDS\n// ============================================================================\n/**\n * Get privacy-controlled leaderboard data\n */ async function getPrivacyControlledLeaderboard(params) {\n    const page = params.page || 1;\n    const limit = Math.min(params.limit || 50, 100);\n    const skip = (page - 1) * limit;\n    // Calculate timeframe dates\n    const timeframeDates = calculateTimeframeRange(params.timeframe || 'all_time');\n    let leaderboardData = [];\n    let total = 0;\n    switch(params.type){\n        case 'workout':\n            ({ leaderboardData, total } = await buildWorkoutLeaderboard({\n                category: params.category,\n                timeframe: timeframeDates,\n                metric: params.metric || 'total_volume',\n                skip,\n                limit,\n                userId: params.userId\n            }));\n            break;\n        case 'challenge':\n            ({ leaderboardData, total } = await buildChallengeLeaderboard({\n                timeframe: timeframeDates,\n                skip,\n                limit,\n                userId: params.userId\n            }));\n            break;\n        case 'team':\n            ({ leaderboardData, total } = await buildTeamLeaderboard({\n                timeframe: timeframeDates,\n                skip,\n                limit,\n                userId: params.userId\n            }));\n            break;\n        default:\n            // Default to workout leaderboard for global\n            ({ leaderboardData, total } = await buildWorkoutLeaderboard({\n                category: null,\n                timeframe: timeframeDates,\n                metric: params.metric || 'total_volume',\n                skip,\n                limit,\n                userId: params.userId\n            }));\n    }\n    // Apply privacy controls\n    const processedLeaderboard = leaderboardData.map((entry, index)=>applyLeaderboardPrivacyControls(entry, params.userId, skip + index + 1, params.includeAnonymous)).filter((entry)=>entry !== null);\n    return {\n        leaderboard: processedLeaderboard,\n        pagination: {\n            page,\n            limit,\n            total,\n            totalPages: Math.ceil(total / limit)\n        }\n    };\n}\n/**\n * Update user privacy settings\n */ async function updateUserPrivacySettings(userId, settings) {\n    // Model no longer stores privacy settings on User. Simulate update by returning merged object.\n    const updatedUser = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.findUnique({\n        where: {\n            id: userId\n        },\n        select: {\n            id: true\n        }\n    });\n    const updatedSettings = {\n        ...settings,\n        lastUpdated: new Date().toISOString()\n    };\n    return {\n        id: updatedUser?.id || userId,\n        privacySettings: updatedSettings\n    };\n}\n/**\n * Get user's privacy settings\n */ async function getUserPrivacySettings(userId) {\n    const user = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.findUnique({\n        where: {\n            id: userId\n        },\n        select: {\n            id: true\n        }\n    });\n    if (!user) {\n        throw new Error('User not found');\n    }\n    // Default privacy settings\n    const defaultSettings = {\n        allowLeaderboards: true,\n        allowPublicProfile: true,\n        allowWorkoutSharing: true,\n        allowChallengeParticipation: true,\n        allowTeamVisibility: true,\n        leaderboardVisibilityLevel: 'public',\n        profileVisibilityLevel: 'public',\n        workoutDataVisibility: 'summary',\n        showRealName: true,\n        showProfileImage: true,\n        showLocation: false,\n        showPersonalRecords: true,\n        allowDirectMessages: true\n    };\n    return defaultSettings;\n}\n/**\n * Build workout leaderboard\n */ async function buildWorkoutLeaderboard(params) {\n    const { category, timeframe, metric, skip, limit } = params;\n    const whereClause = {\n        isComplete: true,\n        ...timeframe.start && {\n            startTime: {\n                gte: timeframe.start,\n                lte: timeframe.end\n            }\n        },\n        ...category && {\n            entries: {\n                some: {\n                    exercise: {\n                        category: category\n                    }\n                }\n            }\n        }\n    };\n    const workoutStats = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.workout_sessions.groupBy({\n        by: [\n            'userId'\n        ],\n        where: whereClause,\n        _sum: {\n            totalVolume: true,\n            duration: true\n        },\n        _count: {\n            id: true\n        },\n        _avg: {\n            totalVolume: true,\n            duration: true\n        }\n    });\n    // Sort by metric\n    const sortedStats = workoutStats.sort((a, b)=>{\n        const valueA = getLeaderboardMetricValue(a, metric);\n        const valueB = getLeaderboardMetricValue(b, metric);\n        return valueB - valueA;\n    });\n    const total = sortedStats.length;\n    const paginatedStats = sortedStats.slice(skip, skip + limit);\n    // Get user details\n    const userIds = paginatedStats.map((stat)=>stat.userId);\n    const users = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.findMany({\n        where: {\n            id: {\n                in: userIds\n            }\n        },\n        select: {\n            id: true,\n            name: true,\n            image: true\n        }\n    });\n    const userMap = users.reduce((acc, user)=>{\n        acc[user.id] = user;\n        return acc;\n    }, {});\n    const leaderboardData = paginatedStats.map((stat, index)=>({\n            userId: stat.userId,\n            user: userMap[stat.userId],\n            rank: skip + index + 1,\n            score: getLeaderboardMetricValue(stat, metric),\n            metrics: {\n                totalVolume: stat._sum.totalVolume || 0,\n                totalWorkouts: stat._count.id,\n                avgVolume: stat._avg.totalVolume || 0,\n                totalDuration: stat._sum.duration || 0,\n                avgDuration: stat._avg.duration || 0\n            },\n            type: 'workout'\n        }));\n    return {\n        leaderboardData,\n        total\n    };\n}\n/**\n * Build challenge leaderboard\n */ async function buildChallengeLeaderboard(params) {\n    const { timeframe, skip, limit } = params;\n    const whereClause = {\n        ...timeframe.start && {\n            lastUpdated: {\n                gte: timeframe.start,\n                lte: timeframe.end\n            }\n        }\n    };\n    const challengeStats = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_leaderboard.groupBy({\n        by: [\n            'userId'\n        ],\n        where: whereClause,\n        _sum: {\n            score: true\n        },\n        _count: {\n            id: true\n        },\n        _avg: {\n            score: true,\n            rank: true\n        }\n    });\n    const sortedStats = challengeStats.sort((a, b)=>(b._sum.score || 0) - (a._sum.score || 0));\n    const total = sortedStats.length;\n    const paginatedStats = sortedStats.slice(skip, skip + limit);\n    const userIds = paginatedStats.map((stat)=>stat.userId);\n    const users = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.findMany({\n        where: {\n            id: {\n                in: userIds\n            }\n        },\n        select: {\n            id: true,\n            name: true,\n            image: true\n        }\n    });\n    const userMap = users.reduce((acc, user)=>{\n        acc[user.id] = user;\n        return acc;\n    }, {});\n    const leaderboardData = paginatedStats.map((stat, index)=>({\n            userId: stat.userId,\n            user: userMap[stat.userId],\n            rank: skip + index + 1,\n            score: stat._sum.score || 0,\n            metrics: {\n                totalChallengeScore: stat._sum.score || 0,\n                challengesParticipated: stat._count.id,\n                avgScore: stat._avg.score || 0,\n                avgRank: stat._avg.rank || 0\n            },\n            type: 'challenge'\n        }));\n    return {\n        leaderboardData,\n        total\n    };\n}\n/**\n * Build team leaderboard\n */ async function buildTeamLeaderboard(params) {\n    const { timeframe, skip, limit } = params;\n    const teamStats = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_communities.findMany({\n        where: {\n            isActive: true,\n            ...timeframe.start && {\n                createdAt: {\n                    gte: timeframe.start,\n                    lte: timeframe.end\n                }\n            }\n        },\n        select: {\n            ownerId: true,\n            currentMembers: true,\n            name: true\n        }\n    });\n    // Aggregate by owner\n    const ownerStats = teamStats.reduce((acc, team)=>{\n        if (!acc[team.ownerId]) {\n            acc[team.ownerId] = {\n                userId: team.ownerId,\n                totalMembers: 0,\n                teamsCreated: 0\n            };\n        }\n        acc[team.ownerId].totalMembers += team.currentMembers;\n        acc[team.ownerId].teamsCreated += 1;\n        return acc;\n    }, {});\n    const sortedStats = Object.values(ownerStats).sort((a, b)=>b.totalMembers - a.totalMembers);\n    const total = sortedStats.length;\n    const paginatedStats = sortedStats.slice(skip, skip + limit);\n    const userIds = paginatedStats.map((stat)=>stat.userId);\n    const users = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.findMany({\n        where: {\n            id: {\n                in: userIds\n            }\n        },\n        select: {\n            id: true,\n            name: true,\n            image: true\n        }\n    });\n    const userMap = users.reduce((acc, user)=>{\n        acc[user.id] = user;\n        return acc;\n    }, {});\n    const leaderboardData = paginatedStats.map((stat, index)=>({\n            userId: stat.userId,\n            user: userMap[stat.userId],\n            rank: skip + index + 1,\n            score: stat.totalMembers,\n            metrics: {\n                totalMembers: stat.totalMembers,\n                teamsCreated: stat.teamsCreated,\n                avgMembersPerTeam: stat.totalMembers / stat.teamsCreated\n            },\n            type: 'team'\n        }));\n    return {\n        leaderboardData,\n        total\n    };\n}\n/**\n * Apply privacy controls to leaderboard entry\n */ function applyLeaderboardPrivacyControls(entry, currentUserId, position, includeAnonymous) {\n    const isOwnEntry = entry.userId === currentUserId;\n    const user = entry.user;\n    if (!user) return null;\n    // Check user privacy settings\n    const privacySettings = user.privacySettings || {};\n    const allowLeaderboards = privacySettings.allowLeaderboards !== false;\n    const allowPublicProfile = privacySettings.allowPublicProfile !== false;\n    // If user doesn't allow leaderboards and it's not their own entry, hide completely\n    if (!allowLeaderboards && !isOwnEntry && !includeAnonymous) {\n        return null;\n    }\n    // If user doesn't allow public profile, anonymize\n    if (!allowPublicProfile && !isOwnEntry) {\n        return {\n            ...entry,\n            user: {\n                id: 'anonymous',\n                name: `User #${position}`,\n                image: null,\n                isAnonymized: true\n            },\n            isAnonymized: true\n        };\n    }\n    // Show normal entry\n    return {\n        ...entry,\n        isCurrentUser: isOwnEntry,\n        isAnonymized: false\n    };\n}\n/**\n * Calculate timeframe range\n */ function calculateTimeframeRange(timeframe) {\n    const now = new Date();\n    switch(timeframe){\n        case 'daily':\n            return {\n                start: new Date(now.getFullYear(), now.getMonth(), now.getDate()),\n                end: new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1)\n            };\n        case 'weekly':\n            const weekStart = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n            return {\n                start: weekStart,\n                end: now\n            };\n        case 'monthly':\n            const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n            return {\n                start: monthStart,\n                end: now\n            };\n        case 'yearly':\n            const yearStart = new Date(now.getFullYear(), 0, 1);\n            return {\n                start: yearStart,\n                end: now\n            };\n        default:\n            return {\n                start: null,\n                end: null\n            };\n    }\n}\n/**\n * Get metric value for leaderboard sorting\n */ function getLeaderboardMetricValue(stat, metric) {\n    switch(metric){\n        case 'total_volume':\n            return stat._sum.totalVolume || 0;\n        case 'total_workouts':\n            return stat._count.id;\n        case 'avg_volume':\n            return stat._avg.totalVolume || 0;\n        case 'total_duration':\n            return stat._sum.duration || 0;\n        default:\n            return stat._sum.totalVolume || 0;\n    }\n} // Note: named exports are declared inline above; avoid re-export block to prevent duplicate symbol errors\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvY29yZS9kYXRhYmFzZS9zYWZldHktYnVzaW5lc3MtcXVlcmllcy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsOEJBQThCO0FBRTlCOzs7Q0FHQyxHQUVpQztBQUVsQyxnRUFBZ0U7QUFDekQsTUFBTUMsV0FBVztJQUN0QkMsUUFBUTtJQUNSQyxTQUFTO0lBQ1RDLE9BQU87QUFDVCxFQUFXO0FBRUosTUFBTUMsYUFBYTtJQUN4QkMsUUFBUTtJQUNSQyxXQUFXO0lBQ1hDLFFBQVE7QUFDVixFQUFXO0FBRUosTUFBTUMsZ0JBQWdCO0lBQzNCQyxZQUFZO0lBQ1pDLGFBQWE7SUFDYkMsUUFBUTtJQUNSQyx1QkFBdUI7SUFDdkJDLE1BQU07SUFDTkMsbUJBQW1CO0FBQ3JCLEVBQVc7QUFFSixNQUFNQyxtQkFBbUI7SUFDOUJDLFVBQVU7SUFDVkMsU0FBUztJQUNUQyxTQUFTO0lBQ1RDLFNBQVM7QUFDWCxFQUFXO0FBRUosTUFBTUMsbUJBQW1CO0lBQzlCQyxRQUFRO0lBQ1JDLGNBQWM7SUFDZEMsUUFBUTtBQUNWLEVBQVc7QUE0RlgsK0VBQStFO0FBQy9FLHNCQUFzQjtBQUN0QiwrRUFBK0U7QUFFL0U7O0NBRUMsR0FDTSxlQUFlQyxxQkFBcUJDLE1BQWM7SUFTdkQsTUFBTUMsT0FBTyxNQUFNM0IsMkNBQU1BLENBQUM0QixLQUFLLENBQUNDLFVBQVUsQ0FBQztRQUN6Q0MsT0FBTztZQUFFQyxJQUFJTDtRQUFPO1FBQ3BCTSxRQUFRO1lBQ05ELElBQUk7WUFDSkUsT0FBTztZQUNQQyxNQUFNO1lBQ05DLE9BQU87WUFDUEMsTUFBTTtZQUNOQyxRQUFRO1lBQ1JDLGlCQUFpQjtZQUNqQkMsY0FBYztZQUNkQyxpQkFBaUI7WUFDakJDLGdCQUFnQjtZQUNoQkMsV0FBVztZQUNYQyxhQUFhO1FBQ2Y7SUFDRjtJQUVBLElBQUksQ0FBQ2hCLE1BQU07UUFD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LEtBQUs1TDtZQUFJO1FBQ3RDLEtBQUs7WUFDSCxNQUFNZ2IsYUFBYSxJQUFJamIsS0FBS0MsSUFBSTZNLFdBQVcsSUFBSTdNLElBQUk4TSxRQUFRLElBQUk7WUFDL0QsT0FBTztnQkFBRW5CLE9BQU9xUDtnQkFBWXBQLEtBQUs1TDtZQUFJO1FBQ3ZDLEtBQUs7WUFDSCxNQUFNaWIsWUFBWSxJQUFJbGIsS0FBS0MsSUFBSTZNLFdBQVcsSUFBSSxHQUFHO1lBQ2pELE9BQU87Z0JBQUVsQixPQUFPc1A7Z0JBQVdyUCxLQUFLNUw7WUFBSTtRQUN0QztZQUNFLE9BQU87Z0JBQUUyTCxPQUFPO2dCQUFNQyxLQUFLO1lBQUs7SUFDcEM7QUFDRjtBQUVBOztDQUVDLEdBQ0QsU0FBU3dOLDBCQUEwQnBHLElBQVMsRUFBRXdELE1BQWM7SUFDMUQsT0FBUUE7UUFDTixLQUFLO1lBQ0gsT0FBT3hELEtBQUs3RixJQUFJLENBQUM2TCxXQUFXLElBQUk7UUFDbEMsS0FBSztZQUNILE9BQU9oRyxLQUFLOU8sTUFBTSxDQUFDM0YsRUFBRTtRQUN2QixLQUFLO1lBQ0gsT0FBT3lVLEtBQUtpRyxJQUFJLENBQUNELFdBQVcsSUFBSTtRQUNsQyxLQUFLO1lBQ0gsT0FBT2hHLEtBQUs3RixJQUFJLENBQUNoQyxRQUFRLElBQUk7UUFDL0I7WUFDRSxPQUFPNkgsS0FBSzdGLElBQUksQ0FBQzZMLFdBQVcsSUFBSTtJQUNwQztBQUNGLEVBRUEsMEdBQTBHIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yc29sZS9Eb2N1bWVudHMvR2l0SHViL21hc3NpbWluby9tYXNzaW1pbm8vc3JjL2NvcmUvZGF0YWJhc2Uvc2FmZXR5LWJ1c2luZXNzLXF1ZXJpZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2xpYi9kYXRhYmFzZS9xdWVyaWVzLnRzXG5cbi8qKlxuICogU2FmZXR5LVJlbGF0ZWQgRGF0YWJhc2UgUXVlcmllcyBmb3IgTWFzc2ltaW5vXG4gKiBPcHRpbWl6ZWQgcXVlcmllcyBmb3IgdXNlciBzYWZldHksIG1vZGVyYXRpb24sIGFuZCBzZWN1cml0eSBvcGVyYXRpb25zXG4gKi9cblxuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSAnLi9jbGllbnQnO1xuXG4vLyBEZWZpbmUgdHlwZXMgbG9jYWxseSBzaW5jZSBQcmlzbWEgY2xpZW50IG1heSBub3QgYmUgYXZhaWxhYmxlXG5leHBvcnQgY29uc3QgVXNlclJvbGUgPSB7XG4gIENMSUVOVDogJ0NMSUVOVCcsXG4gIFRSQUlORVI6ICdUUkFJTkVSJyxcbiAgQURNSU46ICdBRE1JTicsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgVXNlclN0YXR1cyA9IHtcbiAgQUNUSVZFOiAnQUNUSVZFJyxcbiAgU1VTUEVOREVEOiAnU1VTUEVOREVEJyxcbiAgQkFOTkVEOiAnQkFOTkVEJyxcbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCBjb25zdCBWaW9sYXRpb25UeXBlID0ge1xuICBIQVJBU1NNRU5UOiAnSEFSQVNTTUVOVCcsXG4gIEhBVEVfU1BFRUNIOiAnSEFURV9TUEVFQ0gnLFxuICBUSFJFQVQ6ICdUSFJFQVQnLFxuICBJTkFQUFJPUFJJQVRFX0NPTlRFTlQ6ICdJTkFQUFJPUFJJQVRFX0NPTlRFTlQnLFxuICBTUEFNOiAnU1BBTScsXG4gIFBSSVZBQ1lfVklPTEFUSU9OOiAnUFJJVkFDWV9WSU9MQVRJT04nLFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IE1vZGVyYXRpb25BY3Rpb24gPSB7XG4gIEFQUFJPVkVEOiAnQVBQUk9WRUQnLFxuICBGTEFHR0VEOiAnRkxBR0dFRCcsXG4gIEJMT0NLRUQ6ICdCTE9DS0VEJyxcbiAgREVMRVRFRDogJ0RFTEVURUQnLFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IE1vZGVyYXRpb25Tb3VyY2UgPSB7XG4gIE9QRU5BSTogJ09QRU5BSScsXG4gIENVU1RPTV9SVUxFUzogJ0NVU1RPTV9SVUxFUycsXG4gIE1BTlVBTDogJ01BTlVBTCcsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgdHlwZSBVc2VyUm9sZVR5cGUgPSB0eXBlb2YgVXNlclJvbGVba2V5b2YgdHlwZW9mIFVzZXJSb2xlXTtcbmV4cG9ydCB0eXBlIFVzZXJTdGF0dXNUeXBlID0gdHlwZW9mIFVzZXJTdGF0dXNba2V5b2YgdHlwZW9mIFVzZXJTdGF0dXNdO1xuZXhwb3J0IHR5cGUgVmlvbGF0aW9uVHlwZVR5cGUgPSB0eXBlb2YgVmlvbGF0aW9uVHlwZVtrZXlvZiB0eXBlb2YgVmlvbGF0aW9uVHlwZV07XG5leHBvcnQgdHlwZSBNb2RlcmF0aW9uQWN0aW9uVHlwZSA9IHR5cGVvZiBNb2RlcmF0aW9uQWN0aW9uW2tleW9mIHR5cGVvZiBNb2RlcmF0aW9uQWN0aW9uXTtcbmV4cG9ydCB0eXBlIE1vZGVyYXRpb25Tb3VyY2VUeXBlID0gdHlwZW9mIE1vZGVyYXRpb25Tb3VyY2Vba2V5b2YgdHlwZW9mIE1vZGVyYXRpb25Tb3VyY2VdO1xuXG4vLyBEZWZpbmUgaW50ZXJmYWNlcyBsb2NhbGx5XG5leHBvcnQgaW50ZXJmYWNlIFNhZmVVc2VyIHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nIHwgbnVsbDtcbiAgZW1haWw6IHN0cmluZztcbiAgcm9sZTogVXNlclJvbGVUeXBlO1xuICBpbWFnZT86IHN0cmluZyB8IG51bGw7XG4gIHN0YXR1czogVXNlclN0YXR1c1R5cGU7XG4gIHJlcHV0YXRpb25TY29yZTogbnVtYmVyO1xuICB3YXJuaW5nQ291bnQ6IG51bWJlcjtcbiAgdHJhaW5lclZlcmlmaWVkOiBib29sZWFuO1xuICBzdXNwZW5kZWRVbnRpbD86IERhdGUgfCBudWxsO1xuICBpc1NhZmU/OiBib29sZWFuO1xuICBjcmVhdGVkQXQ6IERhdGU7XG4gIGxhc3RMb2dpbkF0PzogRGF0ZSB8IG51bGw7XG59XG5cbi8vIERlZmluZSBtaXNzaW5nIFByaXNtYS1saWtlIHR5cGVzIGxvY2FsbHlcbmV4cG9ydCBpbnRlcmZhY2UgVXNlciB7XG4gIGlkOiBzdHJpbmc7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZyB8IG51bGw7XG4gIGltYWdlOiBzdHJpbmcgfCBudWxsO1xuICByb2xlOiBVc2VyUm9sZVR5cGU7XG4gIHN0YXR1czogVXNlclN0YXR1c1R5cGU7XG4gIHJlcHV0YXRpb25TY29yZTogbnVtYmVyO1xuICB3YXJuaW5nQ291bnQ6IG51bWJlcjtcbiAgdHJhaW5lclZlcmlmaWVkOiBib29sZWFuO1xuICBzdXNwZW5kZWRVbnRpbDogRGF0ZSB8IG51bGw7XG4gIGNyZWF0ZWRBdDogRGF0ZTtcbiAgdXBkYXRlZEF0OiBEYXRlO1xuICBsYXN0TG9naW5BdDogRGF0ZSB8IG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9kZXJhdGlvbkxvZyB7XG4gIGlkOiBzdHJpbmc7XG4gIHVzZXJJZDogc3RyaW5nIHwgbnVsbDtcbiAgY29udGVudFR5cGU6IHN0cmluZztcbiAgY29udGVudElkOiBzdHJpbmc7XG4gIGNvbnRlbnQ6IHN0cmluZztcbiAgYWN0aW9uOiBNb2RlcmF0aW9uQWN0aW9uVHlwZTtcbiAgc291cmNlOiBNb2RlcmF0aW9uU291cmNlVHlwZTtcbiAgZmxhZ2dlZFJlYXNvbjogc3RyaW5nIHwgbnVsbDtcbiAgY29uZmlkZW5jZTogbnVtYmVyIHwgbnVsbDtcbiAgb3BlbmFpUmVzcG9uc2U6IGFueTtcbiAgY3JlYXRlZEF0OiBEYXRlO1xuICB1cGRhdGVkQXQ6IERhdGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2FmZXR5UmVwb3J0IHtcbiAgaWQ6IHN0cmluZztcbiAgcmVwb3J0ZXJJZDogc3RyaW5nO1xuICByZXBvcnRlZFVzZXJJZDogc3RyaW5nO1xuICByZXBvcnRlZENvbnRlbnRJZDogc3RyaW5nIHwgbnVsbDtcbiAgdmlvbGF0aW9uVHlwZTogVmlvbGF0aW9uVHlwZVR5cGU7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIHByaW9yaXR5OiBzdHJpbmc7XG4gIHN0YXR1czogc3RyaW5nO1xuICBjcmVhdGVkQXQ6IERhdGU7XG4gIHVwZGF0ZWRBdDogRGF0ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VyVmlvbGF0aW9uIHtcbiAgaWQ6IHN0cmluZztcbiAgdXNlcklkOiBzdHJpbmc7XG4gIHZpb2xhdGlvblR5cGU6IFZpb2xhdGlvblR5cGVUeXBlO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBzZXZlcml0eTogc3RyaW5nO1xuICBhY3Rpb25UYWtlbjogc3RyaW5nIHwgbnVsbDtcbiAgY3JlYXRlZEF0OiBEYXRlO1xuICB1cGRhdGVkQXQ6IERhdGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2FmZXR5U2V0dGluZ3Mge1xuICBpZDogc3RyaW5nO1xuICB1c2VySWQ6IHN0cmluZztcbiAgYXV0b01vZGVyYXRpb25FbmFibGVkOiBib29sZWFuO1xuICByZXBvcnRpbmdFbmFibGVkOiBib29sZWFuO1xuICByZXN0cmljdGVkTW9kZTogYm9vbGVhbjtcbiAgYmxvY2tlZFVzZXJzOiBzdHJpbmdbXTtcbiAgY3JlYXRlZEF0OiBEYXRlO1xuICB1cGRhdGVkQXQ6IERhdGU7XG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFVTRVIgU0FGRVRZIFFVRVJJRVNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLyoqXG4gKiBHZXQgY29tcHJlaGVuc2l2ZSB1c2VyIHNhZmV0eSBpbmZvcm1hdGlvblxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VXNlclNhZmV0eVByb2ZpbGUodXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPHtcbiAgdXNlcjogU2FmZVVzZXIgfCBudWxsO1xuICB2aW9sYXRpb25Db3VudDogbnVtYmVyO1xuICByZWNlbnRWaW9sYXRpb25zOiBudW1iZXI7XG4gIHN1c3BlbnNpb25IaXN0b3J5OiBudW1iZXI7XG4gIGxhc3RWaW9sYXRpb24/OiBEYXRlO1xuICByaXNrTGV2ZWw6ICdMT1cnIHwgJ01FRElVTScgfCAnSElHSCcgfCAnQ1JJVElDQUwnO1xuICByZXN0cmljdGlvbnM6IHN0cmluZ1tdO1xufT4ge1xuICBjb25zdCB1c2VyID0gYXdhaXQgcHJpc21hLnVzZXJzLmZpbmRVbmlxdWUoe1xuICAgIHdoZXJlOiB7IGlkOiB1c2VySWQgfSxcbiAgICBzZWxlY3Q6IHtcbiAgICAgIGlkOiB0cnVlLFxuICAgICAgZW1haWw6IHRydWUsXG4gICAgICBuYW1lOiB0cnVlLFxuICAgICAgaW1hZ2U6IHRydWUsXG4gICAgICByb2xlOiB0cnVlLFxuICAgICAgc3RhdHVzOiB0cnVlLFxuICAgICAgcmVwdXRhdGlvblNjb3JlOiB0cnVlLFxuICAgICAgd2FybmluZ0NvdW50OiB0cnVlLFxuICAgICAgdHJhaW5lclZlcmlmaWVkOiB0cnVlLFxuICAgICAgc3VzcGVuZGVkVW50aWw6IHRydWUsXG4gICAgICBjcmVhdGVkQXQ6IHRydWUsXG4gICAgICBsYXN0TG9naW5BdDogdHJ1ZSxcbiAgICB9LFxuICB9KSBhcyBhbnk7XG5cbiAgaWYgKCF1c2VyKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVzZXI6IG51bGwsXG4gICAgICB2aW9sYXRpb25Db3VudDogMCxcbiAgICAgIHJlY2VudFZpb2xhdGlvbnM6IDAsXG4gICAgICBzdXNwZW5zaW9uSGlzdG9yeTogMCxcbiAgICAgIHJpc2tMZXZlbDogJ0xPVycsXG4gICAgICByZXN0cmljdGlvbnM6IFtdLFxuICAgIH07XG4gIH1cblxuICAvLyBHZXQgdmlvbGF0aW9uIHN0YXRpc3RpY3NcbiAgY29uc3QgW3Zpb2xhdGlvbkNvdW50LCByZWNlbnRWaW9sYXRpb25zLCBzdXNwZW5zaW9uSGlzdG9yeSwgbGFzdFZpb2xhdGlvblJlc3VsdF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgcHJpc21hLnVzZXJfdmlvbGF0aW9ucy5jb3VudCh7IHdoZXJlOiB7IHVzZXJJZCB9IH0pLFxuICAgIHByaXNtYS51c2VyX3Zpb2xhdGlvbnMuY291bnQoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgdXNlcklkLFxuICAgICAgICBjcmVhdGVkQXQ6IHsgZ3RlOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gMzAgKiAyNCAqIDYwICogNjAgKiAxMDAwKSB9LCAvLyBMYXN0IDMwIGRheXNcbiAgICAgIH0sXG4gICAgfSksXG4gICAgcHJpc21hLnVzZXJfdmlvbGF0aW9ucy5jb3VudCh7XG4gICAgICB3aGVyZToge1xuICAgICAgICB1c2VySWQsXG4gICAgICAgIHN1c3BlbnNpb25Ib3VyczogeyBndDogMCB9LFxuICAgICAgfSxcbiAgICB9KSxcbiAgICBwcmlzbWEudXNlcl92aW9sYXRpb25zLmZpbmRGaXJzdCh7XG4gICAgICB3aGVyZTogeyB1c2VySWQgfSxcbiAgICAgIG9yZGVyQnk6IHsgY3JlYXRlZEF0OiAnZGVzYycgfSxcbiAgICAgIHNlbGVjdDogeyBjcmVhdGVkQXQ6IHRydWUgfSxcbiAgICB9KSxcbiAgXSk7XG5cbiAgLy8gQ2FsY3VsYXRlIHJpc2sgbGV2ZWxcbiAgY29uc3Qgcmlza0xldmVsID0gY2FsY3VsYXRlVXNlclJpc2tMZXZlbChcbiAgICB1c2VyLnJlcHV0YXRpb25TY29yZSxcbiAgICB2aW9sYXRpb25Db3VudCxcbiAgICByZWNlbnRWaW9sYXRpb25zLFxuICAgIHVzZXIud2FybmluZ0NvdW50XG4gICk7XG5cbiAgLy8gRGV0ZXJtaW5lIGFjdGl2ZSByZXN0cmljdGlvbnNcbiAgY29uc3QgcmVzdHJpY3Rpb25zID0gZGV0ZXJtaW5lVXNlclJlc3RyaWN0aW9ucyh1c2VyLCB2aW9sYXRpb25Db3VudCwgcmVjZW50VmlvbGF0aW9ucyk7XG5cbiAgcmV0dXJuIHtcbiAgICB1c2VyOiB1c2VyID8ge1xuICAgICAgaWQ6IHVzZXIuaWQsXG4gICAgICBlbWFpbDogdXNlci5lbWFpbCxcbiAgICAgIG5hbWU6IHVzZXIubmFtZSB8fCAnVW5rbm93bicsXG4gICAgICAuLi4odXNlci5pbWFnZSAmJiB7IGltYWdlOiB1c2VyLmltYWdlIH0pLFxuICAgICAgcm9sZTogdXNlci5yb2xlIGFzIFVzZXJSb2xlVHlwZSxcbiAgICAgIHN0YXR1czogdXNlci5zdGF0dXMgYXMgVXNlclN0YXR1c1R5cGUsXG4gICAgICByZXB1dGF0aW9uU2NvcmU6IHVzZXIucmVwdXRhdGlvblNjb3JlLFxuICAgICAgd2FybmluZ0NvdW50OiB1c2VyLndhcm5pbmdDb3VudCxcbiAgICAgIHRyYWluZXJWZXJpZmllZDogdXNlci50cmFpbmVyVmVyaWZpZWQsXG4gICAgICBzdXNwZW5kZWRVbnRpbDogdXNlci5zdXNwZW5kZWRVbnRpbCB8fCBudWxsLFxuICAgICAgaXNTYWZlOiByaXNrTGV2ZWwgPT09ICdMT1cnICYmIHVzZXIuc3RhdHVzID09PSBVc2VyU3RhdHVzLkFDVElWRSxcbiAgICAgIGNyZWF0ZWRBdDogdXNlci5jcmVhdGVkQXQsXG4gICAgICBsYXN0TG9naW5BdDogdXNlci5sYXN0TG9naW5BdCB8fCBudWxsLFxuICAgIH0gYXMgU2FmZVVzZXIgOiBudWxsLFxuICAgIHZpb2xhdGlvbkNvdW50LFxuICAgIHJlY2VudFZpb2xhdGlvbnMsXG4gICAgc3VzcGVuc2lvbkhpc3RvcnksXG4gICAgLi4uKGxhc3RWaW9sYXRpb25SZXN1bHQ/LmNyZWF0ZWRBdCAmJiB7IGxhc3RWaW9sYXRpb246IGxhc3RWaW9sYXRpb25SZXN1bHQuY3JlYXRlZEF0IH0pLFxuICAgIHJpc2tMZXZlbCxcbiAgICByZXN0cmljdGlvbnMsXG4gIH07XG59XG5cbi8qKlxuICogR2V0IHVzZXJzIGZsYWdnZWQgZm9yIHBvdGVudGlhbCBzYWZldHkgY29uY2VybnNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEZsYWdnZWRVc2VycyhwYXJhbXM6IHtcbiAgbGltaXQ/OiBudW1iZXI7XG4gIG9mZnNldD86IG51bWJlcjtcbiAgcmlza0xldmVsPzogJ01FRElVTScgfCAnSElHSCcgfCAnQ1JJVElDQUwnO1xuICBpbmNsdWRlUmVjZW50PzogYm9vbGVhbjtcbn0pOiBQcm9taXNlPEFycmF5PHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBlbWFpbDogc3RyaW5nO1xuICByb2xlOiBVc2VyUm9sZVR5cGU7XG4gIHJlcHV0YXRpb25TY29yZTogbnVtYmVyO1xuICB3YXJuaW5nQ291bnQ6IG51bWJlcjtcbiAgdmlvbGF0aW9uQ291bnQ6IG51bWJlcjtcbiAgcmVjZW50VmlvbGF0aW9uczogbnVtYmVyO1xuICBsYXN0VmlvbGF0aW9uPzogRGF0ZTtcbiAgcmlza0xldmVsOiBzdHJpbmc7XG59Pj4ge1xuICBjb25zdCB0aGlydHlEYXlzQWdvID0gbmV3IERhdGUoRGF0ZS5ub3coKSAtIDMwICogMjQgKiA2MCAqIDYwICogMTAwMCk7XG4gIFxuICAvLyBHZXQgdXNlcnMgd2l0aCBzYWZldHkgY29uY2VybnNcbiAgY29uc3QgdXNlcnMgPSBhd2FpdCBwcmlzbWEudXNlcnMuZmluZE1hbnkoe1xuICAgIHdoZXJlOiB7XG4gICAgICBPUjogW1xuICAgICAgICB7IHJlcHV0YXRpb25TY29yZTogeyBsdDogNTAgfSB9LFxuICAgICAgICB7IHdhcm5pbmdDb3VudDogeyBndGU6IDIgfSB9LFxuICAgICAgICB7IHN0YXR1czogeyBpbjogW1VzZXJTdGF0dXMuU1VTUEVOREVEXSB9IH0sXG4gICAgICBdLFxuICAgICAgLi4uKHBhcmFtcy5pbmNsdWRlUmVjZW50ICYmIHtcbiAgICAgICAgdmlvbGF0aW9uczoge1xuICAgICAgICAgIHNvbWU6IHtcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogeyBndGU6IHRoaXJ0eURheXNBZ28gfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgfSxcbiAgICBzZWxlY3Q6IHtcbiAgICAgIGlkOiB0cnVlLFxuICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgIGVtYWlsOiB0cnVlLFxuICAgICAgcm9sZTogdHJ1ZSxcbiAgICAgIHJlcHV0YXRpb25TY29yZTogdHJ1ZSxcbiAgICAgIHdhcm5pbmdDb3VudDogdHJ1ZSxcbiAgICAgIHVzZXJfdmlvbGF0aW9uczoge1xuICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICBjcmVhdGVkQXQ6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIG9yZGVyQnk6IHsgY3JlYXRlZEF0OiAnZGVzYycgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBvcmRlckJ5OiBbXG4gICAgICB7IHJlcHV0YXRpb25TY29yZTogJ2FzYycgfSxcbiAgICAgIHsgd2FybmluZ0NvdW50OiAnZGVzYycgfSxcbiAgICBdLFxuICAgIHRha2U6IHBhcmFtcy5saW1pdCB8fCA1MCxcbiAgICBza2lwOiBwYXJhbXMub2Zmc2V0IHx8IDAsXG4gIH0pO1xuXG4gIHJldHVybiB1c2Vycy5tYXAoKHVzZXI6IGFueSkgPT4ge1xuICAgIGNvbnN0IHZpb2xhdGlvbkNvdW50ID0gdXNlci52aW9sYXRpb25zLmxlbmd0aDtcbiAgICBjb25zdCByZWNlbnRWaW9sYXRpb25zID0gdXNlci52aW9sYXRpb25zLmZpbHRlcigodjogYW55KSA9PiB2LmNyZWF0ZWRBdCA+PSB0aGlydHlEYXlzQWdvKS5sZW5ndGg7XG4gICAgY29uc3QgbGFzdFZpb2xhdGlvbiA9IHVzZXIudmlvbGF0aW9uc1swXT8uY3JlYXRlZEF0O1xuICAgIFxuICAgIGNvbnN0IHJpc2tMZXZlbCA9IGNhbGN1bGF0ZVVzZXJSaXNrTGV2ZWwoXG4gICAgICB1c2VyLnJlcHV0YXRpb25TY29yZSxcbiAgICAgIHZpb2xhdGlvbkNvdW50LFxuICAgICAgcmVjZW50VmlvbGF0aW9ucyxcbiAgICAgIHVzZXIud2FybmluZ0NvdW50XG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICBpZDogdXNlci5pZCxcbiAgICAgIG5hbWU6IHVzZXIubmFtZSB8fCAnVW5rbm93bicsXG4gICAgICBlbWFpbDogdXNlci5lbWFpbCxcbiAgICAgIHJvbGU6IHVzZXIucm9sZSxcbiAgICAgIHJlcHV0YXRpb25TY29yZTogdXNlci5yZXB1dGF0aW9uU2NvcmUsXG4gICAgICB3YXJuaW5nQ291bnQ6IHVzZXIud2FybmluZ0NvdW50LFxuICAgICAgdmlvbGF0aW9uQ291bnQsXG4gICAgICByZWNlbnRWaW9sYXRpb25zLFxuICAgICAgLi4uKGxhc3RWaW9sYXRpb24gJiYgeyBsYXN0VmlvbGF0aW9uIH0pLFxuICAgICAgcmlza0xldmVsLFxuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIFVwZGF0ZSB1c2VyIHNhZmV0eSBzdGF0dXMgYWZ0ZXIgZW5mb3JjZW1lbnQgYWN0aW9uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVVc2VyU2FmZXR5U3RhdHVzKFxuICB1c2VySWQ6IHN0cmluZyxcbiAgdXBkYXRlczoge1xuICAgIHJlcHV0YXRpb25DaGFuZ2U/OiBudW1iZXI7XG4gICAgd2FybmluZ0NvdW50PzogbnVtYmVyO1xuICAgIHN0YXR1cz86IFVzZXJTdGF0dXNUeXBlO1xuICAgIHN1c3BlbmRlZFVudGlsPzogRGF0ZSB8IG51bGw7XG4gIH1cbik6IFByb21pc2U8VXNlcj4ge1xuICAvLyBVc2UgcmVndWxhciBwcmlzbWEgdHJhbnNhY3Rpb24gaW5zdGVhZCBvZiBzYWZlVHJhbnNhY3Rpb24gZm9yIG5vd1xuICByZXR1cm4gcHJpc21hLiR0cmFuc2FjdGlvbihhc3luYyAodHgpID0+IHtcbiAgICBjb25zdCBjdXJyZW50VXNlciA9IGF3YWl0IHR4LnVzZXJzLmZpbmRVbmlxdWVPclRocm93KHtcbiAgICAgIHdoZXJlOiB7IGlkOiB1c2VySWQgfSxcbiAgICAgIHNlbGVjdDogeyByZXB1dGF0aW9uU2NvcmU6IHRydWUgfSxcbiAgICB9KTtcblxuICAgIGNvbnN0IG5ld1JlcHV0YXRpb25TY29yZSA9IHVwZGF0ZXMucmVwdXRhdGlvbkNoYW5nZVxuICAgICAgPyBNYXRoLm1heCgwLCBjdXJyZW50VXNlci5yZXB1dGF0aW9uU2NvcmUgKyB1cGRhdGVzLnJlcHV0YXRpb25DaGFuZ2UpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIHJldHVybiB0eC51c2Vycy51cGRhdGUoe1xuICAgICAgd2hlcmU6IHsgaWQ6IHVzZXJJZCB9LFxuICAgICAgZGF0YToge1xuICAgICAgICAuLi4obmV3UmVwdXRhdGlvblNjb3JlICE9PSB1bmRlZmluZWQgJiYgeyByZXB1dGF0aW9uU2NvcmU6IG5ld1JlcHV0YXRpb25TY29yZSB9KSxcbiAgICAgICAgLi4uKHVwZGF0ZXMud2FybmluZ0NvdW50ICE9PSB1bmRlZmluZWQgJiYgeyB3YXJuaW5nQ291bnQ6IHVwZGF0ZXMud2FybmluZ0NvdW50IH0pLFxuICAgICAgICAuLi4odXBkYXRlcy5zdGF0dXMgJiYgeyBzdGF0dXM6IHVwZGF0ZXMuc3RhdHVzIH0pLFxuICAgICAgICAuLi4odXBkYXRlcy5zdXNwZW5kZWRVbnRpbCAhPT0gdW5kZWZpbmVkICYmIHsgc3VzcGVuZGVkVW50aWw6IHVwZGF0ZXMuc3VzcGVuZGVkVW50aWwgfSksXG4gICAgICB9LFxuICAgIH0pIGFzIFByb21pc2U8VXNlcj47XG4gIH0pO1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBNT0RFUkFUSU9OIExPRyBRVUVSSUVTXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8qKlxuICogQ3JlYXRlIG1vZGVyYXRpb24gbG9nIGVudHJ5XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVNb2RlcmF0aW9uTG9nKGRhdGE6IHtcbiAgdXNlcklkPzogc3RyaW5nO1xuICBjb250ZW50VHlwZTogc3RyaW5nO1xuICBjb250ZW50SWQ6IHN0cmluZztcbiAgY29udGVudDogc3RyaW5nO1xuICBhY3Rpb246IE1vZGVyYXRpb25BY3Rpb25UeXBlO1xuICBzb3VyY2U6IE1vZGVyYXRpb25Tb3VyY2VUeXBlO1xuICBmbGFnZ2VkUmVhc29uPzogc3RyaW5nO1xuICBjb25maWRlbmNlPzogbnVtYmVyO1xuICBvcGVuYWlSZXNwb25zZT86IGFueTtcbn0pOiBQcm9taXNlPE1vZGVyYXRpb25Mb2c+IHtcbiAgcmV0dXJuIHByaXNtYS5tb2RlcmF0aW9uX2xvZ3MuY3JlYXRlKHtcbiAgICBkYXRhOiB7XG4gICAgICAuLi5kYXRhLFxuICAgICAgcHJvY2Vzc2VkQXQ6IG5ldyBEYXRlKCksXG4gICAgfSBhcyBhbnksXG4gIH0pIGFzIFByb21pc2U8TW9kZXJhdGlvbkxvZz47XG59XG5cbi8qKlxuICogR2V0IG1vZGVyYXRpb24gbG9ncyB3aXRoIGFkdmFuY2VkIGZpbHRlcmluZ1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TW9kZXJhdGlvbkxvZ3MocGFyYW1zOiB7XG4gIHVzZXJJZD86IHN0cmluZztcbiAgYWN0aW9uPzogTW9kZXJhdGlvbkFjdGlvblR5cGU7XG4gIGNvbnRlbnRUeXBlPzogc3RyaW5nO1xuICBkYXRlRnJvbT86IERhdGU7XG4gIGRhdGVUbz86IERhdGU7XG4gIGxpbWl0PzogbnVtYmVyO1xuICBvZmZzZXQ/OiBudW1iZXI7XG4gIGluY2x1ZGVVc2VyPzogYm9vbGVhbjtcbn0pOiBQcm9taXNlPEFycmF5PE1vZGVyYXRpb25Mb2cgJiB7IHVzZXI/OiB7IG5hbWU6IHN0cmluZzsgcm9sZTogVXNlclJvbGVUeXBlIH0gfT4+IHtcbiAgcmV0dXJuIHByaXNtYS5tb2RlcmF0aW9uX2xvZ3MuZmluZE1hbnkoe1xuICAgIHdoZXJlOiB7XG4gICAgICAuLi4ocGFyYW1zLnVzZXJJZCAmJiB7IHVzZXJJZDogcGFyYW1zLnVzZXJJZCB9KSxcbiAgICAgIC4uLihwYXJhbXMuYWN0aW9uICYmIHsgYWN0aW9uOiBwYXJhbXMuYWN0aW9uIGFzIGFueSB9KSxcbiAgICAgIC4uLihwYXJhbXMuY29udGVudFR5cGUgJiYgeyBjb250ZW50VHlwZTogcGFyYW1zLmNvbnRlbnRUeXBlIH0pLFxuICAgICAgLi4uKHBhcmFtcy5kYXRlRnJvbSB8fCBwYXJhbXMuZGF0ZVRvKSAmJiB7XG4gICAgICAgIGNyZWF0ZWRBdDoge1xuICAgICAgICAgIC4uLihwYXJhbXMuZGF0ZUZyb20gJiYgeyBndGU6IHBhcmFtcy5kYXRlRnJvbSB9KSxcbiAgICAgICAgICAuLi4ocGFyYW1zLmRhdGVUbyAmJiB7IGx0ZTogcGFyYW1zLmRhdGVUbyB9KSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICAuLi4ocGFyYW1zLmluY2x1ZGVVc2VyICYmIHtcbiAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgdXNlcnM6IHtcbiAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgICAgICByb2xlOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pLFxuICAgIG9yZGVyQnk6IHsgY3JlYXRlZEF0OiAnZGVzYycgfSxcbiAgICB0YWtlOiBwYXJhbXMubGltaXQgfHwgNTAsXG4gICAgc2tpcDogcGFyYW1zLm9mZnNldCB8fCAwLFxuICB9KSBhcyBhbnk7XG59XG5cbi8qKlxuICogR2V0IG1vZGVyYXRpb24gc3RhdGlzdGljcyBmb3IgZGFzaGJvYXJkXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRNb2RlcmF0aW9uU3RhdGlzdGljcyh0aW1lZnJhbWU6ICdkYXknIHwgJ3dlZWsnIHwgJ21vbnRoJyA9ICdkYXknKTogUHJvbWlzZTx7XG4gIHRvdGFsQWN0aW9uczogbnVtYmVyO1xuICBhY3Rpb25CcmVha2Rvd246IFJlY29yZDxzdHJpbmcsIG51bWJlcj47XG4gIGNvbnRlbnRUeXBlQnJlYWtkb3duOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+O1xuICBhdmVyYWdlQ29uZmlkZW5jZTogbnVtYmVyO1xuICB0b3BWaW9sYXRpb25SZWFzb25zOiBBcnJheTx7IHJlYXNvbjogc3RyaW5nOyBjb3VudDogbnVtYmVyIH0+O1xuICB1c2VyQWN0aXZpdHk6IEFycmF5PHsgdXNlcklkOiBzdHJpbmc7IGFjdGlvbkNvdW50OiBudW1iZXI7IHVzZXJOYW1lPzogc3RyaW5nIH0+O1xufT4ge1xuICBjb25zdCBob3Vyc01hcCA9IHsgZGF5OiAyNCwgd2VlazogMTY4LCBtb250aDogNzIwIH07XG4gIGNvbnN0IHNpbmNlID0gbmV3IERhdGUoRGF0ZS5ub3coKSAtIGhvdXJzTWFwW3RpbWVmcmFtZV0gKiA2MCAqIDYwICogMTAwMCk7XG5cbiAgY29uc3QgW2xvZ3MsIHJlYXNvbkNvdW50c10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgcHJpc21hLm1vZGVyYXRpb25fbG9ncy5maW5kTWFueSh7XG4gICAgICB3aGVyZTogeyBjcmVhdGVkQXQ6IHsgZ3RlOiBzaW5jZSB9IH0sXG4gICAgICBzZWxlY3Q6IHtcbiAgICAgICAgYWN0aW9uOiB0cnVlLFxuICAgICAgICBjb250ZW50VHlwZTogdHJ1ZSxcbiAgICAgICAgY29uZmlkZW5jZTogdHJ1ZSxcbiAgICAgICAgdXNlcklkOiB0cnVlLFxuICAgICAgICBmbGFnZ2VkUmVhc29uOiB0cnVlLFxuICAgICAgICB1c2Vyczoge1xuICAgICAgICAgIHNlbGVjdDogeyBuYW1lOiB0cnVlIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pLFxuICAgIHByaXNtYS5tb2RlcmF0aW9uX2xvZ3MuZ3JvdXBCeSh7XG4gICAgICBieTogWydmbGFnZ2VkUmVhc29uJ10sXG4gICAgICB3aGVyZToge1xuICAgICAgICBjcmVhdGVkQXQ6IHsgZ3RlOiBzaW5jZSB9LFxuICAgICAgICBmbGFnZ2VkUmVhc29uOiB7IG5vdDogbnVsbCB9LFxuICAgICAgfSxcbiAgICAgIF9jb3VudDogeyBmbGFnZ2VkUmVhc29uOiB0cnVlIH0sXG4gICAgICBvcmRlckJ5OiB7IF9jb3VudDogeyBmbGFnZ2VkUmVhc29uOiAnZGVzYycgfSB9LFxuICAgICAgdGFrZTogMTAsXG4gICAgfSksXG4gIF0pO1xuXG4gIC8vIENhbGN1bGF0ZSBzdGF0aXN0aWNzXG4gIGNvbnN0IHRvdGFsQWN0aW9ucyA9IGxvZ3MubGVuZ3RoO1xuICBcbiAgY29uc3QgYWN0aW9uQnJlYWtkb3duOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge307XG4gIGNvbnN0IGNvbnRlbnRUeXBlQnJlYWtkb3duOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge307XG4gIGNvbnN0IHVzZXJBY3Rpdml0eTogUmVjb3JkPHN0cmluZywgeyBjb3VudDogbnVtYmVyOyBuYW1lPzogc3RyaW5nIH0+ID0ge307XG4gIFxuICBsZXQgdG90YWxDb25maWRlbmNlID0gMDtcbiAgbGV0IGNvbmZpZGVuY2VDb3VudCA9IDA7XG5cbiAgbG9ncy5mb3JFYWNoKGxvZyA9PiB7XG4gICAgLy8gQWN0aW9uIGJyZWFrZG93blxuICAgIGFjdGlvbkJyZWFrZG93bltsb2cuYWN0aW9uXSA9IChhY3Rpb25CcmVha2Rvd25bbG9nLmFjdGlvbl0gfHwgMCkgKyAxO1xuICAgIFxuICAgIC8vIENvbnRlbnQgdHlwZSBicmVha2Rvd25cbiAgICBjb250ZW50VHlwZUJyZWFrZG93bltsb2cuY29udGVudFR5cGVdID0gKGNvbnRlbnRUeXBlQnJlYWtkb3duW2xvZy5jb250ZW50VHlwZV0gfHwgMCkgKyAxO1xuICAgIFxuICAgIC8vIFVzZXIgYWN0aXZpdHlcbiAgICBpZiAobG9nLnVzZXJJZCkge1xuICAgICAgaWYgKCF1c2VyQWN0aXZpdHlbbG9nLnVzZXJJZF0pIHtcbiAgICAgICAgY29uc3QgdXNlckRhdGE6IHsgY291bnQ6IG51bWJlcjsgbmFtZT86IHN0cmluZyB9ID0geyBjb3VudDogMCB9O1xuICAgICAgICBpZiAobG9nLnVzZXJzPy5uYW1lKSB7XG4gICAgICAgICAgdXNlckRhdGEubmFtZSA9IGxvZy51c2Vycy5uYW1lO1xuICAgICAgICB9XG4gICAgICAgIHVzZXJBY3Rpdml0eVtsb2cudXNlcklkXSA9IHVzZXJEYXRhO1xuICAgICAgfVxuICAgICAgaWYgKHVzZXJBY3Rpdml0eVtsb2cudXNlcklkXSkge1xuICAgICAgICB1c2VyQWN0aXZpdHlbbG9nLnVzZXJJZF0hLmNvdW50Kys7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIENvbmZpZGVuY2UgY2FsY3VsYXRpb25cbiAgICBpZiAobG9nLmNvbmZpZGVuY2UgIT09IG51bGwpIHtcbiAgICAgIHRvdGFsQ29uZmlkZW5jZSArPSBsb2cuY29uZmlkZW5jZTtcbiAgICAgIGNvbmZpZGVuY2VDb3VudCsrO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgYXZlcmFnZUNvbmZpZGVuY2UgPSBjb25maWRlbmNlQ291bnQgPiAwID8gdG90YWxDb25maWRlbmNlIC8gY29uZmlkZW5jZUNvdW50IDogMDtcbiAgXG4gIGNvbnN0IHRvcFZpb2xhdGlvblJlYXNvbnMgPSByZWFzb25Db3VudHMubWFwKHIgPT4gKHtcbiAgICByZWFzb246IHIuZmxhZ2dlZFJlYXNvbiA/PyAnVW5rbm93bicsXG4gICAgY291bnQ6IHIuX2NvdW50LmZsYWdnZWRSZWFzb24sXG4gIH0pKTtcblxuICBjb25zdCB1c2VyQWN0aXZpdHlBcnJheSA9IE9iamVjdC5lbnRyaWVzKHVzZXJBY3Rpdml0eSlcbiAgICAubWFwKChbdXNlcklkLCBkYXRhXSkgPT4gKHtcbiAgICAgIHVzZXJJZCxcbiAgICAgIGFjdGlvbkNvdW50OiBkYXRhLmNvdW50LFxuICAgICAgLi4uKGRhdGEubmFtZSAmJiB7IHVzZXJOYW1lOiBkYXRhLm5hbWUgfSksXG4gICAgfSkpXG4gICAgLnNvcnQoKGEsIGIpID0+IGIuYWN0aW9uQ291bnQgLSBhLmFjdGlvbkNvdW50KVxuICAgIC5zbGljZSgwLCAxMCk7XG5cbiAgcmV0dXJuIHtcbiAgICB0b3RhbEFjdGlvbnMsXG4gICAgYWN0aW9uQnJlYWtkb3duLFxuICAgIGNvbnRlbnRUeXBlQnJlYWtkb3duLFxuICAgIGF2ZXJhZ2VDb25maWRlbmNlLFxuICAgIHRvcFZpb2xhdGlvblJlYXNvbnMsXG4gICAgdXNlckFjdGl2aXR5OiB1c2VyQWN0aXZpdHlBcnJheSxcbiAgfTtcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gU0FGRVRZIFJFUE9SVFMgUVVFUklFU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vKipcbiAqIENyZWF0ZSBzYWZldHkgcmVwb3J0XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVTYWZldHlSZXBvcnQoZGF0YToge1xuICByZXBvcnRlcklkOiBzdHJpbmc7XG4gIHJlcG9ydGVkVXNlcklkOiBzdHJpbmc7XG4gIHZpb2xhdGlvblR5cGU6IFZpb2xhdGlvblR5cGVUeXBlO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBldmlkZW5jZT86IGFueTtcbiAgY29udGVudElkPzogc3RyaW5nO1xuICBjb250ZW50VHlwZT86IHN0cmluZztcbn0pOiBQcm9taXNlPFNhZmV0eVJlcG9ydD4ge1xuICByZXR1cm4gcHJpc21hLnNhZmV0eV9yZXBvcnRzLmNyZWF0ZSh7XG4gICAgZGF0YToge1xuICAgICAgaWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXG4gICAgICAuLi5kYXRhLFxuICAgICAgc3RhdHVzOiAnUEVORElORycsXG4gICAgICBwcmlvcml0eTogZGV0ZXJtaW5lUHJpb3JpdHkoZGF0YS52aW9sYXRpb25UeXBlLCBkYXRhLmRlc2NyaXB0aW9uKSxcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICB9LFxuICB9KSBhcyBhbnk7XG59XG5cbi8qKlxuICogR2V0IHBlbmRpbmcgc2FmZXR5IHJlcG9ydHMgZm9yIHJldmlld1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UGVuZGluZ1NhZmV0eVJlcG9ydHMocGFyYW1zOiB7XG4gIHByaW9yaXR5PzogJ0xPVycgfCAnTUVESVVNJyB8ICdISUdIJyB8ICdVUkdFTlQnO1xuICBsaW1pdD86IG51bWJlcjtcbiAgb2Zmc2V0PzogbnVtYmVyO1xufSk6IFByb21pc2U8QXJyYXk8U2FmZXR5UmVwb3J0ICYge1xuICByZXBvcnRlcjogeyBuYW1lOiBzdHJpbmcgfCBudWxsOyByb2xlOiBVc2VyUm9sZVR5cGUgfTtcbiAgcmVwb3J0ZWRVc2VyOiB7IG5hbWU6IHN0cmluZyB8IG51bGw7IHJvbGU6IFVzZXJSb2xlVHlwZTsgcmVwdXRhdGlvblNjb3JlOiBudW1iZXIgfTtcbn0+PiB7XG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgUHJpc21hIHR5cGUgbWlzbWF0Y2ggd2l0aCBsb2NhbCB0eXBlc1xuICByZXR1cm4gcHJpc21hLnNhZmV0eV9yZXBvcnRzLmZpbmRNYW55KHtcbiAgICB3aGVyZToge1xuICAgICAgc3RhdHVzOiB7IGluOiBbJ1BFTkRJTkcnLCAnSU5WRVNUSUdBVElORyddIH0sXG4gICAgICAuLi4ocGFyYW1zLnByaW9yaXR5ICYmIHsgcHJpb3JpdHk6IHBhcmFtcy5wcmlvcml0eSB9KSxcbiAgICB9LFxuICAgIGluY2x1ZGU6IHtcbiAgICAgIHVzZXJzX3NhZmV0eV9yZXBvcnRzX3JlcG9ydGVySWRUb3VzZXJzOiB7XG4gICAgICAgIHNlbGVjdDogeyBuYW1lOiB0cnVlLCByb2xlOiB0cnVlIH0sXG4gICAgICB9LFxuICAgICAgdXNlcnNfc2FmZXR5X3JlcG9ydHNfcmVwb3J0ZWRVc2VySWRUb3VzZXJzOiB7XG4gICAgICAgIHNlbGVjdDogeyBuYW1lOiB0cnVlLCByb2xlOiB0cnVlLCByZXB1dGF0aW9uU2NvcmU6IHRydWUgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBvcmRlckJ5OiBbXG4gICAgICB7IHByaW9yaXR5OiAnZGVzYycgfSxcbiAgICAgIHsgY3JlYXRlZEF0OiAnYXNjJyB9LFxuICAgIF0sXG4gICAgdGFrZTogcGFyYW1zLmxpbWl0IHx8IDIwLFxuICAgIHNraXA6IHBhcmFtcy5vZmZzZXQgfHwgMCxcbiAgfSk7XG59XG5cbi8qKlxuICogVXBkYXRlIHNhZmV0eSByZXBvcnQgc3RhdHVzXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVTYWZldHlSZXBvcnQoXG4gIHJlcG9ydElkOiBzdHJpbmcsXG4gIHVwZGF0ZXM6IHtcbiAgICBzdGF0dXM/OiAnUEVORElORycgfCAnSU5WRVNUSUdBVElORycgfCAnUkVTT0xWRUQnIHwgJ0RJU01JU1NFRCc7XG4gICAgYXNzaWduZWRUbz86IHN0cmluZztcbiAgICByZXNvbHV0aW9uPzogc3RyaW5nO1xuICAgIGFjdGlvblRha2VuPzogc3RyaW5nO1xuICB9XG4pOiBQcm9taXNlPFNhZmV0eVJlcG9ydD4ge1xuICByZXR1cm4gcHJpc21hLnNhZmV0eV9yZXBvcnRzLnVwZGF0ZSh7XG4gICAgd2hlcmU6IHsgaWQ6IHJlcG9ydElkIH0sXG4gICAgZGF0YToge1xuICAgICAgLi4udXBkYXRlcyxcbiAgICAgIC4uLih1cGRhdGVzLnN0YXR1cyA9PT0gJ1JFU09MVkVEJyAmJiB7IHJlc29sdmVkQXQ6IG5ldyBEYXRlKCkgfSksXG4gICAgICAuLi4odXBkYXRlcy5hc3NpZ25lZFRvICYmIHsgXG4gICAgICAgIHN0YXR1czogdXBkYXRlcy5zdGF0dXMgfHwgJ0lOVkVTVElHQVRJTkcnLFxuICAgICAgfSksXG4gICAgfSxcbiAgfSkgYXMgYW55O1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBVU0VSIFZJT0xBVElPTlMgUVVFUklFU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vKipcbiAqIENyZWF0ZSB1c2VyIHZpb2xhdGlvbiByZWNvcmRcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVVzZXJWaW9sYXRpb24oZGF0YToge1xuICB1c2VySWQ6IHN0cmluZztcbiAgdmlvbGF0aW9uVHlwZTogVmlvbGF0aW9uVHlwZVR5cGU7XG4gIHNldmVyaXR5OiBudW1iZXI7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIGNvbnRlbnRJZD86IHN0cmluZztcbiAgY29udGVudFR5cGU/OiBzdHJpbmc7XG4gIHdhcm5pbmdJc3N1ZWQ6IGJvb2xlYW47XG4gIHN1c3BlbnNpb25Ib3Vycz86IG51bWJlcjtcbiAgcmVwdXRhdGlvbkhpdDogbnVtYmVyO1xuICBtb2RlcmF0aW9uTG9nSWQ/OiBzdHJpbmc7XG59KTogUHJvbWlzZTxVc2VyVmlvbGF0aW9uPiB7XG4gIC8vIFVzZSByZWd1bGFyIHByaXNtYSB0cmFuc2FjdGlvbiBpbnN0ZWFkIG9mIHNhZmVUcmFuc2FjdGlvbiBmb3Igbm93XG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgUHJpc21hIHR5cGUgbWlzbWF0Y2ggd2l0aCBsb2NhbCB0eXBlc1xuICByZXR1cm4gcHJpc21hLiR0cmFuc2FjdGlvbihhc3luYyAodHgpID0+IHtcbiAgICAvLyBDcmVhdGUgdmlvbGF0aW9uIHJlY29yZFxuICAgIGNvbnN0IHZpb2xhdGlvbiA9IGF3YWl0IHR4LnVzZXJfdmlvbGF0aW9ucy5jcmVhdGUoe1xuICAgICAgZGF0YToge1xuICAgICAgICBpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcbiAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIFVwZGF0ZSB1c2VyIHN0YXRpc3RpY3NcbiAgICBpZiAoZGF0YS53YXJuaW5nSXNzdWVkKSB7XG4gICAgICBhd2FpdCB0eC51c2Vycy51cGRhdGUoe1xuICAgICAgICB3aGVyZTogeyBpZDogZGF0YS51c2VySWQgfSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHdhcm5pbmdDb3VudDogeyBpbmNyZW1lbnQ6IDEgfSxcbiAgICAgICAgICByZXB1dGF0aW9uU2NvcmU6IHsgZGVjcmVtZW50OiBkYXRhLnJlcHV0YXRpb25IaXQgfSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB2aW9sYXRpb247XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCB1c2VyIHZpb2xhdGlvbiBoaXN0b3J5XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRVc2VyVmlvbGF0aW9uSGlzdG9yeShcbiAgdXNlcklkOiBzdHJpbmcsXG4gIHBhcmFtcz86IHtcbiAgICBsaW1pdD86IG51bWJlcjtcbiAgICBvZmZzZXQ/OiBudW1iZXI7XG4gICAgaW5jbHVkZVJlc29sdmVkPzogYm9vbGVhbjtcbiAgfVxuKTogUHJvbWlzZTxVc2VyVmlvbGF0aW9uW10+IHtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBQcmlzbWEgdHlwZSBtaXNtYXRjaCB3aXRoIGxvY2FsIHR5cGVzXG4gIHJldHVybiBwcmlzbWEudXNlcl92aW9sYXRpb25zLmZpbmRNYW55KHtcbiAgICB3aGVyZToge1xuICAgICAgdXNlcklkLFxuICAgICAgLi4uKHBhcmFtcz8uaW5jbHVkZVJlc29sdmVkID09PSBmYWxzZSAmJiB7IHJlc29sdmVkOiBmYWxzZSB9KSxcbiAgICB9LFxuICAgIG9yZGVyQnk6IHsgY3JlYXRlZEF0OiAnZGVzYycgfSxcbiAgICB0YWtlOiBwYXJhbXM/LmxpbWl0IHx8IDIwLFxuICAgIHNraXA6IHBhcmFtcz8ub2Zmc2V0IHx8IDAsXG4gIH0pO1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBTQUZFVFkgU0VUVElOR1MgUVVFUklFU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vKipcbiAqIEdldCB1c2VyIHNhZmV0eSBzZXR0aW5nc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VXNlclNhZmV0eVNldHRpbmdzKHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxTYWZldHlTZXR0aW5ncyB8IG51bGw+IHtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBQcmlzbWEgdHlwZSBtaXNtYXRjaCB3aXRoIGxvY2FsIHR5cGVzXG4gIHJldHVybiBwcmlzbWEuc2FmZXR5U2V0dGluZ3MuZmluZFVuaXF1ZSh7XG4gICAgd2hlcmU6IHsgdXNlcklkIH0sXG4gIH0pO1xufVxuXG4vKipcbiAqIFVwZGF0ZSB1c2VyIHNhZmV0eSBzZXR0aW5nc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlVXNlclNhZmV0eVNldHRpbmdzKFxuICB1c2VySWQ6IHN0cmluZyxcbiAgc2V0dGluZ3M6IFBhcnRpYWw8e1xuICAgIGFsbG93RGlyZWN0TWVzc2FnZXM6IGJvb2xlYW47XG4gICAgYWxsb3dUcmFpbmVyTWVzc2FnZXM6IGJvb2xlYW47XG4gICAgYWxsb3dHcm91cE1lc3NhZ2VzOiBib29sZWFuO1xuICAgIHByb2ZpbGVWaXNpYmlsaXR5OiBzdHJpbmc7XG4gICAgc2hvd09ubGluZVN0YXR1czogYm9vbGVhbjtcbiAgICBzaG93TGFzdFNlZW46IGJvb2xlYW47XG4gICAgYXV0b0Jsb2NrRmxhZ2dlZFVzZXJzOiBib29sZWFuO1xuICAgIHJlcXVpcmVWZXJpZmllZFRyYWluZXJzOiBib29sZWFuO1xuICAgIGNvbnRlbnRGaWx0ZXJTdHJlbmd0aDogc3RyaW5nO1xuICAgIHNhZmV0eUFsZXJ0czogYm9vbGVhbjtcbiAgICBtb2RlcmF0aW9uTm90aWZpY2F0aW9uczogYm9vbGVhbjtcbiAgfT5cbik6IFByb21pc2U8U2FmZXR5U2V0dGluZ3M+IHtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBQcmlzbWEgdHlwZSBtaXNtYXRjaCB3aXRoIGxvY2FsIHR5cGVzXG4gIHJldHVybiBwcmlzbWEuc2FmZXR5U2V0dGluZ3MudXBzZXJ0KHtcbiAgICB3aGVyZTogeyB1c2VySWQgfSxcbiAgICBjcmVhdGU6IHtcbiAgICAgIHVzZXJJZCxcbiAgICAgIC4uLnNldHRpbmdzLFxuICAgIH0sXG4gICAgdXBkYXRlOiBzZXR0aW5ncyxcbiAgfSk7XG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEFOQUxZVElDUyBBTkQgUkVQT1JUSU5HIFFVRVJJRVNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLyoqXG4gKiBHZXQgc2FmZXR5IGFuYWx5dGljcyBmb3IgYWRtaW4gZGFzaGJvYXJkXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTYWZldHlBbmFseXRpY3MoX3RpbWVmcmFtZTogJ3dlZWsnIHwgJ21vbnRoJyB8ICdxdWFydGVyJyA9ICdtb250aCcpOiBQcm9taXNlPHtcbiAgdXNlckdyb3d0aDogQXJyYXk8eyBkYXRlOiBzdHJpbmc7IG5ld1VzZXJzOiBudW1iZXI7IGFjdGl2ZVVzZXJzOiBudW1iZXIgfT47XG4gIHZpb2xhdGlvblRyZW5kczogQXJyYXk8eyBkYXRlOiBzdHJpbmc7IHZpb2xhdGlvbnM6IG51bWJlcjsgc2V2ZXJpdHk6IG51bWJlciB9PjtcbiAgbW9kZXJhdGlvbkVmZmljaWVuY3k6IHtcbiAgICBhdmVyYWdlUmVzcG9uc2VUaW1lOiBudW1iZXI7XG4gICAgYXV0b21hdGlvblJhdGU6IG51bWJlcjtcbiAgICBhcHBlYWxSYXRlOiBudW1iZXI7XG4gIH07XG4gIHJpc2tEaXN0cmlidXRpb246IFJlY29yZDxzdHJpbmcsIG51bWJlcj47XG4gIHRyYWluZXJTYWZldHk6IHtcbiAgICB2ZXJpZmllZFRyYWluZXJzOiBudW1iZXI7XG4gICAgZmxhZ2dlZFRyYWluZXJzOiBudW1iZXI7XG4gICAgYXZlcmFnZVJhdGluZzogbnVtYmVyO1xuICB9O1xufT4ge1xuICAvLyBUaGlzIHdvdWxkIGJlIGltcGxlbWVudGVkIHdpdGggY29tcGxleCBhZ2dyZWdhdGlvbiBxdWVyaWVzXG4gIC8vIEZvciBub3csIHJldHVybmluZyBhIHN0cnVjdHVyZWQgcmVzcG9uc2UgZm9yIHRoZSBpbnRlcmZhY2VcbiAgXG4gIHJldHVybiB7XG4gICAgdXNlckdyb3d0aDogW10sXG4gICAgdmlvbGF0aW9uVHJlbmRzOiBbXSxcbiAgICBtb2RlcmF0aW9uRWZmaWNpZW5jeToge1xuICAgICAgYXZlcmFnZVJlc3BvbnNlVGltZTogMCxcbiAgICAgIGF1dG9tYXRpb25SYXRlOiAwLFxuICAgICAgYXBwZWFsUmF0ZTogMCxcbiAgICB9LFxuICAgIHJpc2tEaXN0cmlidXRpb246IHtcbiAgICAgICdMT1cnOiAwLFxuICAgICAgJ01FRElVTSc6IDAsXG4gICAgICAnSElHSCc6IDAsXG4gICAgICAnQ1JJVElDQUwnOiAwLFxuICAgIH0sXG4gICAgdHJhaW5lclNhZmV0eToge1xuICAgICAgdmVyaWZpZWRUcmFpbmVyczogMCxcbiAgICAgIGZsYWdnZWRUcmFpbmVyczogMCxcbiAgICAgIGF2ZXJhZ2VSYXRpbmc6IDAsXG4gICAgfSxcbiAgfTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBzYWZldHkgcmVwb3J0IGZvciBleHBvcnRcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlU2FmZXR5UmVwb3J0KHBhcmFtczoge1xuICBzdGFydERhdGU6IERhdGU7XG4gIGVuZERhdGU6IERhdGU7XG4gIGluY2x1ZGVVc2VyRGF0YT86IGJvb2xlYW47XG4gIGluY2x1ZGVWaW9sYXRpb25zPzogYm9vbGVhbjtcbiAgaW5jbHVkZU1vZGVyYXRpb24/OiBib29sZWFuO1xufSk6IFByb21pc2U8e1xuICBzdW1tYXJ5OiB7XG4gICAgdG90YWxVc2VyczogbnVtYmVyO1xuICAgIGFjdGl2ZVVzZXJzOiBudW1iZXI7XG4gICAgc3VzcGVuZGVkVXNlcnM6IG51bWJlcjtcbiAgICBiYW5uZWRVc2VyczogbnVtYmVyO1xuICAgIHRvdGFsVmlvbGF0aW9uczogbnVtYmVyO1xuICAgIHJlc29sdmVkUmVwb3J0czogbnVtYmVyO1xuICB9O1xuICBkZXRhaWxzOiBhbnlbXTtcbn0+IHtcbiAgY29uc3Qgc3VtbWFyeSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICBwcmlzbWEudXNlcnMuY291bnQoKSxcbiAgICBwcmlzbWEudXNlcnMuY291bnQoeyB3aGVyZTogeyBzdGF0dXM6IFVzZXJTdGF0dXMuQUNUSVZFIH0gfSksXG4gICAgcHJpc21hLnVzZXJzLmNvdW50KHsgd2hlcmU6IHsgc3RhdHVzOiBVc2VyU3RhdHVzLlNVU1BFTkRFRCB9IH0pLFxuICAgIHByaXNtYS51c2Vycy5jb3VudCh7IHdoZXJlOiB7IHN0YXR1czogVXNlclN0YXR1cy5CQU5ORUQgfSB9KSxcbiAgICBwcmlzbWEudXNlcl92aW9sYXRpb25zLmNvdW50KHtcbiAgICAgIHdoZXJlOiB7XG4gICAgICAgIGNyZWF0ZWRBdDoge1xuICAgICAgICAgIGd0ZTogcGFyYW1zLnN0YXJ0RGF0ZSxcbiAgICAgICAgICBsdGU6IHBhcmFtcy5lbmREYXRlLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KSxcbiAgICBwcmlzbWEuc2FmZXR5X3JlcG9ydHMuY291bnQoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgc3RhdHVzOiAnUkVTT0xWRUQnLFxuICAgICAgICBjcmVhdGVkQXQ6IHtcbiAgICAgICAgICBndGU6IHBhcmFtcy5zdGFydERhdGUsXG4gICAgICAgICAgbHRlOiBwYXJhbXMuZW5kRGF0ZSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSksXG4gIF0pO1xuXG4gIHJldHVybiB7XG4gICAgc3VtbWFyeToge1xuICAgICAgdG90YWxVc2Vyczogc3VtbWFyeVswXSxcbiAgICAgIGFjdGl2ZVVzZXJzOiBzdW1tYXJ5WzFdLFxuICAgICAgc3VzcGVuZGVkVXNlcnM6IHN1bW1hcnlbMl0sXG4gICAgICBiYW5uZWRVc2Vyczogc3VtbWFyeVszXSxcbiAgICAgIHRvdGFsVmlvbGF0aW9uczogc3VtbWFyeVs0XSxcbiAgICAgIHJlc29sdmVkUmVwb3J0czogc3VtbWFyeVs1XSxcbiAgICB9LFxuICAgIGRldGFpbHM6IFtdLCAvLyBXb3VsZCBpbmNsdWRlIGRldGFpbGVkIGRhdGEgYmFzZWQgb24gcGFyYW1zXG4gIH07XG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFVUSUxJVFkgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8qKlxuICogQ2FsY3VsYXRlIHVzZXIgcmlzayBsZXZlbCBiYXNlZCBvbiB2YXJpb3VzIGZhY3RvcnNcbiAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlVXNlclJpc2tMZXZlbChcbiAgcmVwdXRhdGlvblNjb3JlOiBudW1iZXIsXG4gIHRvdGFsVmlvbGF0aW9uczogbnVtYmVyLFxuICByZWNlbnRWaW9sYXRpb25zOiBudW1iZXIsXG4gIHdhcm5pbmdDb3VudDogbnVtYmVyXG4pOiAnTE9XJyB8ICdNRURJVU0nIHwgJ0hJR0gnIHwgJ0NSSVRJQ0FMJyB7XG4gIC8vIEhpZ2ggcmlzayBpbmRpY2F0b3JzXG4gIGlmIChyZWNlbnRWaW9sYXRpb25zID49IDMgfHwgdG90YWxWaW9sYXRpb25zID49IDEwIHx8IHdhcm5pbmdDb3VudCA+PSA1KSB7XG4gICAgcmV0dXJuICdDUklUSUNBTCc7XG4gIH1cbiAgXG4gIGlmIChyZWNlbnRWaW9sYXRpb25zID49IDIgfHwgdG90YWxWaW9sYXRpb25zID49IDUgfHwgd2FybmluZ0NvdW50ID49IDMgfHwgcmVwdXRhdGlvblNjb3JlIDwgMjUpIHtcbiAgICByZXR1cm4gJ0hJR0gnO1xuICB9XG4gIFxuICBpZiAocmVjZW50VmlvbGF0aW9ucyA+PSAxIHx8IHRvdGFsVmlvbGF0aW9ucyA+PSAyIHx8IHdhcm5pbmdDb3VudCA+PSAxIHx8IHJlcHV0YXRpb25TY29yZSA8IDUwKSB7XG4gICAgcmV0dXJuICdNRURJVU0nO1xuICB9XG4gIFxuICByZXR1cm4gJ0xPVyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIHVzZXIgcmVzdHJpY3Rpb25zIGJhc2VkIG9uIHNhZmV0eSBwcm9maWxlXG4gKi9cbmZ1bmN0aW9uIGRldGVybWluZVVzZXJSZXN0cmljdGlvbnMoXG4gIHVzZXI6IGFueSxcbiAgdG90YWxWaW9sYXRpb25zOiBudW1iZXIsXG4gIHJlY2VudFZpb2xhdGlvbnM6IG51bWJlclxuKTogc3RyaW5nW10ge1xuICBjb25zdCByZXN0cmljdGlvbnM6IHN0cmluZ1tdID0gW107XG4gIFxuICBpZiAodXNlci5zdGF0dXMgPT09IFVzZXJTdGF0dXMuU1VTUEVOREVEKSB7XG4gICAgcmVzdHJpY3Rpb25zLnB1c2goJ0FDQ09VTlRfU1VTUEVOREVEJyk7XG4gIH1cbiAgXG4gIGlmICh1c2VyLnN0YXR1cyA9PT0gVXNlclN0YXR1cy5CQU5ORUQpIHtcbiAgICByZXN0cmljdGlvbnMucHVzaCgnQUNDT1VOVF9CQU5ORUQnKTtcbiAgfVxuICBcbiAgaWYgKHVzZXIucmVwdXRhdGlvblNjb3JlIDwgMjUpIHtcbiAgICByZXN0cmljdGlvbnMucHVzaCgnTk9fRElSRUNUX01FU1NBR0VTJyk7XG4gIH1cbiAgXG4gIGlmICh1c2VyLndhcm5pbmdDb3VudCA+PSAzIHx8IHJlY2VudFZpb2xhdGlvbnMgPj0gMikge1xuICAgIHJlc3RyaWN0aW9ucy5wdXNoKCdOT19QT1NUX0NSRUFUSU9OJyk7XG4gICAgcmVzdHJpY3Rpb25zLnB1c2goJ05PX0NPTU1VTklUWV9DUkVBVElPTicpO1xuICB9XG4gIFxuICBpZiAodG90YWxWaW9sYXRpb25zID49IDUpIHtcbiAgICByZXN0cmljdGlvbnMucHVzaCgnTElNSVRFRF9JTlRFUkFDVElPTlMnKTtcbiAgfVxuICBcbiAgcmV0dXJuIHJlc3RyaWN0aW9ucztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgcHJpb3JpdHkgZm9yIHNhZmV0eSByZXBvcnRzXG4gKi9cbmZ1bmN0aW9uIGRldGVybWluZVByaW9yaXR5KGNhdGVnb3J5OiBWaW9sYXRpb25UeXBlVHlwZSwgZGVzY3JpcHRpb246IHN0cmluZyk6ICdMT1cnIHwgJ01FRElVTScgfCAnSElHSCcgfCAnVVJHRU5UJyB7XG4gIC8vIEhpZ2ggcHJpb3JpdHkgY2F0ZWdvcmllc1xuICBpZiAoY2F0ZWdvcnkgPT09IFZpb2xhdGlvblR5cGUuVEhSRUFUIHx8IGNhdGVnb3J5ID09PSBWaW9sYXRpb25UeXBlLkhBVEVfU1BFRUNIIHx8IGNhdGVnb3J5ID09PSBWaW9sYXRpb25UeXBlLlBSSVZBQ1lfVklPTEFUSU9OKSB7XG4gICAgcmV0dXJuICdVUkdFTlQnO1xuICB9XG4gIFxuICBpZiAoY2F0ZWdvcnkgPT09IFZpb2xhdGlvblR5cGUuSEFSQVNTTUVOVCB8fCBjYXRlZ29yeSA9PT0gVmlvbGF0aW9uVHlwZS5JTkFQUFJPUFJJQVRFX0NPTlRFTlQpIHtcbiAgICByZXR1cm4gJ0hJR0gnO1xuICB9XG4gIFxuICBpZiAoY2F0ZWdvcnkgPT09IFZpb2xhdGlvblR5cGUuU1BBTSkge1xuICAgIHJldHVybiAnTE9XJztcbiAgfVxuICBcbiAgLy8gQ2hlY2sgZGVzY3JpcHRpb24gZm9yIHVyZ2VudCBrZXl3b3Jkc1xuICBjb25zdCB1cmdlbnRLZXl3b3JkcyA9IFsndGhyZWF0JywgJ2RhbmdlcicsICdoYXJtJywgJ3N1aWNpZGUnLCAndmlvbGVuY2UnXTtcbiAgaWYgKHVyZ2VudEtleXdvcmRzLnNvbWUoa2V5d29yZCA9PiBkZXNjcmlwdGlvbi50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGtleXdvcmQpKSkge1xuICAgIHJldHVybiAnVVJHRU5UJztcbiAgfVxuICBcbiAgcmV0dXJuICdNRURJVU0nO1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBQSEFTRSA1OiBUUkFJTkVSIEJVU0lORVNTIFFVRVJJRVNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLyoqXG4gKiBDcmVhdGUgb3IgdXBkYXRlIHRyYWluZXIgcHJvZmlsZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlT3JVcGRhdGVUcmFpbmVyUHJvZmlsZSh1c2VySWQ6IHN0cmluZywgZGF0YToge1xuICBidXNpbmVzc05hbWU/OiBzdHJpbmc7XG4gIGJ1c2luZXNzRGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIGhvdXJseVJhdGU/OiBudW1iZXI7XG4gIGN1cnJlbmN5Pzogc3RyaW5nO1xuICBzcGVjaWFsaXphdGlvbnM/OiBzdHJpbmdbXTtcbiAgZXhwZXJpZW5jZVllYXJzPzogbnVtYmVyO1xuICBhdmFpbGFibGVIb3Vycz86IGFueTtcbiAgdGltZXpvbmU/OiBzdHJpbmc7XG59KSB7XG4gIGNvbnN0IGV4aXN0aW5nUHJvZmlsZSA9IGF3YWl0IHByaXNtYS50cmFpbmVyX3Byb2ZpbGVzLmZpbmRVbmlxdWUoe1xuICAgIHdoZXJlOiB7IHVzZXJJZCB9XG4gIH0pO1xuXG4gIGlmIChleGlzdGluZ1Byb2ZpbGUpIHtcbiAgICByZXR1cm4gcHJpc21hLnRyYWluZXJfcHJvZmlsZXMudXBkYXRlKHtcbiAgICAgIHdoZXJlOiB7IHVzZXJJZCB9LFxuICAgICAgZGF0YVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcmlzbWEudHJhaW5lcl9wcm9maWxlcy5jcmVhdGUoe1xuICAgICAgZGF0YToge1xuICAgICAgICBpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcbiAgICAgICAgdXNlcklkLFxuICAgICAgICAuLi5kYXRhXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgdHJhaW5lciBwcm9maWxlIHdpdGggYnVzaW5lc3Mgc3RhdHNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFRyYWluZXJQcm9maWxlV2l0aFN0YXRzKHRyYWluZXJJZDogc3RyaW5nKSB7XG4gIHJldHVybiBwcmlzbWEudHJhaW5lcl9wcm9maWxlcy5maW5kVW5pcXVlKHtcbiAgICB3aGVyZTogeyBpZDogdHJhaW5lcklkIH0sXG4gICAgaW5jbHVkZToge1xuICAgICAgdXNlcjoge1xuICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICBpZDogdHJ1ZSxcbiAgICAgICAgICBuYW1lOiB0cnVlLFxuICAgICAgICAgIGVtYWlsOiB0cnVlLFxuICAgICAgICAgIGltYWdlOiB0cnVlLFxuICAgICAgICAgIHJvbGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIF9jb3VudDoge1xuICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICB0cmFpbmVyX2NsaWVudHM6IHsgd2hlcmU6IHsgc3RhdHVzOiAnQUNUSVZFJyB9IH0sXG4gICAgICAgICAgYXBwb2ludG1lbnRzOiB0cnVlLFxuICAgICAgICAgIHRyYWluZXJfcmV2aWV3czogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdHJhaW5lciBjbGllbnRzIHdpdGggcGFnaW5hdGlvbiBhbmQgZmlsdGVyc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VHJhaW5lckNsaWVudHMoXG4gIHRyYWluZXJJZDogc3RyaW5nLFxuICBmaWx0ZXJzOiB7XG4gICAgc3RhdHVzPzogc3RyaW5nO1xuICAgIHNlYXJjaD86IHN0cmluZztcbiAgICBwYWdlPzogbnVtYmVyO1xuICAgIGxpbWl0PzogbnVtYmVyO1xuICB9ID0ge31cbikge1xuICBjb25zdCB7IHN0YXR1cywgc2VhcmNoLCBwYWdlID0gMSwgbGltaXQgPSAyMCB9ID0gZmlsdGVycztcbiAgY29uc3Qgc2tpcCA9IChwYWdlIC0gMSkgKiBsaW1pdDtcblxuICBjb25zdCB3aGVyZTogYW55ID0ge1xuICAgIHRyYWluZXJJZCxcbiAgICAuLi4oc3RhdHVzICYmIHsgc3RhdHVzIH0pLFxuICAgIC4uLihzZWFyY2ggJiYge1xuICAgICAgY2xpZW50OiB7XG4gICAgICAgIE9SOiBbXG4gICAgICAgICAgeyBuYW1lOiB7IGNvbnRhaW5zOiBzZWFyY2gsIG1vZGU6ICdpbnNlbnNpdGl2ZScgfSB9LFxuICAgICAgICAgIHsgZW1haWw6IHsgY29udGFpbnM6IHNlYXJjaCwgbW9kZTogJ2luc2Vuc2l0aXZlJyB9IH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pXG4gIH07XG5cbiAgY29uc3QgW2NsaWVudHMsIHRvdGFsXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICBwcmlzbWEudHJhaW5lcl9jbGllbnRzLmZpbmRNYW55KHtcbiAgICAgIHdoZXJlLFxuICAgICAgaW5jbHVkZToge1xuICAgICAgICB1c2Vyczoge1xuICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgICBuYW1lOiB0cnVlLFxuICAgICAgICAgICAgZW1haWw6IHRydWUsXG4gICAgICAgICAgICBpbWFnZTogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2NvdW50OiB7XG4gICAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgICBhcHBvaW50bWVudHM6IHRydWUsXG4gICAgICAgICAgICBwcm9ncmVzc19yZXBvcnRzOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb3JkZXJCeTogeyBjcmVhdGVkQXQ6ICdkZXNjJyB9LFxuICAgICAgc2tpcCxcbiAgICAgIHRha2U6IGxpbWl0XG4gICAgfSksXG4gICAgcHJpc21hLnRyYWluZXJfY2xpZW50cy5jb3VudCh7IHdoZXJlIH0pXG4gIF0pO1xuXG4gIHJldHVybiB7XG4gICAgY2xpZW50cyxcbiAgICB0b3RhbCxcbiAgICBwYWdlLFxuICAgIHRvdGFsUGFnZXM6IE1hdGguY2VpbCh0b3RhbCAvIGxpbWl0KVxuICB9O1xufVxuXG4vKipcbiAqIEFkZCBjbGllbnQgdG8gdHJhaW5lclxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkQ2xpZW50VG9UcmFpbmVyKHRyYWluZXJJZDogc3RyaW5nLCBjbGllbnRJZDogc3RyaW5nLCBkYXRhOiB7XG4gIG1vbnRobHlSYXRlPzogbnVtYmVyO1xuICBnb2Fscz86IHN0cmluZ1tdO1xuICBub3Rlcz86IHN0cmluZztcbiAgbWVkaWNhbENvbmRpdGlvbnM/OiBzdHJpbmdbXTtcbiAgcHJlZmVyZW5jZXM/OiBhbnk7XG59KSB7XG4gIC8vIENoZWNrIGlmIHJlbGF0aW9uc2hpcCBhbHJlYWR5IGV4aXN0c1xuICBjb25zdCBleGlzdGluZyA9IGF3YWl0IHByaXNtYS50cmFpbmVyX2NsaWVudHMuZmluZFVuaXF1ZSh7XG4gICAgd2hlcmU6IHtcbiAgICAgIHRyYWluZXJJZF9jbGllbnRJZDogeyB0cmFpbmVySWQsIGNsaWVudElkIH1cbiAgICB9XG4gIH0pO1xuXG4gIGlmIChleGlzdGluZykge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50IGlzIGFscmVhZHkgYXNzb2NpYXRlZCB3aXRoIHRoaXMgdHJhaW5lcicpO1xuICB9XG5cbiAgY29uc3QgcmVsYXRpb25zaGlwID0gYXdhaXQgcHJpc21hLnRyYWluZXJfY2xpZW50cy5jcmVhdGUoe1xuICAgIGRhdGE6IHtcbiAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxuICAgICAgdHJhaW5lcklkLFxuICAgICAgY2xpZW50SWQsXG4gICAgICBzdGF0dXM6ICdBQ1RJVkUnLFxuICAgICAgLi4uZGF0YVxuICAgIH1cbiAgfSk7XG5cbiAgLy8gVXBkYXRlIHRyYWluZXIncyBjbGllbnQgY291bnRzXG4gIGF3YWl0IHByaXNtYS50cmFpbmVyX3Byb2ZpbGVzLnVwZGF0ZSh7XG4gICAgd2hlcmU6IHsgaWQ6IHRyYWluZXJJZCB9LFxuICAgIGRhdGE6IHtcbiAgICAgIGFjdGl2ZUNsaWVudHM6IHsgaW5jcmVtZW50OiAxIH0sXG4gICAgICB0b3RhbENsaWVudHM6IHsgaW5jcmVtZW50OiAxIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZWxhdGlvbnNoaXA7XG59XG5cbi8qKlxuICogQ3JlYXRlIGFwcG9pbnRtZW50XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVBcHBvaW50bWVudChkYXRhOiB7XG4gIHRyYWluZXJJZDogc3RyaW5nO1xuICBjbGllbnRJZDogc3RyaW5nO1xuICB0aXRsZTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgc2NoZWR1bGVkQXQ6IERhdGU7XG4gIGR1cmF0aW9uPzogbnVtYmVyO1xuICB0eXBlPzogc3RyaW5nO1xuICBsb2NhdGlvbj86IHN0cmluZztcbiAgaXNWaXJ0dWFsPzogYm9vbGVhbjtcbiAgcHJpY2U/OiBudW1iZXI7XG4gIGN1cnJlbmN5Pzogc3RyaW5nO1xufSkge1xuICByZXR1cm4gcHJpc21hLmFwcG9pbnRtZW50cy5jcmVhdGUoe1xuICAgIGRhdGE6IHtcbiAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxuICAgICAgdHJhaW5lcklkOiBkYXRhLnRyYWluZXJJZCxcbiAgICAgIGNsaWVudElkOiBkYXRhLmNsaWVudElkLFxuICAgICAgdGl0bGU6IGRhdGEudGl0bGUsXG4gICAgICBkZXNjcmlwdGlvbjogZGF0YS5kZXNjcmlwdGlvbiA/PyBudWxsLFxuICAgICAgc2NoZWR1bGVkQXQ6IGRhdGEuc2NoZWR1bGVkQXQsXG4gICAgICBkdXJhdGlvbjogZGF0YS5kdXJhdGlvbiB8fCA2MCxcbiAgICAgIHR5cGU6IChkYXRhLnR5cGUgYXMgYW55KSB8fCAnUEVSU09OQUxfVFJBSU5JTkcnLFxuICAgICAgbG9jYXRpb246IGRhdGEubG9jYXRpb24gPz8gbnVsbCxcbiAgICAgIGlzVmlydHVhbDogZGF0YS5pc1ZpcnR1YWwgPz8gZmFsc2UsXG4gICAgICBwcmljZTogZGF0YS5wcmljZSA/PyBudWxsLFxuICAgICAgY3VycmVuY3k6IGRhdGEuY3VycmVuY3kgPz8gJ1VTRCcsXG4gICAgICBzdGF0dXM6ICdTQ0hFRFVMRUQnXG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdHJhaW5lciBhcHBvaW50bWVudHMgd2l0aCBmaWx0ZXJzXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRUcmFpbmVyQXBwb2ludG1lbnRzKFxuICB0cmFpbmVySWQ6IHN0cmluZyxcbiAgZmlsdGVyczoge1xuICAgIHN0YXR1cz86IHN0cmluZ1tdO1xuICAgIGRhdGVSYW5nZT86IHsgc3RhcnQ6IERhdGU7IGVuZDogRGF0ZSB9O1xuICAgIGNsaWVudElkPzogc3RyaW5nO1xuICAgIHBhZ2U/OiBudW1iZXI7XG4gICAgbGltaXQ/OiBudW1iZXI7XG4gIH0gPSB7fVxuKSB7XG4gIGNvbnN0IHsgc3RhdHVzLCBkYXRlUmFuZ2UsIGNsaWVudElkLCBwYWdlID0gMSwgbGltaXQgPSAyMCB9ID0gZmlsdGVycztcbiAgY29uc3Qgc2tpcCA9IChwYWdlIC0gMSkgKiBsaW1pdDtcblxuICBjb25zdCB3aGVyZTogYW55ID0ge1xuICAgIHRyYWluZXJJZCxcbiAgICAuLi4oc3RhdHVzICYmIHsgc3RhdHVzOiB7IGluOiBzdGF0dXMgfSB9KSxcbiAgICAuLi4oZGF0ZVJhbmdlICYmIHtcbiAgICAgIHNjaGVkdWxlZEF0OiB7XG4gICAgICAgIGd0ZTogZGF0ZVJhbmdlLnN0YXJ0LFxuICAgICAgICBsdGU6IGRhdGVSYW5nZS5lbmRcbiAgICAgIH1cbiAgICB9KSxcbiAgICAuLi4oY2xpZW50SWQgJiYgeyBjbGllbnRJZCB9KVxuICB9O1xuXG4gIGNvbnN0IFthcHBvaW50bWVudHMsIHRvdGFsXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICBwcmlzbWEuYXBwb2ludG1lbnRzLmZpbmRNYW55KHtcbiAgICAgIHdoZXJlLFxuICAgICAgaW5jbHVkZToge1xuICAgICAgICB1c2Vyczoge1xuICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgICBuYW1lOiB0cnVlLFxuICAgICAgICAgICAgZW1haWw6IHRydWUsXG4gICAgICAgICAgICBpbWFnZTogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd29ya291dF9zZXNzaW9uczoge1xuICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgICB0aXRsZTogdHJ1ZSxcbiAgICAgICAgICAgIGlzQ29tcGxldGU6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvcmRlckJ5OiB7IHNjaGVkdWxlZEF0OiAnYXNjJyB9LFxuICAgICAgc2tpcCxcbiAgICAgIHRha2U6IGxpbWl0XG4gICAgfSksXG4gICAgcHJpc21hLmFwcG9pbnRtZW50cy5jb3VudCh7IHdoZXJlIH0pXG4gIF0pO1xuXG4gIHJldHVybiB7XG4gICAgYXBwb2ludG1lbnRzLFxuICAgIHRvdGFsLFxuICAgIHBhZ2UsXG4gICAgdG90YWxQYWdlczogTWF0aC5jZWlsKHRvdGFsIC8gbGltaXQpXG4gIH07XG59XG5cbi8qKlxuICogVXBkYXRlIGFwcG9pbnRtZW50IHN0YXR1c1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlQXBwb2ludG1lbnRTdGF0dXMoXG4gIGFwcG9pbnRtZW50SWQ6IHN0cmluZyxcbiAgc3RhdHVzOiBzdHJpbmcsXG4gIHVwZGF0ZXM6IHtcbiAgICB0cmFpbmVyTm90ZXM/OiBzdHJpbmc7XG4gICAgY2xpZW50Tm90ZXM/OiBzdHJpbmc7XG4gICAgcmF0aW5nPzogbnVtYmVyO1xuICAgIGZlZWRiYWNrPzogc3RyaW5nO1xuICAgIGNhbmNlbGxhdGlvblJlYXNvbj86IHN0cmluZztcbiAgICBjYW5jZWxsZWRCeT86IHN0cmluZztcbiAgfSA9IHt9XG4pIHtcbiAgY29uc3QgdXBkYXRlRGF0YTogYW55ID0geyBzdGF0dXMsIC4uLnVwZGF0ZXMgfTtcblxuICBpZiAoc3RhdHVzID09PSAnQ0FOQ0VMTEVEJykge1xuICAgIHVwZGF0ZURhdGEuY2FuY2VsbGVkQXQgPSBuZXcgRGF0ZSgpO1xuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gJ0NPTVBMRVRFRCcpIHtcbiAgICB1cGRhdGVEYXRhLmNvbXBsZXRlZEF0ID0gbmV3IERhdGUoKTtcbiAgfVxuXG4gIHJldHVybiBwcmlzbWEuYXBwb2ludG1lbnRzLnVwZGF0ZSh7XG4gICAgd2hlcmU6IHsgaWQ6IGFwcG9pbnRtZW50SWQgfSxcbiAgICBkYXRhOiB1cGRhdGVEYXRhXG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZSBwcm9ncmVzcyByZXBvcnRcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVByb2dyZXNzUmVwb3J0KGRhdGE6IHtcbiAgdHJhaW5lcklkOiBzdHJpbmc7XG4gIGNsaWVudElkOiBzdHJpbmc7XG4gIHRyYWluZXJDbGllbnRJZDogc3RyaW5nO1xuICB0aXRsZTogc3RyaW5nO1xuICBzdW1tYXJ5OiBzdHJpbmc7XG4gIHBlcmlvZD86IHN0cmluZztcbiAgZ29hbHM/OiBhbnlbXTtcbiAgYWNoaWV2ZW1lbnRzPzogYW55W107XG4gIG1ldHJpY3M/OiBhbnk7XG4gIHdvcmtvdXRTdGF0cz86IGFueTtcbiAgcmVjb21tZW5kYXRpb25zPzogc3RyaW5nO1xuICBuZXh0R29hbHM/OiBhbnlbXTtcbn0pIHtcbiAgcmV0dXJuIHByaXNtYS5wcm9ncmVzc19yZXBvcnRzLmNyZWF0ZSh7XG4gICAgZGF0YToge1xuICAgICAgaWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXG4gICAgICAuLi5kYXRhLFxuICAgICAgcmVwb3J0RGF0ZTogbmV3IERhdGUoKSxcbiAgICAgIHBlcmlvZDogZGF0YS5wZXJpb2QgfHwgJ01PTlRITFknXG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdHJhaW5lcidzIHByb2dyZXNzIHJlcG9ydHNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFRyYWluZXJQcm9ncmVzc1JlcG9ydHMoXG4gIHRyYWluZXJJZDogc3RyaW5nLFxuICBmaWx0ZXJzOiB7XG4gICAgY2xpZW50SWQ/OiBzdHJpbmc7XG4gICAgcGVyaW9kPzogc3RyaW5nO1xuICAgIGlzU2hhcmVkPzogYm9vbGVhbjtcbiAgICBwYWdlPzogbnVtYmVyO1xuICAgIGxpbWl0PzogbnVtYmVyO1xuICB9ID0ge31cbikge1xuICBjb25zdCB7IGNsaWVudElkLCBwZXJpb2QsIGlzU2hhcmVkLCBwYWdlID0gMSwgbGltaXQgPSAyMCB9ID0gZmlsdGVycztcbiAgY29uc3Qgc2tpcCA9IChwYWdlIC0gMSkgKiBsaW1pdDtcblxuICBjb25zdCB3aGVyZTogYW55ID0ge1xuICAgIHRyYWluZXJJZCxcbiAgICAuLi4oY2xpZW50SWQgJiYgeyBjbGllbnRJZCB9KSxcbiAgICAuLi4ocGVyaW9kICYmIHsgcGVyaW9kIH0pLFxuICAgIC4uLihpc1NoYXJlZCAhPT0gdW5kZWZpbmVkICYmIHsgaXNTaGFyZWQgfSlcbiAgfTtcblxuICBjb25zdCBbcmVwb3J0cywgdG90YWxdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgIHByaXNtYS5wcm9ncmVzc19yZXBvcnRzLmZpbmRNYW55KHtcbiAgICAgIHdoZXJlLFxuICAgICAgaW5jbHVkZToge1xuICAgICAgICB1c2Vyczoge1xuICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgICBuYW1lOiB0cnVlLFxuICAgICAgICAgICAgZW1haWw6IHRydWUsXG4gICAgICAgICAgICBpbWFnZTogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9yZGVyQnk6IHsgcmVwb3J0RGF0ZTogJ2Rlc2MnIH0sXG4gICAgICBza2lwLFxuICAgICAgdGFrZTogbGltaXRcbiAgICB9KSxcbiAgICBwcmlzbWEucHJvZ3Jlc3NfcmVwb3J0cy5jb3VudCh7IHdoZXJlIH0pXG4gIF0pO1xuXG4gIHJldHVybiB7XG4gICAgcmVwb3J0cyxcbiAgICB0b3RhbCxcbiAgICBwYWdlLFxuICAgIHRvdGFsUGFnZXM6IE1hdGguY2VpbCh0b3RhbCAvIGxpbWl0KVxuICB9O1xufVxuXG4vKipcbiAqIFNoYXJlIHByb2dyZXNzIHJlcG9ydCB3aXRoIGNsaWVudFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2hhcmVQcm9ncmVzc1JlcG9ydChyZXBvcnRJZDogc3RyaW5nKSB7XG4gIHJldHVybiBwcmlzbWEucHJvZ3Jlc3NfcmVwb3J0cy51cGRhdGUoe1xuICAgIHdoZXJlOiB7IGlkOiByZXBvcnRJZCB9LFxuICAgIGRhdGE6IHsgaXNTaGFyZWQ6IHRydWUgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdHJhaW5lciBlYXJuaW5ncyBzdW1tYXJ5XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRUcmFpbmVyRWFybmluZ3MoXG4gIHRyYWluZXJJZDogc3RyaW5nLFxuICBwZXJpb2Q6ICd3ZWVrJyB8ICdtb250aCcgfCAneWVhcicgPSAnbW9udGgnXG4pIHtcbiAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgbGV0IHN0YXJ0RGF0ZTogRGF0ZTtcblxuICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgc3RhcnREYXRlID0gbmV3IERhdGUobm93LmdldFRpbWUoKSAtIDcgKiAyNCAqIDYwICogNjAgKiAxMDAwKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3llYXInOlxuICAgICAgc3RhcnREYXRlID0gbmV3IERhdGUobm93LmdldEZ1bGxZZWFyKCksIDAsIDEpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDogLy8gbW9udGhcbiAgICAgIHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKG5vdy5nZXRGdWxsWWVhcigpLCBub3cuZ2V0TW9udGgoKSwgMSk7XG4gIH1cblxuICBjb25zdCBlYXJuaW5ncyA9IGF3YWl0IHByaXNtYS5wYXltZW50cy5hZ2dyZWdhdGUoe1xuICAgIHdoZXJlOiB7XG4gICAgICB0cmFpbmVySWQsXG4gICAgICBzdGF0dXM6ICdDT01QTEVURUQnLFxuICAgICAgcGF5bWVudERhdGU6IHsgZ3RlOiBzdGFydERhdGUgfVxuICAgIH0sXG4gICAgX3N1bToge1xuICAgICAgYW1vdW50OiB0cnVlLFxuICAgICAgdHJhaW5lckVhcm5pbmdzOiB0cnVlLFxuICAgICAgcGxhdGZvcm1GZWU6IHRydWVcbiAgICB9LFxuICAgIF9jb3VudDogdHJ1ZVxuICB9KTtcblxuICByZXR1cm4ge1xuICAgIHRvdGFsQW1vdW50OiBlYXJuaW5ncy5fc3VtLmFtb3VudCB8fCAwLFxuICAgIHRyYWluZXJFYXJuaW5nczogZWFybmluZ3MuX3N1bS50cmFpbmVyRWFybmluZ3MgfHwgMCxcbiAgICBwbGF0Zm9ybUZlZTogZWFybmluZ3MuX3N1bS5wbGF0Zm9ybUZlZSB8fCAwLFxuICAgIHRyYW5zYWN0aW9uQ291bnQ6IGVhcm5pbmdzLl9jb3VudCxcbiAgICBwZXJpb2RcbiAgfTtcbn1cblxuLyoqXG4gKiBDaGVjayBmb3IgYXBwb2ludG1lbnQgc2NoZWR1bGluZyBjb25mbGljdHNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoZWNrQXBwb2ludG1lbnRDb25mbGljdChcbiAgdHJhaW5lcklkOiBzdHJpbmcsXG4gIHNjaGVkdWxlZEF0OiBEYXRlLFxuICBkdXJhdGlvbjogbnVtYmVyID0gNjAsXG4gIGV4Y2x1ZGVBcHBvaW50bWVudElkPzogc3RyaW5nXG4pIHtcbiAgY29uc3QgZW5kVGltZSA9IG5ldyBEYXRlKHNjaGVkdWxlZEF0LmdldFRpbWUoKSArIChkdXJhdGlvbiAqIDYwICogMTAwMCkpO1xuXG4gIHJldHVybiBwcmlzbWEuYXBwb2ludG1lbnRzLmZpbmRGaXJzdCh7XG4gICAgd2hlcmU6IHtcbiAgICAgIHRyYWluZXJJZCxcbiAgICAgIC4uLihleGNsdWRlQXBwb2ludG1lbnRJZCAmJiB7IGlkOiB7IG5vdDogZXhjbHVkZUFwcG9pbnRtZW50SWQgfSB9KSxcbiAgICAgIHN0YXR1czogeyBpbjogWydTQ0hFRFVMRUQnLCAnQ09ORklSTUVEJywgJ0lOX1BST0dSRVNTJ10gfSxcbiAgICAgIE9SOiBbXG4gICAgICAgIC8vIEFwcG9pbnRtZW50IHN0YXJ0cyBkdXJpbmcgbmV3IGFwcG9pbnRtZW50XG4gICAgICAgIHtcbiAgICAgICAgICBBTkQ6IFtcbiAgICAgICAgICAgIHsgc2NoZWR1bGVkQXQ6IHsgbHRlOiBzY2hlZHVsZWRBdCB9IH0sXG4gICAgICAgICAgICB7IHNjaGVkdWxlZEF0OiB7IGd0ZTogbmV3IERhdGUoc2NoZWR1bGVkQXQuZ2V0VGltZSgpIC0gKDYwICogNjAgKiAxMDAwKSkgfSB9XG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICAvLyBBcHBvaW50bWVudCBlbmRzIGR1cmluZyBuZXcgYXBwb2ludG1lbnRcbiAgICAgICAge1xuICAgICAgICAgIEFORDogW1xuICAgICAgICAgICAgeyBzY2hlZHVsZWRBdDogeyBsdGU6IGVuZFRpbWUgfSB9LFxuICAgICAgICAgICAgeyBzY2hlZHVsZWRBdDogeyBndGU6IHNjaGVkdWxlZEF0IH0gfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IHRyYWluZXIgYXZhaWxhYmlsaXR5IGZvciBkYXRlIHJhbmdlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRUcmFpbmVyQXZhaWxhYmlsaXR5KFxuICB0cmFpbmVySWQ6IHN0cmluZyxcbiAgc3RhcnREYXRlOiBEYXRlLFxuICBlbmREYXRlOiBEYXRlXG4pIHtcbiAgLy8gR2V0IHRyYWluZXIncyBhdmFpbGFibGUgaG91cnNcbiAgY29uc3QgdHJhaW5lclByb2ZpbGUgPSBhd2FpdCBwcmlzbWEudHJhaW5lcl9wcm9maWxlcy5maW5kVW5pcXVlKHtcbiAgICB3aGVyZTogeyBpZDogdHJhaW5lcklkIH0sXG4gICAgc2VsZWN0OiB7IGF2YWlsYWJsZUhvdXJzOiB0cnVlLCB0aW1lem9uZTogdHJ1ZSB9XG4gIH0pO1xuXG4gIC8vIEdldCBleGlzdGluZyBhcHBvaW50bWVudHNcbiAgY29uc3QgYXBwb2ludG1lbnRzID0gYXdhaXQgcHJpc21hLmFwcG9pbnRtZW50cy5maW5kTWFueSh7XG4gICAgd2hlcmU6IHtcbiAgICAgIHRyYWluZXJJZCxcbiAgICAgIHNjaGVkdWxlZEF0OiB7IGd0ZTogc3RhcnREYXRlLCBsdGU6IGVuZERhdGUgfSxcbiAgICAgIHN0YXR1czogeyBpbjogWydTQ0hFRFVMRUQnLCAnQ09ORklSTUVEJywgJ0lOX1BST0dSRVNTJ10gfVxuICAgIH0sXG4gICAgc2VsZWN0OiB7XG4gICAgICBpZDogdHJ1ZSxcbiAgICAgIHNjaGVkdWxlZEF0OiB0cnVlLFxuICAgICAgZHVyYXRpb246IHRydWUsXG4gICAgICB0eXBlOiB0cnVlLFxuICAgICAgdGl0bGU6IHRydWVcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgdHJhaW5lclByb2ZpbGUsXG4gICAgYXBwb2ludG1lbnRzLFxuICAgIGRhdGVSYW5nZTogeyBzdGFydERhdGUsIGVuZERhdGUgfVxuICB9O1xufVxuXG4vKipcbiAqIFJlc2NoZWR1bGUgYXBwb2ludG1lbnRcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlc2NoZWR1bGVBcHBvaW50bWVudChcbiAgYXBwb2ludG1lbnRJZDogc3RyaW5nLFxuICBuZXdTY2hlZHVsZWRBdDogRGF0ZSxcbiAgcmVhc29uPzogc3RyaW5nXG4pIHtcbiAgY29uc3QgYXBwb2ludG1lbnQgPSBhd2FpdCBwcmlzbWEuYXBwb2ludG1lbnRzLmZpbmRVbmlxdWUoe1xuICAgIHdoZXJlOiB7IGlkOiBhcHBvaW50bWVudElkIH1cbiAgfSk7XG5cbiAgaWYgKCFhcHBvaW50bWVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQXBwb2ludG1lbnQgbm90IGZvdW5kJyk7XG4gIH1cblxuICAvLyBDaGVjayBmb3IgY29uZmxpY3RzXG4gIGNvbnN0IGNvbmZsaWN0ID0gYXdhaXQgY2hlY2tBcHBvaW50bWVudENvbmZsaWN0KFxuICAgIGFwcG9pbnRtZW50LnRyYWluZXJJZCxcbiAgICBuZXdTY2hlZHVsZWRBdCxcbiAgICBhcHBvaW50bWVudC5kdXJhdGlvbixcbiAgICBhcHBvaW50bWVudElkXG4gICk7XG5cbiAgaWYgKGNvbmZsaWN0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOZXcgdGltZSBjb25mbGljdHMgd2l0aCBleGlzdGluZyBhcHBvaW50bWVudCcpO1xuICB9XG5cbiAgcmV0dXJuIHByaXNtYS5hcHBvaW50bWVudHMudXBkYXRlKHtcbiAgICB3aGVyZTogeyBpZDogYXBwb2ludG1lbnRJZCB9LFxuICAgIGRhdGE6IHtcbiAgICAgIHNjaGVkdWxlZEF0OiBuZXdTY2hlZHVsZWRBdCxcbiAgICAgIHN0YXR1czogJ1JFU0NIRURVTEVEJyxcbiAgICAgIHRyYWluZXJOb3RlczogcmVhc29uID8gYFJlc2NoZWR1bGVkOiAke3JlYXNvbn1gIDogJ0FwcG9pbnRtZW50IHJlc2NoZWR1bGVkJ1xuICAgIH1cbiAgfSk7XG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFBIQVNFIDU6IE1PTExJRSBQQVlNRU5UIElOVEVHUkFUSU9OXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8qKlxuICogQ3JlYXRlIHBheW1lbnQgcmVjb3JkIHdpdGggTW9sbGllIGludGVncmF0aW9uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVNb2xsaWVQYXltZW50KGRhdGE6IHtcbiAgdHJhaW5lcklkOiBzdHJpbmc7XG4gIGNsaWVudElkOiBzdHJpbmc7XG4gIHRyYWluZXJDbGllbnRJZD86IHN0cmluZztcbiAgYW1vdW50OiBudW1iZXI7XG4gIGN1cnJlbmN5OiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgbW9sbGllUGF5bWVudElkOiBzdHJpbmc7XG4gIG1vbGxpZUN1c3RvbWVySWQ/OiBzdHJpbmc7XG4gIHNlc3Npb25EYXRlPzogRGF0ZTtcbiAgcGFja2FnZUlkPzogc3RyaW5nO1xuICBtZXRhZGF0YT86IGFueTtcbn0pIHtcbiAgY29uc3QgcGF5bWVudCA9IGF3YWl0IHByaXNtYS5wYXltZW50cy5jcmVhdGUoe1xuICAgIGRhdGE6IHtcbiAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxuICAgICAgdHJhaW5lcklkOiBkYXRhLnRyYWluZXJJZCxcbiAgICAgIGNsaWVudElkOiBkYXRhLmNsaWVudElkLFxuICAgICAgdHJhaW5lckNsaWVudElkOiBkYXRhLnRyYWluZXJDbGllbnRJZCA/PyBudWxsLFxuICAgICAgYW1vdW50OiBkYXRhLmFtb3VudCxcbiAgICAgIGN1cnJlbmN5OiBkYXRhLmN1cnJlbmN5LFxuICAgICAgdHlwZTogZGF0YS50eXBlIGFzIGFueSxcbiAgICAgIHN0YXR1czogJ1BFTkRJTkcnLFxuICAgICAgbWV0aG9kOiAnTU9MTElFJyxcbiAgICAgIG1vbGxpZVBheW1lbnRJZDogZGF0YS5tb2xsaWVQYXltZW50SWQsXG4gICAgICBtb2xsaWVDdXN0b21lcklkOiBkYXRhLm1vbGxpZUN1c3RvbWVySWQgPz8gbnVsbCxcbiAgICAgIGRlc2NyaXB0aW9uOiBkYXRhLmRlc2NyaXB0aW9uLFxuICAgICAgLi4uKGRhdGEuc2Vzc2lvbkRhdGUgPyB7IHNlc3Npb25EYXRlOiBkYXRhLnNlc3Npb25EYXRlIH0gOiB7fSksXG4gICAgICBwYWNrYWdlSWQ6IGRhdGEucGFja2FnZUlkID8/IG51bGwsXG4gICAgICBtZXRhZGF0YTogZGF0YS5tZXRhZGF0YVxuICAgIH1cbiAgfSk7XG5cbiAgY29uc29sZS5sb2coJ1BheW1lbnQgcmVjb3JkIGNyZWF0ZWQ6Jywge1xuICAgIHBheW1lbnRJZDogcGF5bWVudC5pZCxcbiAgICBtb2xsaWVQYXltZW50SWQ6IGRhdGEubW9sbGllUGF5bWVudElkLFxuICAgIGFtb3VudDogZGF0YS5hbW91bnQsXG4gICAgY3VycmVuY3k6IGRhdGEuY3VycmVuY3lcbiAgfSk7XG5cbiAgcmV0dXJuIHBheW1lbnQ7XG59XG5cbi8qKlxuICogVXBkYXRlIHBheW1lbnQgc3RhdHVzIGZyb20gTW9sbGllIHdlYmhvb2tcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVBheW1lbnRGcm9tTW9sbGllKG1vbGxpZVBheW1lbnRJZDogc3RyaW5nLCB1cGRhdGVzOiB7XG4gIHN0YXR1czogc3RyaW5nO1xuICBwYXltZW50RGF0ZT86IERhdGU7XG4gIGZhaWx1cmVSZWFzb24/OiBzdHJpbmc7XG4gIHRyYWluZXJFYXJuaW5ncz86IG51bWJlcjtcbiAgcGxhdGZvcm1GZWU/OiBudW1iZXI7XG59KSB7XG4gIGNvbnN0IHBheW1lbnQgPSBhd2FpdCBwcmlzbWEucGF5bWVudHMuZmluZEZpcnN0KHtcbiAgICB3aGVyZTogeyBtb2xsaWVQYXltZW50SWQgfVxuICB9KTtcblxuICBpZiAoIXBheW1lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFBheW1lbnQgbm90IGZvdW5kIGZvciBNb2xsaWUgSUQ6ICR7bW9sbGllUGF5bWVudElkfWApO1xuICB9XG5cbiAgY29uc3QgdXBkYXRlZFBheW1lbnQgPSBhd2FpdCBwcmlzbWEucGF5bWVudHMudXBkYXRlKHtcbiAgICB3aGVyZTogeyBpZDogcGF5bWVudC5pZCB9LFxuICAgIGRhdGE6IHtcbiAgICAgIHN0YXR1czogdXBkYXRlcy5zdGF0dXMgYXMgYW55LFxuICAgICAgLi4uKHVwZGF0ZXMucGF5bWVudERhdGUgPyB7IHBheW1lbnREYXRlOiB1cGRhdGVzLnBheW1lbnREYXRlIH0gOiB7fSksXG4gICAgICAuLi4odXBkYXRlcy5mYWlsdXJlUmVhc29uID8geyBmYWlsdXJlUmVhc29uOiB1cGRhdGVzLmZhaWx1cmVSZWFzb24gfSA6IHt9KSxcbiAgICAgIC4uLih0eXBlb2YgdXBkYXRlcy50cmFpbmVyRWFybmluZ3MgPT09ICdudW1iZXInID8geyB0cmFpbmVyRWFybmluZ3M6IHVwZGF0ZXMudHJhaW5lckVhcm5pbmdzIH0gOiB7fSksXG4gICAgICAuLi4odHlwZW9mIHVwZGF0ZXMucGxhdGZvcm1GZWUgPT09ICdudW1iZXInID8geyBwbGF0Zm9ybUZlZTogdXBkYXRlcy5wbGF0Zm9ybUZlZSB9IDoge30pLFxuICAgIH1cbiAgfSk7XG5cbiAgLy8gVXBkYXRlIHRyYWluZXIgZWFybmluZ3MgaWYgcGF5bWVudCBjb21wbGV0ZWRcbiAgaWYgKHVwZGF0ZXMuc3RhdHVzID09PSAnQ09NUExFVEVEJyAmJiB1cGRhdGVzLnRyYWluZXJFYXJuaW5ncykge1xuICAgIGF3YWl0IHByaXNtYS50cmFpbmVyX3Byb2ZpbGVzLnVwZGF0ZSh7XG4gICAgICB3aGVyZTogeyBpZDogcGF5bWVudC50cmFpbmVySWQgfSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgdG90YWxFYXJuaW5nczogeyBpbmNyZW1lbnQ6IHVwZGF0ZXMudHJhaW5lckVhcm5pbmdzIH0sXG4gICAgICAgIG1vbnRobHlFYXJuaW5nczogeyBpbmNyZW1lbnQ6IHVwZGF0ZXMudHJhaW5lckVhcm5pbmdzIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNvbnNvbGUubG9nKCdQYXltZW50IHVwZGF0ZWQgZnJvbSBNb2xsaWU6Jywge1xuICAgIHBheW1lbnRJZDogcGF5bWVudC5pZCxcbiAgICBtb2xsaWVQYXltZW50SWQsXG4gICAgc3RhdHVzOiB1cGRhdGVzLnN0YXR1c1xuICB9KTtcblxuICByZXR1cm4gdXBkYXRlZFBheW1lbnQ7XG59XG5cbi8qKlxuICogQ3JlYXRlIE1vbGxpZSBjdXN0b21lciByZWNvcmRcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZU1vbGxpZUN1c3RvbWVyKHVzZXJJZDogc3RyaW5nLCBtb2xsaWVDdXN0b21lcklkOiBzdHJpbmcpIHtcbiAgLy8gVXBkYXRlIHVzZXIgcmVjb3JkIHdpdGggTW9sbGllIGN1c3RvbWVyIElEXG4gIGNvbnN0IHVzZXIgPSBhd2FpdCBwcmlzbWEudXNlcnMuZmluZFVuaXF1ZSh7XG4gICAgd2hlcmU6IHsgaWQ6IHVzZXJJZCB9XG4gIH0pO1xuXG4gIGlmICghdXNlcikge1xuICAgIHRocm93IG5ldyBFcnJvcignVXNlciBub3QgZm91bmQnKTtcbiAgfVxuXG4gIC8vIFN0b3JlIE1vbGxpZSBjdXN0b21lciBJRCBpbiB1c2VyIG1ldGFkYXRhIG9yIHNlcGFyYXRlIGZpZWxkXG4gIC8vIEZvciBub3csIHdlJ2xsIHVzZSB0aGUgcGF5bWVudCByZWNvcmRzIHRvIHRyYWNrIHRoaXNcbiAgY29uc29sZS5sb2coJ01vbGxpZSBjdXN0b21lciBjcmVhdGVkIGZvciB1c2VyOicsIHVzZXJJZCwgbW9sbGllQ3VzdG9tZXJJZCk7XG5cbiAgcmV0dXJuIHsgdXNlcklkLCBtb2xsaWVDdXN0b21lcklkIH07XG59XG5cbi8qKlxuICogR2V0IHBheW1lbnQgYnkgTW9sbGllIHBheW1lbnQgSURcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFBheW1lbnRCeU1vbGxpZUlkKG1vbGxpZVBheW1lbnRJZDogc3RyaW5nKSB7XG4gIHJldHVybiBwcmlzbWEucGF5bWVudHMuZmluZEZpcnN0KHtcbiAgICB3aGVyZTogeyBtb2xsaWVQYXltZW50SWQgfSxcbiAgICBpbmNsdWRlOiB7XG4gICAgICB0cmFpbmVyX3Byb2ZpbGVzOiB7XG4gICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgICAgICAgIGVtYWlsOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdXNlcnM6IHtcbiAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgICBlbWFpbDogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBQcm9jZXNzIHJlZnVuZCB0aHJvdWdoIE1vbGxpZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc1JlZnVuZChwYXltZW50SWQ6IHN0cmluZywgcmVmdW5kQW1vdW50OiBudW1iZXIsIHJlYXNvbj86IHN0cmluZykge1xuICBjb25zdCBwYXltZW50ID0gYXdhaXQgcHJpc21hLnBheW1lbnRzLmZpbmRVbmlxdWUoe1xuICAgIHdoZXJlOiB7IGlkOiBwYXltZW50SWQgfVxuICB9KTtcblxuICBpZiAoIXBheW1lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BheW1lbnQgbm90IGZvdW5kJyk7XG4gIH1cblxuICBpZiAoIXBheW1lbnQubW9sbGllUGF5bWVudElkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBNb2xsaWUgcGF5bWVudCBJRCBmb3VuZCcpO1xuICB9XG5cbiAgLy8gVXBkYXRlIHBheW1lbnQgcmVjb3JkIHdpdGggcmVmdW5kXG4gIGNvbnN0IHVwZGF0ZWRQYXltZW50ID0gYXdhaXQgcHJpc21hLnBheW1lbnRzLnVwZGF0ZSh7XG4gICAgd2hlcmU6IHsgaWQ6IHBheW1lbnRJZCB9LFxuICAgIGRhdGE6IHtcbiAgICAgIHJlZnVuZEFtb3VudCxcbiAgICAgIHN0YXR1czogcmVmdW5kQW1vdW50ID49IHBheW1lbnQuYW1vdW50ID8gJ1JFRlVOREVEJyA6ICdQQVJUSUFMTFlfUkVGVU5ERUQnLFxuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgLi4ucGF5bWVudC5tZXRhZGF0YSBhcyBhbnksXG4gICAgICAgIHJlZnVuZFJlYXNvbjogcmVhc29uLFxuICAgICAgICByZWZ1bmREYXRlOiBuZXcgRGF0ZSgpXG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvLyBVcGRhdGUgdHJhaW5lciBlYXJuaW5nc1xuICBpZiAocGF5bWVudC50cmFpbmVyRWFybmluZ3MgJiYgcmVmdW5kQW1vdW50ID4gMCkge1xuICAgIGNvbnN0IHJlZnVuZEZyb21FYXJuaW5ncyA9IE1hdGgubWluKHJlZnVuZEFtb3VudCwgcGF5bWVudC50cmFpbmVyRWFybmluZ3MpO1xuICAgIGF3YWl0IHByaXNtYS50cmFpbmVyX3Byb2ZpbGVzLnVwZGF0ZSh7XG4gICAgICB3aGVyZTogeyBpZDogcGF5bWVudC50cmFpbmVySWQgfSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgdG90YWxFYXJuaW5nczogeyBkZWNyZW1lbnQ6IHJlZnVuZEZyb21FYXJuaW5ncyB9LFxuICAgICAgICBtb250aGx5RWFybmluZ3M6IHsgZGVjcmVtZW50OiByZWZ1bmRGcm9tRWFybmluZ3MgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY29uc29sZS5sb2coJ1JlZnVuZCBwcm9jZXNzZWQ6Jywge1xuICAgIHBheW1lbnRJZCxcbiAgICByZWZ1bmRBbW91bnQsXG4gICAgcmVhc29uXG4gIH0pO1xuXG4gIHJldHVybiB1cGRhdGVkUGF5bWVudDtcbn1cblxuLyoqXG4gKiBHZXQgdHJhaW5lciBwYXltZW50IGFuYWx5dGljc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VHJhaW5lclBheW1lbnRBbmFseXRpY3MoXG4gIHRyYWluZXJJZDogc3RyaW5nLFxuICBwZXJpb2Q6ICd3ZWVrJyB8ICdtb250aCcgfCAneWVhcicgPSAnbW9udGgnXG4pIHtcbiAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgbGV0IHN0YXJ0RGF0ZTogRGF0ZTtcblxuICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgc3RhcnREYXRlID0gbmV3IERhdGUobm93LmdldFRpbWUoKSAtIDcgKiAyNCAqIDYwICogNjAgKiAxMDAwKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3llYXInOlxuICAgICAgc3RhcnREYXRlID0gbmV3IERhdGUobm93LmdldEZ1bGxZZWFyKCksIDAsIDEpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDogLy8gbW9udGhcbiAgICAgIHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKG5vdy5nZXRGdWxsWWVhcigpLCBub3cuZ2V0TW9udGgoKSwgMSk7XG4gIH1cblxuICBjb25zdCBbcGF5bWVudHMsIHBheW1lbnRzQnlUeXBlLCBwYXltZW50c0J5U3RhdHVzXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAvLyBUb3RhbCBlYXJuaW5nc1xuICAgIHByaXNtYS5wYXltZW50cy5hZ2dyZWdhdGUoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgdHJhaW5lcklkLFxuICAgICAgICBwYXltZW50RGF0ZTogeyBndGU6IHN0YXJ0RGF0ZSB9LFxuICAgICAgICBzdGF0dXM6ICdDT01QTEVURUQnXG4gICAgICB9LFxuICAgICAgX3N1bToge1xuICAgICAgICBhbW91bnQ6IHRydWUsXG4gICAgICAgIHRyYWluZXJFYXJuaW5nczogdHJ1ZSxcbiAgICAgICAgcGxhdGZvcm1GZWU6IHRydWVcbiAgICAgIH0sXG4gICAgICBfY291bnQ6IHRydWVcbiAgICB9KSxcblxuICAgIC8vIFBheW1lbnRzIGJ5IHR5cGVcbiAgICBwcmlzbWEucGF5bWVudHMuZ3JvdXBCeSh7XG4gICAgICBieTogWyd0eXBlJ10sXG4gICAgICB3aGVyZToge1xuICAgICAgICB0cmFpbmVySWQsXG4gICAgICAgIHBheW1lbnREYXRlOiB7IGd0ZTogc3RhcnREYXRlIH1cbiAgICAgIH0sXG4gICAgICBfc3VtOiB7IGFtb3VudDogdHJ1ZSB9LFxuICAgICAgX2NvdW50OiB0cnVlXG4gICAgfSksXG5cbiAgICAvLyBQYXltZW50cyBieSBzdGF0dXNcbiAgICBwcmlzbWEucGF5bWVudHMuZ3JvdXBCeSh7XG4gICAgICBieTogWydzdGF0dXMnXSxcbiAgICAgIHdoZXJlOiB7XG4gICAgICAgIHRyYWluZXJJZCxcbiAgICAgICAgcGF5bWVudERhdGU6IHsgZ3RlOiBzdGFydERhdGUgfVxuICAgICAgfSxcbiAgICAgIF9jb3VudDogdHJ1ZVxuICAgIH0pXG4gIF0pO1xuXG4gIHJldHVybiB7XG4gICAgdG90YWxBbW91bnQ6IHBheW1lbnRzLl9zdW0uYW1vdW50IHx8IDAsXG4gICAgdHJhaW5lckVhcm5pbmdzOiBwYXltZW50cy5fc3VtLnRyYWluZXJFYXJuaW5ncyB8fCAwLFxuICAgIHBsYXRmb3JtRmVlOiBwYXltZW50cy5fc3VtLnBsYXRmb3JtRmVlIHx8IDAsXG4gICAgdHJhbnNhY3Rpb25Db3VudDogcGF5bWVudHMuX2NvdW50LFxuICAgIHBheW1lbnRzQnlUeXBlLFxuICAgIHBheW1lbnRzQnlTdGF0dXMsXG4gICAgcGVyaW9kXG4gIH07XG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFBSRU1JVU0gVEVBTVMgTUFOQUdFTUVOVFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vKipcbiAqIENyZWF0ZSBwcmVtaXVtIHRlYW0gd2l0aCB2YWxpZGF0aW9uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVQcmVtaXVtVGVhbShkYXRhOiB7XG4gIG5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgb3duZXJJZDogc3RyaW5nO1xuICBwcmljZTogbnVtYmVyO1xuICBjdXJyZW5jeTogc3RyaW5nO1xuICBiaWxsaW5nQ3ljbGU6IHN0cmluZztcbiAgbWF4TWVtYmVycz86IG51bWJlcjtcbiAgY2F0ZWdvcnk6IHN0cmluZztcbiAgdGFncz86IHN0cmluZ1tdO1xuICBmZWF0dXJlcz86IHN0cmluZ1tdO1xuICBydWxlcz86IHN0cmluZztcbiAgaXNQdWJsaWM/OiBib29sZWFuO1xuICByZXF1aXJlQXBwcm92YWw/OiBib29sZWFuO1xuICB0cmlhbFBlcmlvZERheXM/OiBudW1iZXI7XG4gIGNvdmVySW1hZ2U/OiBzdHJpbmc7XG59KSB7XG4gIC8vIFZhbGlkYXRlIG93bmVyIGlzIGEgdHJhaW5lclxuICBjb25zdCBvd25lciA9IGF3YWl0IHByaXNtYS51c2Vycy5maW5kVW5pcXVlKHtcbiAgICB3aGVyZTogeyBpZDogZGF0YS5vd25lcklkIH0sXG4gICAgc2VsZWN0OiB7IHJvbGU6IHRydWUgfVxuICB9KTtcblxuICBpZiAoIW93bmVyIHx8IG93bmVyLnJvbGUgIT09ICdUUkFJTkVSJykge1xuICAgIHRocm93IG5ldyBFcnJvcignT25seSB0cmFpbmVycyBjYW4gY3JlYXRlIHByZW1pdW0gdGVhbXMnKTtcbiAgfVxuXG4gIGNvbnN0IHRlYW0gPSBhd2FpdCBwcmlzbWEucHJlbWl1bV9jb21tdW5pdGllcy5jcmVhdGUoe1xuICAgIGRhdGE6IHtcbiAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxuICAgICAgbmFtZTogZGF0YS5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IGRhdGEuZGVzY3JpcHRpb24sXG4gICAgICBvd25lcklkOiBkYXRhLm93bmVySWQsXG4gICAgICBwcmljZTogZGF0YS5wcmljZSxcbiAgICAgIGN1cnJlbmN5OiBkYXRhLmN1cnJlbmN5LFxuICAgICAgYmlsbGluZ0N5Y2xlOiBkYXRhLmJpbGxpbmdDeWNsZSxcbiAgICAgIG1heE1lbWJlcnM6IGRhdGEubWF4TWVtYmVycyA/PyBudWxsLFxuICAgICAgY2F0ZWdvcnk6IGRhdGEuY2F0ZWdvcnksXG4gICAgICB0YWdzOiBkYXRhLnRhZ3MgfHwgW10sXG4gICAgICBmZWF0dXJlczogZGF0YS5mZWF0dXJlcyB8fCBbXSxcbiAgICAgIHJ1bGVzOiBkYXRhLnJ1bGVzID8/IG51bGwsXG4gICAgICBpc1B1YmxpYzogZGF0YS5pc1B1YmxpYyA/PyBmYWxzZSxcbiAgICAgIHJlcXVpcmVBcHByb3ZhbDogZGF0YS5yZXF1aXJlQXBwcm92YWwgPz8gdHJ1ZSxcbiAgICAgIHRyaWFsUGVyaW9kRGF5czogZGF0YS50cmlhbFBlcmlvZERheXMgPz8gMCxcbiAgICAgIGNvdmVySW1hZ2U6IGRhdGEuY292ZXJJbWFnZSA/PyBudWxsLFxuICAgICAgY3VycmVudE1lbWJlcnM6IDBcbiAgICB9LFxuICAgIGluY2x1ZGU6IHtcbiAgICAgIHVzZXJzOiB7XG4gICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgIGlkOiB0cnVlLFxuICAgICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgICAgaW1hZ2U6IHRydWUsXG4gICAgICAgICAgdHJhaW5lclZlcmlmaWVkOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGNvbnNvbGUubG9nKCdQcmVtaXVtIHRlYW0gY3JlYXRlZDonLCB7XG4gICAgdGVhbUlkOiB0ZWFtLmlkLFxuICAgIG5hbWU6IHRlYW0ubmFtZSxcbiAgICBvd25lcklkOiBkYXRhLm93bmVySWRcbiAgfSk7XG5cbiAgcmV0dXJuIHRlYW07XG59XG5cbi8qKlxuICogR2V0IHRlYW1zIHdpdGggZmlsdGVyaW5nIGFuZCBwYWdpbmF0aW9uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRUZWFtcyhwYXJhbXM6IHtcbiAgb3duZXJJZD86IHN0cmluZztcbiAgY2F0ZWdvcnk/OiBzdHJpbmc7XG4gIGlzUHVibGljPzogYm9vbGVhbjtcbiAgc2VhcmNoPzogc3RyaW5nO1xuICBwYWdlPzogbnVtYmVyO1xuICBsaW1pdD86IG51bWJlcjtcbiAgdXNlcklkPzogc3RyaW5nOyAvLyBGb3IgbWVtYmVyc2hpcCBmaWx0ZXJpbmdcbn0pIHtcbiAgY29uc3QgcGFnZSA9IHBhcmFtcy5wYWdlIHx8IDE7XG4gIGNvbnN0IGxpbWl0ID0gcGFyYW1zLmxpbWl0IHx8IDIwO1xuICBjb25zdCBza2lwID0gKHBhZ2UgLSAxKSAqIGxpbWl0O1xuXG4gIGNvbnN0IHdoZXJlOiBhbnkgPSB7XG4gICAgaXNBY3RpdmU6IHRydWUsXG4gICAgLi4uKHBhcmFtcy5vd25lcklkICYmIHsgb3duZXJJZDogcGFyYW1zLm93bmVySWQgfSksXG4gICAgLi4uKHBhcmFtcy5jYXRlZ29yeSAmJiB7IGNhdGVnb3J5OiBwYXJhbXMuY2F0ZWdvcnkgfSksXG4gICAgLi4uKHBhcmFtcy5pc1B1YmxpYyAhPT0gdW5kZWZpbmVkICYmIHsgaXNQdWJsaWM6IHBhcmFtcy5pc1B1YmxpYyB9KSxcbiAgICAuLi4ocGFyYW1zLnNlYXJjaCAmJiB7XG4gICAgICBPUjogW1xuICAgICAgICB7IG5hbWU6IHsgY29udGFpbnM6IHBhcmFtcy5zZWFyY2gsIG1vZGU6ICdpbnNlbnNpdGl2ZScgfSB9LFxuICAgICAgICB7IGRlc2NyaXB0aW9uOiB7IGNvbnRhaW5zOiBwYXJhbXMuc2VhcmNoLCBtb2RlOiAnaW5zZW5zaXRpdmUnIH0gfSxcbiAgICAgICAgeyB0YWdzOiB7IGhhczogcGFyYW1zLnNlYXJjaCB9IH1cbiAgICAgIF1cbiAgICB9KVxuICB9O1xuXG4gIGNvbnN0IFt0ZWFtcywgdG90YWxdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgIHByaXNtYS5wcmVtaXVtX2NvbW11bml0aWVzLmZpbmRNYW55KHtcbiAgICAgIHdoZXJlLFxuICAgICAgaW5jbHVkZToge1xuICAgICAgICB1c2Vyczoge1xuICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgICBuYW1lOiB0cnVlLFxuICAgICAgICAgICAgaW1hZ2U6IHRydWUsXG4gICAgICAgICAgICB0cmFpbmVyVmVyaWZpZWQ6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9jb3VudDoge1xuICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgcHJlbWl1bV9tZW1iZXJzaGlwczoge1xuICAgICAgICAgICAgICB3aGVyZTogeyBzdGF0dXM6ICdBQ1RJVkUnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC4uLihwYXJhbXMudXNlcklkICYmIHtcbiAgICAgICAgICBwcmVtaXVtX21lbWJlcnNoaXBzOiB7XG4gICAgICAgICAgICB3aGVyZTogeyB1c2VySWQ6IHBhcmFtcy51c2VySWQgfSxcbiAgICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgICBzdGF0dXM6IHRydWUsXG4gICAgICAgICAgICAgIHN0YXJ0RGF0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgZW5kRGF0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgaXNUcmlhbEFjdGl2ZTogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICBvcmRlckJ5OiBbXG4gICAgICAgIHsgY3VycmVudE1lbWJlcnM6ICdkZXNjJyB9LFxuICAgICAgICB7IGNyZWF0ZWRBdDogJ2Rlc2MnIH1cbiAgICAgIF0sXG4gICAgICBza2lwLFxuICAgICAgdGFrZTogbGltaXRcbiAgICB9KSxcblxuICAgIHByaXNtYS5wcmVtaXVtX2NvbW11bml0aWVzLmNvdW50KHsgd2hlcmUgfSlcbiAgXSk7XG5cbiAgcmV0dXJuIHtcbiAgICB0ZWFtczogdGVhbXMubWFwKHRlYW0gPT4gKHtcbiAgICAgIC4uLnRlYW0sXG4gICAgICB1c2VyTWVtYmVyc2hpcDogdGVhbS5wcmVtaXVtX21lbWJlcnNoaXBzPy5bMF0gfHwgbnVsbFxuICAgIH0pKSxcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBwYWdlLFxuICAgICAgbGltaXQsXG4gICAgICB0b3RhbCxcbiAgICAgIHRvdGFsUGFnZXM6IE1hdGguY2VpbCh0b3RhbCAvIGxpbWl0KVxuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBKb2luIHByZW1pdW0gdGVhbVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gam9pblByZW1pdW1UZWFtKHRlYW1JZDogc3RyaW5nLCB1c2VySWQ6IHN0cmluZywgcGF5bWVudElkPzogc3RyaW5nKSB7XG4gIC8vIEdldCB0ZWFtIGRldGFpbHNcbiAgY29uc3QgdGVhbSA9IGF3YWl0IHByaXNtYS5wcmVtaXVtX2NvbW11bml0aWVzLmZpbmRVbmlxdWUoe1xuICAgIHdoZXJlOiB7IGlkOiB0ZWFtSWQgfSxcbiAgICBzZWxlY3Q6IHtcbiAgICAgIGlkOiB0cnVlLFxuICAgICAgbWF4TWVtYmVyczogdHJ1ZSxcbiAgICAgIGN1cnJlbnRNZW1iZXJzOiB0cnVlLFxuICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICByZXF1aXJlQXBwcm92YWw6IHRydWUsXG4gICAgICB0cmlhbFBlcmlvZERheXM6IHRydWUsXG4gICAgICBwcmljZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKCF0ZWFtKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUZWFtIG5vdCBmb3VuZCcpO1xuICB9XG5cbiAgaWYgKCF0ZWFtLmlzQWN0aXZlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUZWFtIGlzIG5vdCBhY3RpdmUnKTtcbiAgfVxuXG4gIC8vIENoZWNrIG1lbWJlciBsaW1pdHNcbiAgaWYgKHRlYW0ubWF4TWVtYmVycyAmJiB0ZWFtLmN1cnJlbnRNZW1iZXJzID49IHRlYW0ubWF4TWVtYmVycykge1xuICAgIHRocm93IG5ldyBFcnJvcignVGVhbSBpcyBmdWxsJyk7XG4gIH1cblxuICAvLyBDaGVjayBleGlzdGluZyBtZW1iZXJzaGlwXG4gIGNvbnN0IGV4aXN0aW5nTWVtYmVyc2hpcCA9IGF3YWl0IHByaXNtYS5wcmVtaXVtX21lbWJlcnNoaXBzLmZpbmRVbmlxdWUoe1xuICAgIHdoZXJlOiB7XG4gICAgICBjb21tdW5pdHlJZF91c2VySWQ6IHtcbiAgICAgICAgY29tbXVuaXR5SWQ6IHRlYW1JZCxcbiAgICAgICAgdXNlcklkXG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBpZiAoZXhpc3RpbmdNZW1iZXJzaGlwICYmIGV4aXN0aW5nTWVtYmVyc2hpcC5zdGF0dXMgPT09ICdBQ1RJVkUnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBbHJlYWR5IGEgdGVhbSBtZW1iZXInKTtcbiAgfVxuXG4gIC8vIERldGVybWluZSBtZW1iZXJzaGlwIHN0YXR1cyBhbmQgZGF0ZXNcbiAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgbGV0IHN0YXR1czogJ0FDVElWRScgfCAnU1VTUEVOREVEJyB8ICdUUklBTCcgPSAnQUNUSVZFJztcbiAgbGV0IGVuZERhdGU6IERhdGUgfCB1bmRlZmluZWQ7XG4gIGxldCBpc1RyaWFsQWN0aXZlID0gZmFsc2U7XG4gIGxldCB0cmlhbEVuZHNBdDogRGF0ZSB8IHVuZGVmaW5lZDtcblxuICBpZiAodGVhbS5wcmljZSA+IDAgJiYgIXBheW1lbnRJZCkge1xuICAgIHN0YXR1cyA9ICdTVVNQRU5ERUQnO1xuICB9IGVsc2UgaWYgKHRlYW0ucmVxdWlyZUFwcHJvdmFsKSB7XG4gICAgc3RhdHVzID0gJ1NVU1BFTkRFRCc7XG4gIH0gZWxzZSBpZiAodGVhbS50cmlhbFBlcmlvZERheXMgPiAwKSB7XG4gICAgaXNUcmlhbEFjdGl2ZSA9IHRydWU7XG4gICAgdHJpYWxFbmRzQXQgPSBuZXcgRGF0ZShub3cuZ2V0VGltZSgpICsgdGVhbS50cmlhbFBlcmlvZERheXMgKiAyNCAqIDYwICogNjAgKiAxMDAwKTtcbiAgICBlbmREYXRlID0gdHJpYWxFbmRzQXQ7XG4gICAgc3RhdHVzID0gJ1RSSUFMJztcbiAgfVxuXG4gIC8vIENyZWF0ZSBvciB1cGRhdGUgbWVtYmVyc2hpcFxuICBjb25zdCBtZW1iZXJzaGlwID0gYXdhaXQgcHJpc21hLnByZW1pdW1fbWVtYmVyc2hpcHMudXBzZXJ0KHtcbiAgICB3aGVyZToge1xuICAgICAgY29tbXVuaXR5SWRfdXNlcklkOiB7XG4gICAgICAgIGNvbW11bml0eUlkOiB0ZWFtSWQsXG4gICAgICAgIHVzZXJJZFxuICAgICAgfVxuICAgIH0sXG4gICAgdXBkYXRlOiB7XG4gICAgICBzdGF0dXMsXG4gICAgICBzdGFydERhdGU6IG5vdyxcbiAgICAgIGVuZERhdGU6IGVuZERhdGUgPz8gbnVsbCxcbiAgICAgIGlzVHJpYWxBY3RpdmUsXG4gICAgICB0cmlhbEVuZHNBdDogdHJpYWxFbmRzQXQgPz8gbnVsbCxcbiAgICAgIC4uLihwYXltZW50SWQgPyB7IHBheW1lbnRJZCB9IDoge30pLFxuICAgICAgY2FuY2VsbGVkQXQ6IG51bGwsXG4gICAgICBjYW5jZWxsYXRpb25SZWFzb246IG51bGxcbiAgICB9LFxuICAgIGNyZWF0ZToge1xuICAgICAgY29tbXVuaXR5SWQ6IHRlYW1JZCxcbiAgICAgIHVzZXJJZCxcbiAgICAgIHN0YXR1cyxcbiAgICAgIHN0YXJ0RGF0ZTogbm93LFxuICAgICAgZW5kRGF0ZTogZW5kRGF0ZSA/PyBudWxsLFxuICAgICAgaXNUcmlhbEFjdGl2ZSxcbiAgICAgIHRyaWFsRW5kc0F0OiB0cmlhbEVuZHNBdCA/PyBudWxsLFxuICAgICAgLi4uKHBheW1lbnRJZCA/IHsgcGF5bWVudElkIH0gOiB7fSlcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFVwZGF0ZSB0ZWFtIG1lbWJlciBjb3VudCBpZiBtZW1iZXJzaGlwIGlzIGFjdGl2ZVxuICBpZiAoc3RhdHVzID09PSAnQUNUSVZFJykge1xuICAgIGF3YWl0IHByaXNtYS5wcmVtaXVtX2NvbW11bml0aWVzLnVwZGF0ZSh7XG4gICAgICB3aGVyZTogeyBpZDogdGVhbUlkIH0sXG4gICAgICBkYXRhOiB7IGN1cnJlbnRNZW1iZXJzOiB7IGluY3JlbWVudDogMSB9IH1cbiAgICB9KTtcbiAgfVxuXG4gIGNvbnNvbGUubG9nKCdVc2VyIGpvaW5lZCBwcmVtaXVtIHRlYW06Jywge1xuICAgIHRlYW1JZCxcbiAgICB1c2VySWQsXG4gICAgbWVtYmVyc2hpcElkOiBtZW1iZXJzaGlwLmlkLFxuICAgIHN0YXR1c1xuICB9KTtcblxuICByZXR1cm4gbWVtYmVyc2hpcDtcbn1cblxuLyoqXG4gKiBMZWF2ZSBwcmVtaXVtIHRlYW1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxlYXZlUHJlbWl1bVRlYW0odGVhbUlkOiBzdHJpbmcsIHVzZXJJZDogc3RyaW5nLCByZWFzb24/OiBzdHJpbmcpIHtcbiAgY29uc3QgbWVtYmVyc2hpcCA9IGF3YWl0IHByaXNtYS5wcmVtaXVtX21lbWJlcnNoaXBzLmZpbmRVbmlxdWUoe1xuICAgIHdoZXJlOiB7XG4gICAgICBjb21tdW5pdHlJZF91c2VySWQ6IHtcbiAgICAgICAgY29tbXVuaXR5SWQ6IHRlYW1JZCxcbiAgICAgICAgdXNlcklkXG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBpZiAoIW1lbWJlcnNoaXApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBhIHRlYW0gbWVtYmVyJyk7XG4gIH1cblxuICBpZiAobWVtYmVyc2hpcC5zdGF0dXMgIT09ICdBQ1RJVkUnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNZW1iZXJzaGlwIG5vdCBhY3RpdmUnKTtcbiAgfVxuXG4gIC8vIENhbmNlbCBtZW1iZXJzaGlwXG4gIGNvbnN0IHVwZGF0ZWRNZW1iZXJzaGlwID0gYXdhaXQgcHJpc21hLnByZW1pdW1fbWVtYmVyc2hpcHMudXBkYXRlKHtcbiAgICB3aGVyZTogeyBpZDogbWVtYmVyc2hpcC5pZCB9LFxuICAgIGRhdGE6IHtcbiAgICAgIHN0YXR1czogJ0NBTkNFTExFRCcsXG4gICAgICBjYW5jZWxsZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIGNhbmNlbGxhdGlvblJlYXNvbjogcmVhc29uIHx8ICdVc2VyIHJlcXVlc3RlZCBjYW5jZWxsYXRpb24nXG4gICAgfVxuICB9KTtcblxuICAvLyBVcGRhdGUgdGVhbSBtZW1iZXIgY291bnRcbiAgYXdhaXQgcHJpc21hLnByZW1pdW1fY29tbXVuaXRpZXMudXBkYXRlKHtcbiAgICB3aGVyZTogeyBpZDogdGVhbUlkIH0sXG4gICAgZGF0YTogeyBjdXJyZW50TWVtYmVyczogeyBkZWNyZW1lbnQ6IDEgfSB9XG4gIH0pO1xuXG4gIGNvbnNvbGUubG9nKCdVc2VyIGxlZnQgcHJlbWl1bSB0ZWFtOicsIHtcbiAgICB0ZWFtSWQsXG4gICAgdXNlcklkLFxuICAgIG1lbWJlcnNoaXBJZDogbWVtYmVyc2hpcC5pZFxuICB9KTtcblxuICByZXR1cm4gdXBkYXRlZE1lbWJlcnNoaXA7XG59XG5cbi8qKlxuICogR2V0IHRlYW0gbWVtYmVyc2hpcCBkZXRhaWxzXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRUZWFtTWVtYmVyc2hpcCh0ZWFtSWQ6IHN0cmluZywgdXNlcklkOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHByaXNtYS5wcmVtaXVtX21lbWJlcnNoaXBzLmZpbmRVbmlxdWUoe1xuICAgIHdoZXJlOiB7XG4gICAgICBjb21tdW5pdHlJZF91c2VySWQ6IHtcbiAgICAgICAgY29tbXVuaXR5SWQ6IHRlYW1JZCxcbiAgICAgICAgdXNlcklkXG4gICAgICB9XG4gICAgfSxcbiAgICBpbmNsdWRlOiB7XG4gICAgICBwcmVtaXVtX2NvbW11bml0aWVzOiB7XG4gICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgIGlkOiB0cnVlLFxuICAgICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgICAgb3duZXJJZDogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdXNlcnM6IHtcbiAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgICBpbWFnZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdGVhbSBtZW1iZXJzIHdpdGggcGFnaW5hdGlvblxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VGVhbU1lbWJlcnModGVhbUlkOiBzdHJpbmcsIHBhcmFtczoge1xuICBzdGF0dXM/OiAnQUNUSVZFJyB8ICdQRU5ESU5HX0FQUFJPVkFMJyB8ICdDQU5DRUxMRUQnO1xuICBwYWdlPzogbnVtYmVyO1xuICBsaW1pdD86IG51bWJlcjtcbn0pIHtcbiAgY29uc3QgcGFnZSA9IHBhcmFtcy5wYWdlIHx8IDE7XG4gIGNvbnN0IGxpbWl0ID0gcGFyYW1zLmxpbWl0IHx8IDIwO1xuICBjb25zdCBza2lwID0gKHBhZ2UgLSAxKSAqIGxpbWl0O1xuXG4gIGNvbnN0IHdoZXJlOiBhbnkgPSB7XG4gICAgY29tbXVuaXR5SWQ6IHRlYW1JZCxcbiAgICAuLi4ocGFyYW1zLnN0YXR1cyAmJiB7IHN0YXR1czogcGFyYW1zLnN0YXR1cyB9KVxuICB9O1xuXG4gIGNvbnN0IFttZW1iZXJzLCB0b3RhbF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgcHJpc21hLnByZW1pdW1fbWVtYmVyc2hpcHMuZmluZE1hbnkoe1xuICAgICAgd2hlcmUsXG4gICAgICBpbmNsdWRlOiB7XG4gICAgICAgIHVzZXJzOiB7XG4gICAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgICBpZDogdHJ1ZSxcbiAgICAgICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgICAgICBpbWFnZTogdHJ1ZSxcbiAgICAgICAgICAgIGVtYWlsOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb3JkZXJCeTogeyBzdGFydERhdGU6ICdkZXNjJyB9LFxuICAgICAgc2tpcCxcbiAgICAgIHRha2U6IGxpbWl0XG4gICAgfSksXG5cbiAgICBwcmlzbWEucHJlbWl1bV9tZW1iZXJzaGlwcy5jb3VudCh7IHdoZXJlIH0pXG4gIF0pO1xuXG4gIHJldHVybiB7XG4gICAgbWVtYmVycyxcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBwYWdlLFxuICAgICAgbGltaXQsXG4gICAgICB0b3RhbCxcbiAgICAgIHRvdGFsUGFnZXM6IE1hdGguY2VpbCh0b3RhbCAvIGxpbWl0KVxuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBBcHByb3ZlIHRlYW0gbWVtYmVyc2hpcFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXBwcm92ZVRlYW1NZW1iZXJzaGlwKG1lbWJlcnNoaXBJZDogc3RyaW5nLCBhcHByb3ZlcklkOiBzdHJpbmcpIHtcbiAgY29uc3QgbWVtYmVyc2hpcCA9IGF3YWl0IHByaXNtYS5wcmVtaXVtX21lbWJlcnNoaXBzLmZpbmRVbmlxdWUoe1xuICAgIHdoZXJlOiB7IGlkOiBtZW1iZXJzaGlwSWQgfSxcbiAgICBpbmNsdWRlOiB7XG4gICAgICBwcmVtaXVtX2NvbW11bml0aWVzOiB7XG4gICAgICAgIHNlbGVjdDogeyBvd25lcklkOiB0cnVlLCBtYXhNZW1iZXJzOiB0cnVlLCBjdXJyZW50TWVtYmVyczogdHJ1ZSB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBpZiAoIW1lbWJlcnNoaXApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01lbWJlcnNoaXAgbm90IGZvdW5kJyk7XG4gIH1cblxuICBpZiAobWVtYmVyc2hpcC5wcmVtaXVtX2NvbW11bml0aWVzLm93bmVySWQgIT09IGFwcHJvdmVySWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ09ubHkgdGVhbSBvd25lciBjYW4gYXBwcm92ZSBtZW1iZXJzaGlwcycpO1xuICB9XG5cbiAgaWYgKG1lbWJlcnNoaXAuc3RhdHVzICE9PSAnU1VTUEVOREVEJykge1xuICAgIHRocm93IG5ldyBFcnJvcignTWVtYmVyc2hpcCBub3QgcGVuZGluZyBhcHByb3ZhbCcpO1xuICB9XG5cbiAgLy8gQ2hlY2sgbWVtYmVyIGxpbWl0c1xuICBpZiAobWVtYmVyc2hpcC5wcmVtaXVtX2NvbW11bml0aWVzLm1heE1lbWJlcnMgJiZcbiAgICAgIG1lbWJlcnNoaXAucHJlbWl1bV9jb21tdW5pdGllcy5jdXJyZW50TWVtYmVycyA+PSBtZW1iZXJzaGlwLnByZW1pdW1fY29tbXVuaXRpZXMubWF4TWVtYmVycykge1xuICAgIHRocm93IG5ldyBFcnJvcignVGVhbSBpcyBmdWxsJyk7XG4gIH1cblxuICAvLyBBcHByb3ZlIG1lbWJlcnNoaXBcbiAgY29uc3QgdXBkYXRlZE1lbWJlcnNoaXAgPSBhd2FpdCBwcmlzbWEucHJlbWl1bV9tZW1iZXJzaGlwcy51cGRhdGUoe1xuICAgIHdoZXJlOiB7IGlkOiBtZW1iZXJzaGlwSWQgfSxcbiAgICBkYXRhOiB7XG4gICAgICBzdGF0dXM6ICdBQ1RJVkUnLFxuICAgICAgc3RhcnREYXRlOiBuZXcgRGF0ZSgpXG4gICAgfVxuICB9KTtcblxuICAvLyBVcGRhdGUgdGVhbSBtZW1iZXIgY291bnRcbiAgYXdhaXQgcHJpc21hLnByZW1pdW1fY29tbXVuaXRpZXMudXBkYXRlKHtcbiAgICB3aGVyZTogeyBpZDogbWVtYmVyc2hpcC5jb21tdW5pdHlJZCB9LFxuICAgIGRhdGE6IHsgY3VycmVudE1lbWJlcnM6IHsgaW5jcmVtZW50OiAxIH0gfVxuICB9KTtcblxuICBjb25zb2xlLmxvZygnVGVhbSBtZW1iZXJzaGlwIGFwcHJvdmVkOicsIHtcbiAgICBtZW1iZXJzaGlwSWQsXG4gICAgdGVhbUlkOiBtZW1iZXJzaGlwLmNvbW11bml0eUlkLFxuICAgIHVzZXJJZDogbWVtYmVyc2hpcC51c2VySWQsXG4gICAgYXBwcm92ZXJJZFxuICB9KTtcblxuICByZXR1cm4gdXBkYXRlZE1lbWJlcnNoaXA7XG59XG5cbi8qKlxuICogR2V0IHRlYW0gYW5hbHl0aWNzIGZvciBvd25lclxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VGVhbUFuYWx5dGljcyh0ZWFtSWQ6IHN0cmluZywgb3duZXJJZDogc3RyaW5nKSB7XG4gIC8vIFZlcmlmeSBvd25lcnNoaXBcbiAgY29uc3QgdGVhbSA9IGF3YWl0IHByaXNtYS5wcmVtaXVtX2NvbW11bml0aWVzLmZpbmRVbmlxdWUoe1xuICAgIHdoZXJlOiB7IGlkOiB0ZWFtSWQgfSxcbiAgICBzZWxlY3Q6IHsgb3duZXJJZDogdHJ1ZSB9XG4gIH0pO1xuXG4gIGlmICghdGVhbSB8fCB0ZWFtLm93bmVySWQgIT09IG93bmVySWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjY2VzcyBkZW5pZWQgLSB0ZWFtIG93bmVyIG9ubHknKTtcbiAgfVxuXG4gIGNvbnN0IFtcbiAgICBtZW1iZXJTdGF0cyxcbiAgICByZXZlbnVlU3RhdHMsXG4gICAgbWVtYmVyc2hpcFRyZW5kc1xuICBdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgIC8vIE1lbWJlciBzdGF0aXN0aWNzXG4gICAgcHJpc21hLnByZW1pdW1fbWVtYmVyc2hpcHMuZ3JvdXBCeSh7XG4gICAgICBieTogWydzdGF0dXMnXSxcbiAgICAgIHdoZXJlOiB7IGNvbW11bml0eUlkOiB0ZWFtSWQgfSxcbiAgICAgIF9jb3VudDogdHJ1ZVxuICAgIH0pLFxuXG4gICAgLy8gUmV2ZW51ZSBzdGF0aXN0aWNzIChzaW1wbGlmaWVkKVxuICAgIHByaXNtYS5wYXltZW50cy5hZ2dyZWdhdGUoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICBwYXRoOiBbJ3RlYW1JZCddLFxuICAgICAgICAgIGVxdWFsczogdGVhbUlkXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXR1czogJ0NPTVBMRVRFRCdcbiAgICAgIH0sXG4gICAgICBfc3VtOiB7IGFtb3VudDogdHJ1ZSwgdHJhaW5lckVhcm5pbmdzOiB0cnVlIH0sXG4gICAgICBfY291bnQ6IHRydWVcbiAgICB9KSxcblxuICAgIC8vIE1lbWJlcnNoaXAgdHJlbmRzIChsYXN0IDMwIGRheXMpXG4gICAgcHJpc21hLnByZW1pdW1fbWVtYmVyc2hpcHMuZmluZE1hbnkoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgY29tbXVuaXR5SWQ6IHRlYW1JZCxcbiAgICAgICAgc3RhcnREYXRlOiB7XG4gICAgICAgICAgZ3RlOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gMzAgKiAyNCAqIDYwICogNjAgKiAxMDAwKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2VsZWN0OiB7XG4gICAgICAgIHN0YXJ0RGF0ZTogdHJ1ZSxcbiAgICAgICAgc3RhdHVzOiB0cnVlXG4gICAgICB9LFxuICAgICAgb3JkZXJCeTogeyBzdGFydERhdGU6ICdhc2MnIH1cbiAgICB9KVxuICBdKTtcblxuICByZXR1cm4ge1xuICAgIG1lbWJlclN0YXRzOiBtZW1iZXJTdGF0cy5yZWR1Y2UoKGFjYywgc3RhdCkgPT4ge1xuICAgICAgYWNjW3N0YXQuc3RhdHVzXSA9IHN0YXQuX2NvdW50O1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSBhcyBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+KSxcbiAgICByZXZlbnVlOiB7XG4gICAgICB0b3RhbFJldmVudWU6IHJldmVudWVTdGF0cy5fc3VtLmFtb3VudCB8fCAwLFxuICAgICAgdHJhaW5lckVhcm5pbmdzOiByZXZlbnVlU3RhdHMuX3N1bS50cmFpbmVyRWFybmluZ3MgfHwgMCxcbiAgICAgIHRvdGFsUGF5bWVudHM6IHJldmVudWVTdGF0cy5fY291bnRcbiAgICB9LFxuICAgIHRyZW5kczoge1xuICAgICAgcmVjZW50Sm9pbnM6IG1lbWJlcnNoaXBUcmVuZHMubGVuZ3RoLFxuICAgICAgZGFpbHlKb2luczogbWVtYmVyc2hpcFRyZW5kcy5yZWR1Y2UoKGFjYywgbWVtYmVyc2hpcCkgPT4ge1xuICAgICAgICBjb25zdCBkYXRlID0gbWVtYmVyc2hpcC5zdGFydERhdGUudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdITtcbiAgICAgICAgYWNjW2RhdGVdID0gKGFjY1tkYXRlXSB8fCAwKSArIDE7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LCB7fSBhcyBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+KVxuICAgIH1cbiAgfTtcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gQ0hBTExFTkdFUyAmIENPTVBFVElUSU9OU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vKipcbiAqIENyZWF0ZSBjaGFsbGVuZ2Ugd2l0aCB2YWxpZGF0aW9uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVDaGFsbGVuZ2UoZGF0YToge1xuICB0aXRsZTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBjcmVhdG9ySWQ6IHN0cmluZztcbiAgdHlwZTogc3RyaW5nO1xuICBjYXRlZ29yeTogc3RyaW5nO1xuICBkaWZmaWN1bHR5OiBzdHJpbmc7XG4gIHN0YXJ0RGF0ZTogRGF0ZTtcbiAgZW5kRGF0ZTogRGF0ZTtcbiAgaXNQdWJsaWM/OiBib29sZWFuO1xuICBtYXhQYXJ0aWNpcGFudHM/OiBudW1iZXI7XG4gIGVudHJ5RmVlPzogbnVtYmVyO1xuICBjdXJyZW5jeT86IHN0cmluZztcbiAgcHJpemVQb29sPzogbnVtYmVyO1xuICBydWxlczogc3RyaW5nO1xuICBtZXRyaWNzPzogYW55O1xuICByZXdhcmRzPzogYW55W107XG4gIGNvdmVySW1hZ2U/OiBzdHJpbmc7XG4gIHRhZ3M/OiBzdHJpbmdbXTtcbn0pIHtcbiAgY29uc3QgY2hhbGxlbmdlID0gYXdhaXQgcHJpc21hLmNoYWxsZW5nZXMuY3JlYXRlKHtcbiAgICBkYXRhOiB7XG4gICAgICBpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcbiAgICAgIHRpdGxlOiBkYXRhLnRpdGxlLFxuICAgICAgZGVzY3JpcHRpb246IGRhdGEuZGVzY3JpcHRpb24sXG4gICAgICBjcmVhdG9ySWQ6IGRhdGEuY3JlYXRvcklkLFxuICAgICAgdHlwZTogZGF0YS50eXBlIGFzIGFueSxcbiAgICAgIGNhdGVnb3J5OiBkYXRhLmNhdGVnb3J5LFxuICAgICAgZGlmZmljdWx0eTogZGF0YS5kaWZmaWN1bHR5LFxuICAgICAgc3RhcnREYXRlOiBkYXRhLnN0YXJ0RGF0ZSxcbiAgICAgIGVuZERhdGU6IGRhdGEuZW5kRGF0ZSxcbiAgICAgIGlzUHVibGljOiBkYXRhLmlzUHVibGljID8/IHRydWUsXG4gICAgICBtYXhQYXJ0aWNpcGFudHM6IGRhdGEubWF4UGFydGljaXBhbnRzID8/IG51bGwsXG4gICAgICBlbnRyeUZlZTogZGF0YS5lbnRyeUZlZSA/PyAwLFxuICAgICAgY3VycmVuY3k6IGRhdGEuY3VycmVuY3kgPz8gJ0VVUicsXG4gICAgICBwcml6ZVBvb2w6IGRhdGEucHJpemVQb29sID8/IDAsXG4gICAgICBydWxlczogZGF0YS5ydWxlcyA/PyBudWxsLFxuICAgICAgbWV0cmljczogZGF0YS5tZXRyaWNzID8/IHt9LFxuICAgICAgcmV3YXJkczogZGF0YS5yZXdhcmRzID8/IFtdLFxuICAgICAgY292ZXJJbWFnZTogZGF0YS5jb3ZlckltYWdlID8/IG51bGwsXG4gICAgICB0YWdzOiBkYXRhLnRhZ3MgPz8gW10sXG4gICAgICBzdGF0dXM6ICdVUENPTUlORydcbiAgICB9LFxuICAgIGluY2x1ZGU6IHtcbiAgICAgIHVzZXJzOiB7XG4gICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgIGlkOiB0cnVlLFxuICAgICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgICAgaW1hZ2U6IHRydWUsXG4gICAgICAgICAgdHJhaW5lclZlcmlmaWVkOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGNvbnNvbGUubG9nKCdDaGFsbGVuZ2UgY3JlYXRlZDonLCB7XG4gICAgY2hhbGxlbmdlSWQ6IGNoYWxsZW5nZS5pZCxcbiAgICB0aXRsZTogY2hhbGxlbmdlLnRpdGxlLFxuICAgIGNyZWF0b3JJZDogZGF0YS5jcmVhdG9ySWRcbiAgfSk7XG5cbiAgcmV0dXJuIGNoYWxsZW5nZTtcbn1cblxuLyoqXG4gKiBHZXQgY2hhbGxlbmdlcyB3aXRoIGZpbHRlcmluZ1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q2hhbGxlbmdlcyhwYXJhbXM6IHtcbiAgY3JlYXRvcklkPzogc3RyaW5nO1xuICBjYXRlZ29yeT86IHN0cmluZztcbiAgZGlmZmljdWx0eT86IHN0cmluZztcbiAgc3RhdHVzPzogc3RyaW5nO1xuICB0eXBlPzogc3RyaW5nO1xuICBpc1B1YmxpYz86IGJvb2xlYW47XG4gIHNlYXJjaD86IHN0cmluZztcbiAgcGFnZT86IG51bWJlcjtcbiAgbGltaXQ/OiBudW1iZXI7XG4gIHVzZXJJZD86IHN0cmluZzsgLy8gRm9yIHBhcnRpY2lwYXRpb24gZmlsdGVyaW5nXG59KSB7XG4gIGNvbnN0IHBhZ2UgPSBwYXJhbXMucGFnZSB8fCAxO1xuICBjb25zdCBsaW1pdCA9IHBhcmFtcy5saW1pdCB8fCAyMDtcbiAgY29uc3Qgc2tpcCA9IChwYWdlIC0gMSkgKiBsaW1pdDtcblxuICBjb25zdCB3aGVyZTogYW55ID0ge1xuICAgIC4uLihwYXJhbXMuY3JlYXRvcklkICYmIHsgY3JlYXRvcklkOiBwYXJhbXMuY3JlYXRvcklkIH0pLFxuICAgIC4uLihwYXJhbXMuY2F0ZWdvcnkgJiYgeyBjYXRlZ29yeTogcGFyYW1zLmNhdGVnb3J5IH0pLFxuICAgIC4uLihwYXJhbXMuZGlmZmljdWx0eSAmJiB7IGRpZmZpY3VsdHk6IHBhcmFtcy5kaWZmaWN1bHR5IH0pLFxuICAgIC4uLihwYXJhbXMuc3RhdHVzICYmIHsgc3RhdHVzOiBwYXJhbXMuc3RhdHVzIH0pLFxuICAgIC4uLihwYXJhbXMudHlwZSAmJiB7IHR5cGU6IHBhcmFtcy50eXBlIH0pLFxuICAgIC4uLihwYXJhbXMuaXNQdWJsaWMgIT09IHVuZGVmaW5lZCAmJiB7IGlzUHVibGljOiBwYXJhbXMuaXNQdWJsaWMgfSksXG4gICAgLi4uKHBhcmFtcy5zZWFyY2ggJiYge1xuICAgICAgT1I6IFtcbiAgICAgICAgeyB0aXRsZTogeyBjb250YWluczogcGFyYW1zLnNlYXJjaCwgbW9kZTogJ2luc2Vuc2l0aXZlJyB9IH0sXG4gICAgICAgIHsgZGVzY3JpcHRpb246IHsgY29udGFpbnM6IHBhcmFtcy5zZWFyY2gsIG1vZGU6ICdpbnNlbnNpdGl2ZScgfSB9LFxuICAgICAgICB7IHRhZ3M6IHsgaGFzOiBwYXJhbXMuc2VhcmNoIH0gfVxuICAgICAgXVxuICAgIH0pXG4gIH07XG5cbiAgY29uc3QgW2NoYWxsZW5nZXMsIHRvdGFsXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICBwcmlzbWEuY2hhbGxlbmdlcy5maW5kTWFueSh7XG4gICAgICB3aGVyZSxcbiAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgdXNlcnM6IHtcbiAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgIGlkOiB0cnVlLFxuICAgICAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgICAgIGltYWdlOiB0cnVlLFxuICAgICAgICAgICAgdHJhaW5lclZlcmlmaWVkOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfY291bnQ6IHtcbiAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgIGNoYWxsZW5nZV9wYXJ0aWNpcGFudHM6IHtcbiAgICAgICAgICAgICAgd2hlcmU6IHsgc3RhdHVzOiAnUkVHSVNURVJFRCcgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLi4uKHBhcmFtcy51c2VySWQgJiYge1xuICAgICAgICAgIGNoYWxsZW5nZV9wYXJ0aWNpcGFudHM6IHtcbiAgICAgICAgICAgIHdoZXJlOiB7IHVzZXJJZDogcGFyYW1zLnVzZXJJZCB9LFxuICAgICAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgICAgIHN0YXR1czogdHJ1ZSxcbiAgICAgICAgICAgICAgam9pbmVkQXQ6IHRydWUsXG4gICAgICAgICAgICAgIHJhbms6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgb3JkZXJCeTogW1xuICAgICAgICB7IHN0YXR1czogJ2FzYycgfSxcbiAgICAgICAgeyBzdGFydERhdGU6ICdhc2MnIH0sXG4gICAgICAgIHsgY3JlYXRlZEF0OiAnZGVzYycgfVxuICAgICAgXSxcbiAgICAgIHNraXAsXG4gICAgICB0YWtlOiBsaW1pdFxuICAgIH0pLFxuXG4gICAgcHJpc21hLmNoYWxsZW5nZXMuY291bnQoeyB3aGVyZSB9KVxuICBdKTtcblxuICByZXR1cm4ge1xuICAgIGNoYWxsZW5nZXM6IGNoYWxsZW5nZXMubWFwKGNoYWxsZW5nZSA9PiAoe1xuICAgICAgLi4uY2hhbGxlbmdlLFxuICAgICAgdXNlclBhcnRpY2lwYXRpb246IGNoYWxsZW5nZS5wYXJ0aWNpcGFudHM/LlswXSB8fCBudWxsXG4gICAgfSkpLFxuICAgIHBhZ2luYXRpb246IHtcbiAgICAgIHBhZ2UsXG4gICAgICBsaW1pdCxcbiAgICAgIHRvdGFsLFxuICAgICAgdG90YWxQYWdlczogTWF0aC5jZWlsKHRvdGFsIC8gbGltaXQpXG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIEpvaW4gY2hhbGxlbmdlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBqb2luQ2hhbGxlbmdlKGNoYWxsZW5nZUlkOiBzdHJpbmcsIHVzZXJJZDogc3RyaW5nLCBwYXltZW50SWQ/OiBzdHJpbmcpIHtcbiAgLy8gR2V0IGNoYWxsZW5nZSBkZXRhaWxzXG4gIGNvbnN0IGNoYWxsZW5nZSA9IGF3YWl0IHByaXNtYS5jaGFsbGVuZ2VzLmZpbmRVbmlxdWUoe1xuICAgIHdoZXJlOiB7IGlkOiBjaGFsbGVuZ2VJZCB9LFxuICAgIHNlbGVjdDoge1xuICAgICAgaWQ6IHRydWUsXG4gICAgICBzdGF0dXM6IHRydWUsXG4gICAgICBtYXhQYXJ0aWNpcGFudHM6IHRydWUsXG4gICAgICBjdXJyZW50UGFydGljaXBhbnRzOiB0cnVlLFxuICAgICAgZW50cnlGZWU6IHRydWVcbiAgICB9XG4gIH0pO1xuXG4gIGlmICghY2hhbGxlbmdlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDaGFsbGVuZ2Ugbm90IGZvdW5kJyk7XG4gIH1cblxuICBpZiAoY2hhbGxlbmdlLnN0YXR1cyAhPT0gJ1VQQ09NSU5HJykge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2hhbGxlbmdlIGlzIG5vdCBhY2NlcHRpbmcgbmV3IHBhcnRpY2lwYW50cycpO1xuICB9XG5cbiAgLy8gQ2hlY2sgcGFydGljaXBhbnQgbGltaXRzXG4gIGlmIChjaGFsbGVuZ2UubWF4UGFydGljaXBhbnRzICYmIGNoYWxsZW5nZS5jdXJyZW50UGFydGljaXBhbnRzID49IGNoYWxsZW5nZS5tYXhQYXJ0aWNpcGFudHMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NoYWxsZW5nZSBpcyBmdWxsJyk7XG4gIH1cblxuICAvLyBDaGVjayBleGlzdGluZyBwYXJ0aWNpcGF0aW9uXG4gIGNvbnN0IGV4aXN0aW5nUGFydGljaXBhdGlvbiA9IGF3YWl0IHByaXNtYS5jaGFsbGVuZ2VfcGFydGljaXBhbnRzLmZpbmRVbmlxdWUoe1xuICAgIHdoZXJlOiB7XG4gICAgICBjaGFsbGVuZ2VJZF91c2VySWQ6IHtcbiAgICAgICAgY2hhbGxlbmdlSWQsXG4gICAgICAgIHVzZXJJZFxuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKGV4aXN0aW5nUGFydGljaXBhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignQWxyZWFkeSBwYXJ0aWNpcGF0aW5nIGluIHRoaXMgY2hhbGxlbmdlJyk7XG4gIH1cblxuICAvLyBEZXRlcm1pbmUgc3RhdHVzIGJhc2VkIG9uIGVudHJ5IGZlZVxuICBjb25zdCBzdGF0dXMgPSAoY2hhbGxlbmdlLmVudHJ5RmVlICYmIGNoYWxsZW5nZS5lbnRyeUZlZSA+IDAgJiYgIXBheW1lbnRJZClcbiAgICA/ICdQRU5ESU5HX1BBWU1FTlQnXG4gICAgOiAnUkVHSVNURVJFRCc7XG5cbiAgLy8gQ3JlYXRlIHBhcnRpY2lwYXRpb25cbiAgY29uc3QgcGFydGljaXBhdGlvbiA9IGF3YWl0IHByaXNtYS5jaGFsbGVuZ2VfcGFydGljaXBhbnRzLmNyZWF0ZSh7XG4gICAgZGF0YToge1xuICAgICAgaWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXG4gICAgICBjaGFsbGVuZ2VJZCxcbiAgICAgIHVzZXJJZCxcbiAgICAgIHN0YXR1czogc3RhdHVzIGFzIGFueSxcbiAgICAgIHBheW1lbnRJZDogcGF5bWVudElkID8/IG51bGwsXG4gICAgICBjdXJyZW50UHJvZ3Jlc3M6IHt9XG4gICAgfVxuICB9KTtcblxuICAvLyBVcGRhdGUgY2hhbGxlbmdlIHBhcnRpY2lwYW50IGNvdW50IGlmIHJlZ2lzdGVyZWRcbiAgaWYgKHN0YXR1cyA9PT0gJ1JFR0lTVEVSRUQnKSB7XG4gICAgYXdhaXQgcHJpc21hLmNoYWxsZW5nZXMudXBkYXRlKHtcbiAgICAgIHdoZXJlOiB7IGlkOiBjaGFsbGVuZ2VJZCB9LFxuICAgICAgZGF0YTogeyBjdXJyZW50UGFydGljaXBhbnRzOiB7IGluY3JlbWVudDogMSB9IH1cbiAgICB9KTtcbiAgfVxuXG4gIGNvbnNvbGUubG9nKCdVc2VyIGpvaW5lZCBjaGFsbGVuZ2U6Jywge1xuICAgIGNoYWxsZW5nZUlkLFxuICAgIHVzZXJJZCxcbiAgICBwYXJ0aWNpcGF0aW9uSWQ6IHBhcnRpY2lwYXRpb24uaWQsXG4gICAgc3RhdHVzXG4gIH0pO1xuXG4gIHJldHVybiBwYXJ0aWNpcGF0aW9uO1xufVxuXG4vKipcbiAqIExlYXZlIGNoYWxsZW5nZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbGVhdmVDaGFsbGVuZ2UoY2hhbGxlbmdlSWQ6IHN0cmluZywgdXNlcklkOiBzdHJpbmcpIHtcbiAgY29uc3QgcGFydGljaXBhdGlvbiA9IGF3YWl0IHByaXNtYS5jaGFsbGVuZ2VfcGFydGljaXBhbnRzLmZpbmRVbmlxdWUoe1xuICAgIHdoZXJlOiB7XG4gICAgICBjaGFsbGVuZ2VJZF91c2VySWQ6IHtcbiAgICAgICAgY2hhbGxlbmdlSWQsXG4gICAgICAgIHVzZXJJZFxuICAgICAgfVxuICAgIH0sXG4gICAgaW5jbHVkZToge1xuICAgICAgY2hhbGxlbmdlczoge1xuICAgICAgICBzZWxlY3Q6IHsgc3RhdHVzOiB0cnVlIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGlmICghcGFydGljaXBhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignTm90IHBhcnRpY2lwYXRpbmcgaW4gdGhpcyBjaGFsbGVuZ2UnKTtcbiAgfVxuXG4gIGlmIChwYXJ0aWNpcGF0aW9uLmNoYWxsZW5nZXMuc3RhdHVzID09PSAnQUNUSVZFJykge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGxlYXZlIGFjdGl2ZSBjaGFsbGVuZ2UnKTtcbiAgfVxuXG4gIGlmIChwYXJ0aWNpcGF0aW9uLmNoYWxsZW5nZXMuc3RhdHVzID09PSAnQ09NUExFVEVEJykge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGxlYXZlIGNvbXBsZXRlZCBjaGFsbGVuZ2UnKTtcbiAgfVxuXG4gIC8vIFJlbW92ZSBwYXJ0aWNpcGF0aW9uXG4gIGF3YWl0IHByaXNtYS5jaGFsbGVuZ2VfcGFydGljaXBhbnRzLmRlbGV0ZSh7XG4gICAgd2hlcmU6IHsgaWQ6IHBhcnRpY2lwYXRpb24uaWQgfVxuICB9KTtcblxuICAvLyBVcGRhdGUgY2hhbGxlbmdlIHBhcnRpY2lwYW50IGNvdW50XG4gIGlmIChwYXJ0aWNpcGF0aW9uLnN0YXR1cyA9PT0gJ1JFR0lTVEVSRUQnKSB7XG4gICAgYXdhaXQgcHJpc21hLmNoYWxsZW5nZXMudXBkYXRlKHtcbiAgICAgIHdoZXJlOiB7IGlkOiBjaGFsbGVuZ2VJZCB9LFxuICAgICAgZGF0YTogeyBjdXJyZW50UGFydGljaXBhbnRzOiB7IGRlY3JlbWVudDogMSB9IH1cbiAgICB9KTtcbiAgfVxuXG4gIGNvbnNvbGUubG9nKCdVc2VyIGxlZnQgY2hhbGxlbmdlOicsIHtcbiAgICBjaGFsbGVuZ2VJZCxcbiAgICB1c2VySWQsXG4gICAgcGFydGljaXBhdGlvbklkOiBwYXJ0aWNpcGF0aW9uLmlkXG4gIH0pO1xuXG4gIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbn1cblxuLyoqXG4gKiBVcGRhdGUgY2hhbGxlbmdlIHByb2dyZXNzXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVDaGFsbGVuZ2VQcm9ncmVzcyhcbiAgY2hhbGxlbmdlSWQ6IHN0cmluZyxcbiAgdXNlcklkOiBzdHJpbmcsXG4gIGRhdGE6IHtcbiAgICBkYXRlOiBEYXRlO1xuICAgIG1ldHJpY3M6IGFueTtcbiAgICBub3Rlcz86IHN0cmluZztcbiAgICBwcm9vZkltYWdlcz86IHN0cmluZ1tdO1xuICB9XG4pIHtcbiAgLy8gR2V0IHBhcnRpY2lwYXRpb25cbiAgY29uc3QgcGFydGljaXBhdGlvbiA9IGF3YWl0IHByaXNtYS5jaGFsbGVuZ2VfcGFydGljaXBhbnRzLmZpbmRVbmlxdWUoe1xuICAgIHdoZXJlOiB7XG4gICAgICBjaGFsbGVuZ2VJZF91c2VySWQ6IHtcbiAgICAgICAgY2hhbGxlbmdlSWQsXG4gICAgICAgIHVzZXJJZFxuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKCFwYXJ0aWNpcGF0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgcGFydGljaXBhdGluZyBpbiB0aGlzIGNoYWxsZW5nZScpO1xuICB9XG5cbiAgaWYgKHBhcnRpY2lwYXRpb24uc3RhdHVzICE9PSAnUkVHSVNURVJFRCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgYmUgcmVnaXN0ZXJlZCB0byB1cGRhdGUgcHJvZ3Jlc3MnKTtcbiAgfVxuXG4gIC8vIENyZWF0ZSBwcm9ncmVzcyBlbnRyeVxuICBjb25zdCBwcm9ncmVzc0VudHJ5ID0gYXdhaXQgcHJpc21hLmNoYWxsZW5nZV9wcm9ncmVzcy5jcmVhdGUoe1xuICAgIGRhdGE6IHtcbiAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxuICAgICAgcGFydGljaXBhbnRJZDogcGFydGljaXBhdGlvbi5pZCxcbiAgICAgIGRhdGU6IGRhdGEuZGF0ZSxcbiAgICAgIG1ldHJpY3M6IGRhdGEubWV0cmljcyxcbiAgICAgIG5vdGVzOiBkYXRhLm5vdGVzID8/IG51bGwsXG4gICAgICBwcm9vZkltYWdlczogZGF0YS5wcm9vZkltYWdlcyB8fCBbXSxcbiAgICAgIGlzVmVyaWZpZWQ6IGZhbHNlXG4gICAgfVxuICB9KTtcblxuICAvLyBVcGRhdGUgYWdncmVnYXRlZCBwcm9ncmVzc1xuICBjb25zdCBhbGxQcm9ncmVzcyA9IGF3YWl0IHByaXNtYS5jaGFsbGVuZ2VfcHJvZ3Jlc3MuZmluZE1hbnkoe1xuICAgIHdoZXJlOiB7IHBhcnRpY2lwYW50SWQ6IHBhcnRpY2lwYXRpb24uaWQgfSxcbiAgICBvcmRlckJ5OiB7IGRhdGU6ICdhc2MnIH1cbiAgfSk7XG5cbiAgY29uc3QgYWdncmVnYXRlZFByb2dyZXNzID0gY2FsY3VsYXRlUHJvZ3Jlc3NBZ2dyZWdhdGlvbihhbGxQcm9ncmVzcyk7XG5cbiAgYXdhaXQgcHJpc21hLmNoYWxsZW5nZV9wYXJ0aWNpcGFudHMudXBkYXRlKHtcbiAgICB3aGVyZTogeyBpZDogcGFydGljaXBhdGlvbi5pZCB9LFxuICAgIGRhdGE6IHtcbiAgICAgIGN1cnJlbnRQcm9ncmVzczogYWdncmVnYXRlZFByb2dyZXNzLFxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAgfVxuICB9KTtcblxuICBjb25zb2xlLmxvZygnQ2hhbGxlbmdlIHByb2dyZXNzIHVwZGF0ZWQ6Jywge1xuICAgIGNoYWxsZW5nZUlkLFxuICAgIHVzZXJJZCxcbiAgICBwcm9ncmVzc0lkOiBwcm9ncmVzc0VudHJ5LmlkXG4gIH0pO1xuXG4gIHJldHVybiB7IHByb2dyZXNzRW50cnksIGFnZ3JlZ2F0ZWRQcm9ncmVzcyB9O1xufVxuXG4vKipcbiAqIEdldCBjaGFsbGVuZ2UgbGVhZGVyYm9hcmRcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENoYWxsZW5nZUxlYWRlcmJvYXJkKGNoYWxsZW5nZUlkOiBzdHJpbmcsIHBhcmFtczoge1xuICBwYWdlPzogbnVtYmVyO1xuICBsaW1pdD86IG51bWJlcjtcbiAgdXNlcklkPzogc3RyaW5nOyAvLyBGb3IgcHJpdmFjeSBmaWx0ZXJpbmdcbn0pIHtcbiAgY29uc3QgcGFnZSA9IHBhcmFtcy5wYWdlIHx8IDE7XG4gIGNvbnN0IGxpbWl0ID0gcGFyYW1zLmxpbWl0IHx8IDUwO1xuICBjb25zdCBza2lwID0gKHBhZ2UgLSAxKSAqIGxpbWl0O1xuXG4gIGNvbnN0IFtsZWFkZXJib2FyZCwgdG90YWxdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgIHByaXNtYS5jaGFsbGVuZ2VfbGVhZGVyYm9hcmQuZmluZE1hbnkoe1xuICAgICAgd2hlcmU6IHsgY2hhbGxlbmdlSWQgfSxcbiAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgdXNlcnM6IHtcbiAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgIGlkOiB0cnVlLFxuICAgICAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgICAgIGltYWdlOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb3JkZXJCeTogeyByYW5rOiAnYXNjJyB9LFxuICAgICAgc2tpcCxcbiAgICAgIHRha2U6IGxpbWl0XG4gICAgfSksXG5cbiAgICBwcmlzbWEuY2hhbGxlbmdlX2xlYWRlcmJvYXJkLmNvdW50KHtcbiAgICAgIHdoZXJlOiB7IGNoYWxsZW5nZUlkIH1cbiAgICB9KVxuICBdKTtcblxuICByZXR1cm4ge1xuICAgIGxlYWRlcmJvYXJkLFxuICAgIHBhZ2luYXRpb246IHtcbiAgICAgIHBhZ2UsXG4gICAgICBsaW1pdCxcbiAgICAgIHRvdGFsLFxuICAgICAgdG90YWxQYWdlczogTWF0aC5jZWlsKHRvdGFsIC8gbGltaXQpXG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZSBwcm9ncmVzcyBhZ2dyZWdhdGlvblxuICovXG5mdW5jdGlvbiBjYWxjdWxhdGVQcm9ncmVzc0FnZ3JlZ2F0aW9uKHByb2dyZXNzRW50cmllczogYW55W10pIHtcbiAgY29uc3QgYWdncmVnYXRlZDogYW55ID0ge307XG5cbiAgcHJvZ3Jlc3NFbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xuICAgIGlmIChlbnRyeS5tZXRyaWNzICYmIHR5cGVvZiBlbnRyeS5tZXRyaWNzID09PSAnb2JqZWN0Jykge1xuICAgICAgT2JqZWN0LmtleXMoZW50cnkubWV0cmljcykuZm9yRWFjaChtZXRyaWMgPT4ge1xuICAgICAgICBpZiAoIWFnZ3JlZ2F0ZWRbbWV0cmljXSkge1xuICAgICAgICAgIGFnZ3JlZ2F0ZWRbbWV0cmljXSA9IHtcbiAgICAgICAgICAgIHRvdGFsOiAwLFxuICAgICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgICBsYXRlc3Q6IDBcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJzZUZsb2F0KGVudHJ5Lm1ldHJpY3NbbWV0cmljXSkgfHwgMDtcbiAgICAgICAgYWdncmVnYXRlZFttZXRyaWNdLnRvdGFsICs9IHZhbHVlO1xuICAgICAgICBhZ2dyZWdhdGVkW21ldHJpY10uY291bnQgKz0gMTtcbiAgICAgICAgYWdncmVnYXRlZFttZXRyaWNdLmxhdGVzdCA9IHZhbHVlO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBDYWxjdWxhdGUgYXZlcmFnZXNcbiAgT2JqZWN0LmtleXMoYWdncmVnYXRlZCkuZm9yRWFjaChtZXRyaWMgPT4ge1xuICAgIGlmIChhZ2dyZWdhdGVkW21ldHJpY10uY291bnQgPiAwKSB7XG4gICAgICBhZ2dyZWdhdGVkW21ldHJpY10uYXZlcmFnZSA9IGFnZ3JlZ2F0ZWRbbWV0cmljXS50b3RhbCAvIGFnZ3JlZ2F0ZWRbbWV0cmljXS5jb3VudDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBhZ2dyZWdhdGVkO1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBQUklWQUNZLUNPTlRST0xMRUQgTEVBREVSQk9BUkRTXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8qKlxuICogR2V0IHByaXZhY3ktY29udHJvbGxlZCBsZWFkZXJib2FyZCBkYXRhXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRQcml2YWN5Q29udHJvbGxlZExlYWRlcmJvYXJkKHBhcmFtczoge1xuICB0eXBlOiAnd29ya291dCcgfCAnY2hhbGxlbmdlJyB8ICd0ZWFtJyB8ICdnbG9iYWwnO1xuICBjYXRlZ29yeT86IHN0cmluZztcbiAgdGltZWZyYW1lPzogc3RyaW5nO1xuICBtZXRyaWM/OiBzdHJpbmc7XG4gIHBhZ2U/OiBudW1iZXI7XG4gIGxpbWl0PzogbnVtYmVyO1xuICB1c2VySWQ/OiBzdHJpbmc7XG4gIGluY2x1ZGVBbm9ueW1vdXM/OiBib29sZWFuO1xufSkge1xuICBjb25zdCBwYWdlID0gcGFyYW1zLnBhZ2UgfHwgMTtcbiAgY29uc3QgbGltaXQgPSBNYXRoLm1pbihwYXJhbXMubGltaXQgfHwgNTAsIDEwMCk7XG4gIGNvbnN0IHNraXAgPSAocGFnZSAtIDEpICogbGltaXQ7XG5cbiAgLy8gQ2FsY3VsYXRlIHRpbWVmcmFtZSBkYXRlc1xuICBjb25zdCB0aW1lZnJhbWVEYXRlcyA9IGNhbGN1bGF0ZVRpbWVmcmFtZVJhbmdlKHBhcmFtcy50aW1lZnJhbWUgfHwgJ2FsbF90aW1lJyk7XG5cbiAgbGV0IGxlYWRlcmJvYXJkRGF0YSA9IFtdO1xuICBsZXQgdG90YWwgPSAwO1xuXG4gIHN3aXRjaCAocGFyYW1zLnR5cGUpIHtcbiAgICBjYXNlICd3b3Jrb3V0JzpcbiAgICAgICh7IGxlYWRlcmJvYXJkRGF0YSwgdG90YWwgfSA9IGF3YWl0IGJ1aWxkV29ya291dExlYWRlcmJvYXJkKHtcbiAgICAgICAgY2F0ZWdvcnk6IHBhcmFtcy5jYXRlZ29yeSxcbiAgICAgICAgdGltZWZyYW1lOiB0aW1lZnJhbWVEYXRlcyxcbiAgICAgICAgbWV0cmljOiBwYXJhbXMubWV0cmljIHx8ICd0b3RhbF92b2x1bWUnLFxuICAgICAgICBza2lwLFxuICAgICAgICBsaW1pdCxcbiAgICAgICAgdXNlcklkOiBwYXJhbXMudXNlcklkXG4gICAgICB9KSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2NoYWxsZW5nZSc6XG4gICAgICAoeyBsZWFkZXJib2FyZERhdGEsIHRvdGFsIH0gPSBhd2FpdCBidWlsZENoYWxsZW5nZUxlYWRlcmJvYXJkKHtcbiAgICAgICAgdGltZWZyYW1lOiB0aW1lZnJhbWVEYXRlcyxcbiAgICAgICAgc2tpcCxcbiAgICAgICAgbGltaXQsXG4gICAgICAgIHVzZXJJZDogcGFyYW1zLnVzZXJJZFxuICAgICAgfSkpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd0ZWFtJzpcbiAgICAgICh7IGxlYWRlcmJvYXJkRGF0YSwgdG90YWwgfSA9IGF3YWl0IGJ1aWxkVGVhbUxlYWRlcmJvYXJkKHtcbiAgICAgICAgdGltZWZyYW1lOiB0aW1lZnJhbWVEYXRlcyxcbiAgICAgICAgc2tpcCxcbiAgICAgICAgbGltaXQsXG4gICAgICAgIHVzZXJJZDogcGFyYW1zLnVzZXJJZFxuICAgICAgfSkpO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgLy8gRGVmYXVsdCB0byB3b3Jrb3V0IGxlYWRlcmJvYXJkIGZvciBnbG9iYWxcbiAgICAgICh7IGxlYWRlcmJvYXJkRGF0YSwgdG90YWwgfSA9IGF3YWl0IGJ1aWxkV29ya291dExlYWRlcmJvYXJkKHtcbiAgICAgICAgY2F0ZWdvcnk6IG51bGwsXG4gICAgICAgIHRpbWVmcmFtZTogdGltZWZyYW1lRGF0ZXMsXG4gICAgICAgIG1ldHJpYzogcGFyYW1zLm1ldHJpYyB8fCAndG90YWxfdm9sdW1lJyxcbiAgICAgICAgc2tpcCxcbiAgICAgICAgbGltaXQsXG4gICAgICAgIHVzZXJJZDogcGFyYW1zLnVzZXJJZFxuICAgICAgfSkpO1xuICB9XG5cbiAgLy8gQXBwbHkgcHJpdmFjeSBjb250cm9sc1xuICBjb25zdCBwcm9jZXNzZWRMZWFkZXJib2FyZCA9IGxlYWRlcmJvYXJkRGF0YS5tYXAoKGVudHJ5LCBpbmRleCkgPT5cbiAgICBhcHBseUxlYWRlcmJvYXJkUHJpdmFjeUNvbnRyb2xzKGVudHJ5LCBwYXJhbXMudXNlcklkLCBza2lwICsgaW5kZXggKyAxLCBwYXJhbXMuaW5jbHVkZUFub255bW91cylcbiAgKS5maWx0ZXIoZW50cnkgPT4gZW50cnkgIT09IG51bGwpO1xuXG4gIHJldHVybiB7XG4gICAgbGVhZGVyYm9hcmQ6IHByb2Nlc3NlZExlYWRlcmJvYXJkLFxuICAgIHBhZ2luYXRpb246IHtcbiAgICAgIHBhZ2UsXG4gICAgICBsaW1pdCxcbiAgICAgIHRvdGFsLFxuICAgICAgdG90YWxQYWdlczogTWF0aC5jZWlsKHRvdGFsIC8gbGltaXQpXG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIFVwZGF0ZSB1c2VyIHByaXZhY3kgc2V0dGluZ3NcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVVzZXJQcml2YWN5U2V0dGluZ3ModXNlcklkOiBzdHJpbmcsIHNldHRpbmdzOiBhbnkpIHtcbiAgLy8gTW9kZWwgbm8gbG9uZ2VyIHN0b3JlcyBwcml2YWN5IHNldHRpbmdzIG9uIFVzZXIuIFNpbXVsYXRlIHVwZGF0ZSBieSByZXR1cm5pbmcgbWVyZ2VkIG9iamVjdC5cbiAgY29uc3QgdXBkYXRlZFVzZXIgPSBhd2FpdCBwcmlzbWEudXNlcnMuZmluZFVuaXF1ZSh7IHdoZXJlOiB7IGlkOiB1c2VySWQgfSwgc2VsZWN0OiB7IGlkOiB0cnVlIH0gfSk7XG4gIGNvbnN0IHVwZGF0ZWRTZXR0aW5ncyA9IHtcbiAgICAuLi5zZXR0aW5ncyxcbiAgICBsYXN0VXBkYXRlZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICB9O1xuICByZXR1cm4geyBpZDogdXBkYXRlZFVzZXI/LmlkIHx8IHVzZXJJZCwgcHJpdmFjeVNldHRpbmdzOiB1cGRhdGVkU2V0dGluZ3MgfSBhcyBhbnk7XG59XG5cbi8qKlxuICogR2V0IHVzZXIncyBwcml2YWN5IHNldHRpbmdzXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRVc2VyUHJpdmFjeVNldHRpbmdzKHVzZXJJZDogc3RyaW5nKSB7XG4gIGNvbnN0IHVzZXIgPSBhd2FpdCBwcmlzbWEudXNlcnMuZmluZFVuaXF1ZSh7IHdoZXJlOiB7IGlkOiB1c2VySWQgfSwgc2VsZWN0OiB7IGlkOiB0cnVlIH0gfSk7XG5cbiAgaWYgKCF1c2VyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVc2VyIG5vdCBmb3VuZCcpO1xuICB9XG5cbiAgLy8gRGVmYXVsdCBwcml2YWN5IHNldHRpbmdzXG4gIGNvbnN0IGRlZmF1bHRTZXR0aW5ncyA9IHtcbiAgICBhbGxvd0xlYWRlcmJvYXJkczogdHJ1ZSxcbiAgICBhbGxvd1B1YmxpY1Byb2ZpbGU6IHRydWUsXG4gICAgYWxsb3dXb3Jrb3V0U2hhcmluZzogdHJ1ZSxcbiAgICBhbGxvd0NoYWxsZW5nZVBhcnRpY2lwYXRpb246IHRydWUsXG4gICAgYWxsb3dUZWFtVmlzaWJpbGl0eTogdHJ1ZSxcbiAgICBsZWFkZXJib2FyZFZpc2liaWxpdHlMZXZlbDogJ3B1YmxpYycsXG4gICAgcHJvZmlsZVZpc2liaWxpdHlMZXZlbDogJ3B1YmxpYycsXG4gICAgd29ya291dERhdGFWaXNpYmlsaXR5OiAnc3VtbWFyeScsXG4gICAgc2hvd1JlYWxOYW1lOiB0cnVlLFxuICAgIHNob3dQcm9maWxlSW1hZ2U6IHRydWUsXG4gICAgc2hvd0xvY2F0aW9uOiBmYWxzZSxcbiAgICBzaG93UGVyc29uYWxSZWNvcmRzOiB0cnVlLFxuICAgIGFsbG93RGlyZWN0TWVzc2FnZXM6IHRydWVcbiAgfTtcblxuICByZXR1cm4gZGVmYXVsdFNldHRpbmdzO1xufVxuXG4vKipcbiAqIEJ1aWxkIHdvcmtvdXQgbGVhZGVyYm9hcmRcbiAqL1xuYXN5bmMgZnVuY3Rpb24gYnVpbGRXb3Jrb3V0TGVhZGVyYm9hcmQocGFyYW1zOiBhbnkpIHtcbiAgY29uc3QgeyBjYXRlZ29yeSwgdGltZWZyYW1lLCBtZXRyaWMsIHNraXAsIGxpbWl0IH0gPSBwYXJhbXM7XG5cbiAgY29uc3Qgd2hlcmVDbGF1c2U6IGFueSA9IHtcbiAgICBpc0NvbXBsZXRlOiB0cnVlLFxuICAgIC4uLih0aW1lZnJhbWUuc3RhcnQgJiYge1xuICAgICAgc3RhcnRUaW1lOiB7XG4gICAgICAgIGd0ZTogdGltZWZyYW1lLnN0YXJ0LFxuICAgICAgICBsdGU6IHRpbWVmcmFtZS5lbmRcbiAgICAgIH1cbiAgICB9KSxcbiAgICAuLi4oY2F0ZWdvcnkgJiYge1xuICAgICAgZW50cmllczoge1xuICAgICAgICBzb21lOiB7XG4gICAgICAgICAgZXhlcmNpc2U6IHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH07XG5cbiAgY29uc3Qgd29ya291dFN0YXRzID0gYXdhaXQgcHJpc21hLndvcmtvdXRfc2Vzc2lvbnMuZ3JvdXBCeSh7XG4gICAgYnk6IFsndXNlcklkJ10sXG4gICAgd2hlcmU6IHdoZXJlQ2xhdXNlLFxuICAgIF9zdW06IHtcbiAgICAgIHRvdGFsVm9sdW1lOiB0cnVlLFxuICAgICAgZHVyYXRpb246IHRydWVcbiAgICB9LFxuICAgIF9jb3VudDoge1xuICAgICAgaWQ6IHRydWVcbiAgICB9LFxuICAgIF9hdmc6IHtcbiAgICAgIHRvdGFsVm9sdW1lOiB0cnVlLFxuICAgICAgZHVyYXRpb246IHRydWVcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFNvcnQgYnkgbWV0cmljXG4gIGNvbnN0IHNvcnRlZFN0YXRzID0gd29ya291dFN0YXRzLnNvcnQoKGEsIGIpID0+IHtcbiAgICBjb25zdCB2YWx1ZUEgPSBnZXRMZWFkZXJib2FyZE1ldHJpY1ZhbHVlKGEsIG1ldHJpYyk7XG4gICAgY29uc3QgdmFsdWVCID0gZ2V0TGVhZGVyYm9hcmRNZXRyaWNWYWx1ZShiLCBtZXRyaWMpO1xuICAgIHJldHVybiB2YWx1ZUIgLSB2YWx1ZUE7XG4gIH0pO1xuXG4gIGNvbnN0IHRvdGFsID0gc29ydGVkU3RhdHMubGVuZ3RoO1xuICBjb25zdCBwYWdpbmF0ZWRTdGF0cyA9IHNvcnRlZFN0YXRzLnNsaWNlKHNraXAsIHNraXAgKyBsaW1pdCk7XG5cbiAgLy8gR2V0IHVzZXIgZGV0YWlsc1xuICBjb25zdCB1c2VySWRzID0gcGFnaW5hdGVkU3RhdHMubWFwKHN0YXQgPT4gc3RhdC51c2VySWQpO1xuICBjb25zdCB1c2VycyA9IGF3YWl0IHByaXNtYS51c2Vycy5maW5kTWFueSh7XG4gICAgd2hlcmU6IHsgaWQ6IHsgaW46IHVzZXJJZHMgfSB9LFxuICAgIHNlbGVjdDoge1xuICAgICAgaWQ6IHRydWUsXG4gICAgICBuYW1lOiB0cnVlLFxuICAgICAgaW1hZ2U6IHRydWVcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IHVzZXJNYXAgPSB1c2Vycy5yZWR1Y2UoKGFjYywgdXNlcikgPT4ge1xuICAgIGFjY1t1c2VyLmlkXSA9IHVzZXI7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30gYXMgUmVjb3JkPHN0cmluZywgYW55Pik7XG5cbiAgY29uc3QgbGVhZGVyYm9hcmREYXRhID0gcGFnaW5hdGVkU3RhdHMubWFwKChzdGF0LCBpbmRleCkgPT4gKHtcbiAgICB1c2VySWQ6IHN0YXQudXNlcklkLFxuICAgIHVzZXI6IHVzZXJNYXBbc3RhdC51c2VySWRdLFxuICAgIHJhbms6IHNraXAgKyBpbmRleCArIDEsXG4gICAgc2NvcmU6IGdldExlYWRlcmJvYXJkTWV0cmljVmFsdWUoc3RhdCwgbWV0cmljKSxcbiAgICBtZXRyaWNzOiB7XG4gICAgICB0b3RhbFZvbHVtZTogc3RhdC5fc3VtLnRvdGFsVm9sdW1lIHx8IDAsXG4gICAgICB0b3RhbFdvcmtvdXRzOiBzdGF0Ll9jb3VudC5pZCxcbiAgICAgIGF2Z1ZvbHVtZTogc3RhdC5fYXZnLnRvdGFsVm9sdW1lIHx8IDAsXG4gICAgICB0b3RhbER1cmF0aW9uOiBzdGF0Ll9zdW0uZHVyYXRpb24gfHwgMCxcbiAgICAgIGF2Z0R1cmF0aW9uOiBzdGF0Ll9hdmcuZHVyYXRpb24gfHwgMFxuICAgIH0sXG4gICAgdHlwZTogJ3dvcmtvdXQnXG4gIH0pKTtcblxuICByZXR1cm4geyBsZWFkZXJib2FyZERhdGEsIHRvdGFsIH07XG59XG5cbi8qKlxuICogQnVpbGQgY2hhbGxlbmdlIGxlYWRlcmJvYXJkXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGJ1aWxkQ2hhbGxlbmdlTGVhZGVyYm9hcmQocGFyYW1zOiBhbnkpIHtcbiAgY29uc3QgeyB0aW1lZnJhbWUsIHNraXAsIGxpbWl0IH0gPSBwYXJhbXM7XG5cbiAgY29uc3Qgd2hlcmVDbGF1c2U6IGFueSA9IHtcbiAgICAuLi4odGltZWZyYW1lLnN0YXJ0ICYmIHtcbiAgICAgIGxhc3RVcGRhdGVkOiB7XG4gICAgICAgIGd0ZTogdGltZWZyYW1lLnN0YXJ0LFxuICAgICAgICBsdGU6IHRpbWVmcmFtZS5lbmRcbiAgICAgIH1cbiAgICB9KVxuICB9O1xuXG4gIGNvbnN0IGNoYWxsZW5nZVN0YXRzID0gYXdhaXQgcHJpc21hLmNoYWxsZW5nZV9sZWFkZXJib2FyZC5ncm91cEJ5KHtcbiAgICBieTogWyd1c2VySWQnXSxcbiAgICB3aGVyZTogd2hlcmVDbGF1c2UsXG4gICAgX3N1bToge1xuICAgICAgc2NvcmU6IHRydWVcbiAgICB9LFxuICAgIF9jb3VudDoge1xuICAgICAgaWQ6IHRydWVcbiAgICB9LFxuICAgIF9hdmc6IHtcbiAgICAgIHNjb3JlOiB0cnVlLFxuICAgICAgcmFuazogdHJ1ZVxuICAgIH1cbiAgfSk7XG5cbiAgY29uc3Qgc29ydGVkU3RhdHMgPSBjaGFsbGVuZ2VTdGF0cy5zb3J0KChhLCBiKSA9PiAoYi5fc3VtLnNjb3JlIHx8IDApIC0gKGEuX3N1bS5zY29yZSB8fCAwKSk7XG4gIGNvbnN0IHRvdGFsID0gc29ydGVkU3RhdHMubGVuZ3RoO1xuICBjb25zdCBwYWdpbmF0ZWRTdGF0cyA9IHNvcnRlZFN0YXRzLnNsaWNlKHNraXAsIHNraXAgKyBsaW1pdCk7XG5cbiAgY29uc3QgdXNlcklkcyA9IHBhZ2luYXRlZFN0YXRzLm1hcChzdGF0ID0+IHN0YXQudXNlcklkKTtcbiAgY29uc3QgdXNlcnMgPSBhd2FpdCBwcmlzbWEudXNlcnMuZmluZE1hbnkoe1xuICAgIHdoZXJlOiB7IGlkOiB7IGluOiB1c2VySWRzIH0gfSxcbiAgICBzZWxlY3Q6IHtcbiAgICAgIGlkOiB0cnVlLFxuICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgIGltYWdlOiB0cnVlXG4gICAgfVxuICB9KTtcblxuICBjb25zdCB1c2VyTWFwID0gdXNlcnMucmVkdWNlKChhY2MsIHVzZXIpID0+IHtcbiAgICBhY2NbdXNlci5pZF0gPSB1c2VyO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIGFueT4pO1xuXG4gIGNvbnN0IGxlYWRlcmJvYXJkRGF0YSA9IHBhZ2luYXRlZFN0YXRzLm1hcCgoc3RhdCwgaW5kZXgpID0+ICh7XG4gICAgdXNlcklkOiBzdGF0LnVzZXJJZCxcbiAgICB1c2VyOiB1c2VyTWFwW3N0YXQudXNlcklkXSxcbiAgICByYW5rOiBza2lwICsgaW5kZXggKyAxLFxuICAgIHNjb3JlOiBzdGF0Ll9zdW0uc2NvcmUgfHwgMCxcbiAgICBtZXRyaWNzOiB7XG4gICAgICB0b3RhbENoYWxsZW5nZVNjb3JlOiBzdGF0Ll9zdW0uc2NvcmUgfHwgMCxcbiAgICAgIGNoYWxsZW5nZXNQYXJ0aWNpcGF0ZWQ6IHN0YXQuX2NvdW50LmlkLFxuICAgICAgYXZnU2NvcmU6IHN0YXQuX2F2Zy5zY29yZSB8fCAwLFxuICAgICAgYXZnUmFuazogc3RhdC5fYXZnLnJhbmsgfHwgMFxuICAgIH0sXG4gICAgdHlwZTogJ2NoYWxsZW5nZSdcbiAgfSkpO1xuXG4gIHJldHVybiB7IGxlYWRlcmJvYXJkRGF0YSwgdG90YWwgfTtcbn1cblxuLyoqXG4gKiBCdWlsZCB0ZWFtIGxlYWRlcmJvYXJkXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGJ1aWxkVGVhbUxlYWRlcmJvYXJkKHBhcmFtczogYW55KSB7XG4gIGNvbnN0IHsgdGltZWZyYW1lLCBza2lwLCBsaW1pdCB9ID0gcGFyYW1zO1xuXG4gIGNvbnN0IHRlYW1TdGF0cyA9IGF3YWl0IHByaXNtYS5wcmVtaXVtX2NvbW11bml0aWVzLmZpbmRNYW55KHtcbiAgICB3aGVyZToge1xuICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICAuLi4odGltZWZyYW1lLnN0YXJ0ICYmIHtcbiAgICAgICAgY3JlYXRlZEF0OiB7XG4gICAgICAgICAgZ3RlOiB0aW1lZnJhbWUuc3RhcnQsXG4gICAgICAgICAgbHRlOiB0aW1lZnJhbWUuZW5kXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBzZWxlY3Q6IHtcbiAgICAgIG93bmVySWQ6IHRydWUsXG4gICAgICBjdXJyZW50TWVtYmVyczogdHJ1ZSxcbiAgICAgIG5hbWU6IHRydWVcbiAgICB9XG4gIH0pO1xuXG4gIC8vIEFnZ3JlZ2F0ZSBieSBvd25lclxuICBjb25zdCBvd25lclN0YXRzID0gdGVhbVN0YXRzLnJlZHVjZSgoYWNjLCB0ZWFtKSA9PiB7XG4gICAgaWYgKCFhY2NbdGVhbS5vd25lcklkXSkge1xuICAgICAgYWNjW3RlYW0ub3duZXJJZF0gPSB7XG4gICAgICAgIHVzZXJJZDogdGVhbS5vd25lcklkLFxuICAgICAgICB0b3RhbE1lbWJlcnM6IDAsXG4gICAgICAgIHRlYW1zQ3JlYXRlZDogMFxuICAgICAgfTtcbiAgICB9XG4gICAgYWNjW3RlYW0ub3duZXJJZF0udG90YWxNZW1iZXJzICs9IHRlYW0uY3VycmVudE1lbWJlcnM7XG4gICAgYWNjW3RlYW0ub3duZXJJZF0udGVhbXNDcmVhdGVkICs9IDE7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30gYXMgUmVjb3JkPHN0cmluZywgYW55Pik7XG5cbiAgY29uc3Qgc29ydGVkU3RhdHMgPSBPYmplY3QudmFsdWVzKG93bmVyU3RhdHMpLnNvcnQoKGE6IGFueSwgYjogYW55KSA9PiBiLnRvdGFsTWVtYmVycyAtIGEudG90YWxNZW1iZXJzKTtcbiAgY29uc3QgdG90YWwgPSBzb3J0ZWRTdGF0cy5sZW5ndGg7XG4gIGNvbnN0IHBhZ2luYXRlZFN0YXRzID0gc29ydGVkU3RhdHMuc2xpY2Uoc2tpcCwgc2tpcCArIGxpbWl0KTtcblxuICBjb25zdCB1c2VySWRzID0gcGFnaW5hdGVkU3RhdHMubWFwKChzdGF0OiBhbnkpID0+IHN0YXQudXNlcklkKTtcbiAgY29uc3QgdXNlcnMgPSBhd2FpdCBwcmlzbWEudXNlcnMuZmluZE1hbnkoe1xuICAgIHdoZXJlOiB7IGlkOiB7IGluOiB1c2VySWRzIH0gfSxcbiAgICBzZWxlY3Q6IHtcbiAgICAgIGlkOiB0cnVlLFxuICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgIGltYWdlOiB0cnVlXG4gICAgfVxuICB9KTtcblxuICBjb25zdCB1c2VyTWFwID0gdXNlcnMucmVkdWNlKChhY2MsIHVzZXIpID0+IHtcbiAgICBhY2NbdXNlci5pZF0gPSB1c2VyO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIGFueT4pO1xuXG4gIGNvbnN0IGxlYWRlcmJvYXJkRGF0YSA9IHBhZ2luYXRlZFN0YXRzLm1hcCgoc3RhdDogYW55LCBpbmRleCkgPT4gKHtcbiAgICB1c2VySWQ6IHN0YXQudXNlcklkLFxuICAgIHVzZXI6IHVzZXJNYXBbc3RhdC51c2VySWRdLFxuICAgIHJhbms6IHNraXAgKyBpbmRleCArIDEsXG4gICAgc2NvcmU6IHN0YXQudG90YWxNZW1iZXJzLFxuICAgIG1ldHJpY3M6IHtcbiAgICAgIHRvdGFsTWVtYmVyczogc3RhdC50b3RhbE1lbWJlcnMsXG4gICAgICB0ZWFtc0NyZWF0ZWQ6IHN0YXQudGVhbXNDcmVhdGVkLFxuICAgICAgYXZnTWVtYmVyc1BlclRlYW06IHN0YXQudG90YWxNZW1iZXJzIC8gc3RhdC50ZWFtc0NyZWF0ZWRcbiAgICB9LFxuICAgIHR5cGU6ICd0ZWFtJ1xuICB9KSk7XG5cbiAgcmV0dXJuIHsgbGVhZGVyYm9hcmREYXRhLCB0b3RhbCB9O1xufVxuXG4vKipcbiAqIEFwcGx5IHByaXZhY3kgY29udHJvbHMgdG8gbGVhZGVyYm9hcmQgZW50cnlcbiAqL1xuZnVuY3Rpb24gYXBwbHlMZWFkZXJib2FyZFByaXZhY3lDb250cm9scyhlbnRyeTogYW55LCBjdXJyZW50VXNlcklkPzogc3RyaW5nLCBwb3NpdGlvbj86IG51bWJlciwgaW5jbHVkZUFub255bW91cz86IGJvb2xlYW4pIHtcbiAgY29uc3QgaXNPd25FbnRyeSA9IGVudHJ5LnVzZXJJZCA9PT0gY3VycmVudFVzZXJJZDtcbiAgY29uc3QgdXNlciA9IGVudHJ5LnVzZXI7XG5cbiAgaWYgKCF1c2VyKSByZXR1cm4gbnVsbDtcblxuICAvLyBDaGVjayB1c2VyIHByaXZhY3kgc2V0dGluZ3NcbiAgY29uc3QgcHJpdmFjeVNldHRpbmdzID0gdXNlci5wcml2YWN5U2V0dGluZ3MgfHwge307XG4gIGNvbnN0IGFsbG93TGVhZGVyYm9hcmRzID0gcHJpdmFjeVNldHRpbmdzLmFsbG93TGVhZGVyYm9hcmRzICE9PSBmYWxzZTtcbiAgY29uc3QgYWxsb3dQdWJsaWNQcm9maWxlID0gcHJpdmFjeVNldHRpbmdzLmFsbG93UHVibGljUHJvZmlsZSAhPT0gZmFsc2U7XG5cbiAgLy8gSWYgdXNlciBkb2Vzbid0IGFsbG93IGxlYWRlcmJvYXJkcyBhbmQgaXQncyBub3QgdGhlaXIgb3duIGVudHJ5LCBoaWRlIGNvbXBsZXRlbHlcbiAgaWYgKCFhbGxvd0xlYWRlcmJvYXJkcyAmJiAhaXNPd25FbnRyeSAmJiAhaW5jbHVkZUFub255bW91cykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gSWYgdXNlciBkb2Vzbid0IGFsbG93IHB1YmxpYyBwcm9maWxlLCBhbm9ueW1pemVcbiAgaWYgKCFhbGxvd1B1YmxpY1Byb2ZpbGUgJiYgIWlzT3duRW50cnkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uZW50cnksXG4gICAgICB1c2VyOiB7XG4gICAgICAgIGlkOiAnYW5vbnltb3VzJyxcbiAgICAgICAgbmFtZTogYFVzZXIgIyR7cG9zaXRpb259YCxcbiAgICAgICAgaW1hZ2U6IG51bGwsXG4gICAgICAgIGlzQW5vbnltaXplZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGlzQW5vbnltaXplZDogdHJ1ZVxuICAgIH07XG4gIH1cblxuICAvLyBTaG93IG5vcm1hbCBlbnRyeVxuICByZXR1cm4ge1xuICAgIC4uLmVudHJ5LFxuICAgIGlzQ3VycmVudFVzZXI6IGlzT3duRW50cnksXG4gICAgaXNBbm9ueW1pemVkOiBmYWxzZVxuICB9O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZSB0aW1lZnJhbWUgcmFuZ2VcbiAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlVGltZWZyYW1lUmFuZ2UodGltZWZyYW1lOiBzdHJpbmcpIHtcbiAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcblxuICBzd2l0Y2ggKHRpbWVmcmFtZSkge1xuICAgIGNhc2UgJ2RhaWx5JzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCksIG5vdy5nZXREYXRlKCkpLFxuICAgICAgICBlbmQ6IG5ldyBEYXRlKG5vdy5nZXRGdWxsWWVhcigpLCBub3cuZ2V0TW9udGgoKSwgbm93LmdldERhdGUoKSArIDEpXG4gICAgICB9O1xuICAgIGNhc2UgJ3dlZWtseSc6XG4gICAgICBjb25zdCB3ZWVrU3RhcnQgPSBuZXcgRGF0ZShub3cuZ2V0VGltZSgpIC0gNyAqIDI0ICogNjAgKiA2MCAqIDEwMDApO1xuICAgICAgcmV0dXJuIHsgc3RhcnQ6IHdlZWtTdGFydCwgZW5kOiBub3cgfTtcbiAgICBjYXNlICdtb250aGx5JzpcbiAgICAgIGNvbnN0IG1vbnRoU3RhcnQgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCksIDEpO1xuICAgICAgcmV0dXJuIHsgc3RhcnQ6IG1vbnRoU3RhcnQsIGVuZDogbm93IH07XG4gICAgY2FzZSAneWVhcmx5JzpcbiAgICAgIGNvbnN0IHllYXJTdGFydCA9IG5ldyBEYXRlKG5vdy5nZXRGdWxsWWVhcigpLCAwLCAxKTtcbiAgICAgIHJldHVybiB7IHN0YXJ0OiB5ZWFyU3RhcnQsIGVuZDogbm93IH07XG4gICAgZGVmYXVsdDogLy8gYWxsX3RpbWVcbiAgICAgIHJldHVybiB7IHN0YXJ0OiBudWxsLCBlbmQ6IG51bGwgfTtcbiAgfVxufVxuXG4vKipcbiAqIEdldCBtZXRyaWMgdmFsdWUgZm9yIGxlYWRlcmJvYXJkIHNvcnRpbmdcbiAqL1xuZnVuY3Rpb24gZ2V0TGVhZGVyYm9hcmRNZXRyaWNWYWx1ZShzdGF0OiBhbnksIG1ldHJpYzogc3RyaW5nKTogbnVtYmVyIHtcbiAgc3dpdGNoIChtZXRyaWMpIHtcbiAgICBjYXNlICd0b3RhbF92b2x1bWUnOlxuICAgICAgcmV0dXJuIHN0YXQuX3N1bS50b3RhbFZvbHVtZSB8fCAwO1xuICAgIGNhc2UgJ3RvdGFsX3dvcmtvdXRzJzpcbiAgICAgIHJldHVybiBzdGF0Ll9jb3VudC5pZDtcbiAgICBjYXNlICdhdmdfdm9sdW1lJzpcbiAgICAgIHJldHVybiBzdGF0Ll9hdmcudG90YWxWb2x1bWUgfHwgMDtcbiAgICBjYXNlICd0b3RhbF9kdXJhdGlvbic6XG4gICAgICByZXR1cm4gc3RhdC5fc3VtLmR1cmF0aW9uIHx8IDA7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0Ll9zdW0udG90YWxWb2x1bWUgfHwgMDtcbiAgfVxufVxuXG4vLyBOb3RlOiBuYW1lZCBleHBvcnRzIGFyZSBkZWNsYXJlZCBpbmxpbmUgYWJvdmU7IGF2b2lkIHJlLWV4cG9ydCBibG9jayB0byBwcmV2ZW50IGR1cGxpY2F0ZSBzeW1ib2wgZXJyb3JzXG4iXSwibmFtZXMiOlsicHJpc21hIiwiVXNlclJvbGUiLCJDTElFTlQiLCJUUkFJTkVSIiwiQURNSU4iLCJVc2VyU3RhdHVzIiwiQUNUSVZFIiwiU1VTUEVOREVEIiwiQkFOTkVEIiwiVmlvbGF0aW9uVHlwZSIsIkhBUkFTU01FTlQiLCJIQVRFX1NQRUVDSCIsIlRIUkVBVCIsIklOQVBQUk9QUklBVEVfQ09OVEVOVCIsIlNQQU0iLCJQUklWQUNZX1ZJT0xBVElPTiIsIk1vZGVyYXRpb25BY3Rpb24iLCJBUFBST1ZFRCIsIkZMQUdHRUQiLCJCTE9DS0VEIiwiREVMRVRFRCIsIk1vZGVyYXRpb25Tb3VyY2UiLCJPUEVOQUkiLCJDVVNUT01fUlVMRVMiLCJNQU5VQUwiLCJnZXRVc2VyU2FmZXR5UHJvZmlsZSIsInVzZXJJZCIsInVzZXIiLCJ1c2VycyIsImZpbmRVbmlxdWUiLCJ3aGVyZSIsImlkIiwic2VsZWN0IiwiZW1haWwiLCJuYW1lIiwiaW1hZ2UiLCJyb2xlIiwic3RhdHVzIiwicmVwdXRhdGlvblNjb3JlIiwid2FybmluZ0NvdW50IiwidHJhaW5lclZlcmlmaWVkIiwic3VzcGVuZGVkVW50aWwiLCJjcmVhdGVkQXQiLCJsYXN0TG9naW5BdCIsInZpb2xhdGlvbkNvdW50IiwicmVjZW50VmlvbGF0aW9ucyIsInN1c3BlbnNpb25IaXN0b3J5Iiwicmlza0xldmVsIiwicmVzdHJpY3Rpb25zIiwibGFzdFZpb2xhdGlvblJlc3VsdCIsIlByb21pc2UiLCJhbGwiLCJ1c2VyX3Zpb2xhdGlvbnMiLCJjb3VudCIsImd0ZSIsIkRhdGUiLCJub3ciLCJzdXNwZW5zaW9uSG91cnMiLCJndCIsImZpbmRGaXJzdCIsIm9yZGVyQnkiLCJjYWxjdWxhdGVVc2VyUmlza0xldmVsIiwiZGV0ZXJtaW5lVXNlclJlc3RyaWN0aW9ucyIsImlzU2FmZSIsImxhc3RWaW9sYXRpb24iLCJnZXRGbGFnZ2VkVXNlcnMiLCJwYXJhbXMiLCJ0aGlydHlEYXlzQWdvIiwiZmluZE1hbnkiLCJPUiIsImx0IiwiaW4iLCJpbmNsdWRlUmVjZW50IiwidmlvbGF0aW9ucyIsInNvbWUiLCJ0YWtlIiwibGltaXQiLCJza2lwIiwib2Zmc2V0IiwibWFwIiwibGVuZ3RoIiwiZmlsdGVyIiwidiIsInVwZGF0ZVVzZXJTYWZldHlTdGF0dXMiLCJ1cGRhdGVzIiwiJHRyYW5zYWN0aW9uIiwidHgiLCJjdXJyZW50VXNlciIsImZpbmRVbmlxdWVPclRocm93IiwibmV3UmVwdXRhdGlvblNjb3JlIiwicmVwdXRhdGlvbkNoYW5nZSIsIk1hdGgiLCJtYXgiLCJ1bmRlZmluZWQiLCJ1cGRhdGUiLCJkYXRhIiwiY3JlYXRlTW9kZXJhdGlvbkxvZyIsIm1vZGVyYXRpb25fbG9ncyIsImNyZWF0ZSIsInByb2Nlc3NlZEF0IiwiZ2V0TW9kZXJhdGlvbkxvZ3MiLCJhY3Rpb24iLCJjb250ZW50VHlwZSIsImRhdGVGcm9tIiwiZGF0ZVRvIiwibHRlIiwiaW5jbHVkZVVzZXIiLCJpbmNsdWRlIiwiZ2V0TW9kZXJhdGlvblN0YXRpc3RpY3MiLCJ0aW1lZnJhbWUiLCJob3Vyc01hcCIsImRheSIsIndlZWsiLCJtb250aCIsInNpbmNlIiwibG9ncyIsInJlYXNvbkNvdW50cyIsImNvbmZpZGVuY2UiLCJmbGFnZ2VkUmVhc29uIiwiZ3JvdXBCeSIsImJ5Iiwibm90IiwiX2NvdW50IiwidG90YWxBY3Rpb25zIiwiYWN0aW9uQnJlYWtkb3duIiwiY29udGVudFR5cGVCcmVha2Rvd24iLCJ1c2VyQWN0aXZpdHkiLCJ0b3RhbENvbmZpZGVuY2UiLCJjb25maWRlbmNlQ291bnQiLCJmb3JFYWNoIiwibG9nIiwidXNlckRhdGEiLCJhdmVyYWdlQ29uZmlkZW5jZSIsInRvcFZpb2xhdGlvblJlYXNvbnMiLCJyIiwicmVhc29uIiwidXNlckFjdGl2aXR5QXJyYXkiLCJPYmplY3QiLCJlbnRyaWVzIiwiYWN0aW9uQ291bnQiLCJ1c2VyTmFtZSIsInNvcnQiLCJhIiwiYiIsInNsaWNlIiwiY3JlYXRlU2FmZXR5UmVwb3J0Iiwic2FmZXR5X3JlcG9ydHMiLCJjcnlwdG8iLCJyYW5kb21VVUlEIiwicHJpb3JpdHkiLCJkZXRlcm1pbmVQcmlvcml0eSIsInZpb2xhdGlvblR5cGUiLCJkZXNjcmlwdGlvbiIsImdldFBlbmRpbmdTYWZldHlSZXBvcnRzIiwidXNlcnNfc2FmZXR5X3JlcG9ydHNfcmVwb3J0ZXJJZFRvdXNlcnMiLCJ1c2Vyc19zYWZldHlfcmVwb3J0c19yZXBvcnRlZFVzZXJJZFRvdXNlcnMiLCJ1cGRhdGVTYWZldHlSZXBvcnQiLCJyZXBvcnRJZCIsInJlc29sdmVkQXQiLCJhc3NpZ25lZFRvIiwiY3JlYXRlVXNlclZpb2xhdGlvbiIsInZpb2xhdGlvbiIsIndhcm5pbmdJc3N1ZWQiLCJpbmNyZW1lbnQiLCJkZWNyZW1lbnQiLCJyZXB1dGF0aW9uSGl0IiwiZ2V0VXNlclZpb2xhdGlvbkhpc3RvcnkiLCJpbmNsdWRlUmVzb2x2ZWQiLCJyZXNvbHZlZCIsImdldFVzZXJTYWZldHlTZXR0aW5ncyIsInNhZmV0eVNldHRpbmdzIiwidXBkYXRlVXNlclNhZmV0eVNldHRpbmdzIiwic2V0dGluZ3MiLCJ1cHNlcnQiLCJnZXRTYWZldHlBbmFseXRpY3MiLCJfdGltZWZyYW1lIiwidXNlckdyb3d0aCIsInZpb2xhdGlvblRyZW5kcyIsIm1vZGVyYXRpb25FZmZpY2llbmN5IiwiYXZlcmFnZVJlc3BvbnNlVGltZSIsImF1dG9tYXRpb25SYXRlIiwiYXBwZWFsUmF0ZSIsInJpc2tEaXN0cmlidXRpb24iLCJ0cmFpbmVyU2FmZXR5IiwidmVyaWZpZWRUcmFpbmVycyIsImZsYWdnZWRUcmFpbmVycyIsImF2ZXJhZ2VSYXRpbmciLCJnZW5lcmF0ZVNhZmV0eVJlcG9ydCIsInN1bW1hcnkiLCJzdGFydERhdGUiLCJlbmREYXRlIiwidG90YWxVc2VycyIsImFjdGl2ZVVzZXJzIiwic3VzcGVuZGVkVXNlcnMiLCJiYW5uZWRVc2VycyIsInRvdGFsVmlvbGF0aW9ucyIsInJlc29sdmVkUmVwb3J0cyIsImRldGFpbHMiLCJwdXNoIiwiY2F0ZWdvcnkiLCJ1cmdlbnRLZXl3b3JkcyIsImtleXdvcmQiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwiY3JlYXRlT3JVcGRhdGVUcmFpbmVyUHJvZmlsZSIsImV4aXN0aW5nUHJvZmlsZSIsInRyYWluZXJfcHJvZmlsZXMiLCJnZXRUcmFpbmVyUHJvZmlsZVdpdGhTdGF0cyIsInRyYWluZXJJZCIsInRyYWluZXJfY2xpZW50cyIsImFwcG9pbnRtZW50cyIsInRyYWluZXJfcmV2aWV3cyIsImdldFRyYWluZXJDbGllbnRzIiwiZmlsdGVycyIsInNlYXJjaCIsInBhZ2UiLCJjbGllbnQiLCJjb250YWlucyIsIm1vZGUiLCJjbGllbnRzIiwidG90YWwiLCJwcm9ncmVzc19yZXBvcnRzIiwidG90YWxQYWdlcyIsImNlaWwiLCJhZGRDbGllbnRUb1RyYWluZXIiLCJjbGllbnRJZCIsImV4aXN0aW5nIiwidHJhaW5lcklkX2NsaWVudElkIiwiRXJyb3IiLCJyZWxhdGlvbnNoaXAiLCJhY3RpdmVDbGllbnRzIiwidG90YWxDbGllbnRzIiwiY3JlYXRlQXBwb2ludG1lbnQiLCJ0aXRsZSIsInNjaGVkdWxlZEF0IiwiZHVyYXRpb24iLCJ0eXBlIiwibG9jYXRpb24iLCJpc1ZpcnR1YWwiLCJwcmljZSIsImN1cnJlbmN5IiwiZ2V0VHJhaW5lckFwcG9pbnRtZW50cyIsImRhdGVSYW5nZSIsInN0YXJ0IiwiZW5kIiwid29ya291dF9zZXNzaW9ucyIsImlzQ29tcGxldGUiLCJ1cGRhdGVBcHBvaW50bWVudFN0YXR1cyIsImFwcG9pbnRtZW50SWQiLCJ1cGRhdGVEYXRhIiwiY2FuY2VsbGVkQXQiLCJjb21wbGV0ZWRBdCIsImNyZWF0ZVByb2dyZXNzUmVwb3J0IiwicmVwb3J0RGF0ZSIsInBlcmlvZCIsImdldFRyYWluZXJQcm9ncmVzc1JlcG9ydHMiLCJpc1NoYXJlZCIsInJlcG9ydHMiLCJzaGFyZVByb2dyZXNzUmVwb3J0IiwiZ2V0VHJhaW5lckVhcm5pbmdzIiwiZ2V0VGltZSIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJlYXJuaW5ncyIsInBheW1lbnRzIiwiYWdncmVnYXRlIiwicGF5bWVudERhdGUiLCJfc3VtIiwiYW1vdW50IiwidHJhaW5lckVhcm5pbmdzIiwicGxhdGZvcm1GZWUiLCJ0b3RhbEFtb3VudCIsInRyYW5zYWN0aW9uQ291bnQiLCJjaGVja0FwcG9pbnRtZW50Q29uZmxpY3QiLCJleGNsdWRlQXBwb2ludG1lbnRJZCIsImVuZFRpbWUiLCJBTkQiLCJnZXRUcmFpbmVyQXZhaWxhYmlsaXR5IiwidHJhaW5lclByb2ZpbGUiLCJhdmFpbGFibGVIb3VycyIsInRpbWV6b25lIiwicmVzY2hlZHVsZUFwcG9pbnRtZW50IiwibmV3U2NoZWR1bGVkQXQiLCJhcHBvaW50bWVudCIsImNvbmZsaWN0IiwidHJhaW5lck5vdGVzIiwiY3JlYXRlTW9sbGllUGF5bWVudCIsInBheW1lbnQiLCJ0cmFpbmVyQ2xpZW50SWQiLCJtZXRob2QiLCJtb2xsaWVQYXltZW50SWQiLCJtb2xsaWVDdXN0b21lcklkIiwic2Vzc2lvbkRhdGUiLCJwYWNrYWdlSWQiLCJtZXRhZGF0YSIsImNvbnNvbGUiLCJwYXltZW50SWQiLCJ1cGRhdGVQYXltZW50RnJvbU1vbGxpZSIsInVwZGF0ZWRQYXltZW50IiwiZmFpbHVyZVJlYXNvbiIsInRvdGFsRWFybmluZ3MiLCJtb250aGx5RWFybmluZ3MiLCJjcmVhdGVNb2xsaWVDdXN0b21lciIsImdldFBheW1lbnRCeU1vbGxpZUlkIiwicHJvY2Vzc1JlZnVuZCIsInJlZnVuZEFtb3VudCIsInJlZnVuZFJlYXNvbiIsInJlZnVuZERhdGUiLCJyZWZ1bmRGcm9tRWFybmluZ3MiLCJtaW4iLCJnZXRUcmFpbmVyUGF5bWVudEFuYWx5dGljcyIsInBheW1lbnRzQnlUeXBlIiwicGF5bWVudHNCeVN0YXR1cyIsImNyZWF0ZVByZW1pdW1UZWFtIiwib3duZXIiLCJvd25lcklkIiwidGVhbSIsInByZW1pdW1fY29tbXVuaXRpZXMiLCJiaWxsaW5nQ3ljbGUiLCJtYXhNZW1iZXJzIiwidGFncyIsImZlYXR1cmVzIiwicnVsZXMiLCJpc1B1YmxpYyIsInJlcXVpcmVBcHByb3ZhbCIsInRyaWFsUGVyaW9kRGF5cyIsImNvdmVySW1hZ2UiLCJjdXJyZW50TWVtYmVycyIsInRlYW1JZCIsImdldFRlYW1zIiwiaXNBY3RpdmUiLCJoYXMiLCJ0ZWFtcyIsInByZW1pdW1fbWVtYmVyc2hpcHMiLCJpc1RyaWFsQWN0aXZlIiwidXNlck1lbWJlcnNoaXAiLCJwYWdpbmF0aW9uIiwiam9pblByZW1pdW1UZWFtIiwiZXhpc3RpbmdNZW1iZXJzaGlwIiwiY29tbXVuaXR5SWRfdXNlcklkIiwiY29tbXVuaXR5SWQiLCJ0cmlhbEVuZHNBdCIsIm1lbWJlcnNoaXAiLCJjYW5jZWxsYXRpb25SZWFzb24iLCJtZW1iZXJzaGlwSWQiLCJsZWF2ZVByZW1pdW1UZWFtIiwidXBkYXRlZE1lbWJlcnNoaXAiLCJnZXRUZWFtTWVtYmVyc2hpcCIsImdldFRlYW1NZW1iZXJzIiwibWVtYmVycyIsImFwcHJvdmVUZWFtTWVtYmVyc2hpcCIsImFwcHJvdmVySWQiLCJnZXRUZWFtQW5hbHl0aWNzIiwibWVtYmVyU3RhdHMiLCJyZXZlbnVlU3RhdHMiLCJtZW1iZXJzaGlwVHJlbmRzIiwicGF0aCIsImVxdWFscyIsInJlZHVjZSIsImFjYyIsInN0YXQiLCJyZXZlbnVlIiwidG90YWxSZXZlbnVlIiwidG90YWxQYXltZW50cyIsInRyZW5kcyIsInJlY2VudEpvaW5zIiwiZGFpbHlKb2lucyIsImRhdGUiLCJ0b0lTT1N0cmluZyIsInNwbGl0IiwiY3JlYXRlQ2hhbGxlbmdlIiwiY2hhbGxlbmdlIiwiY2hhbGxlbmdlcyIsImNyZWF0b3JJZCIsImRpZmZpY3VsdHkiLCJtYXhQYXJ0aWNpcGFudHMiLCJlbnRyeUZlZSIsInByaXplUG9vbCIsIm1ldHJpY3MiLCJyZXdhcmRzIiwiY2hhbGxlbmdlSWQiLCJnZXRDaGFsbGVuZ2VzIiwiY2hhbGxlbmdlX3BhcnRpY2lwYW50cyIsImpvaW5lZEF0IiwicmFuayIsInVzZXJQYXJ0aWNpcGF0aW9uIiwicGFydGljaXBhbnRzIiwiam9pbkNoYWxsZW5nZSIsImN1cnJlbnRQYXJ0aWNpcGFudHMiLCJleGlzdGluZ1BhcnRpY2lwYXRpb24iLCJjaGFsbGVuZ2VJZF91c2VySWQiLCJwYXJ0aWNpcGF0aW9uIiwiY3VycmVudFByb2dyZXNzIiwicGFydGljaXBhdGlvbklkIiwibGVhdmVDaGFsbGVuZ2UiLCJkZWxldGUiLCJzdWNjZXNzIiwidXBkYXRlQ2hhbGxlbmdlUHJvZ3Jlc3MiLCJwcm9ncmVzc0VudHJ5IiwiY2hhbGxlbmdlX3Byb2dyZXNzIiwicGFydGljaXBhbnRJZCIsIm5vdGVzIiwicHJvb2ZJbWFnZXMiLCJpc1ZlcmlmaWVkIiwiYWxsUHJvZ3Jlc3MiLCJhZ2dyZWdhdGVkUHJvZ3Jlc3MiLCJjYWxjdWxhdGVQcm9ncmVzc0FnZ3JlZ2F0aW9uIiwidXBkYXRlZEF0IiwicHJvZ3Jlc3NJZCIsImdldENoYWxsZW5nZUxlYWRlcmJvYXJkIiwibGVhZGVyYm9hcmQiLCJjaGFsbGVuZ2VfbGVhZGVyYm9hcmQiLCJwcm9ncmVzc0VudHJpZXMiLCJhZ2dyZWdhdGVkIiwiZW50cnkiLCJrZXlzIiwibWV0cmljIiwibGF0ZXN0IiwidmFsdWUiLCJwYXJzZUZsb2F0IiwiYXZlcmFnZSIsImdldFByaXZhY3lDb250cm9sbGVkTGVhZGVyYm9hcmQiLCJ0aW1lZnJhbWVEYXRlcyIsImNhbGN1bGF0ZVRpbWVmcmFtZVJhbmdlIiwibGVhZGVyYm9hcmREYXRhIiwiYnVpbGRXb3Jrb3V0TGVhZGVyYm9hcmQiLCJidWlsZENoYWxsZW5nZUxlYWRlcmJvYXJkIiwiYnVpbGRUZWFtTGVhZGVyYm9hcmQiLCJwcm9jZXNzZWRMZWFkZXJib2FyZCIsImluZGV4IiwiYXBwbHlMZWFkZXJib2FyZFByaXZhY3lDb250cm9scyIsImluY2x1ZGVBbm9ueW1vdXMiLCJ1cGRhdGVVc2VyUHJpdmFjeVNldHRpbmdzIiwidXBkYXRlZFVzZXIiLCJ1cGRhdGVkU2V0dGluZ3MiLCJsYXN0VXBkYXRlZCIsInByaXZhY3lTZXR0aW5ncyIsImdldFVzZXJQcml2YWN5U2V0dGluZ3MiLCJkZWZhdWx0U2V0dGluZ3MiLCJhbGxvd0xlYWRlcmJvYXJkcyIsImFsbG93UHVibGljUHJvZmlsZSIsImFsbG93V29ya291dFNoYXJpbmciLCJhbGxvd0NoYWxsZW5nZVBhcnRpY2lwYXRpb24iLCJhbGxvd1RlYW1WaXNpYmlsaXR5IiwibGVhZGVyYm9hcmRWaXNpYmlsaXR5TGV2ZWwiLCJwcm9maWxlVmlzaWJpbGl0eUxldmVsIiwid29ya291dERhdGFWaXNpYmlsaXR5Iiwic2hvd1JlYWxOYW1lIiwic2hvd1Byb2ZpbGVJbWFnZSIsInNob3dMb2NhdGlvbiIsInNob3dQZXJzb25hbFJlY29yZHMiLCJhbGxvd0RpcmVjdE1lc3NhZ2VzIiwid2hlcmVDbGF1c2UiLCJzdGFydFRpbWUiLCJleGVyY2lzZSIsIndvcmtvdXRTdGF0cyIsInRvdGFsVm9sdW1lIiwiX2F2ZyIsInNvcnRlZFN0YXRzIiwidmFsdWVBIiwiZ2V0TGVhZGVyYm9hcmRNZXRyaWNWYWx1ZSIsInZhbHVlQiIsInBhZ2luYXRlZFN0YXRzIiwidXNlcklkcyIsInVzZXJNYXAiLCJzY29yZSIsInRvdGFsV29ya291dHMiLCJhdmdWb2x1bWUiLCJ0b3RhbER1cmF0aW9uIiwiYXZnRHVyYXRpb24iLCJjaGFsbGVuZ2VTdGF0cyIsInRvdGFsQ2hhbGxlbmdlU2NvcmUiLCJjaGFsbGVuZ2VzUGFydGljaXBhdGVkIiwiYXZnU2NvcmUiLCJhdmdSYW5rIiwidGVhbVN0YXRzIiwib3duZXJTdGF0cyIsInRvdGFsTWVtYmVycyIsInRlYW1zQ3JlYXRlZCIsInZhbHVlcyIsImF2Z01lbWJlcnNQZXJUZWFtIiwiY3VycmVudFVzZXJJZCIsInBvc2l0aW9uIiwiaXNPd25FbnRyeSIsImlzQW5vbnltaXplZCIsImlzQ3VycmVudFVzZXIiLCJnZXREYXRlIiwid2Vla1N0YXJ0IiwibW9udGhTdGFydCIsInllYXJTdGFydCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/core/database/safety-business-queries.ts\n");

/***/ }),

/***/ "(rsc)/./src/core/database/workout-queries.ts":
/*!**********************************************!*\
  !*** ./src/core/database/workout-queries.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCoachFeedback: () => (/* binding */ addCoachFeedback),\n/* harmony export */   addPersonalRecord: () => (/* binding */ addPersonalRecord),\n/* harmony export */   addProgressMetric: () => (/* binding */ addProgressMetric),\n/* harmony export */   calculate_session_experience_points: () => (/* binding */ calculate_session_experience_points),\n/* harmony export */   check_and_award_achievements: () => (/* binding */ check_and_award_achievements),\n/* harmony export */   completeWorkoutSession: () => (/* binding */ completeWorkoutSession),\n/* harmony export */   createExercise: () => (/* binding */ createExercise),\n/* harmony export */   createExerciseVariation: () => (/* binding */ createExerciseVariation),\n/* harmony export */   createTrainingProgram: () => (/* binding */ createTrainingProgram),\n/* harmony export */   createWorkoutLogEntry: () => (/* binding */ createWorkoutLogEntry),\n/* harmony export */   createWorkoutSession: () => (/* binding */ createWorkoutSession),\n/* harmony export */   createWorkoutTemplate: () => (/* binding */ createWorkoutTemplate),\n/* harmony export */   deleteExercise: () => (/* binding */ deleteExercise),\n/* harmony export */   deleteExerciseVariation: () => (/* binding */ deleteExerciseVariation),\n/* harmony export */   deleteTrainingProgram: () => (/* binding */ deleteTrainingProgram),\n/* harmony export */   deleteWorkoutLogEntry: () => (/* binding */ deleteWorkoutLogEntry),\n/* harmony export */   deleteWorkoutSession: () => (/* binding */ deleteWorkoutSession),\n/* harmony export */   deleteWorkoutTemplate: () => (/* binding */ deleteWorkoutTemplate),\n/* harmony export */   finalise_session_with_gamification: () => (/* binding */ finalise_session_with_gamification),\n/* harmony export */   generateWorkoutAnalytics: () => (/* binding */ generateWorkoutAnalytics),\n/* harmony export */   getClientWorkoutLogs: () => (/* binding */ getClientWorkoutLogs),\n/* harmony export */   getEquipmentTypes: () => (/* binding */ getEquipmentTypes),\n/* harmony export */   getExercise: () => (/* binding */ getExercise),\n/* harmony export */   getExerciseCategories: () => (/* binding */ getExerciseCategories),\n/* harmony export */   getExerciseVariationById: () => (/* binding */ getExerciseVariationById),\n/* harmony export */   getExerciseVariations: () => (/* binding */ getExerciseVariations),\n/* harmony export */   getExercises: () => (/* binding */ getExercises),\n/* harmony export */   getFeaturedContent: () => (/* binding */ getFeaturedContent),\n/* harmony export */   getMarketplacePrograms: () => (/* binding */ getMarketplacePrograms),\n/* harmony export */   getMarketplaceTemplates: () => (/* binding */ getMarketplaceTemplates),\n/* harmony export */   getMuscleGroups: () => (/* binding */ getMuscleGroups),\n/* harmony export */   getMyPrograms: () => (/* binding */ getMyPrograms),\n/* harmony export */   getMyTemplates: () => (/* binding */ getMyTemplates),\n/* harmony export */   getPersonalRecords: () => (/* binding */ getPersonalRecords),\n/* harmony export */   getPopularContent: () => (/* binding */ getPopularContent),\n/* harmony export */   getProgressMetrics: () => (/* binding */ getProgressMetrics),\n/* harmony export */   getRecommendedContent: () => (/* binding */ getRecommendedContent),\n/* harmony export */   getTopRatedContent: () => (/* binding */ getTopRatedContent),\n/* harmony export */   getTrainingProgramById: () => (/* binding */ getTrainingProgramById),\n/* harmony export */   getTrainingPrograms: () => (/* binding */ getTrainingPrograms),\n/* harmony export */   getUserProgramSubscriptions: () => (/* binding */ getUserProgramSubscriptions),\n/* harmony export */   getUserWorkoutsUnified: () => (/* binding */ getUserWorkoutsUnified),\n/* harmony export */   getWorkoutAnalytics: () => (/* binding */ getWorkoutAnalytics),\n/* harmony export */   getWorkoutLogEntries: () => (/* binding */ getWorkoutLogEntries),\n/* harmony export */   getWorkoutLogEntry: () => (/* binding */ getWorkoutLogEntry),\n/* harmony export */   getWorkoutSession: () => (/* binding */ getWorkoutSession),\n/* harmony export */   getWorkoutSessions: () => (/* binding */ getWorkoutSessions),\n/* harmony export */   getWorkoutStats: () => (/* binding */ getWorkoutStats),\n/* harmony export */   getWorkoutTemplateById: () => (/* binding */ getWorkoutTemplateById),\n/* harmony export */   getWorkoutTemplates: () => (/* binding */ getWorkoutTemplates),\n/* harmony export */   get_assessment_based_recommendations: () => (/* binding */ get_assessment_based_recommendations),\n/* harmony export */   link_session_to_assessment: () => (/* binding */ link_session_to_assessment),\n/* harmony export */   prepare_ai_training_data: () => (/* binding */ prepare_ai_training_data),\n/* harmony export */   purchaseProgram: () => (/* binding */ purchaseProgram),\n/* harmony export */   purchaseTemplate: () => (/* binding */ purchaseTemplate),\n/* harmony export */   rateProgram: () => (/* binding */ rateProgram),\n/* harmony export */   rateTemplate: () => (/* binding */ rateTemplate),\n/* harmony export */   searchExercises: () => (/* binding */ searchExercises),\n/* harmony export */   searchTrainingPrograms: () => (/* binding */ searchTrainingPrograms),\n/* harmony export */   searchWorkoutTemplates: () => (/* binding */ searchWorkoutTemplates),\n/* harmony export */   subscribeToProgram: () => (/* binding */ subscribeToProgram),\n/* harmony export */   updateExercise: () => (/* binding */ updateExercise),\n/* harmony export */   updateExerciseVariation: () => (/* binding */ updateExerciseVariation),\n/* harmony export */   updateProgramProgress: () => (/* binding */ updateProgramProgress),\n/* harmony export */   updateTrainingProgram: () => (/* binding */ updateTrainingProgram),\n/* harmony export */   updateWorkoutLogEntry: () => (/* binding */ updateWorkoutLogEntry),\n/* harmony export */   updateWorkoutSession: () => (/* binding */ updateWorkoutSession),\n/* harmony export */   updateWorkoutTemplate: () => (/* binding */ updateWorkoutTemplate)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./client */ \"(rsc)/./src/core/database/client.ts\");\n/* harmony import */ var _types_workout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types/workout */ \"(rsc)/./src/types/workout.ts\");\n/* harmony import */ var _services_ai_workout_suggestions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/ai/workout-suggestions */ \"(rsc)/./src/services/ai/workout-suggestions.ts\");\n// src/core/database/workout-queries.ts\n/**\n * Workout Log Database Queries for Massimino\n * Comprehensive query functions for workout tracking and management\n */ \n\n\n\n// ============================================================================\n// WORKOUT LOG ENTRY QUERIES\n// ============================================================================\n/**\n * Get unified workout entries (personal + team workouts) with filtering, sorting, and pagination\n */ async function getUserWorkoutsUnified(userId, options = {}) {\n    const { filters = {}, sort = {\n        field: 'date',\n        direction: 'desc'\n    }, pagination = {}, includeTeamWorkouts = true } = options;\n    const page = pagination.page || 1;\n    const limit = pagination.limit || 50;\n    const offset = (page - 1) * limit;\n    // Build where clause\n    const where = {\n        userId\n    };\n    if (filters.dateRange) {\n        where.date = {\n            gte: filters.dateRange.start,\n            lte: filters.dateRange.end\n        };\n    }\n    if (filters.exercises && filters.exercises.length > 0) {\n        where.exerciseId = {\n            in: filters.exercises\n        };\n    }\n    if (filters.setTypes && filters.setTypes.length > 0) {\n        where.setType = {\n            in: filters.setTypes\n        };\n    }\n    if (filters.coachId) {\n        where.coachId = filters.coachId;\n    }\n    // Filter by team workout status if specified\n    if (!includeTeamWorkouts) {\n        where.isTeamWorkout = false;\n    }\n    // Get total count\n    const total = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.count({\n        where\n    });\n    // Get entries with relationships\n    const entries = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.findMany({\n        where,\n        include: {\n            exercises: true,\n            users_workout_log_entries_userIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            },\n            users_workout_log_entries_coachIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            }\n        },\n        orderBy: {\n            [sort.field]: sort.direction\n        },\n        skip: offset,\n        take: limit\n    });\n    const totalPages = Math.ceil(total / limit);\n    // Map the Prisma relation names to the expected format\n    const mappedEntries = entries.map((entry)=>({\n            ...entry,\n            exercise: entry.exercises,\n            user: entry.users_workout_log_entries_userIdTousers,\n            coach: entry.users_workout_log_entries_coachIdTousers\n        }));\n    return {\n        entries: mappedEntries,\n        pagination: {\n            page,\n            limit,\n            total,\n            totalPages,\n            hasMore: page < totalPages\n        }\n    };\n}\n/**\n * Get workout log entries with filtering, sorting, and pagination\n */ async function getWorkoutLogEntries(userId, options = {}) {\n    const { filters = {}, sort = {\n        field: 'date',\n        direction: 'desc'\n    }, pagination = {} } = options;\n    const page = pagination.page || 1;\n    const limit = pagination.limit || 50;\n    const offset = (page - 1) * limit;\n    // Build where clause\n    const where = {\n        userId\n    };\n    if (filters.dateRange) {\n        where.date = {\n            gte: filters.dateRange.start,\n            lte: filters.dateRange.end\n        };\n    }\n    if (filters.exercises && filters.exercises.length > 0) {\n        where.exerciseId = {\n            in: filters.exercises\n        };\n    }\n    if (filters.setTypes && filters.setTypes.length > 0) {\n        where.setType = {\n            in: filters.setTypes\n        };\n    }\n    if (filters.coachId) {\n        where.coachId = filters.coachId;\n    }\n    // Get total count\n    const total = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.count({\n        where\n    });\n    // Get entries with relationships\n    const entries = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.findMany({\n        where,\n        include: {\n            exercises: true,\n            users_workout_log_entries_userIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            },\n            users_workout_log_entries_coachIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            }\n        },\n        orderBy: {\n            [sort.field]: sort.direction\n        },\n        skip: offset,\n        take: limit\n    });\n    const totalPages = Math.ceil(total / limit);\n    // Map the Prisma relation names to the expected format\n    const mappedEntries = entries.map((entry)=>({\n            ...entry,\n            exercise: entry.exercises,\n            user: entry.users_workout_log_entries_userIdTousers,\n            coach: entry.users_workout_log_entries_coachIdTousers\n        }));\n    return {\n        entries: mappedEntries,\n        pagination: {\n            page,\n            limit,\n            total,\n            totalPages,\n            hasMore: page < totalPages\n        }\n    };\n}\n/**\n * Get a single workout log entry by ID\n */ async function getWorkoutLogEntry(id, userId) {\n    const entry = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.findFirst({\n        where: {\n            id,\n            userId\n        },\n        include: {\n            exercises: true,\n            users_workout_log_entries_userIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            },\n            users_workout_log_entries_coachIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            }\n        }\n    });\n    if (!entry) return null;\n    // Map the Prisma relation names to the expected format\n    return {\n        ...entry,\n        exercise: entry.exercises,\n        user: entry.users_workout_log_entries_userIdTousers,\n        coach: entry.users_workout_log_entries_coachIdTousers\n    };\n}\n/**\n * Create a new workout log entry\n */ async function createWorkoutLogEntry(userId, data, coachId) {\n    // Calculate training volume\n    const averageWeight = (0,_types_workout__WEBPACK_IMPORTED_MODULE_2__.calculateAverageWeight)(data.weight);\n    const trainingVolume = (0,_types_workout__WEBPACK_IMPORTED_MODULE_2__.calculateTrainingVolume)(1, data.reps, averageWeight, data.unit);\n    // Check for personal records\n    const is_weight_pr = await check_personal_record(userId, data.exerciseId, averageWeight, data.reps);\n    const is_volume_pr = await check_volume_record(userId, data.exerciseId, trainingVolume);\n    // Entry is a PR if it's either a weight PR or volume PR\n    const is_personal_record = is_weight_pr || is_volume_pr;\n    // Generate order based on set type\n    const context = {\n        currentSetType: data.setType,\n        currentGroupNumber: data.setNumber,\n        currentSubOrder: 'A',\n        totalEntries: 0\n    };\n    const order = (0,_types_workout__WEBPACK_IMPORTED_MODULE_2__.generateOrder)(data.setType, context);\n    // Create entry and update exercise usage metrics in a transaction\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.$transaction(async (tx)=>{\n        const entry = await tx.workout_log_entries.create({\n            data: {\n                id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n                userId,\n                coachId: coachId ?? null,\n                date: new Date(data.date),\n                exerciseId: data.exerciseId,\n                order,\n                setNumber: data.setNumber,\n                setType: data.setType,\n                reps: data.reps,\n                weight: data.weight,\n                unit: data.unit,\n                ...data.intensity !== undefined && {\n                    intensity: data.intensity\n                },\n                ...data.intensityType !== undefined && {\n                    intensityType: data.intensityType\n                },\n                ...data.tempo !== undefined && {\n                    tempo: data.tempo\n                },\n                ...data.restSeconds !== undefined && {\n                    restSeconds: data.restSeconds\n                },\n                trainingVolume,\n                personalRecord: is_personal_record,\n                ...data.userComments !== undefined && {\n                    userComments: data.userComments\n                },\n                ...data.coachFeedback !== undefined && {\n                    coachFeedback: data.coachFeedback\n                },\n                updatedAt: new Date()\n            }\n        });\n        await tx.exercises.update({\n            where: {\n                id: data.exerciseId\n            },\n            data: {\n                usageCount: {\n                    increment: 1\n                },\n                lastUsed: new Date()\n            }\n        });\n        return entry;\n    });\n}\n/**\n * Update a workout log entry\n */ async function updateWorkoutLogEntry(id, userId, data) {\n    // Get existing entry\n    const existing = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.findFirst({\n        where: {\n            id,\n            userId\n        }\n    });\n    if (!existing) {\n        return null;\n    }\n    // Calculate new training volume if weight or reps changed\n    let trainingVolume = existing.trainingVolume;\n    if (data.weight || data.reps) {\n        const newWeight = data.weight || existing.weight;\n        const newReps = data.reps || existing.reps;\n        const averageWeight = (0,_types_workout__WEBPACK_IMPORTED_MODULE_2__.calculateAverageWeight)(newWeight);\n        trainingVolume = (0,_types_workout__WEBPACK_IMPORTED_MODULE_2__.calculateTrainingVolume)(1, newReps, averageWeight, data.unit || existing.unit);\n    }\n    const updated = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.update({\n        where: {\n            id\n        },\n        data: {\n            ...data.date && {\n                date: new Date(data.date)\n            },\n            ...data.exerciseId && {\n                exerciseId: data.exerciseId\n            },\n            ...data.setNumber && {\n                setNumber: data.setNumber\n            },\n            ...data.setType && {\n                setType: data.setType\n            },\n            ...data.reps && {\n                reps: data.reps\n            },\n            ...data.weight && {\n                weight: data.weight\n            },\n            ...data.unit && {\n                unit: data.unit\n            },\n            ...data.intensity && {\n                intensity: data.intensity\n            },\n            ...data.intensityType && {\n                intensityType: data.intensityType\n            },\n            ...data.tempo && {\n                tempo: data.tempo\n            },\n            ...data.restSeconds && {\n                restSeconds: data.restSeconds\n            },\n            ...trainingVolume !== undefined && {\n                trainingVolume\n            },\n            ...data.userComments && {\n                userComments: data.userComments\n            },\n            ...data.coachFeedback && {\n                coachFeedback: data.coachFeedback\n            }\n        }\n    });\n    // If exercise changed, update usage metrics for the new exercise\n    if (data.exerciseId && data.exerciseId !== existing.exerciseId) {\n        await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercises.update({\n            where: {\n                id: data.exerciseId\n            },\n            data: {\n                usageCount: {\n                    increment: 1\n                },\n                lastUsed: new Date()\n            }\n        });\n    }\n    return updated;\n}\n/**\n * Delete a workout log entry\n */ async function deleteWorkoutLogEntry(id, userId) {\n    const result = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.deleteMany({\n        where: {\n            id,\n            userId\n        }\n    });\n    return result.count > 0;\n}\n/**\n * Get workout statistics for a user\n */ async function getWorkoutStats(userId, dateRange) {\n    const where = {\n        userId\n    };\n    if (dateRange) {\n        where.date = {\n            gte: dateRange.start,\n            lte: dateRange.end\n        };\n    }\n    const entries = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.findMany({\n        where,\n        include: {\n            exercises: true\n        }\n    });\n    const totalWorkouts = new Set(entries.map((e)=>e.date.toDateString())).size;\n    const totalVolume = entries.reduce((sum, e)=>sum + (e.trainingVolume || 0), 0);\n    const totalSets = entries.length;\n    const totalReps = entries.reduce((sum, e)=>sum + e.reps, 0);\n    // Calculate average workout duration\n    const sessions = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findMany({\n        where,\n        select: {\n            duration: true\n        }\n    });\n    const averageWorkoutDuration = sessions.length > 0 ? sessions.reduce((sum, s)=>sum + (s.duration || 0), 0) / sessions.length : 0;\n    // Most used exercises\n    const exerciseCounts = entries.reduce((acc, entry)=>{\n        const key = entry.exerciseId;\n        acc[key] = (acc[key] || 0) + 1;\n        return acc;\n    }, {});\n    const mostUsedExercises = Object.entries(exerciseCounts).map(([exerciseId, count])=>({\n            exerciseId,\n            count,\n            name: entries.find((e)=>e.exerciseId === exerciseId)?.exercises.name || ''\n        })).sort((a, b)=>b.count - a.count).slice(0, 10);\n    // Volume by muscle group\n    const volumeByMuscleGroup = entries.reduce((acc, entry)=>{\n        entry.exercises.muscleGroups.forEach((muscleGroup)=>{\n            acc[muscleGroup] = (acc[muscleGroup] || 0) + (entry.trainingVolume || 0);\n        });\n        return acc;\n    }, {});\n    return {\n        totalWorkouts,\n        totalVolume,\n        totalSets,\n        totalReps,\n        averageWorkoutDuration,\n        mostUsedExercises,\n        volumeByMuscleGroup: Object.entries(volumeByMuscleGroup).map(([muscleGroup, volume])=>({\n                muscleGroup,\n                volume\n            }))\n    };\n}\n// ============================================================================\n// EXERCISE QUERIES\n// ============================================================================\n/**\n * Get all exercises with optional filtering\n */ async function getExercises(options = {}) {\n    const where = {};\n    if (options.category) {\n        where.category = options.category;\n    }\n    if (options.muscleGroups && options.muscleGroups.length > 0) {\n        where.muscleGroups = {\n            hasSome: options.muscleGroups\n        };\n    }\n    if (options.equipment && options.equipment.length > 0) {\n        where.equipment = {\n            hasSome: options.equipment\n        };\n    }\n    if (options.difficulty) {\n        where.difficulty = options.difficulty;\n    }\n    if (options.isActive !== undefined) {\n        where.isActive = options.isActive;\n    }\n    if (options.search) {\n        where.name = {\n            contains: options.search,\n            mode: 'insensitive'\n        };\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercises.findMany({\n        where,\n        orderBy: {\n            name: 'asc'\n        }\n    });\n}\n/**\n * Get exercise by ID\n */ async function getExercise(id) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercises.findUnique({\n        where: {\n            id\n        }\n    });\n}\n/**\n * Create a new exercise\n */ async function createExercise(data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercises.create({\n        data: {\n            id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n            name: data.name,\n            category: data.category,\n            muscleGroups: data.muscleGroups,\n            equipment: data.equipment,\n            instructions: data.instructions ?? null,\n            videoUrl: data.videoUrl ?? null,\n            imageUrl: data.imageUrl ?? null,\n            difficulty: data.difficulty || 'BEGINNER',\n            safetyNotes: data.safetyNotes ?? null,\n            formCues: data.formCues || [],\n            commonMistakes: data.commonMistakes || [],\n            createdBy: data.createdBy ?? null,\n            isCustom: data.isCustom || false,\n            updatedAt: new Date()\n        }\n    });\n}\n/**\n * Update an exercise\n */ async function updateExercise(id, data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercises.update({\n        where: {\n            id\n        },\n        data\n    });\n}\n/**\n * Delete an exercise (soft delete by setting isActive to false)\n */ async function deleteExercise(id) {\n    const result = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercises.update({\n        where: {\n            id\n        },\n        data: {\n            isActive: false\n        }\n    });\n    return result.isActive === false;\n}\n// ============================================================================\n// EXERCISE VARIATION QUERIES\n// ============================================================================\n/**\n * Get exercise variations for an exercise\n */ async function getExerciseVariations(exerciseId, options = {}) {\n    const where = {\n        exerciseId,\n        isActive: true\n    };\n    if (options.difficulty) {\n        where.difficulty = options.difficulty;\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercise_variations.findMany({\n        where,\n        include: {\n            exercises: {\n                select: {\n                    id: true,\n                    name: true,\n                    category: true\n                }\n            }\n        },\n        orderBy: {\n            difficulty: 'asc'\n        }\n    });\n}\n/**\n * Get exercise variation by ID\n */ async function getExerciseVariationById(id) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercise_variations.findUnique({\n        where: {\n            id\n        },\n        include: {\n            exercises: {\n                select: {\n                    id: true,\n                    name: true,\n                    category: true\n                }\n            }\n        }\n    });\n}\n/**\n * Create exercise variation\n */ async function createExerciseVariation(data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercise_variations.create({\n        data: {\n            id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n            exerciseId: data.exerciseId,\n            name: data.name,\n            description: data.description ?? null,\n            difficulty: data.difficulty || 'BEGINNER',\n            videoUrl: data.videoUrl ?? null,\n            imageUrl: data.imageUrl ?? null,\n            instructions: data.instructions ?? null,\n            updatedAt: new Date()\n        },\n        include: {\n            exercises: {\n                select: {\n                    id: true,\n                    name: true,\n                    category: true\n                }\n            }\n        }\n    });\n}\n/**\n * Update exercise variation\n */ async function updateExerciseVariation(id, data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercise_variations.update({\n        where: {\n            id\n        },\n        data: {\n            ...data.name && {\n                name: data.name\n            },\n            ...data.description && {\n                description: data.description\n            },\n            ...data.difficulty && {\n                difficulty: data.difficulty\n            },\n            ...data.videoUrl && {\n                videoUrl: data.videoUrl\n            },\n            ...data.imageUrl && {\n                imageUrl: data.imageUrl\n            },\n            ...data.instructions && {\n                instructions: data.instructions\n            },\n            ...data.isActive !== undefined && {\n                isActive: data.isActive\n            }\n        },\n        include: {\n            exercises: {\n                select: {\n                    id: true,\n                    name: true,\n                    category: true\n                }\n            }\n        }\n    });\n}\n/**\n * Delete exercise variation\n */ async function deleteExerciseVariation(id) {\n    const result = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercise_variations.update({\n        where: {\n            id\n        },\n        data: {\n            isActive: false\n        }\n    });\n    return result.isActive === false;\n}\n// ============================================================================\n// WORKOUT SESSION QUERIES\n// ============================================================================\n/**\n * Get workout sessions for a user\n */ async function getWorkoutSessions(userId, options = {}) {\n    const { dateRange, isComplete, isTemplate, pagination = {} } = options;\n    const page = pagination.page || 1;\n    const limit = pagination.limit || 20;\n    const offset = (page - 1) * limit;\n    const where = {\n        userId\n    };\n    if (dateRange) {\n        where.date = {\n            gte: dateRange.start,\n            lte: dateRange.end\n        };\n    }\n    if (isComplete !== undefined) {\n        where.isComplete = isComplete;\n    }\n    if (isTemplate !== undefined) {\n        where.isTemplate = isTemplate;\n    }\n    const total = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.count({\n        where\n    });\n    const sessions = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findMany({\n        where,\n        include: {\n            users_workout_sessions_userIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            },\n            users_workout_sessions_coachIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            },\n            workout_log_entries: {\n                include: {\n                    exercises: true\n                },\n                orderBy: {\n                    order: 'asc'\n                }\n            }\n        },\n        orderBy: {\n            date: 'desc'\n        },\n        skip: offset,\n        take: limit\n    });\n    // Map the Prisma relation names to the expected format\n    const mappedSessions = sessions.map((session)=>({\n            ...session,\n            user: session.users_workout_sessions_userIdTousers,\n            coach: session.users_workout_sessions_coachIdTousers,\n            entries: session.workout_log_entries.map((entry)=>({\n                    ...entry,\n                    exercise: entry.exercises\n                }))\n        }));\n    return {\n        sessions: mappedSessions,\n        pagination: {\n            page,\n            limit,\n            total,\n            totalPages: Math.ceil(total / limit),\n            hasMore: page < Math.ceil(total / limit)\n        }\n    };\n}\n/**\n * Get a single workout session by ID\n */ async function getWorkoutSession(id, userId) {\n    const session = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findFirst({\n        where: {\n            id,\n            userId\n        },\n        include: {\n            users_workout_sessions_userIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            },\n            users_workout_sessions_coachIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            },\n            workout_log_entries: {\n                include: {\n                    exercises: true\n                },\n                orderBy: {\n                    order: 'asc'\n                }\n            }\n        }\n    });\n    if (!session) return null;\n    // Map the Prisma relation names to the expected format\n    return {\n        ...session,\n        user: session.users_workout_sessions_userIdTousers,\n        coach: session.users_workout_sessions_coachIdTousers,\n        entries: session.workout_log_entries.map((entry)=>({\n                ...entry,\n                exercise: entry.exercises\n            }))\n    };\n}\n/**\n * Create a new workout session\n */ async function createWorkoutSession(userId, data, coachId) {\n    const startTime = new Date(`${data.date}T${data.startTime}`);\n    const endTime = data.endTime ? new Date(`${data.date}T${data.endTime}`) : null;\n    let duration;\n    if (startTime && endTime) {\n        duration = Math.floor((endTime.getTime() - startTime.getTime()) / 1000);\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.create({\n        data: {\n            id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n            userId,\n            coachId: coachId ?? null,\n            date: new Date(data.date),\n            startTime,\n            endTime,\n            ...duration !== undefined && {\n                duration\n            },\n            ...data.title !== undefined && {\n                title: data.title\n            },\n            ...data.notes !== undefined && {\n                notes: data.notes\n            },\n            ...data.location !== undefined && {\n                location: data.location\n            },\n            isTemplate: data.isTemplate || false,\n            updatedAt: new Date()\n        }\n    });\n}\n/**\n * Update a workout session\n */ async function updateWorkoutSession(id, userId, data) {\n    const existing = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findFirst({\n        where: {\n            id,\n            userId\n        }\n    });\n    if (!existing) {\n        return null;\n    }\n    let startTime = existing.startTime;\n    let endTime = existing.endTime;\n    let duration = existing.duration;\n    if (data.date && data.startTime) {\n        startTime = new Date(`${data.date}T${data.startTime}`);\n    }\n    if (data.date && data.endTime) {\n        endTime = new Date(`${data.date}T${data.endTime}`);\n    }\n    if (startTime && endTime) {\n        duration = Math.floor((endTime.getTime() - startTime.getTime()) / 1000);\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.update({\n        where: {\n            id\n        },\n        data: {\n            ...data.date && {\n                date: new Date(data.date)\n            },\n            ...startTime && {\n                startTime\n            },\n            ...endTime && {\n                endTime\n            },\n            ...duration !== undefined && {\n                duration\n            },\n            ...data.title && {\n                title: data.title\n            },\n            ...data.notes && {\n                notes: data.notes\n            },\n            ...data.location && {\n                location: data.location\n            },\n            ...data.isTemplate !== undefined && {\n                isTemplate: data.isTemplate\n            }\n        }\n    });\n}\n/**\n * Complete a workout session\n */ async function completeWorkoutSession(id, userId, endTime) {\n    const session = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findFirst({\n        where: {\n            id,\n            userId\n        }\n    });\n    if (!session) {\n        return null;\n    }\n    const endTimeToUse = endTime || new Date();\n    const duration = Math.floor((endTimeToUse.getTime() - session.startTime.getTime()) / 1000);\n    // Calculate total volume and stats\n    const entries = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.findMany({\n        where: {\n            userId,\n            date: session.date\n        }\n    });\n    const totalVolume = entries.reduce((sum, entry)=>sum + (entry.trainingVolume || 0), 0);\n    const totalSets = entries.length;\n    const totalReps = entries.reduce((sum, entry)=>sum + entry.reps, 0);\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.update({\n        where: {\n            id\n        },\n        data: {\n            endTime: endTimeToUse,\n            duration,\n            isComplete: true,\n            totalVolume,\n            totalSets,\n            totalReps\n        }\n    });\n}\n/**\n * Delete a workout session\n */ async function deleteWorkoutSession(id, userId) {\n    const result = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.deleteMany({\n        where: {\n            id,\n            userId\n        }\n    });\n    return result.count > 0;\n}\n// ============================================================================\n// COACH-SPECIFIC QUERIES\n// ============================================================================\n/**\n * Get workout logs for clients assigned to a coach\n */ async function getClientWorkoutLogs(coachId, options = {}) {\n    const { clientId, dateRange, pagination = {} } = options;\n    const page = pagination.page || 1;\n    const limit = pagination.limit || 50;\n    const offset = (page - 1) * limit;\n    const where = {\n        coachId\n    };\n    if (clientId) {\n        where.userId = clientId;\n    }\n    if (dateRange) {\n        where.date = {\n            gte: dateRange.start,\n            lte: dateRange.end\n        };\n    }\n    const total = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.count({\n        where\n    });\n    const entries = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.findMany({\n        where,\n        include: {\n            exercises: true,\n            users_workout_log_entries_userIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            }\n        },\n        orderBy: {\n            date: 'desc'\n        },\n        skip: offset,\n        take: limit\n    });\n    const totalPages = Math.ceil(total / limit);\n    // Map the Prisma relation names to the expected format\n    const mappedEntries = entries.map((entry)=>({\n            ...entry,\n            exercise: entry.exercises,\n            user: entry.users_workout_log_entries_userIdTousers\n        }));\n    return {\n        entries: mappedEntries,\n        pagination: {\n            page,\n            limit,\n            total,\n            totalPages,\n            hasMore: page < totalPages\n        }\n    };\n}\n/**\n * Add coach feedback to a workout entry\n */ async function addCoachFeedback(entryId, coachId, feedback) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.update({\n        where: {\n            id: entryId,\n            coachId\n        },\n        data: {\n            coachFeedback: feedback\n        }\n    });\n}\n// ============================================================================\n// UTILITY QUERIES\n// ============================================================================\n/**\n * Get exercise categories for filtering\n */ async function getExerciseCategories() {\n    const exercises = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercises.findMany({\n        select: {\n            category: true\n        },\n        where: {\n            isActive: true\n        }\n    });\n    return [\n        ...new Set(exercises.map((e)=>e.category))\n    ];\n}\n/**\n * Get muscle groups for filtering\n */ async function getMuscleGroups() {\n    const exercises = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercises.findMany({\n        select: {\n            muscleGroups: true\n        },\n        where: {\n            isActive: true\n        }\n    });\n    const allMuscleGroups = exercises.flatMap((e)=>e.muscleGroups);\n    return [\n        ...new Set(allMuscleGroups)\n    ];\n}\n/**\n * Get equipment types for filtering\n */ async function getEquipmentTypes() {\n    const exercises = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercises.findMany({\n        select: {\n            equipment: true\n        },\n        where: {\n            isActive: true\n        }\n    });\n    const allEquipment = exercises.flatMap((e)=>e.equipment);\n    return [\n        ...new Set(allEquipment)\n    ];\n}\n/**\n * Search exercises by name\n */ async function searchExercises(query, limit = 10) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercises.findMany({\n        where: {\n            name: {\n                contains: query,\n                mode: 'insensitive'\n            },\n            isActive: true\n        },\n        orderBy: {\n            usageCount: 'desc'\n        },\n        take: limit\n    });\n}\n// ============================================================================\n// WORKOUT TEMPLATE QUERIES\n// ============================================================================\n/**\n * Get workout templates with filtering\n */ async function getWorkoutTemplates(filters = {}) {\n    const where = {\n        isActive: true\n    };\n    if (filters.publicOnly) {\n        where.isPublic = true;\n    }\n    if (filters.category) {\n        where.category = filters.category;\n    }\n    if (filters.difficulty) {\n        where.difficulty = filters.difficulty;\n    }\n    if (filters.minRating) {\n        where.rating = {\n            gte: filters.minRating\n        };\n    }\n    if (filters.priceRange) {\n        const [min, max] = filters.priceRange.split('-').map(Number);\n        where.price = {\n            gte: min,\n            lte: max\n        };\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.findMany({\n        where,\n        include: {\n            users: {\n                select: {\n                    id: true,\n                    name: true,\n                    trainerVerified: true\n                }\n            },\n            workout_template_exercises: {\n                include: {\n                    exercises: true\n                },\n                orderBy: {\n                    order: 'asc'\n                }\n            },\n            _count: {\n                select: {\n                    template_ratings: true\n                }\n            }\n        },\n        orderBy: {\n            rating: 'desc'\n        },\n        take: filters.limit || 20\n    });\n}\n/**\n * Get workout template by ID\n */ async function getWorkoutTemplateById(id) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.findUnique({\n        where: {\n            id\n        },\n        include: {\n            users: {\n                select: {\n                    id: true,\n                    name: true,\n                    trainerVerified: true\n                }\n            },\n            workout_template_exercises: {\n                include: {\n                    exercises: true\n                },\n                orderBy: {\n                    order: 'asc'\n                }\n            },\n            template_ratings: {\n                include: {\n                    users: {\n                        select: {\n                            id: true,\n                            name: true\n                        }\n                    }\n                },\n                orderBy: {\n                    createdAt: 'desc'\n                },\n                take: 10\n            },\n            _count: {\n                select: {\n                    template_ratings: true\n                }\n            }\n        }\n    });\n}\n/**\n * Create workout template\n */ async function createWorkoutTemplate(data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.create({\n        data: {\n            id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n            updatedAt: new Date(),\n            name: data.name,\n            description: data.description,\n            category: data.category,\n            difficulty: data.difficulty || 'BEGINNER',\n            duration: data.duration,\n            equipment: data.equipment || [],\n            isPublic: data.isPublic || false,\n            price: data.price,\n            currency: data.currency || 'USD',\n            tags: data.tags || [],\n            users: {\n                connect: {\n                    id: data.createdBy\n                }\n            },\n            workout_template_exercises: {\n                create: data.exercises?.map((exercise)=>({\n                        exerciseId: exercise.exerciseId,\n                        order: exercise.order,\n                        sets: exercise.sets,\n                        reps: exercise.reps,\n                        weight: exercise.weight,\n                        restTime: exercise.restTime,\n                        notes: exercise.notes,\n                        isSuperset: exercise.isSuperset || false,\n                        supersetGroup: exercise.supersetGroup\n                    })) || []\n            }\n        },\n        include: {\n            workout_template_exercises: {\n                include: {\n                    exercises: true\n                }\n            }\n        }\n    });\n}\n/**\n * Update workout template\n */ async function updateWorkoutTemplate(id, data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.update({\n        where: {\n            id\n        },\n        data: {\n            ...data.name && {\n                name: data.name\n            },\n            ...data.description && {\n                description: data.description\n            },\n            ...data.category && {\n                category: data.category\n            },\n            ...data.difficulty && {\n                difficulty: data.difficulty\n            },\n            ...data.duration && {\n                duration: data.duration\n            },\n            ...data.equipment && {\n                equipment: data.equipment\n            },\n            ...data.isPublic !== undefined && {\n                isPublic: data.isPublic\n            },\n            ...data.price !== undefined && {\n                price: data.price\n            },\n            ...data.tags && {\n                tags: data.tags\n            }\n        }\n    });\n}\n/**\n * Delete workout template\n */ async function deleteWorkoutTemplate(id) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.update({\n        where: {\n            id\n        },\n        data: {\n            isActive: false\n        }\n    });\n}\n/**\n * Get user's templates\n */ async function getMyTemplates(userId) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.findMany({\n        where: {\n            createdBy: userId,\n            isActive: true\n        },\n        include: {\n            workout_template_exercises: {\n                include: {\n                    exercises: true\n                },\n                orderBy: {\n                    order: 'asc'\n                }\n            },\n            _count: {\n                select: {\n                    template_ratings: true\n                }\n            }\n        },\n        orderBy: {\n            createdAt: 'desc'\n        }\n    });\n}\n/**\n * Search workout templates\n */ async function searchWorkoutTemplates(query, options = {}) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.findMany({\n        where: {\n            isActive: true,\n            ...options.publicOnly && {\n                isPublic: true\n            },\n            OR: [\n                {\n                    name: {\n                        contains: query,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    description: {\n                        contains: query,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    tags: {\n                        has: query\n                    }\n                }\n            ]\n        },\n        include: {\n            users: {\n                select: {\n                    id: true,\n                    name: true,\n                    trainerVerified: true\n                }\n            },\n            _count: {\n                select: {\n                    template_ratings: true\n                }\n            }\n        },\n        orderBy: {\n            rating: 'desc'\n        },\n        take: options.limit || 20\n    });\n}\n/**\n * Purchase template\n */ async function purchaseTemplate(templateId, userId) {\n    const template = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.findUnique({\n        where: {\n            id: templateId\n        },\n        select: {\n            price: true,\n            currency: true\n        }\n    });\n    if (!template) throw new Error('Template not found');\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.$transaction(async (tx)=>{\n        const purchase = await tx.template_purchases.create({\n            data: {\n                id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n                userId,\n                templateId,\n                price: template.price || 0,\n                currency: template.currency\n            }\n        });\n        await tx.workout_templates.update({\n            where: {\n                id: templateId\n            },\n            data: {\n                purchaseCount: {\n                    increment: 1\n                }\n            }\n        });\n        return purchase;\n    });\n}\n/**\n * Rate template\n */ async function rateTemplate(templateId, userId, data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.$transaction(async (tx)=>{\n        const rating = await tx.template_ratings.upsert({\n            where: {\n                userId_templateId: {\n                    userId,\n                    templateId\n                }\n            },\n            update: {\n                rating: data.rating,\n                review: data.review\n            },\n            create: {\n                id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n                userId,\n                templateId,\n                rating: data.rating,\n                review: data.review\n            }\n        });\n        // Recalculate average rating\n        const ratings = await tx.template_ratings.findMany({\n            where: {\n                templateId\n            },\n            select: {\n                rating: true\n            }\n        });\n        const avgRating = ratings.reduce((sum, r)=>sum + r.rating, 0) / ratings.length;\n        await tx.workout_templates.update({\n            where: {\n                id: templateId\n            },\n            data: {\n                rating: avgRating,\n                ratingCount: ratings.length\n            }\n        });\n        return rating;\n    });\n}\n// ============================================================================\n// TRAINING PROGRAM QUERIES\n// ============================================================================\n/**\n * Get training programs with filtering\n */ async function getTrainingPrograms(filters = {}) {\n    const where = {\n        isActive: true\n    };\n    if (filters.publicOnly) {\n        where.isPublic = true;\n    }\n    if (filters.category) {\n        where.category = filters.category;\n    }\n    if (filters.difficulty) {\n        where.difficulty = filters.difficulty;\n    }\n    if (filters.duration) {\n        where.duration = filters.duration;\n    }\n    if (filters.minRating) {\n        where.rating = {\n            gte: filters.minRating\n        };\n    }\n    if (filters.priceRange) {\n        const [min, max] = filters.priceRange.split('-').map(Number);\n        where.price = {\n            gte: min,\n            lte: max\n        };\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.findMany({\n        where,\n        include: {\n            users: {\n                select: {\n                    id: true,\n                    name: true,\n                    trainerVerified: true\n                }\n            },\n            program_weeks: {\n                orderBy: {\n                    weekNumber: 'asc'\n                }\n            },\n            _count: {\n                select: {\n                    program_ratings: true,\n                    program_subscriptions: true\n                }\n            }\n        },\n        orderBy: {\n            rating: 'desc'\n        },\n        take: filters.limit || 20\n    });\n}\n/**\n * Get training program by ID\n */ async function getTrainingProgramById(id) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.findUnique({\n        where: {\n            id\n        },\n        include: {\n            users: {\n                select: {\n                    id: true,\n                    name: true,\n                    trainerVerified: true\n                }\n            },\n            program_weeks: {\n                orderBy: {\n                    weekNumber: 'asc'\n                }\n            },\n            workout_templates: {\n                include: {\n                    workout_template_exercises: {\n                        include: {\n                            exercises: true\n                        },\n                        orderBy: {\n                            order: 'asc'\n                        }\n                    }\n                }\n            },\n            program_ratings: {\n                include: {\n                    users: {\n                        select: {\n                            id: true,\n                            name: true\n                        }\n                    }\n                },\n                orderBy: {\n                    createdAt: 'desc'\n                },\n                take: 10\n            },\n            _count: {\n                select: {\n                    program_ratings: true,\n                    program_subscriptions: true\n                }\n            }\n        }\n    });\n}\n/**\n * Create training program\n */ async function createTrainingProgram(data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.create({\n        data: {\n            id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n            updatedAt: new Date(),\n            name: data.name,\n            description: data.description,\n            duration: data.duration,\n            difficulty: data.difficulty || 'BEGINNER',\n            category: data.category,\n            isPublic: data.isPublic || false,\n            price: data.price,\n            currency: data.currency || 'USD',\n            tags: data.tags || [],\n            users: {\n                connect: {\n                    id: data.createdBy\n                }\n            },\n            program_weeks: {\n                create: data.weeks?.map((week)=>({\n                        weekNumber: week.weekNumber,\n                        title: week.title,\n                        description: week.description,\n                        workouts: week.workouts\n                    })) || []\n            }\n        },\n        include: {\n            program_weeks: {\n                orderBy: {\n                    weekNumber: 'asc'\n                }\n            }\n        }\n    });\n}\n/**\n * Update training program\n */ async function updateTrainingProgram(id, data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.update({\n        where: {\n            id\n        },\n        data: {\n            ...data.name && {\n                name: data.name\n            },\n            ...data.description && {\n                description: data.description\n            },\n            ...data.duration && {\n                duration: data.duration\n            },\n            ...data.difficulty && {\n                difficulty: data.difficulty\n            },\n            ...data.category && {\n                category: data.category\n            },\n            ...data.isPublic !== undefined && {\n                isPublic: data.isPublic\n            },\n            ...data.price !== undefined && {\n                price: data.price\n            },\n            ...data.tags && {\n                tags: data.tags\n            }\n        }\n    });\n}\n/**\n * Delete training program\n */ async function deleteTrainingProgram(id) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.update({\n        where: {\n            id\n        },\n        data: {\n            isActive: false\n        }\n    });\n}\n/**\n * Get user's programs\n */ async function getMyPrograms(userId) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.findMany({\n        where: {\n            createdBy: userId,\n            isActive: true\n        },\n        include: {\n            program_weeks: {\n                orderBy: {\n                    weekNumber: 'asc'\n                }\n            },\n            _count: {\n                select: {\n                    program_ratings: true,\n                    program_subscriptions: true\n                }\n            }\n        },\n        orderBy: {\n            createdAt: 'desc'\n        }\n    });\n}\n/**\n * Search training programs\n */ async function searchTrainingPrograms(query, options = {}) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.findMany({\n        where: {\n            isActive: true,\n            ...options.publicOnly && {\n                isPublic: true\n            },\n            OR: [\n                {\n                    name: {\n                        contains: query,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    description: {\n                        contains: query,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    tags: {\n                        has: query\n                    }\n                }\n            ]\n        },\n        include: {\n            users: {\n                select: {\n                    id: true,\n                    name: true,\n                    trainerVerified: true\n                }\n            },\n            _count: {\n                select: {\n                    program_ratings: true,\n                    program_subscriptions: true\n                }\n            }\n        },\n        orderBy: {\n            rating: 'desc'\n        },\n        take: options.limit || 20\n    });\n}\n/**\n * Get user program subscriptions\n */ async function getUserProgramSubscriptions(userId) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_subscriptions.findMany({\n        where: {\n            userId,\n            isActive: true\n        },\n        include: {\n            program_templates: {\n                include: {\n                    users: {\n                        select: {\n                            id: true,\n                            name: true,\n                            trainerVerified: true\n                        }\n                    },\n                    program_weeks: {\n                        orderBy: {\n                            weekNumber: 'asc'\n                        }\n                    }\n                }\n            }\n        },\n        orderBy: {\n            startDate: 'desc'\n        }\n    });\n}\n/**\n * Purchase program\n */ async function purchaseProgram(programId, userId) {\n    const program = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.findUnique({\n        where: {\n            id: programId\n        },\n        select: {\n            price: true,\n            currency: true\n        }\n    });\n    if (!program) throw new Error('Program not found');\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.$transaction(async (tx)=>{\n        const purchase = await tx.program_purchases.create({\n            data: {\n                id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n                userId,\n                programId,\n                price: program.price || 0,\n                currency: program.currency\n            }\n        });\n        await tx.program_templates.update({\n            where: {\n                id: programId\n            },\n            data: {\n                purchaseCount: {\n                    increment: 1\n                }\n            }\n        });\n        return purchase;\n    });\n}\n/**\n * Subscribe to program\n */ async function subscribeToProgram(programId, userId) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_subscriptions.create({\n        data: {\n            id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n            userId,\n            programId,\n            currentWeek: 1,\n            currentDay: 1,\n            updatedAt: new Date()\n        }\n    });\n}\n/**\n * Rate program\n */ async function rateProgram(programId, userId, data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.$transaction(async (tx)=>{\n        const rating = await tx.program_ratings.upsert({\n            where: {\n                userId_programId: {\n                    userId,\n                    programId\n                }\n            },\n            update: {\n                rating: data.rating,\n                review: data.review\n            },\n            create: {\n                id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n                userId,\n                programId,\n                rating: data.rating,\n                review: data.review\n            }\n        });\n        // Recalculate average rating\n        const ratings = await tx.program_ratings.findMany({\n            where: {\n                programId\n            },\n            select: {\n                rating: true\n            }\n        });\n        const avgRating = ratings.reduce((sum, r)=>sum + r.rating, 0) / ratings.length;\n        await tx.program_templates.update({\n            where: {\n                id: programId\n            },\n            data: {\n                rating: avgRating,\n                ratingCount: ratings.length\n            }\n        });\n        return rating;\n    });\n}\n/**\n * Update program progress\n */ async function updateProgramProgress(programId, userId, data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_subscriptions.update({\n        where: {\n            userId_programId: {\n                userId,\n                programId\n            }\n        },\n        data: {\n            currentWeek: data.currentWeek,\n            currentDay: data.currentDay,\n            progressData: data.progressData\n        }\n    });\n}\n// ============================================================================\n// ANALYTICS & PROGRESS TRACKING QUERIES\n// ============================================================================\n/**\n * Get workout analytics for a user\n */ async function getWorkoutAnalytics(userId, options = {}) {\n    const where = {\n        userId\n    };\n    if (options.startDate || options.endDate) {\n        where.date = {};\n        if (options.startDate) where.date.gte = options.startDate;\n        if (options.endDate) where.date.lte = options.endDate;\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_analytics.findMany({\n        where,\n        orderBy: {\n            date: 'desc'\n        }\n    });\n}\n/**\n * Get progress metrics for a user\n */ async function getProgressMetrics(userId, options = {}) {\n    const where = {\n        userId\n    };\n    if (options.metricType) {\n        where.metricType = options.metricType;\n    }\n    if (options.startDate || options.endDate) {\n        where.recordedAt = {};\n        if (options.startDate) where.recordedAt.gte = options.startDate;\n        if (options.endDate) where.recordedAt.lte = options.endDate;\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.progress_metrics.findMany({\n        where,\n        orderBy: {\n            recordedAt: 'desc'\n        }\n    });\n}\n/**\n * Get personal records for a user\n */ async function getPersonalRecords(userId, options = {}) {\n    const where = {\n        userId\n    };\n    if (options.exerciseId) {\n        where.exerciseId = options.exerciseId;\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.personal_records.findMany({\n        where,\n        include: {\n            exercises: {\n                select: {\n                    id: true,\n                    name: true,\n                    category: true\n                }\n            }\n        },\n        orderBy: {\n            achievedAt: 'desc'\n        }\n    });\n}\n/**\n * Add progress metric\n */ async function addProgressMetric(data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.progress_metrics.create({\n        data: {\n            id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n            userId: data.userId,\n            metricType: data.metricType,\n            value: data.value,\n            unit: data.unit ?? null,\n            bodyPart: data.bodyPart ?? null,\n            notes: data.notes ?? null,\n            imageUrl: data.imageUrl ?? null,\n            recordedAt: data.recordedAt || new Date()\n        }\n    });\n}\n/**\n * Add personal record\n */ async function addPersonalRecord(data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.personal_records.create({\n        data: {\n            id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n            userId: data.userId,\n            exerciseId: data.exerciseId,\n            recordType: data.recordType,\n            value: data.value,\n            unit: data.unit,\n            reps: data.reps ?? null,\n            notes: data.notes ?? null,\n            achievedAt: data.achievedAt || new Date()\n        }\n    });\n}\n/**\n * Generate workout analytics for a user\n */ async function generateWorkoutAnalytics(userId) {\n    // Get last 30 days of workout data\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 30);\n    const workoutLogs = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.findMany({\n        where: {\n            userId,\n            date: {\n                gte: startDate,\n                lte: endDate\n            }\n        },\n        include: {\n            exercises: true\n        }\n    });\n    // Group by date and calculate daily stats\n    const dailyStats = workoutLogs.reduce((acc, log)=>{\n        const dateKey = log.date.toISOString().split('T')[0];\n        if (!dateKey) return acc;\n        if (!acc[dateKey]) {\n            acc[dateKey] = {\n                date: log.date,\n                totalVolume: 0,\n                totalSets: 0,\n                totalReps: 0,\n                muscleGroups: new Set()\n            };\n        }\n        acc[dateKey].totalVolume += log.trainingVolume || 0;\n        acc[dateKey].totalSets += 1;\n        acc[dateKey].totalReps += log.reps;\n        log.exercises.muscleGroups.forEach((mg)=>acc[dateKey]?.muscleGroups.add(mg));\n        return acc;\n    }, {});\n    // Create or update analytics records\n    const analyticsPromises = Object.entries(dailyStats).map(([dateKey, stats])=>{\n        const topMuscleGroup = Array.from(stats.muscleGroups).length > 0 ? Array.from(stats.muscleGroups)[0] : null;\n        return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_analytics.upsert({\n            where: {\n                userId_date: {\n                    userId,\n                    date: new Date(dateKey)\n                }\n            },\n            update: {\n                totalWorkouts: 1,\n                totalVolume: stats.totalVolume,\n                totalSets: stats.totalSets,\n                totalReps: stats.totalReps,\n                topMuscleGroup,\n                updatedAt: new Date()\n            },\n            create: {\n                id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n                userId,\n                date: new Date(dateKey),\n                totalWorkouts: 1,\n                totalVolume: stats.totalVolume,\n                totalSets: stats.totalSets,\n                totalReps: stats.totalReps,\n                topMuscleGroup,\n                updatedAt: new Date()\n            }\n        });\n    });\n    return Promise.all(analyticsPromises);\n}\n// ============================================================================\n// MARKETPLACE QUERIES\n// ============================================================================\n/**\n * Get marketplace templates\n */ async function getMarketplaceTemplates(filters = {}) {\n    return getWorkoutTemplates({\n        ...filters,\n        publicOnly: true\n    });\n}\n/**\n * Get marketplace programs\n */ async function getMarketplacePrograms(filters = {}) {\n    return getTrainingPrograms({\n        ...filters,\n        publicOnly: true\n    });\n}\n/**\n * Get featured content\n */ async function getFeaturedContent() {\n    const [templates, programs] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.findMany({\n            where: {\n                isPublic: true,\n                isActive: true,\n                rating: {\n                    gte: 4.5\n                }\n            },\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        trainerVerified: true\n                    }\n                },\n                _count: {\n                    select: {\n                        template_ratings: true\n                    }\n                }\n            },\n            orderBy: {\n                rating: 'desc'\n            },\n            take: 6\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.findMany({\n            where: {\n                isPublic: true,\n                isActive: true,\n                rating: {\n                    gte: 4.5\n                }\n            },\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        trainerVerified: true\n                    }\n                },\n                _count: {\n                    select: {\n                        program_ratings: true,\n                        program_subscriptions: true\n                    }\n                }\n            },\n            orderBy: {\n                rating: 'desc'\n            },\n            take: 6\n        })\n    ]);\n    return {\n        templates,\n        programs\n    };\n}\n/**\n * Get top rated content\n */ async function getTopRatedContent() {\n    const [templates, programs] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.findMany({\n            where: {\n                isPublic: true,\n                isActive: true,\n                ratingCount: {\n                    gte: 5\n                }\n            },\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        trainerVerified: true\n                    }\n                },\n                _count: {\n                    select: {\n                        template_ratings: true\n                    }\n                }\n            },\n            orderBy: [\n                {\n                    rating: 'desc'\n                },\n                {\n                    ratingCount: 'desc'\n                }\n            ],\n            take: 10\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.findMany({\n            where: {\n                isPublic: true,\n                isActive: true,\n                ratingCount: {\n                    gte: 5\n                }\n            },\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        trainerVerified: true\n                    }\n                },\n                _count: {\n                    select: {\n                        program_ratings: true,\n                        program_subscriptions: true\n                    }\n                }\n            },\n            orderBy: [\n                {\n                    rating: 'desc'\n                },\n                {\n                    ratingCount: 'desc'\n                }\n            ],\n            take: 10\n        })\n    ]);\n    return {\n        templates,\n        programs\n    };\n}\n/**\n * Get popular content\n */ async function getPopularContent() {\n    const [templates, programs] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.findMany({\n            where: {\n                isPublic: true,\n                isActive: true\n            },\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        trainerVerified: true\n                    }\n                },\n                _count: {\n                    select: {\n                        template_ratings: true\n                    }\n                }\n            },\n            orderBy: {\n                purchaseCount: 'desc'\n            },\n            take: 10\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.findMany({\n            where: {\n                isPublic: true,\n                isActive: true\n            },\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        trainerVerified: true\n                    }\n                },\n                _count: {\n                    select: {\n                        program_ratings: true,\n                        program_subscriptions: true\n                    }\n                }\n            },\n            orderBy: {\n                purchaseCount: 'desc'\n            },\n            take: 10\n        })\n    ]);\n    return {\n        templates,\n        programs\n    };\n}\n/**\n * Get recommended content for a user\n */ async function getRecommendedContent(userId) {\n    if (!userId) {\n        // Return popular content for anonymous users\n        return getPopularContent();\n    }\n    // Get user's preferences and past purchases\n    const user = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.users.findUnique({\n        where: {\n            id: userId\n        },\n        select: {\n            fitnessGoals: true,\n            experienceLevel: true,\n            preferredWorkoutTypes: true,\n            template_purchases: {\n                include: {\n                    workout_templates: {\n                        select: {\n                            category: true,\n                            difficulty: true,\n                            tags: true\n                        }\n                    }\n                }\n            },\n            program_purchases: {\n                include: {\n                    program_templates: {\n                        select: {\n                            category: true,\n                            difficulty: true,\n                            tags: true\n                        }\n                    }\n                }\n            }\n        }\n    });\n    if (!user) {\n        return getPopularContent();\n    }\n    // Extract user preferences for recommendations\n    const userCategories = [\n        ...user.template_purchases.map((p)=>p.workout_templates.category),\n        ...user.program_purchases.map((p)=>p.program_templates.category)\n    ].filter(Boolean);\n    const userTags = [\n        ...user.template_purchases.flatMap((p)=>p.workout_templates.tags),\n        ...user.program_purchases.flatMap((p)=>p.program_templates.tags),\n        ...user.fitnessGoals,\n        ...user.preferredWorkoutTypes\n    ].filter(Boolean);\n    const [templates, programs] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.findMany({\n            where: {\n                isPublic: true,\n                isActive: true,\n                OR: [\n                    {\n                        category: {\n                            in: userCategories\n                        }\n                    },\n                    {\n                        difficulty: user.experienceLevel\n                    },\n                    {\n                        tags: {\n                            hasSome: userTags\n                        }\n                    }\n                ]\n            },\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        trainerVerified: true\n                    }\n                },\n                _count: {\n                    select: {\n                        template_ratings: true\n                    }\n                }\n            },\n            orderBy: {\n                rating: 'desc'\n            },\n            take: 10\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.findMany({\n            where: {\n                isPublic: true,\n                isActive: true,\n                OR: [\n                    {\n                        category: {\n                            in: userCategories\n                        }\n                    },\n                    {\n                        difficulty: user.experienceLevel\n                    },\n                    {\n                        tags: {\n                            hasSome: userTags\n                        }\n                    }\n                ]\n            },\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        trainerVerified: true\n                    }\n                },\n                _count: {\n                    select: {\n                        program_ratings: true,\n                        program_subscriptions: true\n                    }\n                }\n            },\n            orderBy: {\n                rating: 'desc'\n            },\n            take: 10\n        })\n    ]);\n    return {\n        templates,\n        programs\n    };\n}\n// Link workout session to assessment\nasync function link_session_to_assessment(session_id, assessment_id) {\n    const assessment = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.assessments.findUnique({\n        where: {\n            id: assessment_id\n        }\n    });\n    if (!assessment) {\n        throw new Error('Assessment not found');\n    }\n    // Extract fitness level and goals from assessment\n    const assessment_data = {\n        fitness_level: determine_fitness_level(assessment),\n        primary_goal: assessment.primaryGoal || 'GENERAL_FITNESS',\n        movement_limitations: assessment.limitations || [],\n        experience_years: assessment.experienceYears || 0\n    };\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.update({\n        where: {\n            id: session_id\n        },\n        data: {\n            assessmentId: assessment_id,\n            fitnessLevel: assessment_data.fitness_level,\n            primaryGoal: assessment_data.primary_goal,\n            updatedAt: new Date()\n        }\n    });\n}\n// Determine fitness level from assessment scores\nfunction determine_fitness_level(assessment) {\n    // Analyse assessment metrics\n    const squat_score = assessment.squatScore || 0;\n    const push_score = assessment.pushScore || 0;\n    const pull_score = assessment.pullScore || 0;\n    const average_score = (squat_score + push_score + pull_score) / 3;\n    if (average_score >= 8) return 'ADVANCED';\n    if (average_score >= 5) return 'INTERMEDIATE';\n    return 'BEGINNER';\n}\n// Get workout recommendations based on assessment\nasync function get_assessment_based_recommendations(user_id) {\n    // Get most recent assessment\n    const latest_assessment = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.assessments.findFirst({\n        where: {\n            clientId: user_id\n        },\n        orderBy: {\n            createdAt: 'desc'\n        }\n    });\n    if (!latest_assessment) {\n        return null;\n    }\n    const fitness_level = determine_fitness_level(latest_assessment);\n    // Get exercise recommendations\n    const exercise_recommendations = (0,_services_ai_workout_suggestions__WEBPACK_IMPORTED_MODULE_3__.get_exercise_recommendations)(fitness_level, latest_assessment.primaryGoal || 'GENERAL_FITNESS', 'SQUAT' // Example pattern\n    );\n    return {\n        fitness_level,\n        recommended_volume: calculate_recommended_volume(fitness_level),\n        recommended_frequency: calculate_recommended_frequency(fitness_level),\n        training_phase: exercise_recommendations.progression_level,\n        coaching_cues: exercise_recommendations.coaching_cues\n    };\n}\nfunction calculate_recommended_volume(fitness_level) {\n    const volume_map = {\n        BEGINNER: 10,\n        INTERMEDIATE: 15,\n        ADVANCED: 20\n    };\n    return volume_map[fitness_level] || 12;\n}\nfunction calculate_recommended_frequency(fitness_level) {\n    const frequency_map = {\n        BEGINNER: 3,\n        INTERMEDIATE: 4,\n        ADVANCED: 5\n    };\n    return frequency_map[fitness_level] || 3;\n}\n// Prepare workout data for AI analysis\nasync function prepare_ai_training_data(user_id) {\n    // Get all user sessions from last 90 days\n    const ninety_days_ago = new Date();\n    ninety_days_ago.setDate(ninety_days_ago.getDate() - 90);\n    const sessions = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findMany({\n        where: {\n            userId: user_id,\n            date: {\n                gte: ninety_days_ago\n            },\n            isComplete: true\n        },\n        include: {\n            workout_log_entries: {\n                include: {\n                    exercises: true\n                }\n            }\n        },\n        orderBy: {\n            date: 'asc'\n        }\n    });\n    const entries = sessions.flatMap((s)=>s.workout_log_entries);\n    // Calculate metrics\n    const total_volume = entries.reduce((sum, e)=>sum + (e.trainingVolume || 0), 0);\n    const average_volume = sessions.length > 0 ? total_volume / sessions.length : 0;\n    // Find favourite exercises (most frequently used)\n    const exercise_frequency = new Map();\n    entries.forEach((e)=>{\n        exercise_frequency.set(e.exerciseId, (exercise_frequency.get(e.exerciseId) || 0) + 1);\n    });\n    const favourite_exercises = Array.from(exercise_frequency.entries()).sort((a, b)=>b[1] - a[1]).slice(0, 10).map(([id])=>id);\n    // Calculate consistency score (sessions per week)\n    const weeks_in_period = 13; // ~90 days\n    const consistency_score = sessions.length / weeks_in_period / 4; // Normalised to 0-1\n    // Get latest assessment\n    const latest_assessment = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.assessments.findFirst({\n        where: {\n            clientId: user_id\n        },\n        orderBy: {\n            createdAt: 'desc'\n        }\n    });\n    return {\n        user_profile: {\n            fitness_level: 'INTERMEDIATE',\n            primary_goal: latest_assessment?.primaryGoal || 'GENERAL_FITNESS',\n            experience_years: latest_assessment?.experienceYears || 1\n        },\n        workout_history: {\n            total_sessions: sessions.length,\n            average_volume,\n            favourite_exercises,\n            consistency_score: Math.min(consistency_score, 1)\n        },\n        performance_metrics: {\n            strength_progression: calculate_strength_progression(entries),\n            volume_progression: calculate_volume_progression(sessions),\n            technique_scores: entries.filter((e)=>e.formQuality !== null).map((e)=>e.formQuality)\n        },\n        preferences: {\n            preferred_set_types: calculate_preferred_set_types(entries),\n            preferred_rep_ranges: calculate_preferred_rep_range(entries),\n            preferred_rest_durations: calculate_preferred_rest_durations(entries)\n        }\n    };\n}\nfunction calculate_strength_progression(entries) {\n    // Compare first 20% of entries with last 20%\n    const total = entries.length;\n    if (total < 10) return 0; // Need minimum data\n    const early_entries = entries.slice(0, Math.floor(total * 0.2));\n    const recent_entries = entries.slice(Math.floor(total * 0.8));\n    const early_avg_volume = early_entries.reduce((sum, e)=>sum + (e.trainingVolume || 0), 0) / early_entries.length;\n    const recent_avg_volume = recent_entries.reduce((sum, e)=>sum + (e.trainingVolume || 0), 0) / recent_entries.length;\n    return early_avg_volume > 0 ? (recent_avg_volume - early_avg_volume) / early_avg_volume * 100 : 0;\n}\nfunction calculate_volume_progression(sessions) {\n    if (sessions.length < 2) return 0;\n    const first_session = sessions[0];\n    const last_session = sessions[sessions.length - 1];\n    const first_volume = first_session.totalVolume || 0;\n    const last_volume = last_session.totalVolume || 0;\n    return first_volume > 0 ? (last_volume - first_volume) / first_volume * 100 : 0;\n}\nfunction calculate_preferred_set_types(entries) {\n    const set_type_counts = new Map();\n    entries.forEach((e)=>{\n        set_type_counts.set(e.setType, (set_type_counts.get(e.setType) || 0) + 1);\n    });\n    return Array.from(set_type_counts.entries()).sort((a, b)=>b[1] - a[1]).slice(0, 3).map(([type])=>type);\n}\nfunction calculate_preferred_rep_range(entries) {\n    const reps = entries.map((e)=>e.reps).filter((r)=>r > 0);\n    if (reps.length === 0) return [\n        8,\n        12\n    ];\n    reps.sort((a, b)=>a - b);\n    const percentile_25 = reps[Math.floor(reps.length * 0.25)];\n    const percentile_75 = reps[Math.floor(reps.length * 0.75)];\n    return [\n        percentile_25,\n        percentile_75\n    ];\n}\nfunction calculate_preferred_rest_durations(entries) {\n    const rest_durations = entries.map((e)=>e.restSeconds).filter((r)=>r !== null && r !== undefined);\n    if (rest_durations.length === 0) return [\n        60,\n        90,\n        120\n    ];\n    const avg = rest_durations.reduce((sum, r)=>sum + r, 0) / rest_durations.length;\n    return [\n        Math.floor(avg * 0.8),\n        Math.floor(avg),\n        Math.floor(avg * 1.2)\n    ];\n}\n// Calculate experience points for a session\nasync function calculate_session_experience_points(session_id) {\n    const session = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findUnique({\n        where: {\n            id: session_id\n        },\n        include: {\n            workout_log_entries: true\n        }\n    });\n    if (!session) {\n        throw new Error('Session not found');\n    }\n    const breakdown = {\n        base_points: 100,\n        volume_bonus: 0,\n        technique_bonus: 0,\n        consistency_bonus: 0,\n        achievement_bonus: 0,\n        total: 0\n    };\n    // Volume bonus (1 point per 100kg total volume)\n    const total_volume = session.totalVolume || 0;\n    breakdown.volume_bonus = Math.floor(total_volume / 100);\n    // Technique bonus (average form quality)\n    const entries_with_form = session.workout_log_entries.filter((e)=>e.formQuality !== null);\n    if (entries_with_form.length > 0) {\n        const avg_form = entries_with_form.reduce((sum, e)=>sum + (e.formQuality || 0), 0) / entries_with_form.length;\n        breakdown.technique_bonus = Math.floor(avg_form * 20); // Max 100 bonus for perfect form\n    }\n    // Consistency bonus (check if session continues a streak)\n    const streak_bonus = await calculate_consistency_streak_bonus(session.userId, session.date);\n    breakdown.consistency_bonus = streak_bonus;\n    // Achievement bonus (any personal records)\n    const pr_count = session.workout_log_entries.filter((e)=>e.personalRecord || e.volumeRecord).length;\n    breakdown.achievement_bonus = pr_count * 50; // 50 points per PR\n    breakdown.total = breakdown.base_points + breakdown.volume_bonus + breakdown.technique_bonus + breakdown.consistency_bonus + breakdown.achievement_bonus;\n    return breakdown;\n}\nasync function calculate_consistency_streak_bonus(user_id, session_date) {\n    // Get recent sessions to calculate streak\n    const seven_days_ago = new Date(session_date);\n    seven_days_ago.setDate(seven_days_ago.getDate() - 7);\n    const recent_sessions = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findMany({\n        where: {\n            userId: user_id,\n            date: {\n                gte: seven_days_ago,\n                lte: session_date\n            },\n            isComplete: true\n        },\n        orderBy: {\n            date: 'desc'\n        }\n    });\n    // Award bonus for 3+ sessions in 7 days\n    if (recent_sessions.length >= 3) {\n        return 50 * recent_sessions.length; // Escalating bonus\n    }\n    return 0;\n}\n// Check and award achievements after session\nasync function check_and_award_achievements(user_id, session_id) {\n    const awarded_achievement_ids = [];\n    // Get all achievements\n    const all_achievements = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.achievements.findMany();\n    // Get user's existing achievements\n    const existing_achievements = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.user_achievements.findMany({\n        where: {\n            userId: user_id\n        },\n        select: {\n            achievementId: true\n        }\n    });\n    const existing_ids = new Set(existing_achievements.map((a)=>a.achievementId));\n    // Check each achievement\n    for (const achievement of all_achievements){\n        if (existing_ids.has(achievement.id)) continue; // Already earned\n        const criteria = achievement.criteria;\n        const meets_criteria = await check_achievement_criteria(user_id, session_id, criteria);\n        if (meets_criteria) {\n            // Award achievement\n            await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.user_achievements.create({\n                data: {\n                    id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n                    userId: user_id,\n                    achievementId: achievement.id,\n                    sessionId: session_id\n                }\n            });\n            awarded_achievement_ids.push(achievement.id);\n        }\n    }\n    return awarded_achievement_ids;\n}\nasync function check_achievement_criteria(user_id, session_id, criteria) {\n    switch(criteria.type){\n        case 'VOLUME':\n            return check_volume_achievement(user_id, session_id, criteria);\n        case 'CONSISTENCY':\n            return check_consistency_achievement(user_id, criteria);\n        case 'STRENGTH':\n            return check_strength_achievement(user_id, criteria);\n        case 'TECHNIQUE':\n            return check_technique_achievement(user_id, session_id, criteria);\n        case 'MILESTONE':\n            return check_milestone_achievement(user_id, criteria);\n        default:\n            return false;\n    }\n}\nasync function check_volume_achievement(_user_id, session_id, criteria) {\n    const session = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findUnique({\n        where: {\n            id: session_id\n        }\n    });\n    if (!session) return false;\n    const total_volume = session.totalVolume || 0;\n    return total_volume >= criteria.threshold;\n}\nasync function check_consistency_achievement(user_id, criteria) {\n    const thirty_days_ago = new Date();\n    thirty_days_ago.setDate(thirty_days_ago.getDate() - 30);\n    const session_count = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.count({\n        where: {\n            userId: user_id,\n            date: {\n                gte: thirty_days_ago\n            },\n            isComplete: true\n        }\n    });\n    return session_count >= criteria.threshold;\n}\nasync function check_strength_achievement(user_id, criteria) {\n    // Check for personal records\n    const pr_count = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.count({\n        where: {\n            userId: user_id,\n            personalRecord: true\n        }\n    });\n    return pr_count >= criteria.threshold;\n}\nasync function check_technique_achievement(_user_id, session_id, criteria) {\n    const session = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findUnique({\n        where: {\n            id: session_id\n        },\n        include: {\n            workout_log_entries: true\n        }\n    });\n    if (!session) return false;\n    const entries_with_form = session.workout_log_entries.filter((e)=>e.formQuality !== null);\n    if (entries_with_form.length === 0) return false;\n    const avg_form = entries_with_form.reduce((sum, e)=>sum + (e.formQuality || 0), 0) / entries_with_form.length;\n    return avg_form >= criteria.threshold;\n}\nasync function check_milestone_achievement(user_id, criteria) {\n    const total_sessions = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.count({\n        where: {\n            userId: user_id,\n            isComplete: true\n        }\n    });\n    return total_sessions === criteria.threshold; // Exact milestone\n}\n// Update session with XP and achievements\nasync function finalise_session_with_gamification(session_id) {\n    const session = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findUnique({\n        where: {\n            id: session_id\n        }\n    });\n    if (!session) {\n        throw new Error('Session not found');\n    }\n    // Calculate XP\n    const xp_breakdown = await calculate_session_experience_points(session_id);\n    // Check achievements\n    const new_achievements = await check_and_award_achievements(session.userId, session_id);\n    // Add achievement bonus to XP\n    const achievement_xp = new_achievements.length * 100;\n    xp_breakdown.achievement_bonus = achievement_xp;\n    xp_breakdown.total += achievement_xp;\n    // Update session\n    await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.update({\n        where: {\n            id: session_id\n        },\n        data: {\n            experiencePoints: xp_breakdown.total,\n            achievementsEarned: new_achievements,\n            updatedAt: new Date()\n        }\n    });\n    return {\n        experience_points: xp_breakdown,\n        achievements_earned: new_achievements\n    };\n}\n// ============================================================================\n// PERSONAL RECORDS DETECTION\n// ============================================================================\n/**\n * Check if a workout entry is a personal record for weight\n * @param userId - User ID\n * @param exerciseId - Exercise ID\n * @param weight - Weight lifted (numeric value)\n * @param reps - Number of reps\n * @returns true if this is a PR, false otherwise\n */ async function check_personal_record(userId, exerciseId, weight, reps) {\n    // Find the highest weight for this exercise with the same or more reps\n    const previous_best = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.findFirst({\n        where: {\n            userId,\n            exerciseId,\n            reps: {\n                gte: reps\n            }\n        },\n        orderBy: {\n            trainingVolume: 'desc'\n        },\n        select: {\n            weight: true,\n            trainingVolume: true\n        }\n    });\n    if (!previous_best) {\n        // First time doing this exercise - it's a PR!\n        return true;\n    }\n    // Extract numeric weight from previous best (handles \"135 lbs\" format)\n    const previous_weight = parseFloat(previous_best.weight.replace(/[^\\d.,]/g, ''));\n    // Is current weight higher than previous best?\n    return weight > previous_weight;\n}\n/**\n * Check if a workout entry is a volume record\n * @param userId - User ID\n * @param exerciseId - Exercise ID\n * @param volume - Training volume (weight × reps)\n * @returns true if this is a volume PR, false otherwise\n */ async function check_volume_record(userId, exerciseId, volume) {\n    // Find the highest training volume for this exercise\n    const previous_best = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.findFirst({\n        where: {\n            userId,\n            exerciseId\n        },\n        orderBy: {\n            trainingVolume: 'desc'\n        },\n        select: {\n            trainingVolume: true\n        }\n    });\n    if (!previous_best || !previous_best.trainingVolume) {\n        // First time doing this exercise - it's a volume PR!\n        return true;\n    }\n    // Is current volume higher than previous best?\n    return volume > previous_best.trainingVolume;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvY29yZS9kYXRhYmFzZS93b3Jrb3V0LXF1ZXJpZXMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHVDQUF1QztBQUN2Qzs7O0NBR0MsR0FFMkI7QUFDTTtBQWdCVDtBQUN3RDtBQUVqRiwrRUFBK0U7QUFDL0UsNEJBQTRCO0FBQzVCLCtFQUErRTtBQUUvRTs7Q0FFQyxHQUNNLGVBQWVNLHVCQUNwQkMsTUFBYyxFQUNkQyxVQUtJLENBQUMsQ0FBQztJQVNOLE1BQU0sRUFBRUMsVUFBVSxDQUFDLENBQUMsRUFBRUMsT0FBTztRQUFFQyxPQUFPO1FBQVFDLFdBQVc7SUFBTyxDQUFDLEVBQUVDLGFBQWEsQ0FBQyxDQUFDLEVBQUVDLHNCQUFzQixJQUFJLEVBQUUsR0FBR047SUFDbkgsTUFBTU8sT0FBT0YsV0FBV0UsSUFBSSxJQUFJO0lBQ2hDLE1BQU1DLFFBQVFILFdBQVdHLEtBQUssSUFBSTtJQUNsQyxNQUFNQyxTQUFTLENBQUNGLE9BQU8sS0FBS0M7SUFFNUIscUJBQXFCO0lBQ3JCLE1BQU1FLFFBQWE7UUFDakJYO0lBQ0Y7SUFFQSxJQUFJRSxRQUFRVSxTQUFTLEVBQUU7UUFDckJELE1BQU1FLElBQUksR0FBRztZQUNYQyxLQUFLWixRQUFRVSxTQUFTLENBQUNHLEtBQUs7WUFDNUJDLEtBQUtkLFFBQVFVLFNBQVMsQ0FBQ0ssR0FBRztRQUM1QjtJQUNGO0lBRUEsSUFBSWYsUUFBUWdCLFNBQVMsSUFBSWhCLFFBQVFnQixTQUFTLENBQUNDLE1BQU0sR0FBRyxHQUFHO1FBQ3JEUixNQUFNUyxVQUFVLEdBQUc7WUFBRUMsSUFBSW5CLFFBQVFnQixTQUFTO1FBQUM7SUFDN0M7SUFFQSxJQUFJaEIsUUFBUW9CLFFBQVEsSUFBSXBCLFFBQVFvQixRQUFRLENBQUNILE1BQU0sR0FBRyxHQUFHO1FBQ25EUixNQUFNWSxPQUFP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N0MsS0FBSzZDO1lBQUs7UUFDcEI7UUFDQXJCLFNBQVM7WUFDUG9CLGdCQUFnQjtRQUNsQjtRQUNBekIsUUFBUTtZQUNOd0IsUUFBUTtZQUNSQyxnQkFBZ0I7UUFDbEI7SUFDRjtJQUVBLElBQUksQ0FBQ2tZLGVBQWU7UUFDbEIsOENBQThDO1FBQzlDLE9BQU87SUFDVDtJQUVBLHVFQUF1RTtJQUN2RSxNQUFNQyxrQkFBa0JDLFdBQVdGLGNBQWNuWSxNQUFNLENBQUNzWSxPQUFPLENBQUMsWUFBWTtJQUU1RSwrQ0FBK0M7SUFDL0MsT0FBT3RZLFNBQVNvWTtBQUNsQjtBQUVBOzs7Ozs7Q0FNQyxHQUNELGVBQWU3WCxvQkFDYmhFLE1BQWMsRUFDZG9CLFVBQWtCLEVBQ2xCNEcsTUFBYztJQUVkLHFEQUFxRDtJQUNyRCxNQUFNNFQsZ0JBQWdCLE1BQU1sYywyQ0FBTUEsQ0FBQ2lDLG1CQUFtQixDQUFDMEIsU0FBUyxDQUFDO1FBQy9EMUMsT0FBTztZQUNMWDtZQUNBb0I7UUFDRjtRQUNBa0IsU0FBUztZQUNQb0IsZ0JBQWdCO1FBQ2xCO1FBQ0F6QixRQUFRO1lBQ055QixnQkFBZ0I7UUFDbEI7SUFDRjtJQUVBLElBQUksQ0FBQ2tZLGlCQUFpQixDQUFDQSxjQUFjbFksY0FBYyxFQUFFO1FBQ25ELHFEQUFxRDtRQUNyRCxPQUFPO0lBQ1Q7SUFFQSwrQ0FBK0M7SUFDL0MsT0FBT3NFLFNBQVM0VCxjQUFjbFksY0FBYztBQUM5QyIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcnNvbGUvRG9jdW1lbnRzL0dpdEh1Yi9tYXNzaW1pbm8vbWFzc2ltaW5vL3NyYy9jb3JlL2RhdGFiYXNlL3dvcmtvdXQtcXVlcmllcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvY29yZS9kYXRhYmFzZS93b3Jrb3V0LXF1ZXJpZXMudHNcbi8qKlxuICogV29ya291dCBMb2cgRGF0YWJhc2UgUXVlcmllcyBmb3IgTWFzc2ltaW5vXG4gKiBDb21wcmVoZW5zaXZlIHF1ZXJ5IGZ1bmN0aW9ucyBmb3Igd29ya291dCB0cmFja2luZyBhbmQgbWFuYWdlbWVudFxuICovXG5cbmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmltcG9ydCB7IHByaXNtYSB9IGZyb20gJy4vY2xpZW50JztcbmltcG9ydCB0eXBlIHtcbiAgd29ya291dF9sb2dfZW50cmllcyBhcyBXb3Jrb3V0TG9nRW50cnksXG4gIGV4ZXJjaXNlcyBhcyBFeGVyY2lzZSxcbiAgd29ya291dF9zZXNzaW9ucyBhcyBXb3Jrb3V0U2Vzc2lvbixcbn0gZnJvbSAnQHByaXNtYS9jbGllbnQnO1xuaW1wb3J0IHtcbiAgV29ya291dEZpbHRlck9wdGlvbnMsXG4gIFdvcmtvdXRTb3J0T3B0aW9ucyxcbiAgV29ya291dFBhZ2luYXRpb24sXG4gIFdvcmtvdXRMb2dFbnRyeUZvcm1EYXRhLFxuICBXb3Jrb3V0U2Vzc2lvbkZvcm1EYXRhLFxuICBjYWxjdWxhdGVBdmVyYWdlV2VpZ2h0LFxuICBjYWxjdWxhdGVUcmFpbmluZ1ZvbHVtZSxcbiAgZ2VuZXJhdGVPcmRlcixcbiAgT3JkZXJHZW5lcmF0aW9uQ29udGV4dFxufSBmcm9tICdAL3R5cGVzL3dvcmtvdXQnO1xuaW1wb3J0IHsgZ2V0X2V4ZXJjaXNlX3JlY29tbWVuZGF0aW9ucyB9IGZyb20gJ0Avc2VydmljZXMvYWkvd29ya291dC1zdWdnZXN0aW9ucyc7XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFdPUktPVVQgTE9HIEVOVFJZIFFVRVJJRVNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLyoqXG4gKiBHZXQgdW5pZmllZCB3b3Jrb3V0IGVudHJpZXMgKHBlcnNvbmFsICsgdGVhbSB3b3Jrb3V0cykgd2l0aCBmaWx0ZXJpbmcsIHNvcnRpbmcsIGFuZCBwYWdpbmF0aW9uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRVc2VyV29ya291dHNVbmlmaWVkKFxuICB1c2VySWQ6IHN0cmluZyxcbiAgb3B0aW9uczoge1xuICAgIGZpbHRlcnM/OiBXb3Jrb3V0RmlsdGVyT3B0aW9ucztcbiAgICBzb3J0PzogV29ya291dFNvcnRPcHRpb25zO1xuICAgIHBhZ2luYXRpb24/OiBQYXJ0aWFsPFdvcmtvdXRQYWdpbmF0aW9uPjtcbiAgICBpbmNsdWRlVGVhbVdvcmtvdXRzPzogYm9vbGVhbjtcbiAgfSA9IHt9XG4pOiBQcm9taXNlPHtcbiAgZW50cmllczogKFdvcmtvdXRMb2dFbnRyeSAmIHtcbiAgICBleGVyY2lzZTogRXhlcmNpc2U7XG4gICAgdXNlcjogeyBpZDogc3RyaW5nOyBuYW1lOiBzdHJpbmcgfCBudWxsOyByb2xlOiBzdHJpbmcgfTtcbiAgICBjb2FjaDogeyBpZDogc3RyaW5nOyBuYW1lOiBzdHJpbmcgfCBudWxsOyByb2xlOiBzdHJpbmcgfSB8IG51bGw7XG4gIH0pW107XG4gIHBhZ2luYXRpb246IFdvcmtvdXRQYWdpbmF0aW9uO1xufT4ge1xuICBjb25zdCB7IGZpbHRlcnMgPSB7fSwgc29ydCA9IHsgZmllbGQ6ICdkYXRlJywgZGlyZWN0aW9uOiAnZGVzYycgfSwgcGFnaW5hdGlvbiA9IHt9LCBpbmNsdWRlVGVhbVdvcmtvdXRzID0gdHJ1ZSB9ID0gb3B0aW9ucztcbiAgY29uc3QgcGFnZSA9IHBhZ2luYXRpb24ucGFnZSB8fCAxO1xuICBjb25zdCBsaW1pdCA9IHBhZ2luYXRpb24ubGltaXQgfHwgNTA7XG4gIGNvbnN0IG9mZnNldCA9IChwYWdlIC0gMSkgKiBsaW1pdDtcblxuICAvLyBCdWlsZCB3aGVyZSBjbGF1c2VcbiAgY29uc3Qgd2hlcmU6IGFueSA9IHtcbiAgICB1c2VySWQsXG4gIH07XG5cbiAgaWYgKGZpbHRlcnMuZGF0ZVJhbmdlKSB7XG4gICAgd2hlcmUuZGF0ZSA9IHtcbiAgICAgIGd0ZTogZmlsdGVycy5kYXRlUmFuZ2Uuc3RhcnQsXG4gICAgICBsdGU6IGZpbHRlcnMuZGF0ZVJhbmdlLmVuZCxcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZpbHRlcnMuZXhlcmNpc2VzICYmIGZpbHRlcnMuZXhlcmNpc2VzLmxlbmd0aCA+IDApIHtcbiAgICB3aGVyZS5leGVyY2lzZUlkID0geyBpbjogZmlsdGVycy5leGVyY2lzZXMgfTtcbiAgfVxuXG4gIGlmIChmaWx0ZXJzLnNldFR5cGVzICYmIGZpbHRlcnMuc2V0VHlwZXMubGVuZ3RoID4gMCkge1xuICAgIHdoZXJlLnNldFR5cGUgPSB7IGluOiBmaWx0ZXJzLnNldFR5cGVzIH07XG4gIH1cblxuICBpZiAoZmlsdGVycy5jb2FjaElkKSB7XG4gICAgd2hlcmUuY29hY2hJZCA9IGZpbHRlcnMuY29hY2hJZDtcbiAgfVxuXG4gIC8vIEZpbHRlciBieSB0ZWFtIHdvcmtvdXQgc3RhdHVzIGlmIHNwZWNpZmllZFxuICBpZiAoIWluY2x1ZGVUZWFtV29ya291dHMpIHtcbiAgICB3aGVyZS5pc1RlYW1Xb3Jrb3V0ID0gZmFsc2U7XG4gIH1cblxuICAvLyBHZXQgdG90YWwgY291bnRcbiAgY29uc3QgdG90YWwgPSBhd2FpdCBwcmlzbWEud29ya291dF9sb2dfZW50cmllcy5jb3VudCh7IHdoZXJlIH0pO1xuXG4gIC8vIEdldCBlbnRyaWVzIHdpdGggcmVsYXRpb25zaGlwc1xuICBjb25zdCBlbnRyaWVzID0gYXdhaXQgcHJpc21hLndvcmtvdXRfbG9nX2VudHJpZXMuZmluZE1hbnkoe1xuICAgIHdoZXJlLFxuICAgIGluY2x1ZGU6IHtcbiAgICAgIGV4ZXJjaXNlczogdHJ1ZSxcbiAgICAgIHVzZXJzX3dvcmtvdXRfbG9nX2VudHJpZXNfdXNlcklkVG91c2Vyczoge1xuICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICBpZDogdHJ1ZSxcbiAgICAgICAgICBuYW1lOiB0cnVlLFxuICAgICAgICAgIHJvbGU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgdXNlcnNfd29ya291dF9sb2dfZW50cmllc19jb2FjaElkVG91c2Vyczoge1xuICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICBpZDogdHJ1ZSxcbiAgICAgICAgICBuYW1lOiB0cnVlLFxuICAgICAgICAgIHJvbGU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gICAgb3JkZXJCeToge1xuICAgICAgW3NvcnQuZmllbGRdOiBzb3J0LmRpcmVjdGlvbixcbiAgICB9LFxuICAgIHNraXA6IG9mZnNldCxcbiAgICB0YWtlOiBsaW1pdCxcbiAgfSk7XG5cbiAgY29uc3QgdG90YWxQYWdlcyA9IE1hdGguY2VpbCh0b3RhbCAvIGxpbWl0KTtcblxuICAvLyBNYXAgdGhlIFByaXNtYSByZWxhdGlvbiBuYW1lcyB0byB0aGUgZXhwZWN0ZWQgZm9ybWF0XG4gIGNvbnN0IG1hcHBlZEVudHJpZXMgPSBlbnRyaWVzLm1hcCgoZW50cnkpID0+ICh7XG4gICAgLi4uZW50cnksXG4gICAgZXhlcmNpc2U6IGVudHJ5LmV4ZXJjaXNlcyxcbiAgICB1c2VyOiBlbnRyeS51c2Vyc193b3Jrb3V0X2xvZ19lbnRyaWVzX3VzZXJJZFRvdXNlcnMsXG4gICAgY29hY2g6IGVudHJ5LnVzZXJzX3dvcmtvdXRfbG9nX2VudHJpZXNfY29hY2hJZFRvdXNlcnMsXG4gIH0pKTtcblxuICByZXR1cm4ge1xuICAgIGVudHJpZXM6IG1hcHBlZEVudHJpZXMsXG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgcGFnZSxcbiAgICAgIGxpbWl0LFxuICAgICAgdG90YWwsXG4gICAgICB0b3RhbFBhZ2VzLFxuICAgICAgaGFzTW9yZTogcGFnZSA8IHRvdGFsUGFnZXMsXG4gICAgfSxcbiAgfTtcbn1cblxuLyoqXG4gKiBHZXQgd29ya291dCBsb2cgZW50cmllcyB3aXRoIGZpbHRlcmluZywgc29ydGluZywgYW5kIHBhZ2luYXRpb25cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFdvcmtvdXRMb2dFbnRyaWVzKFxuICB1c2VySWQ6IHN0cmluZyxcbiAgb3B0aW9uczoge1xuICAgIGZpbHRlcnM/OiBXb3Jrb3V0RmlsdGVyT3B0aW9ucztcbiAgICBzb3J0PzogV29ya291dFNvcnRPcHRpb25zO1xuICAgIHBhZ2luYXRpb24/OiBQYXJ0aWFsPFdvcmtvdXRQYWdpbmF0aW9uPjtcbiAgfSA9IHt9XG4pOiBQcm9taXNlPHtcbiAgZW50cmllczogKFdvcmtvdXRMb2dFbnRyeSAmIHtcbiAgICBleGVyY2lzZTogRXhlcmNpc2U7XG4gICAgdXNlcjogeyBpZDogc3RyaW5nOyBuYW1lOiBzdHJpbmcgfCBudWxsOyByb2xlOiBzdHJpbmcgfTtcbiAgICBjb2FjaDogeyBpZDogc3RyaW5nOyBuYW1lOiBzdHJpbmcgfCBudWxsOyByb2xlOiBzdHJpbmcgfSB8IG51bGw7XG4gIH0pW107XG4gIHBhZ2luYXRpb246IFdvcmtvdXRQYWdpbmF0aW9uO1xufT4ge1xuICBjb25zdCB7IGZpbHRlcnMgPSB7fSwgc29ydCA9IHsgZmllbGQ6ICdkYXRlJywgZGlyZWN0aW9uOiAnZGVzYycgfSwgcGFnaW5hdGlvbiA9IHt9IH0gPSBvcHRpb25zO1xuICBjb25zdCBwYWdlID0gcGFnaW5hdGlvbi5wYWdlIHx8IDE7XG4gIGNvbnN0IGxpbWl0ID0gcGFnaW5hdGlvbi5saW1pdCB8fCA1MDtcbiAgY29uc3Qgb2Zmc2V0ID0gKHBhZ2UgLSAxKSAqIGxpbWl0O1xuXG4gIC8vIEJ1aWxkIHdoZXJlIGNsYXVzZVxuICBjb25zdCB3aGVyZTogYW55ID0ge1xuICAgIHVzZXJJZCxcbiAgfTtcblxuICBpZiAoZmlsdGVycy5kYXRlUmFuZ2UpIHtcbiAgICB3aGVyZS5kYXRlID0ge1xuICAgICAgZ3RlOiBmaWx0ZXJzLmRhdGVSYW5nZS5zdGFydCxcbiAgICAgIGx0ZTogZmlsdGVycy5kYXRlUmFuZ2UuZW5kLFxuICAgIH07XG4gIH1cblxuICBpZiAoZmlsdGVycy5leGVyY2lzZXMgJiYgZmlsdGVycy5leGVyY2lzZXMubGVuZ3RoID4gMCkge1xuICAgIHdoZXJlLmV4ZXJjaXNlSWQgPSB7IGluOiBmaWx0ZXJzLmV4ZXJjaXNlcyB9O1xuICB9XG5cbiAgaWYgKGZpbHRlcnMuc2V0VHlwZXMgJiYgZmlsdGVycy5zZXRUeXBlcy5sZW5ndGggPiAwKSB7XG4gICAgd2hlcmUuc2V0VHlwZSA9IHsgaW46IGZpbHRlcnMuc2V0VHlwZXMgfTtcbiAgfVxuXG4gIGlmIChmaWx0ZXJzLmNvYWNoSWQpIHtcbiAgICB3aGVyZS5jb2FjaElkID0gZmlsdGVycy5jb2FjaElkO1xuICB9XG5cbiAgLy8gR2V0IHRvdGFsIGNvdW50XG4gIGNvbnN0IHRvdGFsID0gYXdhaXQgcHJpc21hLndvcmtvdXRfbG9nX2VudHJpZXMuY291bnQoeyB3aGVyZSB9KTtcblxuICAvLyBHZXQgZW50cmllcyB3aXRoIHJlbGF0aW9uc2hpcHNcbiAgY29uc3QgZW50cmllcyA9IGF3YWl0IHByaXNtYS53b3Jrb3V0X2xvZ19lbnRyaWVzLmZpbmRNYW55KHtcbiAgICB3aGVyZSxcbiAgICBpbmNsdWRlOiB7XG4gICAgICBleGVyY2lzZXM6IHRydWUsXG4gICAgICB1c2Vyc193b3Jrb3V0X2xvZ19lbnRyaWVzX3VzZXJJZFRvdXNlcnM6IHtcbiAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgICByb2xlOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHVzZXJzX3dvcmtvdXRfbG9nX2VudHJpZXNfY29hY2hJZFRvdXNlcnM6IHtcbiAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgICByb2xlOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICAgIG9yZGVyQnk6IHtcbiAgICAgIFtzb3J0LmZpZWxkXTogc29ydC5kaXJlY3Rpb24sXG4gICAgfSxcbiAgICBza2lwOiBvZmZzZXQsXG4gICAgdGFrZTogbGltaXQsXG4gIH0pO1xuXG4gIGNvbnN0IHRvdGFsUGFnZXMgPSBNYXRoLmNlaWwodG90YWwgLyBsaW1pdCk7XG5cbiAgLy8gTWFwIHRoZSBQcmlzbWEgcmVsYXRpb24gbmFtZXMgdG8gdGhlIGV4cGVjdGVkIGZvcm1hdFxuICBjb25zdCBtYXBwZWRFbnRyaWVzID0gZW50cmllcy5tYXAoKGVudHJ5KSA9PiAoe1xuICAgIC4uLmVudHJ5LFxuICAgIGV4ZXJjaXNlOiBlbnRyeS5leGVyY2lzZXMsXG4gICAgdXNlcjogZW50cnkudXNlcnNfd29ya291dF9sb2dfZW50cmllc191c2VySWRUb3VzZXJzLFxuICAgIGNvYWNoOiBlbnRyeS51c2Vyc193b3Jrb3V0X2xvZ19lbnRyaWVzX2NvYWNoSWRUb3VzZXJzLFxuICB9KSk7XG5cbiAgcmV0dXJuIHtcbiAgICBlbnRyaWVzOiBtYXBwZWRFbnRyaWVzLFxuICAgIHBhZ2luYXRpb246IHtcbiAgICAgIHBhZ2UsXG4gICAgICBsaW1pdCxcbiAgICAgIHRvdGFsLFxuICAgICAgdG90YWxQYWdlcyxcbiAgICAgIGhhc01vcmU6IHBhZ2UgPCB0b3RhbFBhZ2VzLFxuICAgIH0sXG4gIH07XG59XG5cbi8qKlxuICogR2V0IGEgc2luZ2xlIHdvcmtvdXQgbG9nIGVudHJ5IGJ5IElEXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRXb3Jrb3V0TG9nRW50cnkoXG4gIGlkOiBzdHJpbmcsXG4gIHVzZXJJZDogc3RyaW5nXG4pOiBQcm9taXNlPChXb3Jrb3V0TG9nRW50cnkgJiB7XG4gIGV4ZXJjaXNlOiBFeGVyY2lzZTtcbiAgdXNlcjogeyBpZDogc3RyaW5nOyBuYW1lOiBzdHJpbmcgfCBudWxsOyByb2xlOiBzdHJpbmcgfTtcbiAgY29hY2g6IHsgaWQ6IHN0cmluZzsgbmFtZTogc3RyaW5nIHwgbnVsbDsgcm9sZTogc3RyaW5nIH0gfCBudWxsO1xufSkgfCBudWxsPiB7XG4gIGNvbnN0IGVudHJ5ID0gYXdhaXQgcHJpc21hLndvcmtvdXRfbG9nX2VudHJpZXMuZmluZEZpcnN0KHtcbiAgICB3aGVyZToge1xuICAgICAgaWQsXG4gICAgICB1c2VySWQsXG4gICAgfSxcbiAgICBpbmNsdWRlOiB7XG4gICAgICBleGVyY2lzZXM6IHRydWUsXG4gICAgICB1c2Vyc193b3Jrb3V0X2xvZ19lbnRyaWVzX3VzZXJJZFRvdXNlcnM6IHtcbiAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgICByb2xlOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHVzZXJzX3dvcmtvdXRfbG9nX2VudHJpZXNfY29hY2hJZFRvdXNlcnM6IHtcbiAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgICByb2xlOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICB9KTtcblxuICBpZiAoIWVudHJ5KSByZXR1cm4gbnVsbDtcblxuICAvLyBNYXAgdGhlIFByaXNtYSByZWxhdGlvbiBuYW1lcyB0byB0aGUgZXhwZWN0ZWQgZm9ybWF0XG4gIHJldHVybiB7XG4gICAgLi4uZW50cnksXG4gICAgZXhlcmNpc2U6IGVudHJ5LmV4ZXJjaXNlcyxcbiAgICB1c2VyOiBlbnRyeS51c2Vyc193b3Jrb3V0X2xvZ19lbnRyaWVzX3VzZXJJZFRvdXNlcnMsXG4gICAgY29hY2g6IGVudHJ5LnVzZXJzX3dvcmtvdXRfbG9nX2VudHJpZXNfY29hY2hJZFRvdXNlcnMsXG4gIH07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IHdvcmtvdXQgbG9nIGVudHJ5XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVXb3Jrb3V0TG9nRW50cnkoXG4gIHVzZXJJZDogc3RyaW5nLFxuICBkYXRhOiBXb3Jrb3V0TG9nRW50cnlGb3JtRGF0YSxcbiAgY29hY2hJZD86IHN0cmluZ1xuKTogUHJvbWlzZTxXb3Jrb3V0TG9nRW50cnk+IHtcbiAgLy8gQ2FsY3VsYXRlIHRyYWluaW5nIHZvbHVtZVxuICBjb25zdCBhdmVyYWdlV2VpZ2h0ID0gY2FsY3VsYXRlQXZlcmFnZVdlaWdodChkYXRhLndlaWdodCk7XG4gIGNvbnN0IHRyYWluaW5nVm9sdW1lID0gY2FsY3VsYXRlVHJhaW5pbmdWb2x1bWUoXG4gICAgMSwgLy8gU2luZ2xlIHNldFxuICAgIGRhdGEucmVwcyxcbiAgICBhdmVyYWdlV2VpZ2h0LFxuICAgIGRhdGEudW5pdFxuICApO1xuXG4gIC8vIENoZWNrIGZvciBwZXJzb25hbCByZWNvcmRzXG4gIGNvbnN0IGlzX3dlaWdodF9wciA9IGF3YWl0IGNoZWNrX3BlcnNvbmFsX3JlY29yZChcbiAgICB1c2VySWQsXG4gICAgZGF0YS5leGVyY2lzZUlkLFxuICAgIGF2ZXJhZ2VXZWlnaHQsXG4gICAgZGF0YS5yZXBzXG4gICk7XG5cbiAgY29uc3QgaXNfdm9sdW1lX3ByID0gYXdhaXQgY2hlY2tfdm9sdW1lX3JlY29yZChcbiAgICB1c2VySWQsXG4gICAgZGF0YS5leGVyY2lzZUlkLFxuICAgIHRyYWluaW5nVm9sdW1lXG4gICk7XG5cbiAgLy8gRW50cnkgaXMgYSBQUiBpZiBpdCdzIGVpdGhlciBhIHdlaWdodCBQUiBvciB2b2x1bWUgUFJcbiAgY29uc3QgaXNfcGVyc29uYWxfcmVjb3JkID0gaXNfd2VpZ2h0X3ByIHx8IGlzX3ZvbHVtZV9wcjtcblxuICAvLyBHZW5lcmF0ZSBvcmRlciBiYXNlZCBvbiBzZXQgdHlwZVxuICBjb25zdCBjb250ZXh0OiBPcmRlckdlbmVyYXRpb25Db250ZXh0ID0ge1xuICAgIGN1cnJlbnRTZXRUeXBlOiBkYXRhLnNldFR5cGUsXG4gICAgY3VycmVudEdyb3VwTnVtYmVyOiBkYXRhLnNldE51bWJlcixcbiAgICBjdXJyZW50U3ViT3JkZXI6ICdBJyxcbiAgICB0b3RhbEVudHJpZXM6IDAsXG4gIH07XG5cbiAgY29uc3Qgb3JkZXIgPSBnZW5lcmF0ZU9yZGVyKGRhdGEuc2V0VHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ3JlYXRlIGVudHJ5IGFuZCB1cGRhdGUgZXhlcmNpc2UgdXNhZ2UgbWV0cmljcyBpbiBhIHRyYW5zYWN0aW9uXG4gIHJldHVybiBwcmlzbWEuJHRyYW5zYWN0aW9uKGFzeW5jICh0eCkgPT4ge1xuICAgIGNvbnN0IGVudHJ5ID0gYXdhaXQgdHgud29ya291dF9sb2dfZW50cmllcy5jcmVhdGUoe1xuICAgICAgZGF0YToge1xuICAgICAgICBpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcbiAgICAgICAgdXNlcklkLFxuICAgICAgICBjb2FjaElkOiBjb2FjaElkID8/IG51bGwsXG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKGRhdGEuZGF0ZSksXG4gICAgICAgIGV4ZXJjaXNlSWQ6IGRhdGEuZXhlcmNpc2VJZCxcbiAgICAgICAgb3JkZXIsXG4gICAgICAgIHNldE51bWJlcjogZGF0YS5zZXROdW1iZXIsXG4gICAgICAgIHNldFR5cGU6IGRhdGEuc2V0VHlwZSxcbiAgICAgICAgcmVwczogZGF0YS5yZXBzLFxuICAgICAgICB3ZWlnaHQ6IGRhdGEud2VpZ2h0LFxuICAgICAgICB1bml0OiBkYXRhLnVuaXQsXG4gICAgICAgIC4uLihkYXRhLmludGVuc2l0eSAhPT0gdW5kZWZpbmVkICYmIHsgaW50ZW5zaXR5OiBkYXRhLmludGVuc2l0eSB9KSxcbiAgICAgICAgLi4uKGRhdGEuaW50ZW5zaXR5VHlwZSAhPT0gdW5kZWZpbmVkICYmIHsgaW50ZW5zaXR5VHlwZTogZGF0YS5pbnRlbnNpdHlUeXBlIH0pLFxuICAgICAgICAuLi4oZGF0YS50ZW1wbyAhPT0gdW5kZWZpbmVkICYmIHsgdGVtcG86IGRhdGEudGVtcG8gfSksXG4gICAgICAgIC4uLihkYXRhLnJlc3RTZWNvbmRzICE9PSB1bmRlZmluZWQgJiYgeyByZXN0U2Vjb25kczogZGF0YS5yZXN0U2Vjb25kcyB9KSxcbiAgICAgICAgdHJhaW5pbmdWb2x1bWUsXG4gICAgICAgIHBlcnNvbmFsUmVjb3JkOiBpc19wZXJzb25hbF9yZWNvcmQsXG4gICAgICAgIC4uLihkYXRhLnVzZXJDb21tZW50cyAhPT0gdW5kZWZpbmVkICYmIHsgdXNlckNvbW1lbnRzOiBkYXRhLnVzZXJDb21tZW50cyB9KSxcbiAgICAgICAgLi4uKGRhdGEuY29hY2hGZWVkYmFjayAhPT0gdW5kZWZpbmVkICYmIHsgY29hY2hGZWVkYmFjazogZGF0YS5jb2FjaEZlZWRiYWNrIH0pLFxuICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgYXdhaXQgdHguZXhlcmNpc2VzLnVwZGF0ZSh7XG4gICAgICB3aGVyZTogeyBpZDogZGF0YS5leGVyY2lzZUlkIH0sXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHVzYWdlQ291bnQ6IHsgaW5jcmVtZW50OiAxIH0sXG4gICAgICAgIGxhc3RVc2VkOiBuZXcgRGF0ZSgpLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBlbnRyeTtcbiAgfSk7XG59XG5cbi8qKlxuICogVXBkYXRlIGEgd29ya291dCBsb2cgZW50cnlcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVdvcmtvdXRMb2dFbnRyeShcbiAgaWQ6IHN0cmluZyxcbiAgdXNlcklkOiBzdHJpbmcsXG4gIGRhdGE6IFBhcnRpYWw8V29ya291dExvZ0VudHJ5Rm9ybURhdGE+XG4pOiBQcm9taXNlPFdvcmtvdXRMb2dFbnRyeSB8IG51bGw+IHtcbiAgLy8gR2V0IGV4aXN0aW5nIGVudHJ5XG4gIGNvbnN0IGV4aXN0aW5nID0gYXdhaXQgcHJpc21hLndvcmtvdXRfbG9nX2VudHJpZXMuZmluZEZpcnN0KHtcbiAgICB3aGVyZTogeyBpZCwgdXNlcklkIH0sXG4gIH0pO1xuXG4gIGlmICghZXhpc3RpbmcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIENhbGN1bGF0ZSBuZXcgdHJhaW5pbmcgdm9sdW1lIGlmIHdlaWdodCBvciByZXBzIGNoYW5nZWRcbiAgbGV0IHRyYWluaW5nVm9sdW1lID0gZXhpc3RpbmcudHJhaW5pbmdWb2x1bWU7XG4gIGlmIChkYXRhLndlaWdodCB8fCBkYXRhLnJlcHMpIHtcbiAgICBjb25zdCBuZXdXZWlnaHQgPSBkYXRhLndlaWdodCB8fCBleGlzdGluZy53ZWlnaHQ7XG4gICAgY29uc3QgbmV3UmVwcyA9IGRhdGEucmVwcyB8fCBleGlzdGluZy5yZXBzO1xuICAgIGNvbnN0IGF2ZXJhZ2VXZWlnaHQgPSBjYWxjdWxhdGVBdmVyYWdlV2VpZ2h0KG5ld1dlaWdodCk7XG4gICAgdHJhaW5pbmdWb2x1bWUgPSBjYWxjdWxhdGVUcmFpbmluZ1ZvbHVtZShcbiAgICAgIDEsXG4gICAgICBuZXdSZXBzLFxuICAgICAgYXZlcmFnZVdlaWdodCxcbiAgICAgIGRhdGEudW5pdCB8fCBleGlzdGluZy51bml0XG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IHVwZGF0ZWQgPSBhd2FpdCBwcmlzbWEud29ya291dF9sb2dfZW50cmllcy51cGRhdGUoe1xuICAgIHdoZXJlOiB7IGlkIH0sXG4gICAgZGF0YToge1xuICAgICAgLi4uKGRhdGEuZGF0ZSAmJiB7IGRhdGU6IG5ldyBEYXRlKGRhdGEuZGF0ZSkgfSksXG4gICAgICAuLi4oZGF0YS5leGVyY2lzZUlkICYmIHsgZXhlcmNpc2VJZDogZGF0YS5leGVyY2lzZUlkIH0pLFxuICAgICAgLi4uKGRhdGEuc2V0TnVtYmVyICYmIHsgc2V0TnVtYmVyOiBkYXRhLnNldE51bWJlciB9KSxcbiAgICAgIC4uLihkYXRhLnNldFR5cGUgJiYgeyBzZXRUeXBlOiBkYXRhLnNldFR5cGUgfSksXG4gICAgICAuLi4oZGF0YS5yZXBzICYmIHsgcmVwczogZGF0YS5yZXBzIH0pLFxuICAgICAgLi4uKGRhdGEud2VpZ2h0ICYmIHsgd2VpZ2h0OiBkYXRhLndlaWdodCB9KSxcbiAgICAgIC4uLihkYXRhLnVuaXQgJiYgeyB1bml0OiBkYXRhLnVuaXQgfSksXG4gICAgICAuLi4oZGF0YS5pbnRlbnNpdHkgJiYgeyBpbnRlbnNpdHk6IGRhdGEuaW50ZW5zaXR5IH0pLFxuICAgICAgLi4uKGRhdGEuaW50ZW5zaXR5VHlwZSAmJiB7IGludGVuc2l0eVR5cGU6IGRhdGEuaW50ZW5zaXR5VHlwZSB9KSxcbiAgICAgIC4uLihkYXRhLnRlbXBvICYmIHsgdGVtcG86IGRhdGEudGVtcG8gfSksXG4gICAgICAuLi4oZGF0YS5yZXN0U2Vjb25kcyAmJiB7IHJlc3RTZWNvbmRzOiBkYXRhLnJlc3RTZWNvbmRzIH0pLFxuICAgICAgLi4uKHRyYWluaW5nVm9sdW1lICE9PSB1bmRlZmluZWQgJiYgeyB0cmFpbmluZ1ZvbHVtZSB9KSxcbiAgICAgIC4uLihkYXRhLnVzZXJDb21tZW50cyAmJiB7IHVzZXJDb21tZW50czogZGF0YS51c2VyQ29tbWVudHMgfSksXG4gICAgICAuLi4oZGF0YS5jb2FjaEZlZWRiYWNrICYmIHsgY29hY2hGZWVkYmFjazogZGF0YS5jb2FjaEZlZWRiYWNrIH0pLFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIElmIGV4ZXJjaXNlIGNoYW5nZWQsIHVwZGF0ZSB1c2FnZSBtZXRyaWNzIGZvciB0aGUgbmV3IGV4ZXJjaXNlXG4gIGlmIChkYXRhLmV4ZXJjaXNlSWQgJiYgZGF0YS5leGVyY2lzZUlkICE9PSBleGlzdGluZy5leGVyY2lzZUlkKSB7XG4gICAgYXdhaXQgcHJpc21hLmV4ZXJjaXNlcy51cGRhdGUoe1xuICAgICAgd2hlcmU6IHsgaWQ6IGRhdGEuZXhlcmNpc2VJZCB9LFxuICAgICAgZGF0YTogeyB1c2FnZUNvdW50OiB7IGluY3JlbWVudDogMSB9LCBsYXN0VXNlZDogbmV3IERhdGUoKSB9LFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHVwZGF0ZWQ7XG59XG5cbi8qKlxuICogRGVsZXRlIGEgd29ya291dCBsb2cgZW50cnlcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZVdvcmtvdXRMb2dFbnRyeShcbiAgaWQ6IHN0cmluZyxcbiAgdXNlcklkOiBzdHJpbmdcbik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcmlzbWEud29ya291dF9sb2dfZW50cmllcy5kZWxldGVNYW55KHtcbiAgICB3aGVyZTogeyBpZCwgdXNlcklkIH0sXG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQuY291bnQgPiAwO1xufVxuXG4vKipcbiAqIEdldCB3b3Jrb3V0IHN0YXRpc3RpY3MgZm9yIGEgdXNlclxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0V29ya291dFN0YXRzKFxuICB1c2VySWQ6IHN0cmluZyxcbiAgZGF0ZVJhbmdlPzogeyBzdGFydDogRGF0ZTsgZW5kOiBEYXRlIH1cbik6IFByb21pc2U8e1xuICB0b3RhbFdvcmtvdXRzOiBudW1iZXI7XG4gIHRvdGFsVm9sdW1lOiBudW1iZXI7XG4gIHRvdGFsU2V0czogbnVtYmVyO1xuICB0b3RhbFJlcHM6IG51bWJlcjtcbiAgYXZlcmFnZVdvcmtvdXREdXJhdGlvbjogbnVtYmVyO1xuICBtb3N0VXNlZEV4ZXJjaXNlczogeyBleGVyY2lzZUlkOiBzdHJpbmc7IGNvdW50OiBudW1iZXI7IG5hbWU6IHN0cmluZyB9W107XG4gIHZvbHVtZUJ5TXVzY2xlR3JvdXA6IHsgbXVzY2xlR3JvdXA6IHN0cmluZzsgdm9sdW1lOiBudW1iZXIgfVtdO1xufT4ge1xuICBjb25zdCB3aGVyZTogYW55ID0geyB1c2VySWQgfTtcbiAgXG4gIGlmIChkYXRlUmFuZ2UpIHtcbiAgICB3aGVyZS5kYXRlID0ge1xuICAgICAgZ3RlOiBkYXRlUmFuZ2Uuc3RhcnQsXG4gICAgICBsdGU6IGRhdGVSYW5nZS5lbmQsXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IGVudHJpZXMgPSBhd2FpdCBwcmlzbWEud29ya291dF9sb2dfZW50cmllcy5maW5kTWFueSh7XG4gICAgd2hlcmUsXG4gICAgaW5jbHVkZToge1xuICAgICAgZXhlcmNpc2VzOiB0cnVlLFxuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IHRvdGFsV29ya291dHMgPSBuZXcgU2V0KGVudHJpZXMubWFwKGUgPT4gZS5kYXRlLnRvRGF0ZVN0cmluZygpKSkuc2l6ZTtcbiAgY29uc3QgdG90YWxWb2x1bWUgPSBlbnRyaWVzLnJlZHVjZSgoc3VtLCBlKSA9PiBzdW0gKyAoZS50cmFpbmluZ1ZvbHVtZSB8fCAwKSwgMCk7XG4gIGNvbnN0IHRvdGFsU2V0cyA9IGVudHJpZXMubGVuZ3RoO1xuICBjb25zdCB0b3RhbFJlcHMgPSBlbnRyaWVzLnJlZHVjZSgoc3VtLCBlKSA9PiBzdW0gKyBlLnJlcHMsIDApO1xuXG4gIC8vIENhbGN1bGF0ZSBhdmVyYWdlIHdvcmtvdXQgZHVyYXRpb25cbiAgY29uc3Qgc2Vzc2lvbnMgPSBhd2FpdCBwcmlzbWEud29ya291dF9zZXNzaW9ucy5maW5kTWFueSh7XG4gICAgd2hlcmUsXG4gICAgc2VsZWN0OiB7IGR1cmF0aW9uOiB0cnVlIH0sXG4gIH0pO1xuICBjb25zdCBhdmVyYWdlV29ya291dER1cmF0aW9uID0gc2Vzc2lvbnMubGVuZ3RoID4gMCBcbiAgICA/IHNlc3Npb25zLnJlZHVjZSgoc3VtLCBzKSA9PiBzdW0gKyAocy5kdXJhdGlvbiB8fCAwKSwgMCkgLyBzZXNzaW9ucy5sZW5ndGggXG4gICAgOiAwO1xuXG4gIC8vIE1vc3QgdXNlZCBleGVyY2lzZXNcbiAgY29uc3QgZXhlcmNpc2VDb3VudHMgPSBlbnRyaWVzLnJlZHVjZSgoYWNjLCBlbnRyeSkgPT4ge1xuICAgIGNvbnN0IGtleSA9IGVudHJ5LmV4ZXJjaXNlSWQ7XG4gICAgYWNjW2tleV0gPSAoYWNjW2tleV0gfHwgMCkgKyAxO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIG51bWJlcj4pO1xuXG4gIGNvbnN0IG1vc3RVc2VkRXhlcmNpc2VzID0gT2JqZWN0LmVudHJpZXMoZXhlcmNpc2VDb3VudHMpXG4gICAgLm1hcCgoW2V4ZXJjaXNlSWQsIGNvdW50XSkgPT4gKHtcbiAgICAgIGV4ZXJjaXNlSWQsXG4gICAgICBjb3VudCxcbiAgICAgIG5hbWU6IGVudHJpZXMuZmluZChlID0+IGUuZXhlcmNpc2VJZCA9PT0gZXhlcmNpc2VJZCk/LmV4ZXJjaXNlcy5uYW1lIHx8ICcnLFxuICAgIH0pKVxuICAgIC5zb3J0KChhLCBiKSA9PiBiLmNvdW50IC0gYS5jb3VudClcbiAgICAuc2xpY2UoMCwgMTApO1xuXG4gIC8vIFZvbHVtZSBieSBtdXNjbGUgZ3JvdXBcbiAgY29uc3Qgdm9sdW1lQnlNdXNjbGVHcm91cCA9IGVudHJpZXMucmVkdWNlKChhY2MsIGVudHJ5KSA9PiB7XG4gICAgZW50cnkuZXhlcmNpc2VzLm11c2NsZUdyb3Vwcy5mb3JFYWNoKG11c2NsZUdyb3VwID0+IHtcbiAgICAgIGFjY1ttdXNjbGVHcm91cF0gPSAoYWNjW211c2NsZUdyb3VwXSB8fCAwKSArIChlbnRyeS50cmFpbmluZ1ZvbHVtZSB8fCAwKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSBhcyBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+KTtcblxuICByZXR1cm4ge1xuICAgIHRvdGFsV29ya291dHMsXG4gICAgdG90YWxWb2x1bWUsXG4gICAgdG90YWxTZXRzLFxuICAgIHRvdGFsUmVwcyxcbiAgICBhdmVyYWdlV29ya291dER1cmF0aW9uLFxuICAgIG1vc3RVc2VkRXhlcmNpc2VzLFxuICAgIHZvbHVtZUJ5TXVzY2xlR3JvdXA6IE9iamVjdC5lbnRyaWVzKHZvbHVtZUJ5TXVzY2xlR3JvdXApLm1hcCgoW211c2NsZUdyb3VwLCB2b2x1bWVdKSA9PiAoe1xuICAgICAgbXVzY2xlR3JvdXAsXG4gICAgICB2b2x1bWUsXG4gICAgfSkpLFxuICB9O1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBFWEVSQ0lTRSBRVUVSSUVTXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8qKlxuICogR2V0IGFsbCBleGVyY2lzZXMgd2l0aCBvcHRpb25hbCBmaWx0ZXJpbmdcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEV4ZXJjaXNlcyhvcHRpb25zOiB7XG4gIGNhdGVnb3J5Pzogc3RyaW5nO1xuICBtdXNjbGVHcm91cHM/OiBzdHJpbmdbXTtcbiAgZXF1aXBtZW50Pzogc3RyaW5nW107XG4gIGRpZmZpY3VsdHk/OiBzdHJpbmc7XG4gIGlzQWN0aXZlPzogYm9vbGVhbjtcbiAgc2VhcmNoPzogc3RyaW5nO1xufSA9IHt9KTogUHJvbWlzZTxFeGVyY2lzZVtdPiB7XG4gIGNvbnN0IHdoZXJlOiBhbnkgPSB7fTtcblxuICBpZiAob3B0aW9ucy5jYXRlZ29yeSkge1xuICAgIHdoZXJlLmNhdGVnb3J5ID0gb3B0aW9ucy5jYXRlZ29yeTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLm11c2NsZUdyb3VwcyAmJiBvcHRpb25zLm11c2NsZUdyb3Vwcy5sZW5ndGggPiAwKSB7XG4gICAgd2hlcmUubXVzY2xlR3JvdXBzID0ge1xuICAgICAgaGFzU29tZTogb3B0aW9ucy5tdXNjbGVHcm91cHMsXG4gICAgfTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmVxdWlwbWVudCAmJiBvcHRpb25zLmVxdWlwbWVudC5sZW5ndGggPiAwKSB7XG4gICAgd2hlcmUuZXF1aXBtZW50ID0ge1xuICAgICAgaGFzU29tZTogb3B0aW9ucy5lcXVpcG1lbnQsXG4gICAgfTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmRpZmZpY3VsdHkpIHtcbiAgICB3aGVyZS5kaWZmaWN1bHR5ID0gb3B0aW9ucy5kaWZmaWN1bHR5O1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaXNBY3RpdmUgIT09IHVuZGVmaW5lZCkge1xuICAgIHdoZXJlLmlzQWN0aXZlID0gb3B0aW9ucy5pc0FjdGl2ZTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLnNlYXJjaCkge1xuICAgIHdoZXJlLm5hbWUgPSB7XG4gICAgICBjb250YWluczogb3B0aW9ucy5zZWFyY2gsXG4gICAgICBtb2RlOiAnaW5zZW5zaXRpdmUnLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gcHJpc21hLmV4ZXJjaXNlcy5maW5kTWFueSh7XG4gICAgd2hlcmUsXG4gICAgb3JkZXJCeTogeyBuYW1lOiAnYXNjJyB9LFxuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgZXhlcmNpc2UgYnkgSURcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEV4ZXJjaXNlKGlkOiBzdHJpbmcpOiBQcm9taXNlPEV4ZXJjaXNlIHwgbnVsbD4ge1xuICByZXR1cm4gcHJpc21hLmV4ZXJjaXNlcy5maW5kVW5pcXVlKHtcbiAgICB3aGVyZTogeyBpZCB9LFxuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgZXhlcmNpc2VcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUV4ZXJjaXNlKGRhdGE6IHtcbiAgbmFtZTogc3RyaW5nO1xuICBjYXRlZ29yeTogc3RyaW5nO1xuICBtdXNjbGVHcm91cHM6IHN0cmluZ1tdO1xuICBlcXVpcG1lbnQ6IHN0cmluZ1tdO1xuICBpbnN0cnVjdGlvbnM/OiBzdHJpbmc7XG4gIHZpZGVvVXJsPzogc3RyaW5nO1xuICBpbWFnZVVybD86IHN0cmluZztcbiAgZGlmZmljdWx0eT86IHN0cmluZztcbiAgc2FmZXR5Tm90ZXM/OiBzdHJpbmc7XG4gIGZvcm1DdWVzPzogc3RyaW5nW107XG4gIGNvbW1vbk1pc3Rha2VzPzogc3RyaW5nW107XG4gIGNyZWF0ZWRCeT86IHN0cmluZztcbiAgaXNDdXN0b20/OiBib29sZWFuO1xufSkge1xuICByZXR1cm4gcHJpc21hLmV4ZXJjaXNlcy5jcmVhdGUoe1xuICAgIGRhdGE6IHtcbiAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxuICAgICAgbmFtZTogZGF0YS5uYW1lLFxuICAgICAgY2F0ZWdvcnk6IGRhdGEuY2F0ZWdvcnksXG4gICAgICBtdXNjbGVHcm91cHM6IGRhdGEubXVzY2xlR3JvdXBzLFxuICAgICAgZXF1aXBtZW50OiBkYXRhLmVxdWlwbWVudCxcbiAgICAgIGluc3RydWN0aW9uczogZGF0YS5pbnN0cnVjdGlvbnMgPz8gbnVsbCxcbiAgICAgIHZpZGVvVXJsOiBkYXRhLnZpZGVvVXJsID8/IG51bGwsXG4gICAgICBpbWFnZVVybDogZGF0YS5pbWFnZVVybCA/PyBudWxsLFxuICAgICAgZGlmZmljdWx0eTogZGF0YS5kaWZmaWN1bHR5IHx8ICdCRUdJTk5FUicsXG4gICAgICBzYWZldHlOb3RlczogZGF0YS5zYWZldHlOb3RlcyA/PyBudWxsLFxuICAgICAgZm9ybUN1ZXM6IGRhdGEuZm9ybUN1ZXMgfHwgW10sXG4gICAgICBjb21tb25NaXN0YWtlczogZGF0YS5jb21tb25NaXN0YWtlcyB8fCBbXSxcbiAgICAgIGNyZWF0ZWRCeTogZGF0YS5jcmVhdGVkQnkgPz8gbnVsbCxcbiAgICAgIGlzQ3VzdG9tOiBkYXRhLmlzQ3VzdG9tIHx8IGZhbHNlLFxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAgfSxcbiAgfSk7XG59XG5cbi8qKlxuICogVXBkYXRlIGFuIGV4ZXJjaXNlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVFeGVyY2lzZShcbiAgaWQ6IHN0cmluZyxcbiAgZGF0YTogUGFydGlhbDx7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGNhdGVnb3J5OiBzdHJpbmc7XG4gICAgbXVzY2xlR3JvdXBzOiBzdHJpbmdbXTtcbiAgICBlcXVpcG1lbnQ6IHN0cmluZ1tdO1xuICAgIGluc3RydWN0aW9uczogc3RyaW5nO1xuICAgIHZpZGVvVXJsOiBzdHJpbmc7XG4gICAgaW1hZ2VVcmw6IHN0cmluZztcbiAgICBkaWZmaWN1bHR5OiBzdHJpbmc7XG4gICAgc2FmZXR5Tm90ZXM6IHN0cmluZztcbiAgICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgfT5cbik6IFByb21pc2U8RXhlcmNpc2UgfCBudWxsPiB7XG4gIHJldHVybiBwcmlzbWEuZXhlcmNpc2VzLnVwZGF0ZSh7XG4gICAgd2hlcmU6IHsgaWQgfSxcbiAgICBkYXRhLFxuICB9KTtcbn1cblxuLyoqXG4gKiBEZWxldGUgYW4gZXhlcmNpc2UgKHNvZnQgZGVsZXRlIGJ5IHNldHRpbmcgaXNBY3RpdmUgdG8gZmFsc2UpXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVFeGVyY2lzZShpZDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByaXNtYS5leGVyY2lzZXMudXBkYXRlKHtcbiAgICB3aGVyZTogeyBpZCB9LFxuICAgIGRhdGE6IHsgaXNBY3RpdmU6IGZhbHNlIH0sXG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQuaXNBY3RpdmUgPT09IGZhbHNlO1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBFWEVSQ0lTRSBWQVJJQVRJT04gUVVFUklFU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vKipcbiAqIEdldCBleGVyY2lzZSB2YXJpYXRpb25zIGZvciBhbiBleGVyY2lzZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RXhlcmNpc2VWYXJpYXRpb25zKGV4ZXJjaXNlSWQ6IHN0cmluZywgb3B0aW9uczoge1xuICBkaWZmaWN1bHR5Pzogc3RyaW5nO1xufSA9IHt9KSB7XG4gIGNvbnN0IHdoZXJlOiBhbnkgPSB7XG4gICAgZXhlcmNpc2VJZCxcbiAgICBpc0FjdGl2ZTogdHJ1ZVxuICB9O1xuXG4gIGlmIChvcHRpb25zLmRpZmZpY3VsdHkpIHtcbiAgICB3aGVyZS5kaWZmaWN1bHR5ID0gb3B0aW9ucy5kaWZmaWN1bHR5O1xuICB9XG5cbiAgcmV0dXJuIHByaXNtYS5leGVyY2lzZV92YXJpYXRpb25zLmZpbmRNYW55KHtcbiAgICB3aGVyZSxcbiAgICBpbmNsdWRlOiB7XG4gICAgICBleGVyY2lzZXM6IHtcbiAgICAgICAgc2VsZWN0OiB7IGlkOiB0cnVlLCBuYW1lOiB0cnVlLCBjYXRlZ29yeTogdHJ1ZSB9XG4gICAgICB9XG4gICAgfSxcbiAgICBvcmRlckJ5OiB7IGRpZmZpY3VsdHk6ICdhc2MnIH1cbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IGV4ZXJjaXNlIHZhcmlhdGlvbiBieSBJRFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RXhlcmNpc2VWYXJpYXRpb25CeUlkKGlkOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHByaXNtYS5leGVyY2lzZV92YXJpYXRpb25zLmZpbmRVbmlxdWUoe1xuICAgIHdoZXJlOiB7IGlkIH0sXG4gICAgaW5jbHVkZToge1xuICAgICAgZXhlcmNpc2VzOiB7XG4gICAgICAgIHNlbGVjdDogeyBpZDogdHJ1ZSwgbmFtZTogdHJ1ZSwgY2F0ZWdvcnk6IHRydWUgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGV4ZXJjaXNlIHZhcmlhdGlvblxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlRXhlcmNpc2VWYXJpYXRpb24oZGF0YToge1xuICBleGVyY2lzZUlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIGRpZmZpY3VsdHk/OiBzdHJpbmc7XG4gIHZpZGVvVXJsPzogc3RyaW5nO1xuICBpbWFnZVVybD86IHN0cmluZztcbiAgaW5zdHJ1Y3Rpb25zPzogc3RyaW5nO1xufSkge1xuICByZXR1cm4gcHJpc21hLmV4ZXJjaXNlX3ZhcmlhdGlvbnMuY3JlYXRlKHtcbiAgICBkYXRhOiB7XG4gICAgICBpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcbiAgICAgIGV4ZXJjaXNlSWQ6IGRhdGEuZXhlcmNpc2VJZCxcbiAgICAgIG5hbWU6IGRhdGEubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBkYXRhLmRlc2NyaXB0aW9uID8/IG51bGwsXG4gICAgICBkaWZmaWN1bHR5OiBkYXRhLmRpZmZpY3VsdHkgfHwgJ0JFR0lOTkVSJyxcbiAgICAgIHZpZGVvVXJsOiBkYXRhLnZpZGVvVXJsID8/IG51bGwsXG4gICAgICBpbWFnZVVybDogZGF0YS5pbWFnZVVybCA/PyBudWxsLFxuICAgICAgaW5zdHJ1Y3Rpb25zOiBkYXRhLmluc3RydWN0aW9ucyA/PyBudWxsLFxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAgfSxcbiAgICBpbmNsdWRlOiB7XG4gICAgICBleGVyY2lzZXM6IHtcbiAgICAgICAgc2VsZWN0OiB7IGlkOiB0cnVlLCBuYW1lOiB0cnVlLCBjYXRlZ29yeTogdHJ1ZSB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBVcGRhdGUgZXhlcmNpc2UgdmFyaWF0aW9uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVFeGVyY2lzZVZhcmlhdGlvbihpZDogc3RyaW5nLCBkYXRhOiBhbnkpIHtcbiAgcmV0dXJuIHByaXNtYS5leGVyY2lzZV92YXJpYXRpb25zLnVwZGF0ZSh7XG4gICAgd2hlcmU6IHsgaWQgfSxcbiAgICBkYXRhOiB7XG4gICAgICAuLi4oZGF0YS5uYW1lICYmIHsgbmFtZTogZGF0YS5uYW1lIH0pLFxuICAgICAgLi4uKGRhdGEuZGVzY3JpcHRpb24gJiYgeyBkZXNjcmlwdGlvbjogZGF0YS5kZXNjcmlwdGlvbiB9KSxcbiAgICAgIC4uLihkYXRhLmRpZmZpY3VsdHkgJiYgeyBkaWZmaWN1bHR5OiBkYXRhLmRpZmZpY3VsdHkgfSksXG4gICAgICAuLi4oZGF0YS52aWRlb1VybCAmJiB7IHZpZGVvVXJsOiBkYXRhLnZpZGVvVXJsIH0pLFxuICAgICAgLi4uKGRhdGEuaW1hZ2VVcmwgJiYgeyBpbWFnZVVybDogZGF0YS5pbWFnZVVybCB9KSxcbiAgICAgIC4uLihkYXRhLmluc3RydWN0aW9ucyAmJiB7IGluc3RydWN0aW9uczogZGF0YS5pbnN0cnVjdGlvbnMgfSksXG4gICAgICAuLi4oZGF0YS5pc0FjdGl2ZSAhPT0gdW5kZWZpbmVkICYmIHsgaXNBY3RpdmU6IGRhdGEuaXNBY3RpdmUgfSlcbiAgICB9LFxuICAgIGluY2x1ZGU6IHtcbiAgICAgIGV4ZXJjaXNlczoge1xuICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIG5hbWU6IHRydWUsIGNhdGVnb3J5OiB0cnVlIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIERlbGV0ZSBleGVyY2lzZSB2YXJpYXRpb25cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUV4ZXJjaXNlVmFyaWF0aW9uKGlkOiBzdHJpbmcpIHtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJpc21hLmV4ZXJjaXNlX3ZhcmlhdGlvbnMudXBkYXRlKHtcbiAgICB3aGVyZTogeyBpZCB9LFxuICAgIGRhdGE6IHsgaXNBY3RpdmU6IGZhbHNlIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdC5pc0FjdGl2ZSA9PT0gZmFsc2U7XG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFdPUktPVVQgU0VTU0lPTiBRVUVSSUVTXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8qKlxuICogR2V0IHdvcmtvdXQgc2Vzc2lvbnMgZm9yIGEgdXNlclxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0V29ya291dFNlc3Npb25zKFxuICB1c2VySWQ6IHN0cmluZyxcbiAgb3B0aW9uczoge1xuICAgIGRhdGVSYW5nZT86IHsgc3RhcnQ6IERhdGU7IGVuZDogRGF0ZSB9O1xuICAgIGlzQ29tcGxldGU/OiBib29sZWFuO1xuICAgIGlzVGVtcGxhdGU/OiBib29sZWFuO1xuICAgIHBhZ2luYXRpb24/OiBQYXJ0aWFsPFdvcmtvdXRQYWdpbmF0aW9uPjtcbiAgfSA9IHt9XG4pOiBQcm9taXNlPHtcbiAgc2Vzc2lvbnM6IChXb3Jrb3V0U2Vzc2lvbiAmIHtcbiAgICB1c2VyOiB7IGlkOiBzdHJpbmc7IG5hbWU6IHN0cmluZyB8IG51bGw7IHJvbGU6IHN0cmluZyB9O1xuICAgIGNvYWNoOiB7IGlkOiBzdHJpbmc7IG5hbWU6IHN0cmluZyB8IG51bGw7IHJvbGU6IHN0cmluZyB9IHwgbnVsbDtcbiAgICBlbnRyaWVzOiBXb3Jrb3V0TG9nRW50cnlbXTtcbiAgfSlbXTtcbiAgcGFnaW5hdGlvbjogV29ya291dFBhZ2luYXRpb247XG59PiB7XG4gIGNvbnN0IHsgZGF0ZVJhbmdlLCBpc0NvbXBsZXRlLCBpc1RlbXBsYXRlLCBwYWdpbmF0aW9uID0ge30gfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHBhZ2UgPSBwYWdpbmF0aW9uLnBhZ2UgfHwgMTtcbiAgY29uc3QgbGltaXQgPSBwYWdpbmF0aW9uLmxpbWl0IHx8IDIwO1xuICBjb25zdCBvZmZzZXQgPSAocGFnZSAtIDEpICogbGltaXQ7XG5cbiAgY29uc3Qgd2hlcmU6IGFueSA9IHsgdXNlcklkIH07XG5cbiAgaWYgKGRhdGVSYW5nZSkge1xuICAgIHdoZXJlLmRhdGUgPSB7XG4gICAgICBndGU6IGRhdGVSYW5nZS5zdGFydCxcbiAgICAgIGx0ZTogZGF0ZVJhbmdlLmVuZCxcbiAgICB9O1xuICB9XG5cbiAgaWYgKGlzQ29tcGxldGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHdoZXJlLmlzQ29tcGxldGUgPSBpc0NvbXBsZXRlO1xuICB9XG5cbiAgaWYgKGlzVGVtcGxhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHdoZXJlLmlzVGVtcGxhdGUgPSBpc1RlbXBsYXRlO1xuICB9XG5cbiAgY29uc3QgdG90YWwgPSBhd2FpdCBwcmlzbWEud29ya291dF9zZXNzaW9ucy5jb3VudCh7IHdoZXJlIH0pO1xuXG4gIGNvbnN0IHNlc3Npb25zID0gYXdhaXQgcHJpc21hLndvcmtvdXRfc2Vzc2lvbnMuZmluZE1hbnkoe1xuICAgIHdoZXJlLFxuICAgIGluY2x1ZGU6IHtcbiAgICAgIHVzZXJzX3dvcmtvdXRfc2Vzc2lvbnNfdXNlcklkVG91c2Vyczoge1xuICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICBpZDogdHJ1ZSxcbiAgICAgICAgICBuYW1lOiB0cnVlLFxuICAgICAgICAgIHJvbGU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgdXNlcnNfd29ya291dF9zZXNzaW9uc19jb2FjaElkVG91c2Vyczoge1xuICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICBpZDogdHJ1ZSxcbiAgICAgICAgICBuYW1lOiB0cnVlLFxuICAgICAgICAgIHJvbGU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgd29ya291dF9sb2dfZW50cmllczoge1xuICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgZXhlcmNpc2VzOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBvcmRlckJ5OiB7IG9yZGVyOiAnYXNjJyB9LFxuICAgICAgfSxcbiAgICB9LFxuICAgIG9yZGVyQnk6IHsgZGF0ZTogJ2Rlc2MnIH0sXG4gICAgc2tpcDogb2Zmc2V0LFxuICAgIHRha2U6IGxpbWl0LFxuICB9KTtcblxuICAvLyBNYXAgdGhlIFByaXNtYSByZWxhdGlvbiBuYW1lcyB0byB0aGUgZXhwZWN0ZWQgZm9ybWF0XG4gIGNvbnN0IG1hcHBlZFNlc3Npb25zID0gc2Vzc2lvbnMubWFwKChzZXNzaW9uKSA9PiAoe1xuICAgIC4uLnNlc3Npb24sXG4gICAgdXNlcjogc2Vzc2lvbi51c2Vyc193b3Jrb3V0X3Nlc3Npb25zX3VzZXJJZFRvdXNlcnMsXG4gICAgY29hY2g6IHNlc3Npb24udXNlcnNfd29ya291dF9zZXNzaW9uc19jb2FjaElkVG91c2VycyxcbiAgICBlbnRyaWVzOiBzZXNzaW9uLndvcmtvdXRfbG9nX2VudHJpZXMubWFwKChlbnRyeSkgPT4gKHtcbiAgICAgIC4uLmVudHJ5LFxuICAgICAgZXhlcmNpc2U6IGVudHJ5LmV4ZXJjaXNlcyxcbiAgICB9KSksXG4gIH0pKTtcblxuICByZXR1cm4ge1xuICAgIHNlc3Npb25zOiBtYXBwZWRTZXNzaW9ucyxcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBwYWdlLFxuICAgICAgbGltaXQsXG4gICAgICB0b3RhbCxcbiAgICAgIHRvdGFsUGFnZXM6IE1hdGguY2VpbCh0b3RhbCAvIGxpbWl0KSxcbiAgICAgIGhhc01vcmU6IHBhZ2UgPCBNYXRoLmNlaWwodG90YWwgLyBsaW1pdCksXG4gICAgfSxcbiAgfTtcbn1cblxuLyoqXG4gKiBHZXQgYSBzaW5nbGUgd29ya291dCBzZXNzaW9uIGJ5IElEXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRXb3Jrb3V0U2Vzc2lvbihcbiAgaWQ6IHN0cmluZyxcbiAgdXNlcklkOiBzdHJpbmdcbik6IFByb21pc2U8KFdvcmtvdXRTZXNzaW9uICYge1xuICB1c2VyOiB7IGlkOiBzdHJpbmc7IG5hbWU6IHN0cmluZyB8IG51bGw7IHJvbGU6IHN0cmluZyB9O1xuICBjb2FjaDogeyBpZDogc3RyaW5nOyBuYW1lOiBzdHJpbmcgfCBudWxsOyByb2xlOiBzdHJpbmcgfSB8IG51bGw7XG4gIGVudHJpZXM6IChXb3Jrb3V0TG9nRW50cnkgJiB7IGV4ZXJjaXNlOiBFeGVyY2lzZSB9KVtdO1xufSkgfCBudWxsPiB7XG4gIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBwcmlzbWEud29ya291dF9zZXNzaW9ucy5maW5kRmlyc3Qoe1xuICAgIHdoZXJlOiB7IGlkLCB1c2VySWQgfSxcbiAgICBpbmNsdWRlOiB7XG4gICAgICB1c2Vyc193b3Jrb3V0X3Nlc3Npb25zX3VzZXJJZFRvdXNlcnM6IHtcbiAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgICByb2xlOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHVzZXJzX3dvcmtvdXRfc2Vzc2lvbnNfY29hY2hJZFRvdXNlcnM6IHtcbiAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgICByb2xlOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHdvcmtvdXRfbG9nX2VudHJpZXM6IHtcbiAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgIGV4ZXJjaXNlczogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgb3JkZXJCeTogeyBvcmRlcjogJ2FzYycgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG5cbiAgaWYgKCFzZXNzaW9uKSByZXR1cm4gbnVsbDtcblxuICAvLyBNYXAgdGhlIFByaXNtYSByZWxhdGlvbiBuYW1lcyB0byB0aGUgZXhwZWN0ZWQgZm9ybWF0XG4gIHJldHVybiB7XG4gICAgLi4uc2Vzc2lvbixcbiAgICB1c2VyOiBzZXNzaW9uLnVzZXJzX3dvcmtvdXRfc2Vzc2lvbnNfdXNlcklkVG91c2VycyxcbiAgICBjb2FjaDogc2Vzc2lvbi51c2Vyc193b3Jrb3V0X3Nlc3Npb25zX2NvYWNoSWRUb3VzZXJzLFxuICAgIGVudHJpZXM6IHNlc3Npb24ud29ya291dF9sb2dfZW50cmllcy5tYXAoKGVudHJ5KSA9PiAoe1xuICAgICAgLi4uZW50cnksXG4gICAgICBleGVyY2lzZTogZW50cnkuZXhlcmNpc2VzLFxuICAgIH0pKSxcbiAgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgd29ya291dCBzZXNzaW9uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVXb3Jrb3V0U2Vzc2lvbihcbiAgdXNlcklkOiBzdHJpbmcsXG4gIGRhdGE6IFdvcmtvdXRTZXNzaW9uRm9ybURhdGEsXG4gIGNvYWNoSWQ/OiBzdHJpbmdcbik6IFByb21pc2U8V29ya291dFNlc3Npb24+IHtcbiAgY29uc3Qgc3RhcnRUaW1lID0gbmV3IERhdGUoYCR7ZGF0YS5kYXRlfVQke2RhdGEuc3RhcnRUaW1lfWApO1xuICBjb25zdCBlbmRUaW1lID0gZGF0YS5lbmRUaW1lID8gbmV3IERhdGUoYCR7ZGF0YS5kYXRlfVQke2RhdGEuZW5kVGltZX1gKSA6IG51bGw7XG4gIFxuICBsZXQgZHVyYXRpb246IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgaWYgKHN0YXJ0VGltZSAmJiBlbmRUaW1lKSB7XG4gICAgZHVyYXRpb24gPSBNYXRoLmZsb29yKChlbmRUaW1lLmdldFRpbWUoKSAtIHN0YXJ0VGltZS5nZXRUaW1lKCkpIC8gMTAwMCk7XG4gIH1cblxuICByZXR1cm4gcHJpc21hLndvcmtvdXRfc2Vzc2lvbnMuY3JlYXRlKHtcbiAgICBkYXRhOiB7XG4gICAgICBpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcbiAgICAgIHVzZXJJZCxcbiAgICAgIGNvYWNoSWQ6IGNvYWNoSWQgPz8gbnVsbCxcbiAgICAgIGRhdGU6IG5ldyBEYXRlKGRhdGEuZGF0ZSksXG4gICAgICBzdGFydFRpbWUsXG4gICAgICBlbmRUaW1lLFxuICAgICAgLi4uKGR1cmF0aW9uICE9PSB1bmRlZmluZWQgJiYgeyBkdXJhdGlvbiB9KSxcbiAgICAgIC4uLihkYXRhLnRpdGxlICE9PSB1bmRlZmluZWQgJiYgeyB0aXRsZTogZGF0YS50aXRsZSB9KSxcbiAgICAgIC4uLihkYXRhLm5vdGVzICE9PSB1bmRlZmluZWQgJiYgeyBub3RlczogZGF0YS5ub3RlcyB9KSxcbiAgICAgIC4uLihkYXRhLmxvY2F0aW9uICE9PSB1bmRlZmluZWQgJiYgeyBsb2NhdGlvbjogZGF0YS5sb2NhdGlvbiB9KSxcbiAgICAgIGlzVGVtcGxhdGU6IGRhdGEuaXNUZW1wbGF0ZSB8fCBmYWxzZSxcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICB9LFxuICB9KTtcbn1cblxuLyoqXG4gKiBVcGRhdGUgYSB3b3Jrb3V0IHNlc3Npb25cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVdvcmtvdXRTZXNzaW9uKFxuICBpZDogc3RyaW5nLFxuICB1c2VySWQ6IHN0cmluZyxcbiAgZGF0YTogUGFydGlhbDxXb3Jrb3V0U2Vzc2lvbkZvcm1EYXRhPlxuKTogUHJvbWlzZTxXb3Jrb3V0U2Vzc2lvbiB8IG51bGw+IHtcbiAgY29uc3QgZXhpc3RpbmcgPSBhd2FpdCBwcmlzbWEud29ya291dF9zZXNzaW9ucy5maW5kRmlyc3Qoe1xuICAgIHdoZXJlOiB7IGlkLCB1c2VySWQgfSxcbiAgfSk7XG5cbiAgaWYgKCFleGlzdGluZykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbGV0IHN0YXJ0VGltZSA9IGV4aXN0aW5nLnN0YXJ0VGltZTtcbiAgbGV0IGVuZFRpbWUgPSBleGlzdGluZy5lbmRUaW1lO1xuICBsZXQgZHVyYXRpb24gPSBleGlzdGluZy5kdXJhdGlvbjtcblxuICBpZiAoZGF0YS5kYXRlICYmIGRhdGEuc3RhcnRUaW1lKSB7XG4gICAgc3RhcnRUaW1lID0gbmV3IERhdGUoYCR7ZGF0YS5kYXRlfVQke2RhdGEuc3RhcnRUaW1lfWApO1xuICB9XG5cbiAgaWYgKGRhdGEuZGF0ZSAmJiBkYXRhLmVuZFRpbWUpIHtcbiAgICBlbmRUaW1lID0gbmV3IERhdGUoYCR7ZGF0YS5kYXRlfVQke2RhdGEuZW5kVGltZX1gKTtcbiAgfVxuXG4gIGlmIChzdGFydFRpbWUgJiYgZW5kVGltZSkge1xuICAgIGR1cmF0aW9uID0gTWF0aC5mbG9vcigoZW5kVGltZS5nZXRUaW1lKCkgLSBzdGFydFRpbWUuZ2V0VGltZSgpKSAvIDEwMDApO1xuICB9XG5cbiAgcmV0dXJuIHByaXNtYS53b3Jrb3V0X3Nlc3Npb25zLnVwZGF0ZSh7XG4gICAgd2hlcmU6IHsgaWQgfSxcbiAgICBkYXRhOiB7XG4gICAgICAuLi4oZGF0YS5kYXRlICYmIHsgZGF0ZTogbmV3IERhdGUoZGF0YS5kYXRlKSB9KSxcbiAgICAgIC4uLihzdGFydFRpbWUgJiYgeyBzdGFydFRpbWUgfSksXG4gICAgICAuLi4oZW5kVGltZSAmJiB7IGVuZFRpbWUgfSksXG4gICAgICAuLi4oZHVyYXRpb24gIT09IHVuZGVmaW5lZCAmJiB7IGR1cmF0aW9uIH0pLFxuICAgICAgLi4uKGRhdGEudGl0bGUgJiYgeyB0aXRsZTogZGF0YS50aXRsZSB9KSxcbiAgICAgIC4uLihkYXRhLm5vdGVzICYmIHsgbm90ZXM6IGRhdGEubm90ZXMgfSksXG4gICAgICAuLi4oZGF0YS5sb2NhdGlvbiAmJiB7IGxvY2F0aW9uOiBkYXRhLmxvY2F0aW9uIH0pLFxuICAgICAgLi4uKGRhdGEuaXNUZW1wbGF0ZSAhPT0gdW5kZWZpbmVkICYmIHsgaXNUZW1wbGF0ZTogZGF0YS5pc1RlbXBsYXRlIH0pLFxuICAgIH0sXG4gIH0pO1xufVxuXG4vKipcbiAqIENvbXBsZXRlIGEgd29ya291dCBzZXNzaW9uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb21wbGV0ZVdvcmtvdXRTZXNzaW9uKFxuICBpZDogc3RyaW5nLFxuICB1c2VySWQ6IHN0cmluZyxcbiAgZW5kVGltZT86IERhdGVcbik6IFByb21pc2U8V29ya291dFNlc3Npb24gfCBudWxsPiB7XG4gIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBwcmlzbWEud29ya291dF9zZXNzaW9ucy5maW5kRmlyc3Qoe1xuICAgIHdoZXJlOiB7IGlkLCB1c2VySWQgfSxcbiAgfSk7XG5cbiAgaWYgKCFzZXNzaW9uKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBlbmRUaW1lVG9Vc2UgPSBlbmRUaW1lIHx8IG5ldyBEYXRlKCk7XG4gIGNvbnN0IGR1cmF0aW9uID0gTWF0aC5mbG9vcigoZW5kVGltZVRvVXNlLmdldFRpbWUoKSAtIHNlc3Npb24uc3RhcnRUaW1lLmdldFRpbWUoKSkgLyAxMDAwKTtcblxuICAvLyBDYWxjdWxhdGUgdG90YWwgdm9sdW1lIGFuZCBzdGF0c1xuICBjb25zdCBlbnRyaWVzID0gYXdhaXQgcHJpc21hLndvcmtvdXRfbG9nX2VudHJpZXMuZmluZE1hbnkoe1xuICAgIHdoZXJlOiB7IHVzZXJJZCwgZGF0ZTogc2Vzc2lvbi5kYXRlIH0sXG4gIH0pO1xuXG4gIGNvbnN0IHRvdGFsVm9sdW1lID0gZW50cmllcy5yZWR1Y2UoKHN1bSwgZW50cnkpID0+IHN1bSArIChlbnRyeS50cmFpbmluZ1ZvbHVtZSB8fCAwKSwgMCk7XG4gIGNvbnN0IHRvdGFsU2V0cyA9IGVudHJpZXMubGVuZ3RoO1xuICBjb25zdCB0b3RhbFJlcHMgPSBlbnRyaWVzLnJlZHVjZSgoc3VtLCBlbnRyeSkgPT4gc3VtICsgZW50cnkucmVwcywgMCk7XG5cbiAgcmV0dXJuIHByaXNtYS53b3Jrb3V0X3Nlc3Npb25zLnVwZGF0ZSh7XG4gICAgd2hlcmU6IHsgaWQgfSxcbiAgICBkYXRhOiB7XG4gICAgICBlbmRUaW1lOiBlbmRUaW1lVG9Vc2UsXG4gICAgICBkdXJhdGlvbixcbiAgICAgIGlzQ29tcGxldGU6IHRydWUsXG4gICAgICB0b3RhbFZvbHVtZSxcbiAgICAgIHRvdGFsU2V0cyxcbiAgICAgIHRvdGFsUmVwcyxcbiAgICB9LFxuICB9KTtcbn1cblxuLyoqXG4gKiBEZWxldGUgYSB3b3Jrb3V0IHNlc3Npb25cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZVdvcmtvdXRTZXNzaW9uKFxuICBpZDogc3RyaW5nLFxuICB1c2VySWQ6IHN0cmluZ1xuKTogUHJvbWlzZTxib29sZWFuPiB7XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByaXNtYS53b3Jrb3V0X3Nlc3Npb25zLmRlbGV0ZU1hbnkoe1xuICAgIHdoZXJlOiB7IGlkLCB1c2VySWQgfSxcbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdC5jb3VudCA+IDA7XG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIENPQUNILVNQRUNJRklDIFFVRVJJRVNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLyoqXG4gKiBHZXQgd29ya291dCBsb2dzIGZvciBjbGllbnRzIGFzc2lnbmVkIHRvIGEgY29hY2hcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENsaWVudFdvcmtvdXRMb2dzKFxuICBjb2FjaElkOiBzdHJpbmcsXG4gIG9wdGlvbnM6IHtcbiAgICBjbGllbnRJZD86IHN0cmluZztcbiAgICBkYXRlUmFuZ2U/OiB7IHN0YXJ0OiBEYXRlOyBlbmQ6IERhdGUgfTtcbiAgICBwYWdpbmF0aW9uPzogUGFydGlhbDxXb3Jrb3V0UGFnaW5hdGlvbj47XG4gIH0gPSB7fVxuKTogUHJvbWlzZTx7XG4gIGVudHJpZXM6IChXb3Jrb3V0TG9nRW50cnkgJiB7XG4gICAgZXhlcmNpc2U6IEV4ZXJjaXNlO1xuICAgIHVzZXI6IHsgaWQ6IHN0cmluZzsgbmFtZTogc3RyaW5nIHwgbnVsbDsgcm9sZTogc3RyaW5nIH07XG4gIH0pW107XG4gIHBhZ2luYXRpb246IFdvcmtvdXRQYWdpbmF0aW9uO1xufT4ge1xuICBjb25zdCB7IGNsaWVudElkLCBkYXRlUmFuZ2UsIHBhZ2luYXRpb24gPSB7fSB9ID0gb3B0aW9ucztcbiAgY29uc3QgcGFnZSA9IHBhZ2luYXRpb24ucGFnZSB8fCAxO1xuICBjb25zdCBsaW1pdCA9IHBhZ2luYXRpb24ubGltaXQgfHwgNTA7XG4gIGNvbnN0IG9mZnNldCA9IChwYWdlIC0gMSkgKiBsaW1pdDtcblxuICBjb25zdCB3aGVyZTogYW55ID0geyBjb2FjaElkIH07XG5cbiAgaWYgKGNsaWVudElkKSB7XG4gICAgd2hlcmUudXNlcklkID0gY2xpZW50SWQ7XG4gIH1cblxuICBpZiAoZGF0ZVJhbmdlKSB7XG4gICAgd2hlcmUuZGF0ZSA9IHtcbiAgICAgIGd0ZTogZGF0ZVJhbmdlLnN0YXJ0LFxuICAgICAgbHRlOiBkYXRlUmFuZ2UuZW5kLFxuICAgIH07XG4gIH1cblxuICBjb25zdCB0b3RhbCA9IGF3YWl0IHByaXNtYS53b3Jrb3V0X2xvZ19lbnRyaWVzLmNvdW50KHsgd2hlcmUgfSk7XG5cbiAgY29uc3QgZW50cmllcyA9IGF3YWl0IHByaXNtYS53b3Jrb3V0X2xvZ19lbnRyaWVzLmZpbmRNYW55KHtcbiAgICB3aGVyZSxcbiAgICBpbmNsdWRlOiB7XG4gICAgICBleGVyY2lzZXM6IHRydWUsXG4gICAgICB1c2Vyc193b3Jrb3V0X2xvZ19lbnRyaWVzX3VzZXJJZFRvdXNlcnM6IHtcbiAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgICByb2xlOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICAgIG9yZGVyQnk6IHsgZGF0ZTogJ2Rlc2MnIH0sXG4gICAgc2tpcDogb2Zmc2V0LFxuICAgIHRha2U6IGxpbWl0LFxuICB9KTtcblxuICBjb25zdCB0b3RhbFBhZ2VzID0gTWF0aC5jZWlsKHRvdGFsIC8gbGltaXQpO1xuXG4gIC8vIE1hcCB0aGUgUHJpc21hIHJlbGF0aW9uIG5hbWVzIHRvIHRoZSBleHBlY3RlZCBmb3JtYXRcbiAgY29uc3QgbWFwcGVkRW50cmllcyA9IGVudHJpZXMubWFwKChlbnRyeSkgPT4gKHtcbiAgICAuLi5lbnRyeSxcbiAgICBleGVyY2lzZTogZW50cnkuZXhlcmNpc2VzLFxuICAgIHVzZXI6IGVudHJ5LnVzZXJzX3dvcmtvdXRfbG9nX2VudHJpZXNfdXNlcklkVG91c2VycyxcbiAgfSkpO1xuXG4gIHJldHVybiB7XG4gICAgZW50cmllczogbWFwcGVkRW50cmllcyxcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBwYWdlLFxuICAgICAgbGltaXQsXG4gICAgICB0b3RhbCxcbiAgICAgIHRvdGFsUGFnZXMsXG4gICAgICBoYXNNb3JlOiBwYWdlIDwgdG90YWxQYWdlcyxcbiAgICB9LFxuICB9O1xufVxuXG4vKipcbiAqIEFkZCBjb2FjaCBmZWVkYmFjayB0byBhIHdvcmtvdXQgZW50cnlcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZENvYWNoRmVlZGJhY2soXG4gIGVudHJ5SWQ6IHN0cmluZyxcbiAgY29hY2hJZDogc3RyaW5nLFxuICBmZWVkYmFjazogc3RyaW5nXG4pOiBQcm9taXNlPFdvcmtvdXRMb2dFbnRyeSB8IG51bGw+IHtcbiAgcmV0dXJuIHByaXNtYS53b3Jrb3V0X2xvZ19lbnRyaWVzLnVwZGF0ZSh7XG4gICAgd2hlcmU6IHtcbiAgICAgIGlkOiBlbnRyeUlkLFxuICAgICAgY29hY2hJZCwgLy8gRW5zdXJlIGNvYWNoIG93bnMgdGhpcyBlbnRyeVxuICAgIH0sXG4gICAgZGF0YToge1xuICAgICAgY29hY2hGZWVkYmFjazogZmVlZGJhY2ssXG4gICAgfSxcbiAgfSk7XG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFVUSUxJVFkgUVVFUklFU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vKipcbiAqIEdldCBleGVyY2lzZSBjYXRlZ29yaWVzIGZvciBmaWx0ZXJpbmdcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEV4ZXJjaXNlQ2F0ZWdvcmllcygpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gIGNvbnN0IGV4ZXJjaXNlcyA9IGF3YWl0IHByaXNtYS5leGVyY2lzZXMuZmluZE1hbnkoe1xuICAgIHNlbGVjdDogeyBjYXRlZ29yeTogdHJ1ZSB9LFxuICAgIHdoZXJlOiB7IGlzQWN0aXZlOiB0cnVlIH0sXG4gIH0pO1xuXG4gIHJldHVybiBbLi4ubmV3IFNldChleGVyY2lzZXMubWFwKGUgPT4gZS5jYXRlZ29yeSkpXTtcbn1cblxuLyoqXG4gKiBHZXQgbXVzY2xlIGdyb3VwcyBmb3IgZmlsdGVyaW5nXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRNdXNjbGVHcm91cHMoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICBjb25zdCBleGVyY2lzZXMgPSBhd2FpdCBwcmlzbWEuZXhlcmNpc2VzLmZpbmRNYW55KHtcbiAgICBzZWxlY3Q6IHsgbXVzY2xlR3JvdXBzOiB0cnVlIH0sXG4gICAgd2hlcmU6IHsgaXNBY3RpdmU6IHRydWUgfSxcbiAgfSk7XG5cbiAgY29uc3QgYWxsTXVzY2xlR3JvdXBzID0gZXhlcmNpc2VzLmZsYXRNYXAoZSA9PiBlLm11c2NsZUdyb3Vwcyk7XG4gIHJldHVybiBbLi4ubmV3IFNldChhbGxNdXNjbGVHcm91cHMpXTtcbn1cblxuLyoqXG4gKiBHZXQgZXF1aXBtZW50IHR5cGVzIGZvciBmaWx0ZXJpbmdcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEVxdWlwbWVudFR5cGVzKCk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgY29uc3QgZXhlcmNpc2VzID0gYXdhaXQgcHJpc21hLmV4ZXJjaXNlcy5maW5kTWFueSh7XG4gICAgc2VsZWN0OiB7IGVxdWlwbWVudDogdHJ1ZSB9LFxuICAgIHdoZXJlOiB7IGlzQWN0aXZlOiB0cnVlIH0sXG4gIH0pO1xuXG4gIGNvbnN0IGFsbEVxdWlwbWVudCA9IGV4ZXJjaXNlcy5mbGF0TWFwKGUgPT4gZS5lcXVpcG1lbnQpO1xuICByZXR1cm4gWy4uLm5ldyBTZXQoYWxsRXF1aXBtZW50KV07XG59XG5cbi8qKlxuICogU2VhcmNoIGV4ZXJjaXNlcyBieSBuYW1lXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZWFyY2hFeGVyY2lzZXMoXG4gIHF1ZXJ5OiBzdHJpbmcsXG4gIGxpbWl0OiBudW1iZXIgPSAxMFxuKTogUHJvbWlzZTxFeGVyY2lzZVtdPiB7XG4gIHJldHVybiBwcmlzbWEuZXhlcmNpc2VzLmZpbmRNYW55KHtcbiAgICB3aGVyZToge1xuICAgICAgbmFtZToge1xuICAgICAgICBjb250YWluczogcXVlcnksXG4gICAgICAgIG1vZGU6ICdpbnNlbnNpdGl2ZScsXG4gICAgICB9LFxuICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgfSxcbiAgICBvcmRlckJ5OiB7IHVzYWdlQ291bnQ6ICdkZXNjJyB9LFxuICAgIHRha2U6IGxpbWl0LFxuICB9KTtcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gV09SS09VVCBURU1QTEFURSBRVUVSSUVTXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8qKlxuICogR2V0IHdvcmtvdXQgdGVtcGxhdGVzIHdpdGggZmlsdGVyaW5nXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRXb3Jrb3V0VGVtcGxhdGVzKGZpbHRlcnM6IHtcbiAgY2F0ZWdvcnk/OiBzdHJpbmc7XG4gIGRpZmZpY3VsdHk/OiBzdHJpbmc7XG4gIHByaWNlUmFuZ2U/OiBzdHJpbmc7XG4gIG1pblJhdGluZz86IG51bWJlcjtcbiAgcHVibGljT25seT86IGJvb2xlYW47XG4gIGxpbWl0PzogbnVtYmVyO1xufSA9IHt9KSB7XG4gIGNvbnN0IHdoZXJlOiBhbnkgPSB7XG4gICAgaXNBY3RpdmU6IHRydWUsXG4gIH07XG5cbiAgaWYgKGZpbHRlcnMucHVibGljT25seSkge1xuICAgIHdoZXJlLmlzUHVibGljID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChmaWx0ZXJzLmNhdGVnb3J5KSB7XG4gICAgd2hlcmUuY2F0ZWdvcnkgPSBmaWx0ZXJzLmNhdGVnb3J5O1xuICB9XG5cbiAgaWYgKGZpbHRlcnMuZGlmZmljdWx0eSkge1xuICAgIHdoZXJlLmRpZmZpY3VsdHkgPSBmaWx0ZXJzLmRpZmZpY3VsdHk7XG4gIH1cblxuICBpZiAoZmlsdGVycy5taW5SYXRpbmcpIHtcbiAgICB3aGVyZS5yYXRpbmcgPSB7IGd0ZTogZmlsdGVycy5taW5SYXRpbmcgfTtcbiAgfVxuXG4gIGlmIChmaWx0ZXJzLnByaWNlUmFuZ2UpIHtcbiAgICBjb25zdCBbbWluLCBtYXhdID0gZmlsdGVycy5wcmljZVJhbmdlLnNwbGl0KCctJykubWFwKE51bWJlcik7XG4gICAgd2hlcmUucHJpY2UgPSB7IGd0ZTogbWluLCBsdGU6IG1heCB9O1xuICB9XG5cbiAgcmV0dXJuIHByaXNtYS53b3Jrb3V0X3RlbXBsYXRlcy5maW5kTWFueSh7XG4gICAgd2hlcmUsXG4gICAgaW5jbHVkZToge1xuICAgICAgdXNlcnM6IHtcbiAgICAgICAgc2VsZWN0OiB7IGlkOiB0cnVlLCBuYW1lOiB0cnVlLCB0cmFpbmVyVmVyaWZpZWQ6IHRydWUgfVxuICAgICAgfSxcbiAgICAgIHdvcmtvdXRfdGVtcGxhdGVfZXhlcmNpc2VzOiB7XG4gICAgICAgIGluY2x1ZGU6IHsgZXhlcmNpc2VzOiB0cnVlIH0sXG4gICAgICAgIG9yZGVyQnk6IHsgb3JkZXI6ICdhc2MnIH1cbiAgICAgIH0sXG4gICAgICBfY291bnQ6IHtcbiAgICAgICAgc2VsZWN0OiB7IHRlbXBsYXRlX3JhdGluZ3M6IHRydWUgfVxuICAgICAgfVxuICAgIH0sXG4gICAgb3JkZXJCeTogeyByYXRpbmc6ICdkZXNjJyB9LFxuICAgIHRha2U6IGZpbHRlcnMubGltaXQgfHwgMjBcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IHdvcmtvdXQgdGVtcGxhdGUgYnkgSURcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFdvcmtvdXRUZW1wbGF0ZUJ5SWQoaWQ6IHN0cmluZykge1xuICByZXR1cm4gcHJpc21hLndvcmtvdXRfdGVtcGxhdGVzLmZpbmRVbmlxdWUoe1xuICAgIHdoZXJlOiB7IGlkIH0sXG4gICAgaW5jbHVkZToge1xuICAgICAgdXNlcnM6IHtcbiAgICAgICAgc2VsZWN0OiB7IGlkOiB0cnVlLCBuYW1lOiB0cnVlLCB0cmFpbmVyVmVyaWZpZWQ6IHRydWUgfVxuICAgICAgfSxcbiAgICAgIHdvcmtvdXRfdGVtcGxhdGVfZXhlcmNpc2VzOiB7XG4gICAgICAgIGluY2x1ZGU6IHsgZXhlcmNpc2VzOiB0cnVlIH0sXG4gICAgICAgIG9yZGVyQnk6IHsgb3JkZXI6ICdhc2MnIH1cbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZV9yYXRpbmdzOiB7XG4gICAgICAgIGluY2x1ZGU6IHsgdXNlcnM6IHsgc2VsZWN0OiB7IGlkOiB0cnVlLCBuYW1lOiB0cnVlIH0gfSB9LFxuICAgICAgICBvcmRlckJ5OiB7IGNyZWF0ZWRBdDogJ2Rlc2MnIH0sXG4gICAgICAgIHRha2U6IDEwXG4gICAgICB9LFxuICAgICAgX2NvdW50OiB7XG4gICAgICAgIHNlbGVjdDogeyB0ZW1wbGF0ZV9yYXRpbmdzOiB0cnVlIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZSB3b3Jrb3V0IHRlbXBsYXRlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVXb3Jrb3V0VGVtcGxhdGUoZGF0YTogYW55KSB7XG4gIHJldHVybiBwcmlzbWEud29ya291dF90ZW1wbGF0ZXMuY3JlYXRlKHtcbiAgICBkYXRhOiB7XG4gICAgICBpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSwgLy8gQWRkIHRoaXMgbGluZSB0byBnZW5lcmF0ZSBhIHVuaXF1ZSBJRFxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLCAvLyBBZGQgdGhpcyBsaW5lIHRvIHNldCB0aGUgdXBkYXRlZEF0IHRpbWVzdGFtcFxuICAgICAgbmFtZTogZGF0YS5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IGRhdGEuZGVzY3JpcHRpb24sXG4gICAgICBjYXRlZ29yeTogZGF0YS5jYXRlZ29yeSxcbiAgICAgIGRpZmZpY3VsdHk6IGRhdGEuZGlmZmljdWx0eSB8fCAnQkVHSU5ORVInLFxuICAgICAgZHVyYXRpb246IGRhdGEuZHVyYXRpb24sXG4gICAgICBlcXVpcG1lbnQ6IGRhdGEuZXF1aXBtZW50IHx8IFtdLFxuICAgICAgaXNQdWJsaWM6IGRhdGEuaXNQdWJsaWMgfHwgZmFsc2UsXG4gICAgICBwcmljZTogZGF0YS5wcmljZSxcbiAgICAgIGN1cnJlbmN5OiBkYXRhLmN1cnJlbmN5IHx8ICdVU0QnLFxuICAgICAgdGFnczogZGF0YS50YWdzIHx8IFtdLFxuICAgICAgdXNlcnM6IHtcbiAgICAgICAgY29ubmVjdDogeyBpZDogZGF0YS5jcmVhdGVkQnkgfVxuICAgICAgfSxcbiAgICAgIHdvcmtvdXRfdGVtcGxhdGVfZXhlcmNpc2VzOiB7XG4gICAgICAgIGNyZWF0ZTogZGF0YS5leGVyY2lzZXM/Lm1hcCgoZXhlcmNpc2U6IGFueSkgPT4gKHtcbiAgICAgICAgICBleGVyY2lzZUlkOiBleGVyY2lzZS5leGVyY2lzZUlkLFxuICAgICAgICAgIG9yZGVyOiBleGVyY2lzZS5vcmRlcixcbiAgICAgICAgICBzZXRzOiBleGVyY2lzZS5zZXRzLFxuICAgICAgICAgIHJlcHM6IGV4ZXJjaXNlLnJlcHMsXG4gICAgICAgICAgd2VpZ2h0OiBleGVyY2lzZS53ZWlnaHQsXG4gICAgICAgICAgcmVzdFRpbWU6IGV4ZXJjaXNlLnJlc3RUaW1lLFxuICAgICAgICAgIG5vdGVzOiBleGVyY2lzZS5ub3RlcyxcbiAgICAgICAgICBpc1N1cGVyc2V0OiBleGVyY2lzZS5pc1N1cGVyc2V0IHx8IGZhbHNlLFxuICAgICAgICAgIHN1cGVyc2V0R3JvdXA6IGV4ZXJjaXNlLnN1cGVyc2V0R3JvdXBcbiAgICAgICAgfSkpIHx8IFtdXG4gICAgICB9XG4gICAgfSxcbiAgICBpbmNsdWRlOiB7XG4gICAgICB3b3Jrb3V0X3RlbXBsYXRlX2V4ZXJjaXNlczogeyBpbmNsdWRlOiB7IGV4ZXJjaXNlczogdHJ1ZSB9IH1cbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFVwZGF0ZSB3b3Jrb3V0IHRlbXBsYXRlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVXb3Jrb3V0VGVtcGxhdGUoaWQ6IHN0cmluZywgZGF0YTogYW55KSB7XG4gIHJldHVybiBwcmlzbWEud29ya291dF90ZW1wbGF0ZXMudXBkYXRlKHtcbiAgICB3aGVyZTogeyBpZCB9LFxuICAgIGRhdGE6IHtcbiAgICAgIC4uLihkYXRhLm5hbWUgJiYgeyBuYW1lOiBkYXRhLm5hbWUgfSksXG4gICAgICAuLi4oZGF0YS5kZXNjcmlwdGlvbiAmJiB7IGRlc2NyaXB0aW9uOiBkYXRhLmRlc2NyaXB0aW9uIH0pLFxuICAgICAgLi4uKGRhdGEuY2F0ZWdvcnkgJiYgeyBjYXRlZ29yeTogZGF0YS5jYXRlZ29yeSB9KSxcbiAgICAgIC4uLihkYXRhLmRpZmZpY3VsdHkgJiYgeyBkaWZmaWN1bHR5OiBkYXRhLmRpZmZpY3VsdHkgfSksXG4gICAgICAuLi4oZGF0YS5kdXJhdGlvbiAmJiB7IGR1cmF0aW9uOiBkYXRhLmR1cmF0aW9uIH0pLFxuICAgICAgLi4uKGRhdGEuZXF1aXBtZW50ICYmIHsgZXF1aXBtZW50OiBkYXRhLmVxdWlwbWVudCB9KSxcbiAgICAgIC4uLihkYXRhLmlzUHVibGljICE9PSB1bmRlZmluZWQgJiYgeyBpc1B1YmxpYzogZGF0YS5pc1B1YmxpYyB9KSxcbiAgICAgIC4uLihkYXRhLnByaWNlICE9PSB1bmRlZmluZWQgJiYgeyBwcmljZTogZGF0YS5wcmljZSB9KSxcbiAgICAgIC4uLihkYXRhLnRhZ3MgJiYgeyB0YWdzOiBkYXRhLnRhZ3MgfSlcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIERlbGV0ZSB3b3Jrb3V0IHRlbXBsYXRlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVXb3Jrb3V0VGVtcGxhdGUoaWQ6IHN0cmluZykge1xuICByZXR1cm4gcHJpc21hLndvcmtvdXRfdGVtcGxhdGVzLnVwZGF0ZSh7XG4gICAgd2hlcmU6IHsgaWQgfSxcbiAgICBkYXRhOiB7IGlzQWN0aXZlOiBmYWxzZSB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCB1c2VyJ3MgdGVtcGxhdGVzXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRNeVRlbXBsYXRlcyh1c2VySWQ6IHN0cmluZykge1xuICByZXR1cm4gcHJpc21hLndvcmtvdXRfdGVtcGxhdGVzLmZpbmRNYW55KHtcbiAgICB3aGVyZTogeyBjcmVhdGVkQnk6IHVzZXJJZCwgaXNBY3RpdmU6IHRydWUgfSxcbiAgICBpbmNsdWRlOiB7XG4gICAgICB3b3Jrb3V0X3RlbXBsYXRlX2V4ZXJjaXNlczoge1xuICAgICAgICBpbmNsdWRlOiB7IGV4ZXJjaXNlczogdHJ1ZSB9LFxuICAgICAgICBvcmRlckJ5OiB7IG9yZGVyOiAnYXNjJyB9XG4gICAgICB9LFxuICAgICAgX2NvdW50OiB7XG4gICAgICAgIHNlbGVjdDogeyB0ZW1wbGF0ZV9yYXRpbmdzOiB0cnVlIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG9yZGVyQnk6IHsgY3JlYXRlZEF0OiAnZGVzYycgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZWFyY2ggd29ya291dCB0ZW1wbGF0ZXNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlYXJjaFdvcmtvdXRUZW1wbGF0ZXMocXVlcnk6IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pIHtcbiAgcmV0dXJuIHByaXNtYS53b3Jrb3V0X3RlbXBsYXRlcy5maW5kTWFueSh7XG4gICAgd2hlcmU6IHtcbiAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgICAgLi4uKG9wdGlvbnMucHVibGljT25seSAmJiB7IGlzUHVibGljOiB0cnVlIH0pLFxuICAgICAgT1I6IFtcbiAgICAgICAgeyBuYW1lOiB7IGNvbnRhaW5zOiBxdWVyeSwgbW9kZTogJ2luc2Vuc2l0aXZlJyB9IH0sXG4gICAgICAgIHsgZGVzY3JpcHRpb246IHsgY29udGFpbnM6IHF1ZXJ5LCBtb2RlOiAnaW5zZW5zaXRpdmUnIH0gfSxcbiAgICAgICAgeyB0YWdzOiB7IGhhczogcXVlcnkgfSB9XG4gICAgICBdXG4gICAgfSxcbiAgICBpbmNsdWRlOiB7XG4gICAgICB1c2Vyczoge1xuICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIG5hbWU6IHRydWUsIHRyYWluZXJWZXJpZmllZDogdHJ1ZSB9XG4gICAgICB9LFxuICAgICAgX2NvdW50OiB7XG4gICAgICAgIHNlbGVjdDogeyB0ZW1wbGF0ZV9yYXRpbmdzOiB0cnVlIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG9yZGVyQnk6IHsgcmF0aW5nOiAnZGVzYycgfSxcbiAgICB0YWtlOiBvcHRpb25zLmxpbWl0IHx8IDIwXG4gIH0pO1xufVxuXG4vKipcbiAqIFB1cmNoYXNlIHRlbXBsYXRlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwdXJjaGFzZVRlbXBsYXRlKHRlbXBsYXRlSWQ6IHN0cmluZywgdXNlcklkOiBzdHJpbmcpIHtcbiAgY29uc3QgdGVtcGxhdGUgPSBhd2FpdCBwcmlzbWEud29ya291dF90ZW1wbGF0ZXMuZmluZFVuaXF1ZSh7XG4gICAgd2hlcmU6IHsgaWQ6IHRlbXBsYXRlSWQgfSxcbiAgICBzZWxlY3Q6IHsgcHJpY2U6IHRydWUsIGN1cnJlbmN5OiB0cnVlIH1cbiAgfSk7XG5cbiAgaWYgKCF0ZW1wbGF0ZSkgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBub3QgZm91bmQnKTtcblxuICByZXR1cm4gcHJpc21hLiR0cmFuc2FjdGlvbihhc3luYyAodHgpID0+IHtcbiAgICBjb25zdCBwdXJjaGFzZSA9IGF3YWl0IHR4LnRlbXBsYXRlX3B1cmNoYXNlcy5jcmVhdGUoe1xuICAgICAgZGF0YToge1xuICAgICAgICBpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcbiAgICAgICAgdXNlcklkLFxuICAgICAgICB0ZW1wbGF0ZUlkLFxuICAgICAgICBwcmljZTogdGVtcGxhdGUucHJpY2UgfHwgMCxcbiAgICAgICAgY3VycmVuY3k6IHRlbXBsYXRlLmN1cnJlbmN5XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBhd2FpdCB0eC53b3Jrb3V0X3RlbXBsYXRlcy51cGRhdGUoe1xuICAgICAgd2hlcmU6IHsgaWQ6IHRlbXBsYXRlSWQgfSxcbiAgICAgIGRhdGE6IHsgcHVyY2hhc2VDb3VudDogeyBpbmNyZW1lbnQ6IDEgfSB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcHVyY2hhc2U7XG4gIH0pO1xufVxuXG4vKipcbiAqIFJhdGUgdGVtcGxhdGVcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJhdGVUZW1wbGF0ZSh0ZW1wbGF0ZUlkOiBzdHJpbmcsIHVzZXJJZDogc3RyaW5nLCBkYXRhOiBhbnkpIHtcbiAgcmV0dXJuIHByaXNtYS4kdHJhbnNhY3Rpb24oYXN5bmMgKHR4KSA9PiB7XG4gICAgY29uc3QgcmF0aW5nID0gYXdhaXQgdHgudGVtcGxhdGVfcmF0aW5ncy51cHNlcnQoe1xuICAgICAgd2hlcmU6IHsgdXNlcklkX3RlbXBsYXRlSWQ6IHsgdXNlcklkLCB0ZW1wbGF0ZUlkIH0gfSxcbiAgICAgIHVwZGF0ZTogeyByYXRpbmc6IGRhdGEucmF0aW5nLCByZXZpZXc6IGRhdGEucmV2aWV3IH0sXG4gICAgICBjcmVhdGU6IHtcbiAgICAgICAgaWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXG4gICAgICAgIHVzZXJJZCxcbiAgICAgICAgdGVtcGxhdGVJZCxcbiAgICAgICAgcmF0aW5nOiBkYXRhLnJhdGluZyxcbiAgICAgICAgcmV2aWV3OiBkYXRhLnJldmlld1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gUmVjYWxjdWxhdGUgYXZlcmFnZSByYXRpbmdcbiAgICBjb25zdCByYXRpbmdzID0gYXdhaXQgdHgudGVtcGxhdGVfcmF0aW5ncy5maW5kTWFueSh7XG4gICAgICB3aGVyZTogeyB0ZW1wbGF0ZUlkIH0sXG4gICAgICBzZWxlY3Q6IHsgcmF0aW5nOiB0cnVlIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IGF2Z1JhdGluZyA9IHJhdGluZ3MucmVkdWNlKChzdW0sIHIpID0+IHN1bSArIHIucmF0aW5nLCAwKSAvIHJhdGluZ3MubGVuZ3RoO1xuXG4gICAgYXdhaXQgdHgud29ya291dF90ZW1wbGF0ZXMudXBkYXRlKHtcbiAgICAgIHdoZXJlOiB7IGlkOiB0ZW1wbGF0ZUlkIH0sXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHJhdGluZzogYXZnUmF0aW5nLFxuICAgICAgICByYXRpbmdDb3VudDogcmF0aW5ncy5sZW5ndGhcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiByYXRpbmc7XG4gIH0pO1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBUUkFJTklORyBQUk9HUkFNIFFVRVJJRVNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLyoqXG4gKiBHZXQgdHJhaW5pbmcgcHJvZ3JhbXMgd2l0aCBmaWx0ZXJpbmdcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFRyYWluaW5nUHJvZ3JhbXMoZmlsdGVyczogYW55ID0ge30pIHtcbiAgY29uc3Qgd2hlcmU6IGFueSA9IHtcbiAgICBpc0FjdGl2ZTogdHJ1ZSxcbiAgfTtcblxuICBpZiAoZmlsdGVycy5wdWJsaWNPbmx5KSB7XG4gICAgd2hlcmUuaXNQdWJsaWMgPSB0cnVlO1xuICB9XG5cbiAgaWYgKGZpbHRlcnMuY2F0ZWdvcnkpIHtcbiAgICB3aGVyZS5jYXRlZ29yeSA9IGZpbHRlcnMuY2F0ZWdvcnk7XG4gIH1cblxuICBpZiAoZmlsdGVycy5kaWZmaWN1bHR5KSB7XG4gICAgd2hlcmUuZGlmZmljdWx0eSA9IGZpbHRlcnMuZGlmZmljdWx0eTtcbiAgfVxuXG4gIGlmIChmaWx0ZXJzLmR1cmF0aW9uKSB7XG4gICAgd2hlcmUuZHVyYXRpb24gPSBmaWx0ZXJzLmR1cmF0aW9uO1xuICB9XG5cbiAgaWYgKGZpbHRlcnMubWluUmF0aW5nKSB7XG4gICAgd2hlcmUucmF0aW5nID0geyBndGU6IGZpbHRlcnMubWluUmF0aW5nIH07XG4gIH1cblxuICBpZiAoZmlsdGVycy5wcmljZVJhbmdlKSB7XG4gICAgY29uc3QgW21pbiwgbWF4XSA9IGZpbHRlcnMucHJpY2VSYW5nZS5zcGxpdCgnLScpLm1hcChOdW1iZXIpO1xuICAgIHdoZXJlLnByaWNlID0geyBndGU6IG1pbiwgbHRlOiBtYXggfTtcbiAgfVxuXG4gIHJldHVybiBwcmlzbWEucHJvZ3JhbV90ZW1wbGF0ZXMuZmluZE1hbnkoe1xuICAgIHdoZXJlLFxuICAgIGluY2x1ZGU6IHtcbiAgICAgIHVzZXJzOiB7XG4gICAgICAgIHNlbGVjdDogeyBpZDogdHJ1ZSwgbmFtZTogdHJ1ZSwgdHJhaW5lclZlcmlmaWVkOiB0cnVlIH1cbiAgICAgIH0sXG4gICAgICBwcm9ncmFtX3dlZWtzOiB7IG9yZGVyQnk6IHsgd2Vla051bWJlcjogJ2FzYycgfSB9LFxuICAgICAgX2NvdW50OiB7XG4gICAgICAgIHNlbGVjdDogeyBwcm9ncmFtX3JhdGluZ3M6IHRydWUsIHByb2dyYW1fc3Vic2NyaXB0aW9uczogdHJ1ZSB9XG4gICAgICB9XG4gICAgfSxcbiAgICBvcmRlckJ5OiB7IHJhdGluZzogJ2Rlc2MnIH0sXG4gICAgdGFrZTogZmlsdGVycy5saW1pdCB8fCAyMFxuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdHJhaW5pbmcgcHJvZ3JhbSBieSBJRFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VHJhaW5pbmdQcm9ncmFtQnlJZChpZDogc3RyaW5nKSB7XG4gIHJldHVybiBwcmlzbWEucHJvZ3JhbV90ZW1wbGF0ZXMuZmluZFVuaXF1ZSh7XG4gICAgd2hlcmU6IHsgaWQgfSxcbiAgICBpbmNsdWRlOiB7XG4gICAgICB1c2Vyczoge1xuICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIG5hbWU6IHRydWUsIHRyYWluZXJWZXJpZmllZDogdHJ1ZSB9XG4gICAgICB9LFxuICAgICAgcHJvZ3JhbV93ZWVrczogeyBvcmRlckJ5OiB7IHdlZWtOdW1iZXI6ICdhc2MnIH0gfSxcbiAgICAgIHdvcmtvdXRfdGVtcGxhdGVzOiB7XG4gICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICB3b3Jrb3V0X3RlbXBsYXRlX2V4ZXJjaXNlczoge1xuICAgICAgICAgICAgaW5jbHVkZTogeyBleGVyY2lzZXM6IHRydWUgfSxcbiAgICAgICAgICAgIG9yZGVyQnk6IHsgb3JkZXI6ICdhc2MnIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwcm9ncmFtX3JhdGluZ3M6IHtcbiAgICAgICAgaW5jbHVkZTogeyB1c2VyczogeyBzZWxlY3Q6IHsgaWQ6IHRydWUsIG5hbWU6IHRydWUgfSB9IH0sXG4gICAgICAgIG9yZGVyQnk6IHsgY3JlYXRlZEF0OiAnZGVzYycgfSxcbiAgICAgICAgdGFrZTogMTBcbiAgICAgIH0sXG4gICAgICBfY291bnQ6IHtcbiAgICAgICAgc2VsZWN0OiB7IHByb2dyYW1fcmF0aW5nczogdHJ1ZSwgcHJvZ3JhbV9zdWJzY3JpcHRpb25zOiB0cnVlIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZSB0cmFpbmluZyBwcm9ncmFtXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVUcmFpbmluZ1Byb2dyYW0oZGF0YTogYW55KSB7XG4gIHJldHVybiBwcmlzbWEucHJvZ3JhbV90ZW1wbGF0ZXMuY3JlYXRlKHtcbiAgICBkYXRhOiB7XG4gICAgICBpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSwgLy8gQWRkIHRoaXMgbGluZVxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLCAgIC8vIEFkZCB0aGlzIGxpbmVcbiAgICAgIG5hbWU6IGRhdGEubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBkYXRhLmRlc2NyaXB0aW9uLFxuICAgICAgZHVyYXRpb246IGRhdGEuZHVyYXRpb24sXG4gICAgICBkaWZmaWN1bHR5OiBkYXRhLmRpZmZpY3VsdHkgfHwgJ0JFR0lOTkVSJyxcbiAgICAgIGNhdGVnb3J5OiBkYXRhLmNhdGVnb3J5LFxuICAgICAgaXNQdWJsaWM6IGRhdGEuaXNQdWJsaWMgfHwgZmFsc2UsXG4gICAgICBwcmljZTogZGF0YS5wcmljZSxcbiAgICAgIGN1cnJlbmN5OiBkYXRhLmN1cnJlbmN5IHx8ICdVU0QnLFxuICAgICAgdGFnczogZGF0YS50YWdzIHx8IFtdLFxuICAgICAgdXNlcnM6IHtcbiAgICAgICAgY29ubmVjdDogeyBpZDogZGF0YS5jcmVhdGVkQnkgfVxuICAgICAgfSxcbiAgICAgIHByb2dyYW1fd2Vla3M6IHtcbiAgICAgICAgY3JlYXRlOiBkYXRhLndlZWtzPy5tYXAoKHdlZWs6IGFueSkgPT4gKHtcbiAgICAgICAgICB3ZWVrTnVtYmVyOiB3ZWVrLndlZWtOdW1iZXIsXG4gICAgICAgICAgdGl0bGU6IHdlZWsudGl0bGUsXG4gICAgICAgICAgZGVzY3JpcHRpb246IHdlZWsuZGVzY3JpcHRpb24sXG4gICAgICAgICAgd29ya291dHM6IHdlZWsud29ya291dHNcbiAgICAgICAgfSkpIHx8IFtdXG4gICAgICB9XG4gICAgfSxcbiAgICBpbmNsdWRlOiB7XG4gICAgICBwcm9ncmFtX3dlZWtzOiB7IG9yZGVyQnk6IHsgd2Vla051bWJlcjogJ2FzYycgfSB9XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBVcGRhdGUgdHJhaW5pbmcgcHJvZ3JhbVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlVHJhaW5pbmdQcm9ncmFtKGlkOiBzdHJpbmcsIGRhdGE6IGFueSkge1xuICByZXR1cm4gcHJpc21hLnByb2dyYW1fdGVtcGxhdGVzLnVwZGF0ZSh7XG4gICAgd2hlcmU6IHsgaWQgfSxcbiAgICBkYXRhOiB7XG4gICAgICAuLi4oZGF0YS5uYW1lICYmIHsgbmFtZTogZGF0YS5uYW1lIH0pLFxuICAgICAgLi4uKGRhdGEuZGVzY3JpcHRpb24gJiYgeyBkZXNjcmlwdGlvbjogZGF0YS5kZXNjcmlwdGlvbiB9KSxcbiAgICAgIC4uLihkYXRhLmR1cmF0aW9uICYmIHsgZHVyYXRpb246IGRhdGEuZHVyYXRpb24gfSksXG4gICAgICAuLi4oZGF0YS5kaWZmaWN1bHR5ICYmIHsgZGlmZmljdWx0eTogZGF0YS5kaWZmaWN1bHR5IH0pLFxuICAgICAgLi4uKGRhdGEuY2F0ZWdvcnkgJiYgeyBjYXRlZ29yeTogZGF0YS5jYXRlZ29yeSB9KSxcbiAgICAgIC4uLihkYXRhLmlzUHVibGljICE9PSB1bmRlZmluZWQgJiYgeyBpc1B1YmxpYzogZGF0YS5pc1B1YmxpYyB9KSxcbiAgICAgIC4uLihkYXRhLnByaWNlICE9PSB1bmRlZmluZWQgJiYgeyBwcmljZTogZGF0YS5wcmljZSB9KSxcbiAgICAgIC4uLihkYXRhLnRhZ3MgJiYgeyB0YWdzOiBkYXRhLnRhZ3MgfSlcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIERlbGV0ZSB0cmFpbmluZyBwcm9ncmFtXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVUcmFpbmluZ1Byb2dyYW0oaWQ6IHN0cmluZykge1xuICByZXR1cm4gcHJpc21hLnByb2dyYW1fdGVtcGxhdGVzLnVwZGF0ZSh7XG4gICAgd2hlcmU6IHsgaWQgfSxcbiAgICBkYXRhOiB7IGlzQWN0aXZlOiBmYWxzZSB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCB1c2VyJ3MgcHJvZ3JhbXNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE15UHJvZ3JhbXModXNlcklkOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHByaXNtYS5wcm9ncmFtX3RlbXBsYXRlcy5maW5kTWFueSh7XG4gICAgd2hlcmU6IHsgY3JlYXRlZEJ5OiB1c2VySWQsIGlzQWN0aXZlOiB0cnVlIH0sXG4gICAgaW5jbHVkZToge1xuICAgICAgcHJvZ3JhbV93ZWVrczogeyBvcmRlckJ5OiB7IHdlZWtOdW1iZXI6ICdhc2MnIH0gfSxcbiAgICAgIF9jb3VudDoge1xuICAgICAgICBzZWxlY3Q6IHsgcHJvZ3JhbV9yYXRpbmdzOiB0cnVlLCBwcm9ncmFtX3N1YnNjcmlwdGlvbnM6IHRydWUgfVxuICAgICAgfVxuICAgIH0sXG4gICAgb3JkZXJCeTogeyBjcmVhdGVkQXQ6ICdkZXNjJyB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFNlYXJjaCB0cmFpbmluZyBwcm9ncmFtc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VhcmNoVHJhaW5pbmdQcm9ncmFtcyhxdWVyeTogc3RyaW5nLCBvcHRpb25zOiBhbnkgPSB7fSkge1xuICByZXR1cm4gcHJpc21hLnByb2dyYW1fdGVtcGxhdGVzLmZpbmRNYW55KHtcbiAgICB3aGVyZToge1xuICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICAuLi4ob3B0aW9ucy5wdWJsaWNPbmx5ICYmIHsgaXNQdWJsaWM6IHRydWUgfSksXG4gICAgICBPUjogW1xuICAgICAgICB7IG5hbWU6IHsgY29udGFpbnM6IHF1ZXJ5LCBtb2RlOiAnaW5zZW5zaXRpdmUnIH0gfSxcbiAgICAgICAgeyBkZXNjcmlwdGlvbjogeyBjb250YWluczogcXVlcnksIG1vZGU6ICdpbnNlbnNpdGl2ZScgfSB9LFxuICAgICAgICB7IHRhZ3M6IHsgaGFzOiBxdWVyeSB9IH1cbiAgICAgIF1cbiAgICB9LFxuICAgIGluY2x1ZGU6IHtcbiAgICAgIHVzZXJzOiB7XG4gICAgICAgIHNlbGVjdDogeyBpZDogdHJ1ZSwgbmFtZTogdHJ1ZSwgdHJhaW5lclZlcmlmaWVkOiB0cnVlIH1cbiAgICAgIH0sXG4gICAgICBfY291bnQ6IHtcbiAgICAgICAgc2VsZWN0OiB7IHByb2dyYW1fcmF0aW5nczogdHJ1ZSwgcHJvZ3JhbV9zdWJzY3JpcHRpb25zOiB0cnVlIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG9yZGVyQnk6IHsgcmF0aW5nOiAnZGVzYycgfSxcbiAgICB0YWtlOiBvcHRpb25zLmxpbWl0IHx8IDIwXG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCB1c2VyIHByb2dyYW0gc3Vic2NyaXB0aW9uc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VXNlclByb2dyYW1TdWJzY3JpcHRpb25zKHVzZXJJZDogc3RyaW5nKSB7XG4gIHJldHVybiBwcmlzbWEucHJvZ3JhbV9zdWJzY3JpcHRpb25zLmZpbmRNYW55KHtcbiAgICB3aGVyZTogeyB1c2VySWQsIGlzQWN0aXZlOiB0cnVlIH0sXG4gICAgaW5jbHVkZToge1xuICAgICAgcHJvZ3JhbV90ZW1wbGF0ZXM6IHtcbiAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgIHVzZXJzOiB7XG4gICAgICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIG5hbWU6IHRydWUsIHRyYWluZXJWZXJpZmllZDogdHJ1ZSB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwcm9ncmFtX3dlZWtzOiB7IG9yZGVyQnk6IHsgd2Vla051bWJlcjogJ2FzYycgfSB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG9yZGVyQnk6IHsgc3RhcnREYXRlOiAnZGVzYycgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBQdXJjaGFzZSBwcm9ncmFtXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwdXJjaGFzZVByb2dyYW0ocHJvZ3JhbUlkOiBzdHJpbmcsIHVzZXJJZDogc3RyaW5nKSB7XG4gIGNvbnN0IHByb2dyYW0gPSBhd2FpdCBwcmlzbWEucHJvZ3JhbV90ZW1wbGF0ZXMuZmluZFVuaXF1ZSh7XG4gICAgd2hlcmU6IHsgaWQ6IHByb2dyYW1JZCB9LFxuICAgIHNlbGVjdDogeyBwcmljZTogdHJ1ZSwgY3VycmVuY3k6IHRydWUgfVxuICB9KTtcblxuICBpZiAoIXByb2dyYW0pIHRocm93IG5ldyBFcnJvcignUHJvZ3JhbSBub3QgZm91bmQnKTtcblxuICByZXR1cm4gcHJpc21hLiR0cmFuc2FjdGlvbihhc3luYyAodHgpID0+IHtcbiAgICBjb25zdCBwdXJjaGFzZSA9IGF3YWl0IHR4LnByb2dyYW1fcHVyY2hhc2VzLmNyZWF0ZSh7XG4gICAgICBkYXRhOiB7XG4gICAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxuICAgICAgICB1c2VySWQsXG4gICAgICAgIHByb2dyYW1JZCxcbiAgICAgICAgcHJpY2U6IHByb2dyYW0ucHJpY2UgfHwgMCxcbiAgICAgICAgY3VycmVuY3k6IHByb2dyYW0uY3VycmVuY3lcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGF3YWl0IHR4LnByb2dyYW1fdGVtcGxhdGVzLnVwZGF0ZSh7XG4gICAgICB3aGVyZTogeyBpZDogcHJvZ3JhbUlkIH0sXG4gICAgICBkYXRhOiB7IHB1cmNoYXNlQ291bnQ6IHsgaW5jcmVtZW50OiAxIH0gfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHB1cmNoYXNlO1xuICB9KTtcbn1cblxuLyoqXG4gKiBTdWJzY3JpYmUgdG8gcHJvZ3JhbVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3Vic2NyaWJlVG9Qcm9ncmFtKHByb2dyYW1JZDogc3RyaW5nLCB1c2VySWQ6IHN0cmluZykge1xuICByZXR1cm4gcHJpc21hLnByb2dyYW1fc3Vic2NyaXB0aW9ucy5jcmVhdGUoe1xuICAgIGRhdGE6IHtcbiAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxuICAgICAgdXNlcklkLFxuICAgICAgcHJvZ3JhbUlkLFxuICAgICAgY3VycmVudFdlZWs6IDEsXG4gICAgICBjdXJyZW50RGF5OiAxLFxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBSYXRlIHByb2dyYW1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJhdGVQcm9ncmFtKHByb2dyYW1JZDogc3RyaW5nLCB1c2VySWQ6IHN0cmluZywgZGF0YTogYW55KSB7XG4gIHJldHVybiBwcmlzbWEuJHRyYW5zYWN0aW9uKGFzeW5jICh0eCkgPT4ge1xuICAgIGNvbnN0IHJhdGluZyA9IGF3YWl0IHR4LnByb2dyYW1fcmF0aW5ncy51cHNlcnQoe1xuICAgICAgd2hlcmU6IHsgdXNlcklkX3Byb2dyYW1JZDogeyB1c2VySWQsIHByb2dyYW1JZCB9IH0sXG4gICAgICB1cGRhdGU6IHsgcmF0aW5nOiBkYXRhLnJhdGluZywgcmV2aWV3OiBkYXRhLnJldmlldyB9LFxuICAgICAgY3JlYXRlOiB7XG4gICAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxuICAgICAgICB1c2VySWQsXG4gICAgICAgIHByb2dyYW1JZCxcbiAgICAgICAgcmF0aW5nOiBkYXRhLnJhdGluZyxcbiAgICAgICAgcmV2aWV3OiBkYXRhLnJldmlld1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gUmVjYWxjdWxhdGUgYXZlcmFnZSByYXRpbmdcbiAgICBjb25zdCByYXRpbmdzID0gYXdhaXQgdHgucHJvZ3JhbV9yYXRpbmdzLmZpbmRNYW55KHtcbiAgICAgIHdoZXJlOiB7IHByb2dyYW1JZCB9LFxuICAgICAgc2VsZWN0OiB7IHJhdGluZzogdHJ1ZSB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBhdmdSYXRpbmcgPSByYXRpbmdzLnJlZHVjZSgoc3VtLCByKSA9PiBzdW0gKyByLnJhdGluZywgMCkgLyByYXRpbmdzLmxlbmd0aDtcblxuICAgIGF3YWl0IHR4LnByb2dyYW1fdGVtcGxhdGVzLnVwZGF0ZSh7XG4gICAgICB3aGVyZTogeyBpZDogcHJvZ3JhbUlkIH0sXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHJhdGluZzogYXZnUmF0aW5nLFxuICAgICAgICByYXRpbmdDb3VudDogcmF0aW5ncy5sZW5ndGhcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiByYXRpbmc7XG4gIH0pO1xufVxuXG4vKipcbiAqIFVwZGF0ZSBwcm9ncmFtIHByb2dyZXNzXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVQcm9ncmFtUHJvZ3Jlc3MocHJvZ3JhbUlkOiBzdHJpbmcsIHVzZXJJZDogc3RyaW5nLCBkYXRhOiBhbnkpIHtcbiAgcmV0dXJuIHByaXNtYS5wcm9ncmFtX3N1YnNjcmlwdGlvbnMudXBkYXRlKHtcbiAgICB3aGVyZTogeyB1c2VySWRfcHJvZ3JhbUlkOiB7IHVzZXJJZCwgcHJvZ3JhbUlkIH0gfSxcbiAgICBkYXRhOiB7XG4gICAgICBjdXJyZW50V2VlazogZGF0YS5jdXJyZW50V2VlayxcbiAgICAgIGN1cnJlbnREYXk6IGRhdGEuY3VycmVudERheSxcbiAgICAgIHByb2dyZXNzRGF0YTogZGF0YS5wcm9ncmVzc0RhdGFcbiAgICB9XG4gIH0pO1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBBTkFMWVRJQ1MgJiBQUk9HUkVTUyBUUkFDS0lORyBRVUVSSUVTXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8qKlxuICogR2V0IHdvcmtvdXQgYW5hbHl0aWNzIGZvciBhIHVzZXJcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFdvcmtvdXRBbmFseXRpY3ModXNlcklkOiBzdHJpbmcsIG9wdGlvbnM6IHtcbiAgc3RhcnREYXRlPzogRGF0ZTtcbiAgZW5kRGF0ZT86IERhdGU7XG59ID0ge30pIHtcbiAgY29uc3Qgd2hlcmU6IGFueSA9IHsgdXNlcklkIH07XG5cbiAgaWYgKG9wdGlvbnMuc3RhcnREYXRlIHx8IG9wdGlvbnMuZW5kRGF0ZSkge1xuICAgIHdoZXJlLmRhdGUgPSB7fTtcbiAgICBpZiAob3B0aW9ucy5zdGFydERhdGUpIHdoZXJlLmRhdGUuZ3RlID0gb3B0aW9ucy5zdGFydERhdGU7XG4gICAgaWYgKG9wdGlvbnMuZW5kRGF0ZSkgd2hlcmUuZGF0ZS5sdGUgPSBvcHRpb25zLmVuZERhdGU7XG4gIH1cblxuICByZXR1cm4gcHJpc21hLndvcmtvdXRfYW5hbHl0aWNzLmZpbmRNYW55KHtcbiAgICB3aGVyZSxcbiAgICBvcmRlckJ5OiB7IGRhdGU6ICdkZXNjJyB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBwcm9ncmVzcyBtZXRyaWNzIGZvciBhIHVzZXJcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFByb2dyZXNzTWV0cmljcyh1c2VySWQ6IHN0cmluZywgb3B0aW9uczoge1xuICBtZXRyaWNUeXBlPzogc3RyaW5nO1xuICBzdGFydERhdGU/OiBEYXRlO1xuICBlbmREYXRlPzogRGF0ZTtcbn0gPSB7fSkge1xuICBjb25zdCB3aGVyZTogYW55ID0geyB1c2VySWQgfTtcblxuICBpZiAob3B0aW9ucy5tZXRyaWNUeXBlKSB7XG4gICAgd2hlcmUubWV0cmljVHlwZSA9IG9wdGlvbnMubWV0cmljVHlwZTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLnN0YXJ0RGF0ZSB8fCBvcHRpb25zLmVuZERhdGUpIHtcbiAgICB3aGVyZS5yZWNvcmRlZEF0ID0ge307XG4gICAgaWYgKG9wdGlvbnMuc3RhcnREYXRlKSB3aGVyZS5yZWNvcmRlZEF0Lmd0ZSA9IG9wdGlvbnMuc3RhcnREYXRlO1xuICAgIGlmIChvcHRpb25zLmVuZERhdGUpIHdoZXJlLnJlY29yZGVkQXQubHRlID0gb3B0aW9ucy5lbmREYXRlO1xuICB9XG5cbiAgcmV0dXJuIHByaXNtYS5wcm9ncmVzc19tZXRyaWNzLmZpbmRNYW55KHtcbiAgICB3aGVyZSxcbiAgICBvcmRlckJ5OiB7IHJlY29yZGVkQXQ6ICdkZXNjJyB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBwZXJzb25hbCByZWNvcmRzIGZvciBhIHVzZXJcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFBlcnNvbmFsUmVjb3Jkcyh1c2VySWQ6IHN0cmluZywgb3B0aW9uczoge1xuICBleGVyY2lzZUlkPzogc3RyaW5nO1xufSA9IHt9KSB7XG4gIGNvbnN0IHdoZXJlOiBhbnkgPSB7IHVzZXJJZCB9O1xuXG4gIGlmIChvcHRpb25zLmV4ZXJjaXNlSWQpIHtcbiAgICB3aGVyZS5leGVyY2lzZUlkID0gb3B0aW9ucy5leGVyY2lzZUlkO1xuICB9XG5cbiAgcmV0dXJuIHByaXNtYS5wZXJzb25hbF9yZWNvcmRzLmZpbmRNYW55KHtcbiAgICB3aGVyZSxcbiAgICBpbmNsdWRlOiB7XG4gICAgICBleGVyY2lzZXM6IHtcbiAgICAgICAgc2VsZWN0OiB7IGlkOiB0cnVlLCBuYW1lOiB0cnVlLCBjYXRlZ29yeTogdHJ1ZSB9XG4gICAgICB9XG4gICAgfSxcbiAgICBvcmRlckJ5OiB7IGFjaGlldmVkQXQ6ICdkZXNjJyB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEFkZCBwcm9ncmVzcyBtZXRyaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZFByb2dyZXNzTWV0cmljKGRhdGE6IHtcbiAgdXNlcklkOiBzdHJpbmc7XG4gIG1ldHJpY1R5cGU6IHN0cmluZztcbiAgdmFsdWU6IG51bWJlcjtcbiAgdW5pdD86IHN0cmluZztcbiAgYm9keVBhcnQ/OiBzdHJpbmc7XG4gIG5vdGVzPzogc3RyaW5nO1xuICBpbWFnZVVybD86IHN0cmluZztcbiAgcmVjb3JkZWRBdD86IERhdGU7XG59KSB7XG4gIHJldHVybiBwcmlzbWEucHJvZ3Jlc3NfbWV0cmljcy5jcmVhdGUoe1xuICAgIGRhdGE6IHtcbiAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxuICAgICAgdXNlcklkOiBkYXRhLnVzZXJJZCxcbiAgICAgIG1ldHJpY1R5cGU6IGRhdGEubWV0cmljVHlwZSxcbiAgICAgIHZhbHVlOiBkYXRhLnZhbHVlLFxuICAgICAgdW5pdDogZGF0YS51bml0ID8/IG51bGwsXG4gICAgICBib2R5UGFydDogZGF0YS5ib2R5UGFydCA/PyBudWxsLFxuICAgICAgbm90ZXM6IGRhdGEubm90ZXMgPz8gbnVsbCxcbiAgICAgIGltYWdlVXJsOiBkYXRhLmltYWdlVXJsID8/IG51bGwsXG4gICAgICByZWNvcmRlZEF0OiBkYXRhLnJlY29yZGVkQXQgfHwgbmV3IERhdGUoKVxuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQWRkIHBlcnNvbmFsIHJlY29yZFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkUGVyc29uYWxSZWNvcmQoZGF0YToge1xuICB1c2VySWQ6IHN0cmluZztcbiAgZXhlcmNpc2VJZDogc3RyaW5nO1xuICByZWNvcmRUeXBlOiBzdHJpbmc7XG4gIHZhbHVlOiBudW1iZXI7XG4gIHVuaXQ6IHN0cmluZztcbiAgcmVwcz86IG51bWJlcjtcbiAgbm90ZXM/OiBzdHJpbmc7XG4gIGFjaGlldmVkQXQ/OiBEYXRlO1xufSkge1xuICByZXR1cm4gcHJpc21hLnBlcnNvbmFsX3JlY29yZHMuY3JlYXRlKHtcbiAgICBkYXRhOiB7XG4gICAgICBpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcbiAgICAgIHVzZXJJZDogZGF0YS51c2VySWQsXG4gICAgICBleGVyY2lzZUlkOiBkYXRhLmV4ZXJjaXNlSWQsXG4gICAgICByZWNvcmRUeXBlOiBkYXRhLnJlY29yZFR5cGUsXG4gICAgICB2YWx1ZTogZGF0YS52YWx1ZSxcbiAgICAgIHVuaXQ6IGRhdGEudW5pdCxcbiAgICAgIHJlcHM6IGRhdGEucmVwcyA/PyBudWxsLFxuICAgICAgbm90ZXM6IGRhdGEubm90ZXMgPz8gbnVsbCxcbiAgICAgIGFjaGlldmVkQXQ6IGRhdGEuYWNoaWV2ZWRBdCB8fCBuZXcgRGF0ZSgpXG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSB3b3Jrb3V0IGFuYWx5dGljcyBmb3IgYSB1c2VyXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVdvcmtvdXRBbmFseXRpY3ModXNlcklkOiBzdHJpbmcpIHtcbiAgLy8gR2V0IGxhc3QgMzAgZGF5cyBvZiB3b3Jrb3V0IGRhdGFcbiAgY29uc3QgZW5kRGF0ZSA9IG5ldyBEYXRlKCk7XG4gIGNvbnN0IHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKCk7XG4gIHN0YXJ0RGF0ZS5zZXREYXRlKHN0YXJ0RGF0ZS5nZXREYXRlKCkgLSAzMCk7XG5cbiAgY29uc3Qgd29ya291dExvZ3MgPSBhd2FpdCBwcmlzbWEud29ya291dF9sb2dfZW50cmllcy5maW5kTWFueSh7XG4gICAgd2hlcmU6IHtcbiAgICAgIHVzZXJJZCxcbiAgICAgIGRhdGU6IHsgZ3RlOiBzdGFydERhdGUsIGx0ZTogZW5kRGF0ZSB9XG4gICAgfSxcbiAgICBpbmNsdWRlOiB7XG4gICAgICBleGVyY2lzZXM6IHRydWVcbiAgICB9XG4gIH0pO1xuXG4gIC8vIEdyb3VwIGJ5IGRhdGUgYW5kIGNhbGN1bGF0ZSBkYWlseSBzdGF0c1xuICBjb25zdCBkYWlseVN0YXRzID0gd29ya291dExvZ3MucmVkdWNlKChhY2MsIGxvZykgPT4ge1xuICAgIGNvbnN0IGRhdGVLZXkgPSBsb2cuZGF0ZS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF07XG5cbiAgICBpZiAoIWRhdGVLZXkpIHJldHVybiBhY2M7XG5cbiAgICBpZiAoIWFjY1tkYXRlS2V5XSkge1xuICAgICAgYWNjW2RhdGVLZXldID0ge1xuICAgICAgICBkYXRlOiBsb2cuZGF0ZSxcbiAgICAgICAgdG90YWxWb2x1bWU6IDAsXG4gICAgICAgIHRvdGFsU2V0czogMCxcbiAgICAgICAgdG90YWxSZXBzOiAwLFxuICAgICAgICBtdXNjbGVHcm91cHM6IG5ldyBTZXQoKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBhY2NbZGF0ZUtleV0udG90YWxWb2x1bWUgKz0gbG9nLnRyYWluaW5nVm9sdW1lIHx8IDA7XG4gICAgYWNjW2RhdGVLZXldLnRvdGFsU2V0cyArPSAxO1xuICAgIGFjY1tkYXRlS2V5XS50b3RhbFJlcHMgKz0gbG9nLnJlcHM7XG4gICAgbG9nLmV4ZXJjaXNlcy5tdXNjbGVHcm91cHMuZm9yRWFjaCgobWc6IHN0cmluZykgPT4gYWNjW2RhdGVLZXldPy5tdXNjbGVHcm91cHMuYWRkKG1nKSk7XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSBhcyBhbnkpO1xuXG4gIC8vIENyZWF0ZSBvciB1cGRhdGUgYW5hbHl0aWNzIHJlY29yZHNcbiAgY29uc3QgYW5hbHl0aWNzUHJvbWlzZXMgPSBPYmplY3QuZW50cmllcyhkYWlseVN0YXRzKS5tYXAoKFtkYXRlS2V5LCBzdGF0c106IFtzdHJpbmcsIGFueV0pID0+IHtcbiAgICBjb25zdCB0b3BNdXNjbGVHcm91cCA9IEFycmF5LmZyb20oc3RhdHMubXVzY2xlR3JvdXBzKS5sZW5ndGggPiAwXG4gICAgICA/IEFycmF5LmZyb20oc3RhdHMubXVzY2xlR3JvdXBzKVswXSBhcyBzdHJpbmdcbiAgICAgIDogbnVsbDtcblxuICAgIHJldHVybiBwcmlzbWEud29ya291dF9hbmFseXRpY3MudXBzZXJ0KHtcbiAgICAgIHdoZXJlOiB7IHVzZXJJZF9kYXRlOiB7IHVzZXJJZCwgZGF0ZTogbmV3IERhdGUoZGF0ZUtleSkgfSB9LFxuICAgICAgdXBkYXRlOiB7XG4gICAgICAgIHRvdGFsV29ya291dHM6IDEsXG4gICAgICAgIHRvdGFsVm9sdW1lOiBzdGF0cy50b3RhbFZvbHVtZSxcbiAgICAgICAgdG90YWxTZXRzOiBzdGF0cy50b3RhbFNldHMsXG4gICAgICAgIHRvdGFsUmVwczogc3RhdHMudG90YWxSZXBzLFxuICAgICAgICB0b3BNdXNjbGVHcm91cCxcbiAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAgICB9LFxuICAgICAgY3JlYXRlOiB7XG4gICAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxuICAgICAgICB1c2VySWQsXG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKGRhdGVLZXkpLFxuICAgICAgICB0b3RhbFdvcmtvdXRzOiAxLFxuICAgICAgICB0b3RhbFZvbHVtZTogc3RhdHMudG90YWxWb2x1bWUsXG4gICAgICAgIHRvdGFsU2V0czogc3RhdHMudG90YWxTZXRzLFxuICAgICAgICB0b3RhbFJlcHM6IHN0YXRzLnRvdGFsUmVwcyxcbiAgICAgICAgdG9wTXVzY2xlR3JvdXAsXG4gICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gUHJvbWlzZS5hbGwoYW5hbHl0aWNzUHJvbWlzZXMpO1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBNQVJLRVRQTEFDRSBRVUVSSUVTXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8qKlxuICogR2V0IG1hcmtldHBsYWNlIHRlbXBsYXRlc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TWFya2V0cGxhY2VUZW1wbGF0ZXMoZmlsdGVyczogYW55ID0ge30pIHtcbiAgcmV0dXJuIGdldFdvcmtvdXRUZW1wbGF0ZXMoeyAuLi5maWx0ZXJzLCBwdWJsaWNPbmx5OiB0cnVlIH0pO1xufVxuXG4vKipcbiAqIEdldCBtYXJrZXRwbGFjZSBwcm9ncmFtc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TWFya2V0cGxhY2VQcm9ncmFtcyhmaWx0ZXJzOiBhbnkgPSB7fSkge1xuICByZXR1cm4gZ2V0VHJhaW5pbmdQcm9ncmFtcyh7IC4uLmZpbHRlcnMsIHB1YmxpY09ubHk6IHRydWUgfSk7XG59XG5cbi8qKlxuICogR2V0IGZlYXR1cmVkIGNvbnRlbnRcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEZlYXR1cmVkQ29udGVudCgpIHtcbiAgY29uc3QgW3RlbXBsYXRlcywgcHJvZ3JhbXNdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgIHByaXNtYS53b3Jrb3V0X3RlbXBsYXRlcy5maW5kTWFueSh7XG4gICAgICB3aGVyZTogeyBpc1B1YmxpYzogdHJ1ZSwgaXNBY3RpdmU6IHRydWUsIHJhdGluZzogeyBndGU6IDQuNSB9IH0sXG4gICAgICBpbmNsdWRlOiB7XG4gICAgICAgIHVzZXJzOiB7XG4gICAgICAgICAgc2VsZWN0OiB7IGlkOiB0cnVlLCBuYW1lOiB0cnVlLCB0cmFpbmVyVmVyaWZpZWQ6IHRydWUgfVxuICAgICAgICB9LFxuICAgICAgICBfY291bnQ6IHtcbiAgICAgICAgICBzZWxlY3Q6IHsgdGVtcGxhdGVfcmF0aW5nczogdHJ1ZSB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvcmRlckJ5OiB7IHJhdGluZzogJ2Rlc2MnIH0sXG4gICAgICB0YWtlOiA2XG4gICAgfSksXG4gICAgcHJpc21hLnByb2dyYW1fdGVtcGxhdGVzLmZpbmRNYW55KHtcbiAgICAgIHdoZXJlOiB7IGlzUHVibGljOiB0cnVlLCBpc0FjdGl2ZTogdHJ1ZSwgcmF0aW5nOiB7IGd0ZTogNC41IH0gfSxcbiAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgdXNlcnM6IHtcbiAgICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIG5hbWU6IHRydWUsIHRyYWluZXJWZXJpZmllZDogdHJ1ZSB9XG4gICAgICAgIH0sXG4gICAgICAgIF9jb3VudDoge1xuICAgICAgICAgIHNlbGVjdDogeyBwcm9ncmFtX3JhdGluZ3M6IHRydWUsIHByb2dyYW1fc3Vic2NyaXB0aW9uczogdHJ1ZSB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvcmRlckJ5OiB7IHJhdGluZzogJ2Rlc2MnIH0sXG4gICAgICB0YWtlOiA2XG4gICAgfSlcbiAgXSk7XG5cbiAgcmV0dXJuIHsgdGVtcGxhdGVzLCBwcm9ncmFtcyB9O1xufVxuXG4vKipcbiAqIEdldCB0b3AgcmF0ZWQgY29udGVudFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VG9wUmF0ZWRDb250ZW50KCkge1xuICBjb25zdCBbdGVtcGxhdGVzLCBwcm9ncmFtc10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgcHJpc21hLndvcmtvdXRfdGVtcGxhdGVzLmZpbmRNYW55KHtcbiAgICAgIHdoZXJlOiB7IGlzUHVibGljOiB0cnVlLCBpc0FjdGl2ZTogdHJ1ZSwgcmF0aW5nQ291bnQ6IHsgZ3RlOiA1IH0gfSxcbiAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgdXNlcnM6IHtcbiAgICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIG5hbWU6IHRydWUsIHRyYWluZXJWZXJpZmllZDogdHJ1ZSB9XG4gICAgICAgIH0sXG4gICAgICAgIF9jb3VudDoge1xuICAgICAgICAgIHNlbGVjdDogeyB0ZW1wbGF0ZV9yYXRpbmdzOiB0cnVlIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9yZGVyQnk6IFt7IHJhdGluZzogJ2Rlc2MnIH0sIHsgcmF0aW5nQ291bnQ6ICdkZXNjJyB9XSxcbiAgICAgIHRha2U6IDEwXG4gICAgfSksXG4gICAgcHJpc21hLnByb2dyYW1fdGVtcGxhdGVzLmZpbmRNYW55KHtcbiAgICAgIHdoZXJlOiB7IGlzUHVibGljOiB0cnVlLCBpc0FjdGl2ZTogdHJ1ZSwgcmF0aW5nQ291bnQ6IHsgZ3RlOiA1IH0gfSxcbiAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgdXNlcnM6IHtcbiAgICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIG5hbWU6IHRydWUsIHRyYWluZXJWZXJpZmllZDogdHJ1ZSB9XG4gICAgICAgIH0sXG4gICAgICAgIF9jb3VudDoge1xuICAgICAgICAgIHNlbGVjdDogeyBwcm9ncmFtX3JhdGluZ3M6IHRydWUsIHByb2dyYW1fc3Vic2NyaXB0aW9uczogdHJ1ZSB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvcmRlckJ5OiBbeyByYXRpbmc6ICdkZXNjJyB9LCB7IHJhdGluZ0NvdW50OiAnZGVzYycgfV0sXG4gICAgICB0YWtlOiAxMFxuICAgIH0pXG4gIF0pO1xuXG4gIHJldHVybiB7IHRlbXBsYXRlcywgcHJvZ3JhbXMgfTtcbn1cblxuLyoqXG4gKiBHZXQgcG9wdWxhciBjb250ZW50XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRQb3B1bGFyQ29udGVudCgpIHtcbiAgY29uc3QgW3RlbXBsYXRlcywgcHJvZ3JhbXNdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgIHByaXNtYS53b3Jrb3V0X3RlbXBsYXRlcy5maW5kTWFueSh7XG4gICAgICB3aGVyZTogeyBpc1B1YmxpYzogdHJ1ZSwgaXNBY3RpdmU6IHRydWUgfSxcbiAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgdXNlcnM6IHtcbiAgICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIG5hbWU6IHRydWUsIHRyYWluZXJWZXJpZmllZDogdHJ1ZSB9XG4gICAgICAgIH0sXG4gICAgICAgIF9jb3VudDoge1xuICAgICAgICAgIHNlbGVjdDogeyB0ZW1wbGF0ZV9yYXRpbmdzOiB0cnVlIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9yZGVyQnk6IHsgcHVyY2hhc2VDb3VudDogJ2Rlc2MnIH0sXG4gICAgICB0YWtlOiAxMFxuICAgIH0pLFxuICAgIHByaXNtYS5wcm9ncmFtX3RlbXBsYXRlcy5maW5kTWFueSh7XG4gICAgICB3aGVyZTogeyBpc1B1YmxpYzogdHJ1ZSwgaXNBY3RpdmU6IHRydWUgfSxcbiAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgdXNlcnM6IHtcbiAgICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIG5hbWU6IHRydWUsIHRyYWluZXJWZXJpZmllZDogdHJ1ZSB9XG4gICAgICAgIH0sXG4gICAgICAgIF9jb3VudDoge1xuICAgICAgICAgIHNlbGVjdDogeyBwcm9ncmFtX3JhdGluZ3M6IHRydWUsIHByb2dyYW1fc3Vic2NyaXB0aW9uczogdHJ1ZSB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvcmRlckJ5OiB7IHB1cmNoYXNlQ291bnQ6ICdkZXNjJyB9LFxuICAgICAgdGFrZTogMTBcbiAgICB9KVxuICBdKTtcblxuICByZXR1cm4geyB0ZW1wbGF0ZXMsIHByb2dyYW1zIH07XG59XG5cbi8qKlxuICogR2V0IHJlY29tbWVuZGVkIGNvbnRlbnQgZm9yIGEgdXNlclxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UmVjb21tZW5kZWRDb250ZW50KHVzZXJJZD86IHN0cmluZykge1xuICBpZiAoIXVzZXJJZCkge1xuICAgIC8vIFJldHVybiBwb3B1bGFyIGNvbnRlbnQgZm9yIGFub255bW91cyB1c2Vyc1xuICAgIHJldHVybiBnZXRQb3B1bGFyQ29udGVudCgpO1xuICB9XG5cbiAgLy8gR2V0IHVzZXIncyBwcmVmZXJlbmNlcyBhbmQgcGFzdCBwdXJjaGFzZXNcbiAgY29uc3QgdXNlciA9IGF3YWl0IHByaXNtYS51c2Vycy5maW5kVW5pcXVlKHtcbiAgICB3aGVyZTogeyBpZDogdXNlcklkIH0sXG4gICAgc2VsZWN0OiB7XG4gICAgICBmaXRuZXNzR29hbHM6IHRydWUsXG4gICAgICBleHBlcmllbmNlTGV2ZWw6IHRydWUsXG4gICAgICBwcmVmZXJyZWRXb3Jrb3V0VHlwZXM6IHRydWUsXG4gICAgICB0ZW1wbGF0ZV9wdXJjaGFzZXM6IHtcbiAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgIHdvcmtvdXRfdGVtcGxhdGVzOiB7XG4gICAgICAgICAgICBzZWxlY3Q6IHsgY2F0ZWdvcnk6IHRydWUsIGRpZmZpY3VsdHk6IHRydWUsIHRhZ3M6IHRydWUgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHByb2dyYW1fcHVyY2hhc2VzOiB7XG4gICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICBwcm9ncmFtX3RlbXBsYXRlczoge1xuICAgICAgICAgICAgc2VsZWN0OiB7IGNhdGVnb3J5OiB0cnVlLCBkaWZmaWN1bHR5OiB0cnVlLCB0YWdzOiB0cnVlIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGlmICghdXNlcikge1xuICAgIHJldHVybiBnZXRQb3B1bGFyQ29udGVudCgpO1xuICB9XG5cbiAgLy8gRXh0cmFjdCB1c2VyIHByZWZlcmVuY2VzIGZvciByZWNvbW1lbmRhdGlvbnNcbiAgY29uc3QgdXNlckNhdGVnb3JpZXMgPSBbXG4gICAgLi4udXNlci50ZW1wbGF0ZV9wdXJjaGFzZXMubWFwKChwOiBhbnkpID0+IHAud29ya291dF90ZW1wbGF0ZXMuY2F0ZWdvcnkpLFxuICAgIC4uLnVzZXIucHJvZ3JhbV9wdXJjaGFzZXMubWFwKChwOiBhbnkpID0+IHAucHJvZ3JhbV90ZW1wbGF0ZXMuY2F0ZWdvcnkpXG4gIF0uZmlsdGVyKEJvb2xlYW4pIGFzIHN0cmluZ1tdO1xuXG4gIGNvbnN0IHVzZXJUYWdzID0gW1xuICAgIC4uLnVzZXIudGVtcGxhdGVfcHVyY2hhc2VzLmZsYXRNYXAoKHA6IGFueSkgPT4gcC53b3Jrb3V0X3RlbXBsYXRlcy50YWdzKSxcbiAgICAuLi51c2VyLnByb2dyYW1fcHVyY2hhc2VzLmZsYXRNYXAoKHA6IGFueSkgPT4gcC5wcm9ncmFtX3RlbXBsYXRlcy50YWdzKSxcbiAgICAuLi51c2VyLmZpdG5lc3NHb2FscyxcbiAgICAuLi51c2VyLnByZWZlcnJlZFdvcmtvdXRUeXBlc1xuICBdLmZpbHRlcihCb29sZWFuKSBhcyBzdHJpbmdbXTtcblxuICBjb25zdCBbdGVtcGxhdGVzLCBwcm9ncmFtc10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgcHJpc21hLndvcmtvdXRfdGVtcGxhdGVzLmZpbmRNYW55KHtcbiAgICAgIHdoZXJlOiB7XG4gICAgICAgIGlzUHVibGljOiB0cnVlLFxuICAgICAgICBpc0FjdGl2ZTogdHJ1ZSxcbiAgICAgICAgT1I6IFtcbiAgICAgICAgICB7IGNhdGVnb3J5OiB7IGluOiB1c2VyQ2F0ZWdvcmllcyB9IH0sXG4gICAgICAgICAgeyBkaWZmaWN1bHR5OiB1c2VyLmV4cGVyaWVuY2VMZXZlbCB9LFxuICAgICAgICAgIHsgdGFnczogeyBoYXNTb21lOiB1c2VyVGFncyB9IH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgdXNlcnM6IHtcbiAgICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIG5hbWU6IHRydWUsIHRyYWluZXJWZXJpZmllZDogdHJ1ZSB9XG4gICAgICAgIH0sXG4gICAgICAgIF9jb3VudDoge1xuICAgICAgICAgIHNlbGVjdDogeyB0ZW1wbGF0ZV9yYXRpbmdzOiB0cnVlIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9yZGVyQnk6IHsgcmF0aW5nOiAnZGVzYycgfSxcbiAgICAgIHRha2U6IDEwXG4gICAgfSksXG4gICAgcHJpc21hLnByb2dyYW1fdGVtcGxhdGVzLmZpbmRNYW55KHtcbiAgICAgIHdoZXJlOiB7XG4gICAgICAgIGlzUHVibGljOiB0cnVlLFxuICAgICAgICBpc0FjdGl2ZTogdHJ1ZSxcbiAgICAgICAgT1I6IFtcbiAgICAgICAgICB7IGNhdGVnb3J5OiB7IGluOiB1c2VyQ2F0ZWdvcmllcyB9IH0sXG4gICAgICAgICAgeyBkaWZmaWN1bHR5OiB1c2VyLmV4cGVyaWVuY2VMZXZlbCB9LFxuICAgICAgICAgIHsgdGFnczogeyBoYXNTb21lOiB1c2VyVGFncyB9IH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgdXNlcnM6IHtcbiAgICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIG5hbWU6IHRydWUsIHRyYWluZXJWZXJpZmllZDogdHJ1ZSB9XG4gICAgICAgIH0sXG4gICAgICAgIF9jb3VudDoge1xuICAgICAgICAgIHNlbGVjdDogeyBwcm9ncmFtX3JhdGluZ3M6IHRydWUsIHByb2dyYW1fc3Vic2NyaXB0aW9uczogdHJ1ZSB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvcmRlckJ5OiB7IHJhdGluZzogJ2Rlc2MnIH0sXG4gICAgICB0YWtlOiAxMFxuICAgIH0pXG4gIF0pO1xuXG4gIHJldHVybiB7IHRlbXBsYXRlcywgcHJvZ3JhbXMgfTtcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gQVNTRVNTTUVOVCBJTlRFR1JBVElPTiBRVUVSSUVTXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmludGVyZmFjZSBBc3Nlc3NtZW50RGF0YSB7XG4gIGZpdG5lc3NfbGV2ZWw6IHN0cmluZztcbiAgcHJpbWFyeV9nb2FsOiBzdHJpbmc7XG4gIG1vdmVtZW50X2xpbWl0YXRpb25zOiBzdHJpbmdbXTtcbiAgZXhwZXJpZW5jZV95ZWFyczogbnVtYmVyO1xufVxuXG4vLyBMaW5rIHdvcmtvdXQgc2Vzc2lvbiB0byBhc3Nlc3NtZW50XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbGlua19zZXNzaW9uX3RvX2Fzc2Vzc21lbnQoXG4gIHNlc3Npb25faWQ6IHN0cmluZyxcbiAgYXNzZXNzbWVudF9pZDogc3RyaW5nXG4pIHtcbiAgY29uc3QgYXNzZXNzbWVudCA9IGF3YWl0IHByaXNtYS5hc3Nlc3NtZW50cy5maW5kVW5pcXVlKHtcbiAgICB3aGVyZTogeyBpZDogYXNzZXNzbWVudF9pZCB9XG4gIH0pO1xuXG4gIGlmICghYXNzZXNzbWVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQXNzZXNzbWVudCBub3QgZm91bmQnKTtcbiAgfVxuXG4gIC8vIEV4dHJhY3QgZml0bmVzcyBsZXZlbCBhbmQgZ29hbHMgZnJvbSBhc3Nlc3NtZW50XG4gIGNvbnN0IGFzc2Vzc21lbnRfZGF0YTogQXNzZXNzbWVudERhdGEgPSB7XG4gICAgZml0bmVzc19sZXZlbDogZGV0ZXJtaW5lX2ZpdG5lc3NfbGV2ZWwoYXNzZXNzbWVudCksXG4gICAgcHJpbWFyeV9nb2FsOiBhc3Nlc3NtZW50LnByaW1hcnlHb2FsIHx8ICdHRU5FUkFMX0ZJVE5FU1MnLFxuICAgIG1vdmVtZW50X2xpbWl0YXRpb25zOiBhc3Nlc3NtZW50LmxpbWl0YXRpb25zIHx8IFtdLFxuICAgIGV4cGVyaWVuY2VfeWVhcnM6IGFzc2Vzc21lbnQuZXhwZXJpZW5jZVllYXJzIHx8IDBcbiAgfTtcblxuICByZXR1cm4gcHJpc21hLndvcmtvdXRfc2Vzc2lvbnMudXBkYXRlKHtcbiAgICB3aGVyZTogeyBpZDogc2Vzc2lvbl9pZCB9LFxuICAgIGRhdGE6IHtcbiAgICAgIGFzc2Vzc21lbnRJZDogYXNzZXNzbWVudF9pZCxcbiAgICAgIGZpdG5lc3NMZXZlbDogYXNzZXNzbWVudF9kYXRhLmZpdG5lc3NfbGV2ZWwsXG4gICAgICBwcmltYXJ5R29hbDogYXNzZXNzbWVudF9kYXRhLnByaW1hcnlfZ29hbCxcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxuICAgIH1cbiAgfSk7XG59XG5cbi8vIERldGVybWluZSBmaXRuZXNzIGxldmVsIGZyb20gYXNzZXNzbWVudCBzY29yZXNcbmZ1bmN0aW9uIGRldGVybWluZV9maXRuZXNzX2xldmVsKGFzc2Vzc21lbnQ6IGFueSk6IHN0cmluZyB7XG4gIC8vIEFuYWx5c2UgYXNzZXNzbWVudCBtZXRyaWNzXG4gIGNvbnN0IHNxdWF0X3Njb3JlID0gYXNzZXNzbWVudC5zcXVhdFNjb3JlIHx8IDA7XG4gIGNvbnN0IHB1c2hfc2NvcmUgPSBhc3Nlc3NtZW50LnB1c2hTY29yZSB8fCAwO1xuICBjb25zdCBwdWxsX3Njb3JlID0gYXNzZXNzbWVudC5wdWxsU2NvcmUgfHwgMDtcblxuICBjb25zdCBhdmVyYWdlX3Njb3JlID0gKHNxdWF0X3Njb3JlICsgcHVzaF9zY29yZSArIHB1bGxfc2NvcmUpIC8gMztcblxuICBpZiAoYXZlcmFnZV9zY29yZSA+PSA4KSByZXR1cm4gJ0FEVkFOQ0VEJztcbiAgaWYgKGF2ZXJhZ2Vfc2NvcmUgPj0gNSkgcmV0dXJuICdJTlRFUk1FRElBVEUnO1xuICByZXR1cm4gJ0JFR0lOTkVSJztcbn1cblxuLy8gR2V0IHdvcmtvdXQgcmVjb21tZW5kYXRpb25zIGJhc2VkIG9uIGFzc2Vzc21lbnRcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRfYXNzZXNzbWVudF9iYXNlZF9yZWNvbW1lbmRhdGlvbnMoXG4gIHVzZXJfaWQ6IHN0cmluZ1xuKSB7XG4gIC8vIEdldCBtb3N0IHJlY2VudCBhc3Nlc3NtZW50XG4gIGNvbnN0IGxhdGVzdF9hc3Nlc3NtZW50ID0gYXdhaXQgcHJpc21hLmFzc2Vzc21lbnRzLmZpbmRGaXJzdCh7XG4gICAgd2hlcmU6IHsgY2xpZW50SWQ6IHVzZXJfaWQgfSxcbiAgICBvcmRlckJ5OiB7IGNyZWF0ZWRBdDogJ2Rlc2MnIH1cbiAgfSk7XG5cbiAgaWYgKCFsYXRlc3RfYXNzZXNzbWVudCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgZml0bmVzc19sZXZlbCA9IGRldGVybWluZV9maXRuZXNzX2xldmVsKGxhdGVzdF9hc3Nlc3NtZW50KTtcblxuICAvLyBHZXQgZXhlcmNpc2UgcmVjb21tZW5kYXRpb25zXG4gIGNvbnN0IGV4ZXJjaXNlX3JlY29tbWVuZGF0aW9ucyA9IGdldF9leGVyY2lzZV9yZWNvbW1lbmRhdGlvbnMoXG4gICAgZml0bmVzc19sZXZlbCxcbiAgICBsYXRlc3RfYXNzZXNzbWVudC5wcmltYXJ5R29hbCB8fCAnR0VORVJBTF9GSVRORVNTJyxcbiAgICAnU1FVQVQnIC8vIEV4YW1wbGUgcGF0dGVyblxuICApO1xuXG4gIHJldHVybiB7XG4gICAgZml0bmVzc19sZXZlbCxcbiAgICByZWNvbW1lbmRlZF92b2x1bWU6IGNhbGN1bGF0ZV9yZWNvbW1lbmRlZF92b2x1bWUoZml0bmVzc19sZXZlbCksXG4gICAgcmVjb21tZW5kZWRfZnJlcXVlbmN5OiBjYWxjdWxhdGVfcmVjb21tZW5kZWRfZnJlcXVlbmN5KGZpdG5lc3NfbGV2ZWwpLFxuICAgIHRyYWluaW5nX3BoYXNlOiBleGVyY2lzZV9yZWNvbW1lbmRhdGlvbnMucHJvZ3Jlc3Npb25fbGV2ZWwsXG4gICAgY29hY2hpbmdfY3VlczogZXhlcmNpc2VfcmVjb21tZW5kYXRpb25zLmNvYWNoaW5nX2N1ZXNcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlX3JlY29tbWVuZGVkX3ZvbHVtZShmaXRuZXNzX2xldmVsOiBzdHJpbmcpOiBudW1iZXIge1xuICBjb25zdCB2b2x1bWVfbWFwID0ge1xuICAgIEJFR0lOTkVSOiAxMCwgLy8gMTAgc2V0cyBwZXIgc2Vzc2lvblxuICAgIElOVEVSTUVESUFURTogMTUsXG4gICAgQURWQU5DRUQ6IDIwXG4gIH07XG4gIHJldHVybiB2b2x1bWVfbWFwW2ZpdG5lc3NfbGV2ZWwgYXMga2V5b2YgdHlwZW9mIHZvbHVtZV9tYXBdIHx8IDEyO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVfcmVjb21tZW5kZWRfZnJlcXVlbmN5KGZpdG5lc3NfbGV2ZWw6IHN0cmluZyk6IG51bWJlciB7XG4gIGNvbnN0IGZyZXF1ZW5jeV9tYXAgPSB7XG4gICAgQkVHSU5ORVI6IDMsIC8vIDMgc2Vzc2lvbnMgcGVyIHdlZWtcbiAgICBJTlRFUk1FRElBVEU6IDQsXG4gICAgQURWQU5DRUQ6IDVcbiAgfTtcbiAgcmV0dXJuIGZyZXF1ZW5jeV9tYXBbZml0bmVzc19sZXZlbCBhcyBrZXlvZiB0eXBlb2YgZnJlcXVlbmN5X21hcF0gfHwgMztcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gQUkgREFUQSBQSVBFTElORSBRVUVSSUVTXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmludGVyZmFjZSBBSVRyYWluaW5nRGF0YSB7XG4gIHVzZXJfcHJvZmlsZToge1xuICAgIGZpdG5lc3NfbGV2ZWw6IHN0cmluZztcbiAgICBwcmltYXJ5X2dvYWw6IHN0cmluZztcbiAgICBleHBlcmllbmNlX3llYXJzOiBudW1iZXI7XG4gIH07XG4gIHdvcmtvdXRfaGlzdG9yeToge1xuICAgIHRvdGFsX3Nlc3Npb25zOiBudW1iZXI7XG4gICAgYXZlcmFnZV92b2x1bWU6IG51bWJlcjtcbiAgICBmYXZvdXJpdGVfZXhlcmNpc2VzOiBzdHJpbmdbXTtcbiAgICBjb25zaXN0ZW5jeV9zY29yZTogbnVtYmVyO1xuICB9O1xuICBwZXJmb3JtYW5jZV9tZXRyaWNzOiB7XG4gICAgc3RyZW5ndGhfcHJvZ3Jlc3Npb246IG51bWJlcjtcbiAgICB2b2x1bWVfcHJvZ3Jlc3Npb246IG51bWJlcjtcbiAgICB0ZWNobmlxdWVfc2NvcmVzOiBudW1iZXJbXTtcbiAgfTtcbiAgcHJlZmVyZW5jZXM6IHtcbiAgICBwcmVmZXJyZWRfc2V0X3R5cGVzOiBzdHJpbmdbXTtcbiAgICBwcmVmZXJyZWRfcmVwX3JhbmdlczogW251bWJlciwgbnVtYmVyXTtcbiAgICBwcmVmZXJyZWRfcmVzdF9kdXJhdGlvbnM6IG51bWJlcltdO1xuICB9O1xufVxuXG4vLyBQcmVwYXJlIHdvcmtvdXQgZGF0YSBmb3IgQUkgYW5hbHlzaXNcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVwYXJlX2FpX3RyYWluaW5nX2RhdGEoXG4gIHVzZXJfaWQ6IHN0cmluZ1xuKTogUHJvbWlzZTxBSVRyYWluaW5nRGF0YT4ge1xuICAvLyBHZXQgYWxsIHVzZXIgc2Vzc2lvbnMgZnJvbSBsYXN0IDkwIGRheXNcbiAgY29uc3QgbmluZXR5X2RheXNfYWdvID0gbmV3IERhdGUoKTtcbiAgbmluZXR5X2RheXNfYWdvLnNldERhdGUobmluZXR5X2RheXNfYWdvLmdldERhdGUoKSAtIDkwKTtcblxuICBjb25zdCBzZXNzaW9ucyA9IGF3YWl0IHByaXNtYS53b3Jrb3V0X3Nlc3Npb25zLmZpbmRNYW55KHtcbiAgICB3aGVyZToge1xuICAgICAgdXNlcklkOiB1c2VyX2lkLFxuICAgICAgZGF0ZTogeyBndGU6IG5pbmV0eV9kYXlzX2FnbyB9LFxuICAgICAgaXNDb21wbGV0ZTogdHJ1ZVxuICAgIH0sXG4gICAgaW5jbHVkZToge1xuICAgICAgd29ya291dF9sb2dfZW50cmllczoge1xuICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgZXhlcmNpc2VzOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG9yZGVyQnk6IHsgZGF0ZTogJ2FzYycgfVxuICB9KTtcblxuICBjb25zdCBlbnRyaWVzID0gc2Vzc2lvbnMuZmxhdE1hcChzID0+IHMud29ya291dF9sb2dfZW50cmllcyk7XG5cbiAgLy8gQ2FsY3VsYXRlIG1ldHJpY3NcbiAgY29uc3QgdG90YWxfdm9sdW1lID0gZW50cmllcy5yZWR1Y2UoKHN1bSwgZSkgPT4gc3VtICsgKGUudHJhaW5pbmdWb2x1bWUgfHwgMCksIDApO1xuICBjb25zdCBhdmVyYWdlX3ZvbHVtZSA9IHNlc3Npb25zLmxlbmd0aCA+IDAgPyB0b3RhbF92b2x1bWUgLyBzZXNzaW9ucy5sZW5ndGggOiAwO1xuXG4gIC8vIEZpbmQgZmF2b3VyaXRlIGV4ZXJjaXNlcyAobW9zdCBmcmVxdWVudGx5IHVzZWQpXG4gIGNvbnN0IGV4ZXJjaXNlX2ZyZXF1ZW5jeSA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXI+KCk7XG4gIGVudHJpZXMuZm9yRWFjaChlID0+IHtcbiAgICBleGVyY2lzZV9mcmVxdWVuY3kuc2V0KFxuICAgICAgZS5leGVyY2lzZUlkLFxuICAgICAgKGV4ZXJjaXNlX2ZyZXF1ZW5jeS5nZXQoZS5leGVyY2lzZUlkKSB8fCAwKSArIDFcbiAgICApO1xuICB9KTtcblxuICBjb25zdCBmYXZvdXJpdGVfZXhlcmNpc2VzID0gQXJyYXkuZnJvbShleGVyY2lzZV9mcmVxdWVuY3kuZW50cmllcygpKVxuICAgIC5zb3J0KChhLCBiKSA9PiBiWzFdIC0gYVsxXSlcbiAgICAuc2xpY2UoMCwgMTApXG4gICAgLm1hcCgoW2lkXSkgPT4gaWQpO1xuXG4gIC8vIENhbGN1bGF0ZSBjb25zaXN0ZW5jeSBzY29yZSAoc2Vzc2lvbnMgcGVyIHdlZWspXG4gIGNvbnN0IHdlZWtzX2luX3BlcmlvZCA9IDEzOyAvLyB+OTAgZGF5c1xuICBjb25zdCBjb25zaXN0ZW5jeV9zY29yZSA9IChzZXNzaW9ucy5sZW5ndGggLyB3ZWVrc19pbl9wZXJpb2QpIC8gNDsgLy8gTm9ybWFsaXNlZCB0byAwLTFcblxuICAvLyBHZXQgbGF0ZXN0IGFzc2Vzc21lbnRcbiAgY29uc3QgbGF0ZXN0X2Fzc2Vzc21lbnQgPSBhd2FpdCBwcmlzbWEuYXNzZXNzbWVudHMuZmluZEZpcnN0KHtcbiAgICB3aGVyZTogeyBjbGllbnRJZDogdXNlcl9pZCB9LFxuICAgIG9yZGVyQnk6IHsgY3JlYXRlZEF0OiAnZGVzYycgfVxuICB9KTtcblxuICByZXR1cm4ge1xuICAgIHVzZXJfcHJvZmlsZToge1xuICAgICAgZml0bmVzc19sZXZlbDogJ0lOVEVSTUVESUFURScsIC8vIERlZmF1bHQgc2luY2UgYXNzZXNzbWVudHMgZG9lc24ndCBoYXZlIGZpdG5lc3NMZXZlbCBmaWVsZFxuICAgICAgcHJpbWFyeV9nb2FsOiBsYXRlc3RfYXNzZXNzbWVudD8ucHJpbWFyeUdvYWwgfHwgJ0dFTkVSQUxfRklUTkVTUycsXG4gICAgICBleHBlcmllbmNlX3llYXJzOiBsYXRlc3RfYXNzZXNzbWVudD8uZXhwZXJpZW5jZVllYXJzIHx8IDFcbiAgICB9LFxuICAgIHdvcmtvdXRfaGlzdG9yeToge1xuICAgICAgdG90YWxfc2Vzc2lvbnM6IHNlc3Npb25zLmxlbmd0aCxcbiAgICAgIGF2ZXJhZ2Vfdm9sdW1lLFxuICAgICAgZmF2b3VyaXRlX2V4ZXJjaXNlcyxcbiAgICAgIGNvbnNpc3RlbmN5X3Njb3JlOiBNYXRoLm1pbihjb25zaXN0ZW5jeV9zY29yZSwgMSlcbiAgICB9LFxuICAgIHBlcmZvcm1hbmNlX21ldHJpY3M6IHtcbiAgICAgIHN0cmVuZ3RoX3Byb2dyZXNzaW9uOiBjYWxjdWxhdGVfc3RyZW5ndGhfcHJvZ3Jlc3Npb24oZW50cmllcyksXG4gICAgICB2b2x1bWVfcHJvZ3Jlc3Npb246IGNhbGN1bGF0ZV92b2x1bWVfcHJvZ3Jlc3Npb24oc2Vzc2lvbnMpLFxuICAgICAgdGVjaG5pcXVlX3Njb3JlczogZW50cmllc1xuICAgICAgICAuZmlsdGVyKGUgPT4gZS5mb3JtUXVhbGl0eSAhPT0gbnVsbClcbiAgICAgICAgLm1hcChlID0+IGUuZm9ybVF1YWxpdHkhKVxuICAgIH0sXG4gICAgcHJlZmVyZW5jZXM6IHtcbiAgICAgIHByZWZlcnJlZF9zZXRfdHlwZXM6IGNhbGN1bGF0ZV9wcmVmZXJyZWRfc2V0X3R5cGVzKGVudHJpZXMpLFxuICAgICAgcHJlZmVycmVkX3JlcF9yYW5nZXM6IGNhbGN1bGF0ZV9wcmVmZXJyZWRfcmVwX3JhbmdlKGVudHJpZXMpLFxuICAgICAgcHJlZmVycmVkX3Jlc3RfZHVyYXRpb25zOiBjYWxjdWxhdGVfcHJlZmVycmVkX3Jlc3RfZHVyYXRpb25zKGVudHJpZXMpXG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVfc3RyZW5ndGhfcHJvZ3Jlc3Npb24oZW50cmllczogYW55W10pOiBudW1iZXIge1xuICAvLyBDb21wYXJlIGZpcnN0IDIwJSBvZiBlbnRyaWVzIHdpdGggbGFzdCAyMCVcbiAgY29uc3QgdG90YWwgPSBlbnRyaWVzLmxlbmd0aDtcbiAgaWYgKHRvdGFsIDwgMTApIHJldHVybiAwOyAvLyBOZWVkIG1pbmltdW0gZGF0YVxuXG4gIGNvbnN0IGVhcmx5X2VudHJpZXMgPSBlbnRyaWVzLnNsaWNlKDAsIE1hdGguZmxvb3IodG90YWwgKiAwLjIpKTtcbiAgY29uc3QgcmVjZW50X2VudHJpZXMgPSBlbnRyaWVzLnNsaWNlKE1hdGguZmxvb3IodG90YWwgKiAwLjgpKTtcblxuICBjb25zdCBlYXJseV9hdmdfdm9sdW1lID0gZWFybHlfZW50cmllcy5yZWR1Y2UoKHN1bSwgZSkgPT4gc3VtICsgKGUudHJhaW5pbmdWb2x1bWUgfHwgMCksIDApIC8gZWFybHlfZW50cmllcy5sZW5ndGg7XG4gIGNvbnN0IHJlY2VudF9hdmdfdm9sdW1lID0gcmVjZW50X2VudHJpZXMucmVkdWNlKChzdW0sIGUpID0+IHN1bSArIChlLnRyYWluaW5nVm9sdW1lIHx8IDApLCAwKSAvIHJlY2VudF9lbnRyaWVzLmxlbmd0aDtcblxuICByZXR1cm4gZWFybHlfYXZnX3ZvbHVtZSA+IDAgPyAoKHJlY2VudF9hdmdfdm9sdW1lIC0gZWFybHlfYXZnX3ZvbHVtZSkgLyBlYXJseV9hdmdfdm9sdW1lKSAqIDEwMCA6IDA7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZV92b2x1bWVfcHJvZ3Jlc3Npb24oc2Vzc2lvbnM6IGFueVtdKTogbnVtYmVyIHtcbiAgaWYgKHNlc3Npb25zLmxlbmd0aCA8IDIpIHJldHVybiAwO1xuXG4gIGNvbnN0IGZpcnN0X3Nlc3Npb24gPSBzZXNzaW9uc1swXTtcbiAgY29uc3QgbGFzdF9zZXNzaW9uID0gc2Vzc2lvbnNbc2Vzc2lvbnMubGVuZ3RoIC0gMV07XG5cbiAgY29uc3QgZmlyc3Rfdm9sdW1lID0gZmlyc3Rfc2Vzc2lvbi50b3RhbFZvbHVtZSB8fCAwO1xuICBjb25zdCBsYXN0X3ZvbHVtZSA9IGxhc3Rfc2Vzc2lvbi50b3RhbFZvbHVtZSB8fCAwO1xuXG4gIHJldHVybiBmaXJzdF92b2x1bWUgPiAwID8gKChsYXN0X3ZvbHVtZSAtIGZpcnN0X3ZvbHVtZSkgLyBmaXJzdF92b2x1bWUpICogMTAwIDogMDtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlX3ByZWZlcnJlZF9zZXRfdHlwZXMoZW50cmllczogYW55W10pOiBzdHJpbmdbXSB7XG4gIGNvbnN0IHNldF90eXBlX2NvdW50cyA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXI+KCk7XG4gIGVudHJpZXMuZm9yRWFjaChlID0+IHtcbiAgICBzZXRfdHlwZV9jb3VudHMuc2V0KGUuc2V0VHlwZSwgKHNldF90eXBlX2NvdW50cy5nZXQoZS5zZXRUeXBlKSB8fCAwKSArIDEpO1xuICB9KTtcblxuICByZXR1cm4gQXJyYXkuZnJvbShzZXRfdHlwZV9jb3VudHMuZW50cmllcygpKVxuICAgIC5zb3J0KChhLCBiKSA9PiBiWzFdIC0gYVsxXSlcbiAgICAuc2xpY2UoMCwgMylcbiAgICAubWFwKChbdHlwZV0pID0+IHR5cGUpO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVfcHJlZmVycmVkX3JlcF9yYW5nZShlbnRyaWVzOiBhbnlbXSk6IFtudW1iZXIsIG51bWJlcl0ge1xuICBjb25zdCByZXBzID0gZW50cmllcy5tYXAoZSA9PiBlLnJlcHMpLmZpbHRlcihyID0+IHIgPiAwKTtcbiAgaWYgKHJlcHMubGVuZ3RoID09PSAwKSByZXR1cm4gWzgsIDEyXTtcblxuICByZXBzLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcbiAgY29uc3QgcGVyY2VudGlsZV8yNSA9IHJlcHNbTWF0aC5mbG9vcihyZXBzLmxlbmd0aCAqIDAuMjUpXTtcbiAgY29uc3QgcGVyY2VudGlsZV83NSA9IHJlcHNbTWF0aC5mbG9vcihyZXBzLmxlbmd0aCAqIDAuNzUpXTtcblxuICByZXR1cm4gW3BlcmNlbnRpbGVfMjUsIHBlcmNlbnRpbGVfNzVdO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVfcHJlZmVycmVkX3Jlc3RfZHVyYXRpb25zKGVudHJpZXM6IGFueVtdKTogbnVtYmVyW10ge1xuICBjb25zdCByZXN0X2R1cmF0aW9ucyA9IGVudHJpZXNcbiAgICAubWFwKGUgPT4gZS5yZXN0U2Vjb25kcylcbiAgICAuZmlsdGVyKHIgPT4gciAhPT0gbnVsbCAmJiByICE9PSB1bmRlZmluZWQpIGFzIG51bWJlcltdO1xuXG4gIGlmIChyZXN0X2R1cmF0aW9ucy5sZW5ndGggPT09IDApIHJldHVybiBbNjAsIDkwLCAxMjBdO1xuXG4gIGNvbnN0IGF2ZyA9IHJlc3RfZHVyYXRpb25zLnJlZHVjZSgoc3VtLCByKSA9PiBzdW0gKyByLCAwKSAvIHJlc3RfZHVyYXRpb25zLmxlbmd0aDtcbiAgcmV0dXJuIFtNYXRoLmZsb29yKGF2ZyAqIDAuOCksIE1hdGguZmxvb3IoYXZnKSwgTWF0aC5mbG9vcihhdmcgKiAxLjIpXTtcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gR0FNSUZJQ0FUSU9OIFNZU1RFTSBRVUVSSUVTXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmludGVyZmFjZSBBY2hpZXZlbWVudENyaXRlcmlhIHtcbiAgdHlwZTogJ1ZPTFVNRScgfCAnQ09OU0lTVEVOQ1knIHwgJ1NUUkVOR1RIJyB8ICdURUNITklRVUUnIHwgJ01JTEVTVE9ORSc7XG4gIHRocmVzaG9sZDogbnVtYmVyO1xuICBjb21wYXJpc29uOiAnR1JFQVRFUl9USEFOJyB8ICdFUVVBTFMnIHwgJ1NUUkVBSyc7XG4gIG1ldHJpYzogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgRXhwZXJpZW5jZVBvaW50c0JyZWFrZG93biB7XG4gIGJhc2VfcG9pbnRzOiBudW1iZXI7XG4gIHZvbHVtZV9ib251czogbnVtYmVyO1xuICB0ZWNobmlxdWVfYm9udXM6IG51bWJlcjtcbiAgY29uc2lzdGVuY3lfYm9udXM6IG51bWJlcjtcbiAgYWNoaWV2ZW1lbnRfYm9udXM6IG51bWJlcjtcbiAgdG90YWw6IG51bWJlcjtcbn1cblxuLy8gQ2FsY3VsYXRlIGV4cGVyaWVuY2UgcG9pbnRzIGZvciBhIHNlc3Npb25cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjYWxjdWxhdGVfc2Vzc2lvbl9leHBlcmllbmNlX3BvaW50cyhcbiAgc2Vzc2lvbl9pZDogc3RyaW5nXG4pOiBQcm9taXNlPEV4cGVyaWVuY2VQb2ludHNCcmVha2Rvd24+IHtcbiAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IHByaXNtYS53b3Jrb3V0X3Nlc3Npb25zLmZpbmRVbmlxdWUoe1xuICAgIHdoZXJlOiB7IGlkOiBzZXNzaW9uX2lkIH0sXG4gICAgaW5jbHVkZToge1xuICAgICAgd29ya291dF9sb2dfZW50cmllczogdHJ1ZVxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKCFzZXNzaW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZXNzaW9uIG5vdCBmb3VuZCcpO1xuICB9XG5cbiAgY29uc3QgYnJlYWtkb3duOiBFeHBlcmllbmNlUG9pbnRzQnJlYWtkb3duID0ge1xuICAgIGJhc2VfcG9pbnRzOiAxMDAsIC8vIEJhc2UgcG9pbnRzIGZvciBjb21wbGV0aW5nIHNlc3Npb25cbiAgICB2b2x1bWVfYm9udXM6IDAsXG4gICAgdGVjaG5pcXVlX2JvbnVzOiAwLFxuICAgIGNvbnNpc3RlbmN5X2JvbnVzOiAwLFxuICAgIGFjaGlldmVtZW50X2JvbnVzOiAwLFxuICAgIHRvdGFsOiAwXG4gIH07XG5cbiAgLy8gVm9sdW1lIGJvbnVzICgxIHBvaW50IHBlciAxMDBrZyB0b3RhbCB2b2x1bWUpXG4gIGNvbnN0IHRvdGFsX3ZvbHVtZSA9IHNlc3Npb24udG90YWxWb2x1bWUgfHwgMDtcbiAgYnJlYWtkb3duLnZvbHVtZV9ib251cyA9IE1hdGguZmxvb3IodG90YWxfdm9sdW1lIC8gMTAwKTtcblxuICAvLyBUZWNobmlxdWUgYm9udXMgKGF2ZXJhZ2UgZm9ybSBxdWFsaXR5KVxuICBjb25zdCBlbnRyaWVzX3dpdGhfZm9ybSA9IHNlc3Npb24ud29ya291dF9sb2dfZW50cmllcy5maWx0ZXIoZSA9PiBlLmZvcm1RdWFsaXR5ICE9PSBudWxsKTtcbiAgaWYgKGVudHJpZXNfd2l0aF9mb3JtLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBhdmdfZm9ybSA9IGVudHJpZXNfd2l0aF9mb3JtLnJlZHVjZSgoc3VtLCBlKSA9PiBzdW0gKyAoZS5mb3JtUXVhbGl0eSB8fCAwKSwgMCkgLyBlbnRyaWVzX3dpdGhfZm9ybS5sZW5ndGg7XG4gICAgYnJlYWtkb3duLnRlY2huaXF1ZV9ib251cyA9IE1hdGguZmxvb3IoYXZnX2Zvcm0gKiAyMCk7IC8vIE1heCAxMDAgYm9udXMgZm9yIHBlcmZlY3QgZm9ybVxuICB9XG5cbiAgLy8gQ29uc2lzdGVuY3kgYm9udXMgKGNoZWNrIGlmIHNlc3Npb24gY29udGludWVzIGEgc3RyZWFrKVxuICBjb25zdCBzdHJlYWtfYm9udXMgPSBhd2FpdCBjYWxjdWxhdGVfY29uc2lzdGVuY3lfc3RyZWFrX2JvbnVzKHNlc3Npb24udXNlcklkLCBzZXNzaW9uLmRhdGUpO1xuICBicmVha2Rvd24uY29uc2lzdGVuY3lfYm9udXMgPSBzdHJlYWtfYm9udXM7XG5cbiAgLy8gQWNoaWV2ZW1lbnQgYm9udXMgKGFueSBwZXJzb25hbCByZWNvcmRzKVxuICBjb25zdCBwcl9jb3VudCA9IHNlc3Npb24ud29ya291dF9sb2dfZW50cmllcy5maWx0ZXIoZSA9PiBlLnBlcnNvbmFsUmVjb3JkIHx8IGUudm9sdW1lUmVjb3JkKS5sZW5ndGg7XG4gIGJyZWFrZG93bi5hY2hpZXZlbWVudF9ib251cyA9IHByX2NvdW50ICogNTA7IC8vIDUwIHBvaW50cyBwZXIgUFJcblxuICBicmVha2Rvd24udG90YWwgPSBicmVha2Rvd24uYmFzZV9wb2ludHMgKyBicmVha2Rvd24udm9sdW1lX2JvbnVzICsgYnJlYWtkb3duLnRlY2huaXF1ZV9ib251cyArIGJyZWFrZG93bi5jb25zaXN0ZW5jeV9ib251cyArIGJyZWFrZG93bi5hY2hpZXZlbWVudF9ib251cztcblxuICByZXR1cm4gYnJlYWtkb3duO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjYWxjdWxhdGVfY29uc2lzdGVuY3lfc3RyZWFrX2JvbnVzKHVzZXJfaWQ6IHN0cmluZywgc2Vzc2lvbl9kYXRlOiBEYXRlKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgLy8gR2V0IHJlY2VudCBzZXNzaW9ucyB0byBjYWxjdWxhdGUgc3RyZWFrXG4gIGNvbnN0IHNldmVuX2RheXNfYWdvID0gbmV3IERhdGUoc2Vzc2lvbl9kYXRlKTtcbiAgc2V2ZW5fZGF5c19hZ28uc2V0RGF0ZShzZXZlbl9kYXlzX2Fnby5nZXREYXRlKCkgLSA3KTtcblxuICBjb25zdCByZWNlbnRfc2Vzc2lvbnMgPSBhd2FpdCBwcmlzbWEud29ya291dF9zZXNzaW9ucy5maW5kTWFueSh7XG4gICAgd2hlcmU6IHtcbiAgICAgIHVzZXJJZDogdXNlcl9pZCxcbiAgICAgIGRhdGU6IHtcbiAgICAgICAgZ3RlOiBzZXZlbl9kYXlzX2FnbyxcbiAgICAgICAgbHRlOiBzZXNzaW9uX2RhdGVcbiAgICAgIH0sXG4gICAgICBpc0NvbXBsZXRlOiB0cnVlXG4gICAgfSxcbiAgICBvcmRlckJ5OiB7IGRhdGU6ICdkZXNjJyB9XG4gIH0pO1xuXG4gIC8vIEF3YXJkIGJvbnVzIGZvciAzKyBzZXNzaW9ucyBpbiA3IGRheXNcbiAgaWYgKHJlY2VudF9zZXNzaW9ucy5sZW5ndGggPj0gMykge1xuICAgIHJldHVybiA1MCAqIHJlY2VudF9zZXNzaW9ucy5sZW5ndGg7IC8vIEVzY2FsYXRpbmcgYm9udXNcbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG4vLyBDaGVjayBhbmQgYXdhcmQgYWNoaWV2ZW1lbnRzIGFmdGVyIHNlc3Npb25cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja19hbmRfYXdhcmRfYWNoaWV2ZW1lbnRzKFxuICB1c2VyX2lkOiBzdHJpbmcsXG4gIHNlc3Npb25faWQ6IHN0cmluZ1xuKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICBjb25zdCBhd2FyZGVkX2FjaGlldmVtZW50X2lkczogc3RyaW5nW10gPSBbXTtcblxuICAvLyBHZXQgYWxsIGFjaGlldmVtZW50c1xuICBjb25zdCBhbGxfYWNoaWV2ZW1lbnRzID0gYXdhaXQgcHJpc21hLmFjaGlldmVtZW50cy5maW5kTWFueSgpO1xuXG4gIC8vIEdldCB1c2VyJ3MgZXhpc3RpbmcgYWNoaWV2ZW1lbnRzXG4gIGNvbnN0IGV4aXN0aW5nX2FjaGlldmVtZW50cyA9IGF3YWl0IHByaXNtYS51c2VyX2FjaGlldmVtZW50cy5maW5kTWFueSh7XG4gICAgd2hlcmU6IHsgdXNlcklkOiB1c2VyX2lkIH0sXG4gICAgc2VsZWN0OiB7IGFjaGlldmVtZW50SWQ6IHRydWUgfVxuICB9KTtcblxuICBjb25zdCBleGlzdGluZ19pZHMgPSBuZXcgU2V0KGV4aXN0aW5nX2FjaGlldmVtZW50cy5tYXAoYSA9PiBhLmFjaGlldmVtZW50SWQpKTtcblxuICAvLyBDaGVjayBlYWNoIGFjaGlldmVtZW50XG4gIGZvciAoY29uc3QgYWNoaWV2ZW1lbnQgb2YgYWxsX2FjaGlldmVtZW50cykge1xuICAgIGlmIChleGlzdGluZ19pZHMuaGFzKGFjaGlldmVtZW50LmlkKSkgY29udGludWU7IC8vIEFscmVhZHkgZWFybmVkXG5cbiAgICBjb25zdCBjcml0ZXJpYSA9IGFjaGlldmVtZW50LmNyaXRlcmlhIGFzIHVua25vd24gYXMgQWNoaWV2ZW1lbnRDcml0ZXJpYTtcbiAgICBjb25zdCBtZWV0c19jcml0ZXJpYSA9IGF3YWl0IGNoZWNrX2FjaGlldmVtZW50X2NyaXRlcmlhKHVzZXJfaWQsIHNlc3Npb25faWQsIGNyaXRlcmlhKTtcblxuICAgIGlmIChtZWV0c19jcml0ZXJpYSkge1xuICAgICAgLy8gQXdhcmQgYWNoaWV2ZW1lbnRcbiAgICAgIGF3YWl0IHByaXNtYS51c2VyX2FjaGlldmVtZW50cy5jcmVhdGUoe1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgaWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXG4gICAgICAgICAgdXNlcklkOiB1c2VyX2lkLFxuICAgICAgICAgIGFjaGlldmVtZW50SWQ6IGFjaGlldmVtZW50LmlkLFxuICAgICAgICAgIHNlc3Npb25JZDogc2Vzc2lvbl9pZFxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgYXdhcmRlZF9hY2hpZXZlbWVudF9pZHMucHVzaChhY2hpZXZlbWVudC5pZCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF3YXJkZWRfYWNoaWV2ZW1lbnRfaWRzO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjaGVja19hY2hpZXZlbWVudF9jcml0ZXJpYShcbiAgdXNlcl9pZDogc3RyaW5nLFxuICBzZXNzaW9uX2lkOiBzdHJpbmcsXG4gIGNyaXRlcmlhOiBBY2hpZXZlbWVudENyaXRlcmlhXG4pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgc3dpdGNoIChjcml0ZXJpYS50eXBlKSB7XG4gICAgY2FzZSAnVk9MVU1FJzpcbiAgICAgIHJldHVybiBjaGVja192b2x1bWVfYWNoaWV2ZW1lbnQodXNlcl9pZCwgc2Vzc2lvbl9pZCwgY3JpdGVyaWEpO1xuICAgIGNhc2UgJ0NPTlNJU1RFTkNZJzpcbiAgICAgIHJldHVybiBjaGVja19jb25zaXN0ZW5jeV9hY2hpZXZlbWVudCh1c2VyX2lkLCBjcml0ZXJpYSk7XG4gICAgY2FzZSAnU1RSRU5HVEgnOlxuICAgICAgcmV0dXJuIGNoZWNrX3N0cmVuZ3RoX2FjaGlldmVtZW50KHVzZXJfaWQsIGNyaXRlcmlhKTtcbiAgICBjYXNlICdURUNITklRVUUnOlxuICAgICAgcmV0dXJuIGNoZWNrX3RlY2huaXF1ZV9hY2hpZXZlbWVudCh1c2VyX2lkLCBzZXNzaW9uX2lkLCBjcml0ZXJpYSk7XG4gICAgY2FzZSAnTUlMRVNUT05FJzpcbiAgICAgIHJldHVybiBjaGVja19taWxlc3RvbmVfYWNoaWV2ZW1lbnQodXNlcl9pZCwgY3JpdGVyaWEpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hlY2tfdm9sdW1lX2FjaGlldmVtZW50KFxuICBfdXNlcl9pZDogc3RyaW5nLFxuICBzZXNzaW9uX2lkOiBzdHJpbmcsXG4gIGNyaXRlcmlhOiBBY2hpZXZlbWVudENyaXRlcmlhXG4pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IHByaXNtYS53b3Jrb3V0X3Nlc3Npb25zLmZpbmRVbmlxdWUoe1xuICAgIHdoZXJlOiB7IGlkOiBzZXNzaW9uX2lkIH1cbiAgfSk7XG5cbiAgaWYgKCFzZXNzaW9uKSByZXR1cm4gZmFsc2U7XG5cbiAgY29uc3QgdG90YWxfdm9sdW1lID0gc2Vzc2lvbi50b3RhbFZvbHVtZSB8fCAwO1xuICByZXR1cm4gdG90YWxfdm9sdW1lID49IGNyaXRlcmlhLnRocmVzaG9sZDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hlY2tfY29uc2lzdGVuY3lfYWNoaWV2ZW1lbnQoXG4gIHVzZXJfaWQ6IHN0cmluZyxcbiAgY3JpdGVyaWE6IEFjaGlldmVtZW50Q3JpdGVyaWFcbik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICBjb25zdCB0aGlydHlfZGF5c19hZ28gPSBuZXcgRGF0ZSgpO1xuICB0aGlydHlfZGF5c19hZ28uc2V0RGF0ZSh0aGlydHlfZGF5c19hZ28uZ2V0RGF0ZSgpIC0gMzApO1xuXG4gIGNvbnN0IHNlc3Npb25fY291bnQgPSBhd2FpdCBwcmlzbWEud29ya291dF9zZXNzaW9ucy5jb3VudCh7XG4gICAgd2hlcmU6IHtcbiAgICAgIHVzZXJJZDogdXNlcl9pZCxcbiAgICAgIGRhdGU6IHsgZ3RlOiB0aGlydHlfZGF5c19hZ28gfSxcbiAgICAgIGlzQ29tcGxldGU6IHRydWVcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBzZXNzaW9uX2NvdW50ID49IGNyaXRlcmlhLnRocmVzaG9sZDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hlY2tfc3RyZW5ndGhfYWNoaWV2ZW1lbnQoXG4gIHVzZXJfaWQ6IHN0cmluZyxcbiAgY3JpdGVyaWE6IEFjaGlldmVtZW50Q3JpdGVyaWFcbik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAvLyBDaGVjayBmb3IgcGVyc29uYWwgcmVjb3Jkc1xuICBjb25zdCBwcl9jb3VudCA9IGF3YWl0IHByaXNtYS53b3Jrb3V0X2xvZ19lbnRyaWVzLmNvdW50KHtcbiAgICB3aGVyZToge1xuICAgICAgdXNlcklkOiB1c2VyX2lkLFxuICAgICAgcGVyc29uYWxSZWNvcmQ6IHRydWVcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwcl9jb3VudCA+PSBjcml0ZXJpYS50aHJlc2hvbGQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNoZWNrX3RlY2huaXF1ZV9hY2hpZXZlbWVudChcbiAgX3VzZXJfaWQ6IHN0cmluZyxcbiAgc2Vzc2lvbl9pZDogc3RyaW5nLFxuICBjcml0ZXJpYTogQWNoaWV2ZW1lbnRDcml0ZXJpYVxuKTogUHJvbWlzZTxib29sZWFuPiB7XG4gIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBwcmlzbWEud29ya291dF9zZXNzaW9ucy5maW5kVW5pcXVlKHtcbiAgICB3aGVyZTogeyBpZDogc2Vzc2lvbl9pZCB9LFxuICAgIGluY2x1ZGU6IHtcbiAgICAgIHdvcmtvdXRfbG9nX2VudHJpZXM6IHRydWVcbiAgICB9XG4gIH0pO1xuXG4gIGlmICghc2Vzc2lvbikgcmV0dXJuIGZhbHNlO1xuXG4gIGNvbnN0IGVudHJpZXNfd2l0aF9mb3JtID0gc2Vzc2lvbi53b3Jrb3V0X2xvZ19lbnRyaWVzLmZpbHRlcihlID0+IGUuZm9ybVF1YWxpdHkgIT09IG51bGwpO1xuICBpZiAoZW50cmllc193aXRoX2Zvcm0ubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7XG5cbiAgY29uc3QgYXZnX2Zvcm0gPSBlbnRyaWVzX3dpdGhfZm9ybS5yZWR1Y2UoKHN1bSwgZSkgPT4gc3VtICsgKGUuZm9ybVF1YWxpdHkgfHwgMCksIDApIC8gZW50cmllc193aXRoX2Zvcm0ubGVuZ3RoO1xuICByZXR1cm4gYXZnX2Zvcm0gPj0gY3JpdGVyaWEudGhyZXNob2xkO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjaGVja19taWxlc3RvbmVfYWNoaWV2ZW1lbnQoXG4gIHVzZXJfaWQ6IHN0cmluZyxcbiAgY3JpdGVyaWE6IEFjaGlldmVtZW50Q3JpdGVyaWFcbik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICBjb25zdCB0b3RhbF9zZXNzaW9ucyA9IGF3YWl0IHByaXNtYS53b3Jrb3V0X3Nlc3Npb25zLmNvdW50KHtcbiAgICB3aGVyZToge1xuICAgICAgdXNlcklkOiB1c2VyX2lkLFxuICAgICAgaXNDb21wbGV0ZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHRvdGFsX3Nlc3Npb25zID09PSBjcml0ZXJpYS50aHJlc2hvbGQ7IC8vIEV4YWN0IG1pbGVzdG9uZVxufVxuXG4vLyBVcGRhdGUgc2Vzc2lvbiB3aXRoIFhQIGFuZCBhY2hpZXZlbWVudHNcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmaW5hbGlzZV9zZXNzaW9uX3dpdGhfZ2FtaWZpY2F0aW9uKFxuICBzZXNzaW9uX2lkOiBzdHJpbmdcbikge1xuICBjb25zdCBzZXNzaW9uID0gYXdhaXQgcHJpc21hLndvcmtvdXRfc2Vzc2lvbnMuZmluZFVuaXF1ZSh7XG4gICAgd2hlcmU6IHsgaWQ6IHNlc3Npb25faWQgfVxuICB9KTtcblxuICBpZiAoIXNlc3Npb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Nlc3Npb24gbm90IGZvdW5kJyk7XG4gIH1cblxuICAvLyBDYWxjdWxhdGUgWFBcbiAgY29uc3QgeHBfYnJlYWtkb3duID0gYXdhaXQgY2FsY3VsYXRlX3Nlc3Npb25fZXhwZXJpZW5jZV9wb2ludHMoc2Vzc2lvbl9pZCk7XG5cbiAgLy8gQ2hlY2sgYWNoaWV2ZW1lbnRzXG4gIGNvbnN0IG5ld19hY2hpZXZlbWVudHMgPSBhd2FpdCBjaGVja19hbmRfYXdhcmRfYWNoaWV2ZW1lbnRzKHNlc3Npb24udXNlcklkLCBzZXNzaW9uX2lkKTtcblxuICAvLyBBZGQgYWNoaWV2ZW1lbnQgYm9udXMgdG8gWFBcbiAgY29uc3QgYWNoaWV2ZW1lbnRfeHAgPSBuZXdfYWNoaWV2ZW1lbnRzLmxlbmd0aCAqIDEwMDtcbiAgeHBfYnJlYWtkb3duLmFjaGlldmVtZW50X2JvbnVzID0gYWNoaWV2ZW1lbnRfeHA7XG4gIHhwX2JyZWFrZG93bi50b3RhbCArPSBhY2hpZXZlbWVudF94cDtcblxuICAvLyBVcGRhdGUgc2Vzc2lvblxuICBhd2FpdCBwcmlzbWEud29ya291dF9zZXNzaW9ucy51cGRhdGUoe1xuICAgIHdoZXJlOiB7IGlkOiBzZXNzaW9uX2lkIH0sXG4gICAgZGF0YToge1xuICAgICAgZXhwZXJpZW5jZVBvaW50czogeHBfYnJlYWtkb3duLnRvdGFsLFxuICAgICAgYWNoaWV2ZW1lbnRzRWFybmVkOiBuZXdfYWNoaWV2ZW1lbnRzLFxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAgfVxuICB9KTtcblxuICByZXR1cm4ge1xuICAgIGV4cGVyaWVuY2VfcG9pbnRzOiB4cF9icmVha2Rvd24sXG4gICAgYWNoaWV2ZW1lbnRzX2Vhcm5lZDogbmV3X2FjaGlldmVtZW50c1xuICB9O1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBQRVJTT05BTCBSRUNPUkRTIERFVEVDVElPTlxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vKipcbiAqIENoZWNrIGlmIGEgd29ya291dCBlbnRyeSBpcyBhIHBlcnNvbmFsIHJlY29yZCBmb3Igd2VpZ2h0XG4gKiBAcGFyYW0gdXNlcklkIC0gVXNlciBJRFxuICogQHBhcmFtIGV4ZXJjaXNlSWQgLSBFeGVyY2lzZSBJRFxuICogQHBhcmFtIHdlaWdodCAtIFdlaWdodCBsaWZ0ZWQgKG51bWVyaWMgdmFsdWUpXG4gKiBAcGFyYW0gcmVwcyAtIE51bWJlciBvZiByZXBzXG4gKiBAcmV0dXJucyB0cnVlIGlmIHRoaXMgaXMgYSBQUiwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNoZWNrX3BlcnNvbmFsX3JlY29yZChcbiAgdXNlcklkOiBzdHJpbmcsXG4gIGV4ZXJjaXNlSWQ6IHN0cmluZyxcbiAgd2VpZ2h0OiBudW1iZXIsXG4gIHJlcHM6IG51bWJlclxuKTogUHJvbWlzZTxib29sZWFuPiB7XG4gIC8vIEZpbmQgdGhlIGhpZ2hlc3Qgd2VpZ2h0IGZvciB0aGlzIGV4ZXJjaXNlIHdpdGggdGhlIHNhbWUgb3IgbW9yZSByZXBzXG4gIGNvbnN0IHByZXZpb3VzX2Jlc3QgPSBhd2FpdCBwcmlzbWEud29ya291dF9sb2dfZW50cmllcy5maW5kRmlyc3Qoe1xuICAgIHdoZXJlOiB7XG4gICAgICB1c2VySWQsXG4gICAgICBleGVyY2lzZUlkLFxuICAgICAgcmVwczogeyBndGU6IHJlcHMgfVxuICAgIH0sXG4gICAgb3JkZXJCeToge1xuICAgICAgdHJhaW5pbmdWb2x1bWU6ICdkZXNjJ1xuICAgIH0sXG4gICAgc2VsZWN0OiB7XG4gICAgICB3ZWlnaHQ6IHRydWUsXG4gICAgICB0cmFpbmluZ1ZvbHVtZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKCFwcmV2aW91c19iZXN0KSB7XG4gICAgLy8gRmlyc3QgdGltZSBkb2luZyB0aGlzIGV4ZXJjaXNlIC0gaXQncyBhIFBSIVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gRXh0cmFjdCBudW1lcmljIHdlaWdodCBmcm9tIHByZXZpb3VzIGJlc3QgKGhhbmRsZXMgXCIxMzUgbGJzXCIgZm9ybWF0KVxuICBjb25zdCBwcmV2aW91c193ZWlnaHQgPSBwYXJzZUZsb2F0KHByZXZpb3VzX2Jlc3Qud2VpZ2h0LnJlcGxhY2UoL1teXFxkLixdL2csICcnKSk7XG5cbiAgLy8gSXMgY3VycmVudCB3ZWlnaHQgaGlnaGVyIHRoYW4gcHJldmlvdXMgYmVzdD9cbiAgcmV0dXJuIHdlaWdodCA+IHByZXZpb3VzX3dlaWdodDtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHdvcmtvdXQgZW50cnkgaXMgYSB2b2x1bWUgcmVjb3JkXG4gKiBAcGFyYW0gdXNlcklkIC0gVXNlciBJRFxuICogQHBhcmFtIGV4ZXJjaXNlSWQgLSBFeGVyY2lzZSBJRFxuICogQHBhcmFtIHZvbHVtZSAtIFRyYWluaW5nIHZvbHVtZSAod2VpZ2h0IMOXIHJlcHMpXG4gKiBAcmV0dXJucyB0cnVlIGlmIHRoaXMgaXMgYSB2b2x1bWUgUFIsIGZhbHNlIG90aGVyd2lzZVxuICovXG5hc3luYyBmdW5jdGlvbiBjaGVja192b2x1bWVfcmVjb3JkKFxuICB1c2VySWQ6IHN0cmluZyxcbiAgZXhlcmNpc2VJZDogc3RyaW5nLFxuICB2b2x1bWU6IG51bWJlclxuKTogUHJvbWlzZTxib29sZWFuPiB7XG4gIC8vIEZpbmQgdGhlIGhpZ2hlc3QgdHJhaW5pbmcgdm9sdW1lIGZvciB0aGlzIGV4ZXJjaXNlXG4gIGNvbnN0IHByZXZpb3VzX2Jlc3QgPSBhd2FpdCBwcmlzbWEud29ya291dF9sb2dfZW50cmllcy5maW5kRmlyc3Qoe1xuICAgIHdoZXJlOiB7XG4gICAgICB1c2VySWQsXG4gICAgICBleGVyY2lzZUlkXG4gICAgfSxcbiAgICBvcmRlckJ5OiB7XG4gICAgICB0cmFpbmluZ1ZvbHVtZTogJ2Rlc2MnXG4gICAgfSxcbiAgICBzZWxlY3Q6IHtcbiAgICAgIHRyYWluaW5nVm9sdW1lOiB0cnVlXG4gICAgfVxuICB9KTtcblxuICBpZiAoIXByZXZpb3VzX2Jlc3QgfHwgIXByZXZpb3VzX2Jlc3QudHJhaW5pbmdWb2x1bWUpIHtcbiAgICAvLyBGaXJzdCB0aW1lIGRvaW5nIHRoaXMgZXhlcmNpc2UgLSBpdCdzIGEgdm9sdW1lIFBSIVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gSXMgY3VycmVudCB2b2x1bWUgaGlnaGVyIHRoYW4gcHJldmlvdXMgYmVzdD9cbiAgcmV0dXJuIHZvbHVtZSA+IHByZXZpb3VzX2Jlc3QudHJhaW5pbmdWb2x1bWU7XG59XG4iXSwibmFtZXMiOlsiY3J5cHRvIiwicHJpc21hIiwiY2FsY3VsYXRlQXZlcmFnZVdlaWdodCIsImNhbGN1bGF0ZVRyYWluaW5nVm9sdW1lIiwiZ2VuZXJhdGVPcmRlciIsImdldF9leGVyY2lzZV9yZWNvbW1lbmRhdGlvbnMiLCJnZXRVc2VyV29ya291dHNVbmlmaWVkIiwidXNlcklkIiwib3B0aW9ucyIsImZpbHRlcnMiLCJzb3J0IiwiZmllbGQiLCJkaXJlY3Rpb24iLCJwYWdpbmF0aW9uIiwiaW5jbHVkZVRlYW1Xb3Jrb3V0cyIsInBhZ2UiLCJsaW1pdCIsIm9mZnNldCIsIndoZXJlIiwiZGF0ZVJhbmdlIiwiZGF0ZSIsImd0ZSIsInN0YXJ0IiwibHRlIiwiZW5kIiwiZXhlcmNpc2VzIiwibGVuZ3RoIiwiZXhlcmNpc2VJZCIsImluIiwic2V0VHlwZXMiLCJzZXRUeXBlIiwiY29hY2hJZCIsImlzVGVhbVdvcmtvdXQiLCJ0b3RhbCIsIndvcmtvdXRfbG9nX2VudHJpZXMiLCJjb3VudCIsImVudHJpZXMiLCJmaW5kTWFueSIsImluY2x1ZGUiLCJ1c2Vyc193b3Jrb3V0X2xvZ19lbnRyaWVzX3VzZXJJZFRvdXNlcnMiLCJzZWxlY3QiLCJpZCIsIm5hbWUiLCJyb2xlIiwidXNlcnNfd29ya291dF9sb2dfZW50cmllc19jb2FjaElkVG91c2VycyIsIm9yZGVyQnkiLCJza2lwIiwidGFrZSIsInRvdGFsUGFnZXMiLCJNYXRoIiwiY2VpbCIsIm1hcHBlZEVudHJpZXMiLCJtYXAiLCJlbnRyeSIsImV4ZXJjaXNlIiwidXNlciIsImNvYWNoIiwiaGFzTW9yZSIsImdldFdvcmtvdXRMb2dFbnRyaWVzIiwiZ2V0V29ya291dExvZ0VudHJ5IiwiZmluZEZpcnN0IiwiY3JlYXRlV29ya291dExvZ0VudHJ5IiwiZGF0YSIsImF2ZXJhZ2VXZWlnaHQiLCJ3ZWlnaHQiLCJ0cmFpbmluZ1ZvbHVtZSIsInJlcHMiLCJ1bml0IiwiaXNfd2VpZ2h0X3ByIiwiY2hlY2tfcGVyc29uYWxfcmVjb3JkIiwiaXNfdm9sdW1lX3ByIiwiY2hlY2tfdm9sdW1lX3JlY29yZCIsImlzX3BlcnNvbmFsX3JlY29yZCIsImNvbnRleHQiLCJjdXJyZW50U2V0VHlwZSIsImN1cnJlbnRHcm91cE51bWJlciIsInNldE51bWJlciIsImN1cnJlbnRTdWJPcmRlciIsInRvdGFsRW50cmllcyIsIm9yZGVyIiwiJHRyYW5zYWN0aW9uIiwidHgiLCJjcmVhdGUiLCJyYW5kb21VVUlEIiwiRGF0ZSIsImludGVuc2l0eSIsInVuZGVmaW5lZCIsImludGVuc2l0eVR5cGUiLCJ0ZW1wbyIsInJlc3RTZWNvbmRzIiwicGVyc29uYWxSZWNvcmQiLCJ1c2VyQ29tbWVudHMiLCJjb2FjaEZlZWRiYWNrIiwidXBkYXRlZEF0IiwidXBkYXRlIiwidXNhZ2VDb3VudCIsImluY3JlbWVudCIsImxhc3RVc2VkIiwidXBkYXRlV29ya291dExvZ0VudHJ5IiwiZXhpc3RpbmciLCJuZXdXZWlnaHQiLCJuZXdSZXBzIiwidXBkYXRlZCIsImRlbGV0ZVdvcmtvdXRMb2dFbnRyeSIsInJlc3VsdCIsImRlbGV0ZU1hbnkiLCJnZXRXb3Jrb3V0U3RhdHMiLCJ0b3RhbFdvcmtvdXRzIiwiU2V0IiwiZSIsInRvRGF0ZVN0cmluZyIsInNpemUiLCJ0b3RhbFZvbHVtZSIsInJlZHVjZSIsInN1bSIsInRvdGFsU2V0cyIsInRvdGFsUmVwcyIsInNlc3Npb25zIiwid29ya291dF9zZXNzaW9ucyIsImR1cmF0aW9uIiwiYXZlcmFnZVdvcmtvdXREdXJhdGlvbiIsInMiLCJleGVyY2lzZUNvdW50cyIsImFjYyIsImtleSIsIm1vc3RVc2VkRXhlcmNpc2VzIiwiT2JqZWN0IiwiZmluZCIsImEiLCJiIiwic2xpY2UiLCJ2b2x1bWVCeU11c2NsZUdyb3VwIiwibXVzY2xlR3JvdXBzIiwiZm9yRWFjaCIsIm11c2NsZUdyb3VwIiwidm9sdW1lIiwiZ2V0RXhlcmNpc2VzIiwiY2F0ZWdvcnkiLCJoYXNTb21lIiwiZXF1aXBtZW50IiwiZGlmZmljdWx0eSIsImlzQWN0aXZlIiwic2VhcmNoIiwiY29udGFpbnMiLCJtb2RlIiwiZ2V0RXhlcmNpc2UiLCJmaW5kVW5pcXVlIiwiY3JlYXRlRXhlcmNpc2UiLCJpbnN0cnVjdGlvbnMiLCJ2aWRlb1VybCIsImltYWdlVXJsIiwic2FmZXR5Tm90ZXMiLCJmb3JtQ3VlcyIsImNvbW1vbk1pc3Rha2VzIiwiY3JlYXRlZEJ5IiwiaXNDdXN0b20iLCJ1cGRhdGVFeGVyY2lzZSIsImRlbGV0ZUV4ZXJjaXNlIiwiZ2V0RXhlcmNpc2VWYXJpYXRpb25zIiwiZXhlcmNpc2VfdmFyaWF0aW9ucyIsImdldEV4ZXJjaXNlVmFyaWF0aW9uQnlJZCIsImNyZWF0ZUV4ZXJjaXNlVmFyaWF0aW9uIiwiZGVzY3JpcHRpb24iLCJ1cGRhdGVFeGVyY2lzZVZhcmlhdGlvbiIsImRlbGV0ZUV4ZXJjaXNlVmFyaWF0aW9uIiwiZ2V0V29ya291dFNlc3Npb25zIiwiaXNDb21wbGV0ZSIsImlzVGVtcGxhdGUiLCJ1c2Vyc193b3Jrb3V0X3Nlc3Npb25zX3VzZXJJZFRvdXNlcnMiLCJ1c2Vyc193b3Jrb3V0X3Nlc3Npb25zX2NvYWNoSWRUb3VzZXJzIiwibWFwcGVkU2Vzc2lvbnMiLCJzZXNzaW9uIiwiZ2V0V29ya291dFNlc3Npb24iLCJjcmVhdGVXb3Jrb3V0U2Vzc2lvbiIsInN0YXJ0VGltZSIsImVuZFRpbWUiLCJmbG9vciIsImdldFRpbWUiLCJ0aXRsZSIsIm5vdGVzIiwibG9jYXRpb24iLCJ1cGRhdGVXb3Jrb3V0U2Vzc2lvbiIsImNvbXBsZXRlV29ya291dFNlc3Npb24iLCJlbmRUaW1lVG9Vc2UiLCJkZWxldGVXb3Jrb3V0U2Vzc2lvbiIsImdldENsaWVudFdvcmtvdXRMb2dzIiwiY2xpZW50SWQiLCJhZGRDb2FjaEZlZWRiYWNrIiwiZW50cnlJZCIsImZlZWRiYWNrIiwiZ2V0RXhlcmNpc2VDYXRlZ29yaWVzIiwiZ2V0TXVzY2xlR3JvdXBzIiwiYWxsTXVzY2xlR3JvdXBzIiwiZmxhdE1hcCIsImdldEVxdWlwbWVudFR5cGVzIiwiYWxsRXF1aXBtZW50Iiwic2VhcmNoRXhlcmNpc2VzIiwicXVlcnkiLCJnZXRXb3Jrb3V0VGVtcGxhdGVzIiwicHVibGljT25seSIsImlzUHVibGljIiwibWluUmF0aW5nIiwicmF0aW5nIiwicHJpY2VSYW5nZSIsIm1pbiIsIm1heCIsInNwbGl0IiwiTnVtYmVyIiwicHJpY2UiLCJ3b3Jrb3V0X3RlbXBsYXRlcyIsInVzZXJzIiwidHJhaW5lclZlcmlmaWVkIiwid29ya291dF90ZW1wbGF0ZV9leGVyY2lzZXMiLCJfY291bnQiLCJ0ZW1wbGF0ZV9yYXRpbmdzIiwiZ2V0V29ya291dFRlbXBsYXRlQnlJZCIsImNyZWF0ZWRBdCIsImNyZWF0ZVdvcmtvdXRUZW1wbGF0ZSIsImN1cnJlbmN5IiwidGFncyIsImNvbm5lY3QiLCJzZXRzIiwicmVzdFRpbWUiLCJpc1N1cGVyc2V0Iiwic3VwZXJzZXRHcm91cCIsInVwZGF0ZVdvcmtvdXRUZW1wbGF0ZSIsImRlbGV0ZVdvcmtvdXRUZW1wbGF0ZSIsImdldE15VGVtcGxhdGVzIiwic2VhcmNoV29ya291dFRlbXBsYXRlcyIsIk9SIiwiaGFzIiwicHVyY2hhc2VUZW1wbGF0ZSIsInRlbXBsYXRlSWQiLCJ0ZW1wbGF0ZSIsIkVycm9yIiwicHVyY2hhc2UiLCJ0ZW1wbGF0ZV9wdXJjaGFzZXMiLCJwdXJjaGFzZUNvdW50IiwicmF0ZVRlbXBsYXRlIiwidXBzZXJ0IiwidXNlcklkX3RlbXBsYXRlSWQiLCJyZXZpZXciLCJyYXRpbmdzIiwiYXZnUmF0aW5nIiwiciIsInJhdGluZ0NvdW50IiwiZ2V0VHJhaW5pbmdQcm9ncmFtcyIsInByb2dyYW1fdGVtcGxhdGVzIiwicHJvZ3JhbV93ZWVrcyIsIndlZWtOdW1iZXIiLCJwcm9ncmFtX3JhdGluZ3MiLCJwcm9ncmFtX3N1YnNjcmlwdGlvbnMiLCJnZXRUcmFpbmluZ1Byb2dyYW1CeUlkIiwiY3JlYXRlVHJhaW5pbmdQcm9ncmFtIiwid2Vla3MiLCJ3ZWVrIiwid29ya291dHMiLCJ1cGRhdGVUcmFpbmluZ1Byb2dyYW0iLCJkZWxldGVUcmFpbmluZ1Byb2dyYW0iLCJnZXRNeVByb2dyYW1zIiwic2VhcmNoVHJhaW5pbmdQcm9ncmFtcyIsImdldFVzZXJQcm9ncmFtU3Vic2NyaXB0aW9ucyIsInN0YXJ0RGF0ZSIsInB1cmNoYXNlUHJvZ3JhbSIsInByb2dyYW1JZCIsInByb2dyYW0iLCJwcm9ncmFtX3B1cmNoYXNlcyIsInN1YnNjcmliZVRvUHJvZ3JhbSIsImN1cnJlbnRXZWVrIiwiY3VycmVudERheSIsInJhdGVQcm9ncmFtIiwidXNlcklkX3Byb2dyYW1JZCIsInVwZGF0ZVByb2dyYW1Qcm9ncmVzcyIsInByb2dyZXNzRGF0YSIsImdldFdvcmtvdXRBbmFseXRpY3MiLCJlbmREYXRlIiwid29ya291dF9hbmFseXRpY3MiLCJnZXRQcm9ncmVzc01ldHJpY3MiLCJtZXRyaWNUeXBlIiwicmVjb3JkZWRBdCIsInByb2dyZXNzX21ldHJpY3MiLCJnZXRQZXJzb25hbFJlY29yZHMiLCJwZXJzb25hbF9yZWNvcmRzIiwiYWNoaWV2ZWRBdCIsImFkZFByb2dyZXNzTWV0cmljIiwidmFsdWUiLCJib2R5UGFydCIsImFkZFBlcnNvbmFsUmVjb3JkIiwicmVjb3JkVHlwZSIsImdlbmVyYXRlV29ya291dEFuYWx5dGljcyIsInNldERhdGUiLCJnZXREYXRlIiwid29ya291dExvZ3MiLCJkYWlseVN0YXRzIiwibG9nIiwiZGF0ZUtleSIsInRvSVNPU3RyaW5nIiwibWciLCJhZGQiLCJhbmFseXRpY3NQcm9taXNlcyIsInN0YXRzIiwidG9wTXVzY2xlR3JvdXAiLCJBcnJheSIsImZyb20iLCJ1c2VySWRfZGF0ZSIsIlByb21pc2UiLCJhbGwiLCJnZXRNYXJrZXRwbGFjZVRlbXBsYXRlcyIsImdldE1hcmtldHBsYWNlUHJvZ3JhbXMiLCJnZXRGZWF0dXJlZENvbnRlbnQiLCJ0ZW1wbGF0ZXMiLCJwcm9ncmFtcyIsImdldFRvcFJhdGVkQ29udGVudCIsImdldFBvcHVsYXJDb250ZW50IiwiZ2V0UmVjb21tZW5kZWRDb250ZW50IiwiZml0bmVzc0dvYWxzIiwiZXhwZXJpZW5jZUxldmVsIiwicHJlZmVycmVkV29ya291dFR5cGVzIiwidXNlckNhdGVnb3JpZXMiLCJwIiwiZmlsdGVyIiwiQm9vbGVhbiIsInVzZXJUYWdzIiwibGlua19zZXNzaW9uX3RvX2Fzc2Vzc21lbnQiLCJzZXNzaW9uX2lkIiwiYXNzZXNzbWVudF9pZCIsImFzc2Vzc21lbnQiLCJhc3Nlc3NtZW50cyIsImFzc2Vzc21lbnRfZGF0YSIsImZpdG5lc3NfbGV2ZWwiLCJkZXRlcm1pbmVfZml0bmVzc19sZXZlbCIsInByaW1hcnlfZ29hbCIsInByaW1hcnlHb2FsIiwibW92ZW1lbnRfbGltaXRhdGlvbnMiLCJsaW1pdGF0aW9ucyIsImV4cGVyaWVuY2VfeWVhcnMiLCJleHBlcmllbmNlWWVhcnMiLCJhc3Nlc3NtZW50SWQiLCJmaXRuZXNzTGV2ZWwiLCJzcXVhdF9zY29yZSIsInNxdWF0U2NvcmUiLCJwdXNoX3Njb3JlIiwicHVzaFNjb3JlIiwicHVsbF9zY29yZSIsInB1bGxTY29yZSIsImF2ZXJhZ2Vfc2NvcmUiLCJnZXRfYXNzZXNzbWVudF9iYXNlZF9yZWNvbW1lbmRhdGlvbnMiLCJ1c2VyX2lkIiwibGF0ZXN0X2Fzc2Vzc21lbnQiLCJleGVyY2lzZV9yZWNvbW1lbmRhdGlvbnMiLCJyZWNvbW1lbmRlZF92b2x1bWUiLCJjYWxjdWxhdGVfcmVjb21tZW5kZWRfdm9sdW1lIiwicmVjb21tZW5kZWRfZnJlcXVlbmN5IiwiY2FsY3VsYXRlX3JlY29tbWVuZGVkX2ZyZXF1ZW5jeSIsInRyYWluaW5nX3BoYXNlIiwicHJvZ3Jlc3Npb25fbGV2ZWwiLCJjb2FjaGluZ19jdWVzIiwidm9sdW1lX21hcCIsIkJFR0lOTkVSIiwiSU5URVJNRURJQVRFIiwiQURWQU5DRUQiLCJmcmVxdWVuY3lfbWFwIiwicHJlcGFyZV9haV90cmFpbmluZ19kYXRhIiwibmluZXR5X2RheXNfYWdvIiwidG90YWxfdm9sdW1lIiwiYXZlcmFnZV92b2x1bWUiLCJleGVyY2lzZV9mcmVxdWVuY3kiLCJNYXAiLCJzZXQiLCJnZXQiLCJmYXZvdXJpdGVfZXhlcmNpc2VzIiwid2Vla3NfaW5fcGVyaW9kIiwiY29uc2lzdGVuY3lfc2NvcmUiLCJ1c2VyX3Byb2ZpbGUiLCJ3b3Jrb3V0X2hpc3RvcnkiLCJ0b3RhbF9zZXNzaW9ucyIsInBlcmZvcm1hbmNlX21ldHJpY3MiLCJzdHJlbmd0aF9wcm9ncmVzc2lvbiIsImNhbGN1bGF0ZV9zdHJlbmd0aF9wcm9ncmVzc2lvbiIsInZvbHVtZV9wcm9ncmVzc2lvbiIsImNhbGN1bGF0ZV92b2x1bWVfcHJvZ3Jlc3Npb24iLCJ0ZWNobmlxdWVfc2NvcmVzIiwiZm9ybVF1YWxpdHkiLCJwcmVmZXJlbmNlcyIsInByZWZlcnJlZF9zZXRfdHlwZXMiLCJjYWxjdWxhdGVfcHJlZmVycmVkX3NldF90eXBlcyIsInByZWZlcnJlZF9yZXBfcmFuZ2VzIiwiY2FsY3VsYXRlX3ByZWZlcnJlZF9yZXBfcmFuZ2UiLCJwcmVmZXJyZWRfcmVzdF9kdXJhdGlvbnMiLCJjYWxjdWxhdGVfcHJlZmVycmVkX3Jlc3RfZHVyYXRpb25zIiwiZWFybHlfZW50cmllcyIsInJlY2VudF9lbnRyaWVzIiwiZWFybHlfYXZnX3ZvbHVtZSIsInJlY2VudF9hdmdfdm9sdW1lIiwiZmlyc3Rfc2Vzc2lvbiIsImxhc3Rfc2Vzc2lvbiIsImZpcnN0X3ZvbHVtZSIsImxhc3Rfdm9sdW1lIiwic2V0X3R5cGVfY291bnRzIiwidHlwZSIsInBlcmNlbnRpbGVfMjUiLCJwZXJjZW50aWxlXzc1IiwicmVzdF9kdXJhdGlvbnMiLCJhdmciLCJjYWxjdWxhdGVfc2Vzc2lvbl9leHBlcmllbmNlX3BvaW50cyIsImJyZWFrZG93biIsImJhc2VfcG9pbnRzIiwidm9sdW1lX2JvbnVzIiwidGVjaG5pcXVlX2JvbnVzIiwiY29uc2lzdGVuY3lfYm9udXMiLCJhY2hpZXZlbWVudF9ib251cyIsImVudHJpZXNfd2l0aF9mb3JtIiwiYXZnX2Zvcm0iLCJzdHJlYWtfYm9udXMiLCJjYWxjdWxhdGVfY29uc2lzdGVuY3lfc3RyZWFrX2JvbnVzIiwicHJfY291bnQiLCJ2b2x1bWVSZWNvcmQiLCJzZXNzaW9uX2RhdGUiLCJzZXZlbl9kYXlzX2FnbyIsInJlY2VudF9zZXNzaW9ucyIsImNoZWNrX2FuZF9hd2FyZF9hY2hpZXZlbWVudHMiLCJhd2FyZGVkX2FjaGlldmVtZW50X2lkcyIsImFsbF9hY2hpZXZlbWVudHMiLCJhY2hpZXZlbWVudHMiLCJleGlzdGluZ19hY2hpZXZlbWVudHMiLCJ1c2VyX2FjaGlldmVtZW50cyIsImFjaGlldmVtZW50SWQiLCJleGlzdGluZ19pZHMiLCJhY2hpZXZlbWVudCIsImNyaXRlcmlhIiwibWVldHNfY3JpdGVyaWEiLCJjaGVja19hY2hpZXZlbWVudF9jcml0ZXJpYSIsInNlc3Npb25JZCIsInB1c2giLCJjaGVja192b2x1bWVfYWNoaWV2ZW1lbnQiLCJjaGVja19jb25zaXN0ZW5jeV9hY2hpZXZlbWVudCIsImNoZWNrX3N0cmVuZ3RoX2FjaGlldmVtZW50IiwiY2hlY2tfdGVjaG5pcXVlX2FjaGlldmVtZW50IiwiY2hlY2tfbWlsZXN0b25lX2FjaGlldmVtZW50IiwiX3VzZXJfaWQiLCJ0aHJlc2hvbGQiLCJ0aGlydHlfZGF5c19hZ28iLCJzZXNzaW9uX2NvdW50IiwiZmluYWxpc2Vfc2Vzc2lvbl93aXRoX2dhbWlmaWNhdGlvbiIsInhwX2JyZWFrZG93biIsIm5ld19hY2hpZXZlbWVudHMiLCJhY2hpZXZlbWVudF94cCIsImV4cGVyaWVuY2VQb2ludHMiLCJhY2hpZXZlbWVudHNFYXJuZWQiLCJleHBlcmllbmNlX3BvaW50cyIsImFjaGlldmVtZW50c19lYXJuZWQiLCJwcmV2aW91c19iZXN0IiwicHJldmlvdXNfd2VpZ2h0IiwicGFyc2VGbG9hdCIsInJlcGxhY2UiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/core/database/workout-queries.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/ai/workout-suggestions.ts":
/*!************************************************!*\
  !*** ./src/services/ai/workout-suggestions.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateWorkoutSuggestions: () => (/* binding */ generateWorkoutSuggestions),\n/* harmony export */   get_exercise_recommendations: () => (/* binding */ get_exercise_recommendations),\n/* harmony export */   parse_nutrition_knowledge: () => (/* binding */ parse_nutrition_knowledge),\n/* harmony export */   parse_training_knowledge: () => (/* binding */ parse_training_knowledge)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _core_database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/core/database */ \"(rsc)/./src/core/database/index.ts\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n// src/services/ai/workout-suggestions.ts\n\n\n\n\n// Initialize OpenAI using existing configuration\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\nasync function generateWorkoutSuggestions(request) {\n    try {\n        // Get user's recent workout history for context\n        const recentWorkouts = await _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.workout_log_entries.findMany({\n            where: {\n                userId: request.userId\n            },\n            include: {\n                exercises: true\n            },\n            orderBy: {\n                date: 'desc'\n            },\n            take: 10\n        });\n        // Get available exercises from database\n        const availableExercises = await _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.exercises.findMany({\n            where: {\n                isActive: true\n            },\n            select: {\n                name: true,\n                category: true,\n                muscleGroups: true,\n                difficulty: true\n            },\n            take: 50 // Limit to avoid token limits\n        });\n        // Create the AI prompt\n        const prompt = createWorkoutPrompt(request, recentWorkouts, availableExercises);\n        // Generate suggestions using OpenAI\n        const response = await openai.chat.completions.create({\n            model: 'gpt-3.5-turbo',\n            messages: [\n                {\n                    role: 'system',\n                    content: 'You are an expert personal trainer with extensive knowledge of fitness, exercise science, and workout programming. Provide practical, safe, and effective workout suggestions based on the user\\'s preferences and goals.'\n                },\n                {\n                    role: 'user',\n                    content: prompt\n                }\n            ],\n            max_tokens: 1500,\n            temperature: 0.7\n        });\n        const aiResponse = response.choices[0]?.message?.content;\n        if (!aiResponse) {\n            throw new Error('No response from AI service');\n        }\n        // Parse the AI response into structured suggestions\n        const suggestions = parseAIResponse(aiResponse);\n        return suggestions;\n    } catch (error) {\n        console.error('Error generating AI workout suggestions:', error);\n        // Fallback to rule-based suggestions if AI fails\n        return generateFallbackSuggestions(request);\n    }\n}\nfunction createWorkoutPrompt(request, recentWorkouts, availableExercises) {\n    const recentExerciseNames = recentWorkouts.map((w)=>w.exercises.name).slice(0, 5);\n    return `\nCreate 2-3 personalized workout suggestions for a user with the following profile:\n\n**User Profile:**\n- Fitness Goals: ${request.fitnessGoals.join(', ')}\n- Experience Level: ${request.experienceLevel}\n- Preferred Workout Types: ${request.preferredWorkoutTypes.join(', ')}\n- Available Days: ${request.availableWorkoutDays.join(', ')}\n- Preferred Duration: ${request.preferredWorkoutDuration} minutes\n- Recent Exercises: ${recentExerciseNames.join(', ') || 'None'}\n\n**Available Exercises (use these):**\n${availableExercises.slice(0, 20).map((ex)=>`- ${ex.name} (${ex.category}, ${ex.difficulty})`).join('\\n')}\n\n**Requirements:**\n1. Each workout should be appropriate for their experience level\n2. Align with their fitness goals and preferred workout types\n3. Fit within their preferred duration\n4. Include 4-6 exercises with specific sets, reps, and rest times\n5. Avoid exercises they've done recently (for variety)\n6. Include practical tips for execution\n\n**Format your response as JSON:**\n\\`\\`\\`json\n[\n  {\n    \"title\": \"Workout Name\",\n    \"description\": \"Brief description of the workout focus\",\n    \"duration\": \"30-45 minutes\",\n    \"difficulty\": \"Beginner/Intermediate/Advanced\",\n    \"exercises\": [\n      {\n        \"name\": \"Exercise Name\",\n        \"sets\": 3,\n        \"reps\": \"8-12\",\n        \"restTime\": \"60-90 seconds\",\n        \"notes\": \"Form tip or modification\"\n      }\n    ],\n    \"tips\": [\"Training tip 1\", \"Training tip 2\"]\n  }\n]\n\\`\\`\\`\n`;\n}\nfunction parseAIResponse(response) {\n    try {\n        // Extract JSON from response\n        const jsonMatch = response.match(/```json\\n(.*?)\\n```/s);\n        if (jsonMatch) {\n            return JSON.parse(jsonMatch[1]);\n        }\n        // Try to parse the entire response as JSON\n        return JSON.parse(response);\n    } catch (error) {\n        console.error('Error parsing AI response:', error);\n        throw new Error('Failed to parse AI response');\n    }\n}\nfunction generateFallbackSuggestions(request) {\n    // Rule-based fallback suggestions based on user preferences\n    const suggestions = [];\n    if (request.preferredWorkoutTypes.includes('Strength Training')) {\n        suggestions.push({\n            title: 'Upper Body Strength',\n            description: 'Focus on building upper body strength and muscle',\n            duration: request.preferredWorkoutDuration + ' minutes',\n            difficulty: request.experienceLevel,\n            exercises: [\n                {\n                    name: 'Push-ups',\n                    sets: request.experienceLevel === 'BEGINNER' ? 2 : 3,\n                    reps: request.experienceLevel === 'BEGINNER' ? '5-8' : '8-12',\n                    restTime: '60 seconds',\n                    notes: 'Start on knees if needed'\n                },\n                {\n                    name: 'Dumbbell Rows',\n                    sets: 3,\n                    reps: '8-12',\n                    restTime: '60-90 seconds',\n                    notes: 'Keep back straight'\n                },\n                {\n                    name: 'Shoulder Press',\n                    sets: 3,\n                    reps: '8-10',\n                    restTime: '60-90 seconds',\n                    notes: 'Control the movement'\n                }\n            ],\n            tips: [\n                'Focus on proper form over heavy weight',\n                'Progressive overload is key for strength gains',\n                'Rest adequately between sets'\n            ]\n        });\n    }\n    if (request.preferredWorkoutTypes.includes('Cardio')) {\n        suggestions.push({\n            title: 'Cardio Conditioning',\n            description: 'Improve cardiovascular fitness and endurance',\n            duration: request.preferredWorkoutDuration + ' minutes',\n            difficulty: request.experienceLevel,\n            exercises: [\n                {\n                    name: 'Jumping Jacks',\n                    sets: 3,\n                    reps: request.experienceLevel === 'BEGINNER' ? '30 seconds' : '45 seconds',\n                    restTime: '30 seconds',\n                    notes: 'Maintain steady rhythm'\n                },\n                {\n                    name: 'High Knees',\n                    sets: 3,\n                    reps: '30 seconds',\n                    restTime: '30 seconds',\n                    notes: 'Drive knees up high'\n                },\n                {\n                    name: 'Burpees',\n                    sets: request.experienceLevel === 'BEGINNER' ? 2 : 3,\n                    reps: request.experienceLevel === 'BEGINNER' ? '5' : '8-10',\n                    restTime: '60 seconds',\n                    notes: 'Modify by stepping back instead of jumping'\n                }\n            ],\n            tips: [\n                'Start at a comfortable pace and build intensity',\n                'Focus on breathing throughout the workout',\n                'Stay hydrated during cardio sessions'\n            ]\n        });\n    }\n    // Default to at least one suggestion\n    if (suggestions.length === 0) {\n        suggestions.push({\n            title: 'Full Body Workout',\n            description: 'Complete workout targeting all major muscle groups',\n            duration: request.preferredWorkoutDuration + ' minutes',\n            difficulty: request.experienceLevel,\n            exercises: [\n                {\n                    name: 'Bodyweight Squats',\n                    sets: 3,\n                    reps: '10-15',\n                    restTime: '60 seconds',\n                    notes: 'Keep chest up and knees aligned'\n                },\n                {\n                    name: 'Push-ups',\n                    sets: 3,\n                    reps: '5-10',\n                    restTime: '60 seconds',\n                    notes: 'Modify on knees if needed'\n                },\n                {\n                    name: 'Plank',\n                    sets: 3,\n                    reps: '20-30 seconds',\n                    restTime: '45 seconds',\n                    notes: 'Keep body straight'\n                }\n            ],\n            tips: [\n                'Listen to your body and rest when needed',\n                'Consistency is more important than intensity',\n                'Progress gradually over time'\n            ]\n        });\n    }\n    return suggestions.slice(0, 2); // Return max 2 suggestions\n}\n// ===================================\n// Training Knowledge Base Functions\n// ===================================\n// Parse training knowledge base from converted markdown files\nfunction parse_training_knowledge() {\n    const cpt_dir = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), 'public/databases/NASM_CPT/converted');\n    const principles = [];\n    // Parse OPT Model (section_07)\n    const opt_content = read_section_file(cpt_dir, 'section_07_integrated_training_and_the_opt_model.md');\n    if (opt_content) {\n        // Extract OPT Model principles: Stabilisation, Strength, Power\n        const opt_principles = extract_opt_model_principles(opt_content);\n        principles.push(...opt_principles);\n    }\n    // Parse Assessment protocols (section_06)\n    const assessment_content = read_section_file(cpt_dir, 'section_06_assessments.md');\n    if (assessment_content) {\n        const assessment_principles = extract_assessment_principles(assessment_content);\n        principles.push(...assessment_principles);\n    }\n    // Parse Resistance Training (section_13)\n    const resistance_content = read_section_file(cpt_dir, 'section_13_resistance_training.md');\n    if (resistance_content) {\n        const resistance_principles = extract_resistance_training_principles(resistance_content);\n        principles.push(...resistance_principles);\n    }\n    // Parse Flexibility Training (section_08)\n    const flexibility_content = read_section_file(cpt_dir, 'section_08_flexibility_training.md');\n    if (flexibility_content) {\n        const flexibility_principles = extract_flexibility_principles(flexibility_content);\n        principles.push(...flexibility_principles);\n    }\n    return principles;\n}\n// Parse nutrition knowledge base from converted markdown files\nfunction parse_nutrition_knowledge() {\n    const cnc_dir = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), 'public/databases/NASM_CNC/converted');\n    return {\n        protein: read_section_file(cnc_dir, 'section_02_protein.md') || '',\n        carbohydrates: read_section_file(cnc_dir, 'section_03_carbohydrates.md') || '',\n        fats: read_section_file(cnc_dir, 'section_04_fats.md') || '',\n        food_choices: read_section_file(cnc_dir, 'section_01_food_choices.md') || ''\n    };\n}\n// Helper function to read section files\nfunction read_section_file(directory, filename) {\n    try {\n        const file_path = path__WEBPACK_IMPORTED_MODULE_2___default().join(directory, filename);\n        return fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(file_path, 'utf-8');\n    } catch (error) {\n        console.error(`Error reading ${filename}:`, error);\n        return null;\n    }\n}\n// Extract OPT Model principles from section_07\nfunction extract_opt_model_principles(content) {\n    const principles = [];\n    // Parse for Stabilisation, Strength, and Power phases\n    const phases = [\n        'Stabilisation',\n        'Strength',\n        'Power'\n    ];\n    phases.forEach((phase)=>{\n        const phase_section = extract_section(content, phase);\n        if (phase_section) {\n            principles.push({\n                name: `OPT Model - ${phase} Phase`,\n                description: `${phase} training phase of the OPT Model`,\n                application: phase_section.substring(0, 200),\n                category: 'TRAINING',\n                source_section: 'section_07'\n            });\n        }\n    });\n    return principles;\n}\n// Extract assessment principles from section_06\nfunction extract_assessment_principles(content) {\n    const principles = [];\n    // Look for key assessment types\n    const assessments = [\n        'Overhead Squat Assessment',\n        'Postural Assessment',\n        'Movement Assessment',\n        'Performance Assessment'\n    ];\n    assessments.forEach((assessment)=>{\n        const assessment_section = extract_section(content, assessment);\n        if (assessment_section) {\n            principles.push({\n                name: assessment,\n                description: `${assessment} protocol`,\n                application: assessment_section.substring(0, 200),\n                category: 'ASSESSMENT',\n                source_section: 'section_06'\n            });\n        }\n    });\n    return principles;\n}\n// Extract resistance training principles from section_13\nfunction extract_resistance_training_principles(content) {\n    const principles = [];\n    // Extract key resistance training concepts\n    const concepts = [\n        'Progressive Overload',\n        'Training Variables',\n        'Exercise Selection',\n        'Movement Patterns'\n    ];\n    concepts.forEach((concept)=>{\n        const concept_section = extract_section(content, concept);\n        if (concept_section) {\n            principles.push({\n                name: concept,\n                description: `Resistance training principle: ${concept}`,\n                application: concept_section.substring(0, 200),\n                category: 'TRAINING',\n                source_section: 'section_13'\n            });\n        }\n    });\n    return principles;\n}\n// Extract flexibility training principles from section_08\nfunction extract_flexibility_principles(content) {\n    const principles = [];\n    const flexibility_types = [\n        'Static Stretching',\n        'Dynamic Stretching',\n        'Active Stretching',\n        'Myofascial Release'\n    ];\n    flexibility_types.forEach((type)=>{\n        const type_section = extract_section(content, type);\n        if (type_section) {\n            principles.push({\n                name: type,\n                description: `Flexibility modality: ${type}`,\n                application: type_section.substring(0, 200),\n                category: 'TRAINING',\n                source_section: 'section_08'\n            });\n        }\n    });\n    return principles;\n}\n// Get exercise recommendations based on training principles\nfunction get_exercise_recommendations(fitness_level, _primary_goal, movement_pattern) {\n    // const training_principles = parse_training_knowledge();\n    const progression_map = {\n        BEGINNER: 'Stabilisation',\n        INTERMEDIATE: 'Strength',\n        ADVANCED: 'Power'\n    };\n    return {\n        movement_pattern,\n        training_principle: 'PROGRESSIVE_OVERLOAD',\n        progression_level: progression_map[fitness_level],\n        coaching_cues: get_coaching_cues(movement_pattern, fitness_level)\n    };\n}\n// Extract section by heading\nfunction extract_section(content, heading) {\n    const lines = content.split('\\n');\n    let capturing = false;\n    let section_content = '';\n    for (const line of lines){\n        // Match heading with various markdown formats (##, ###, etc.)\n        if (line.toLowerCase().includes(heading.toLowerCase()) && line.match(/^#{1,6}\\s/)) {\n            capturing = true;\n            continue;\n        }\n        // Stop at next heading of same or higher level\n        if (capturing && line.match(/^#{1,6}\\s/)) {\n            break;\n        }\n        if (capturing) {\n            section_content += line + '\\n';\n        }\n    }\n    return section_content || null;\n}\n// Coaching cues database (to be enhanced with training knowledge)\nfunction get_coaching_cues(movement_pattern, fitness_level) {\n    const cues_database = {\n        SQUAT: {\n            BEGINNER: [\n                'Chest up',\n                'Knees track over toes',\n                'Weight in heels'\n            ],\n            INTERMEDIATE: [\n                'Brace core',\n                'Hip hinge first',\n                'Drive through heels'\n            ],\n            ADVANCED: [\n                'Maintain tension',\n                'Explosive concentric',\n                'Controlled eccentric'\n            ]\n        },\n        HINGE: {\n            BEGINNER: [\n                'Neutral spine',\n                'Slight knee bend',\n                'Push hips back'\n            ],\n            INTERMEDIATE: [\n                'Load hamstrings',\n                'Lat engagement',\n                'Hip drive'\n            ],\n            ADVANCED: [\n                'Triple extension',\n                'Posterior chain activation',\n                'Power generation'\n            ]\n        },\n        PUSH: {\n            BEGINNER: [\n                'Shoulders packed',\n                'Elbows 45 degrees',\n                'Full range of motion'\n            ],\n            INTERMEDIATE: [\n                'Scapular retraction',\n                'Core tight',\n                'Controlled tempo'\n            ],\n            ADVANCED: [\n                'Maximum tension',\n                'Peak contraction',\n                'Mind-muscle connection'\n            ]\n        },\n        PULL: {\n            BEGINNER: [\n                'Lead with elbows',\n                'Shoulders down',\n                'Squeeze shoulder blades'\n            ],\n            INTERMEDIATE: [\n                'Full scapular retraction',\n                'Chest to bar',\n                'Lat focus'\n            ],\n            ADVANCED: [\n                'Dead hang start',\n                'Explosive pull',\n                'Control eccentric'\n            ]\n        },\n        CARRY: {\n            BEGINNER: [\n                'Neutral spine',\n                'Shoulders stable',\n                'Short distances'\n            ],\n            INTERMEDIATE: [\n                'Core braced',\n                'Even weight distribution',\n                'Controlled breathing'\n            ],\n            ADVANCED: [\n                'Maximum load',\n                'Extended duration',\n                'Anti-rotation focus'\n            ]\n        }\n    };\n    return cues_database[movement_pattern]?.[fitness_level] || [];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/ai/workout-suggestions.ts\n");

/***/ }),

/***/ "(rsc)/./src/types/workout.ts":
/*!******************************!*\
  !*** ./src/types/workout.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EXERCISE_CATEGORIES: () => (/* binding */ EXERCISE_CATEGORIES),\n/* harmony export */   MUSCLE_GROUPS: () => (/* binding */ MUSCLE_GROUPS),\n/* harmony export */   SET_TYPE_CONFIGS: () => (/* binding */ SET_TYPE_CONFIGS),\n/* harmony export */   calculateAverageWeight: () => (/* binding */ calculateAverageWeight),\n/* harmony export */   calculateTrainingVolume: () => (/* binding */ calculateTrainingVolume),\n/* harmony export */   convertKgToLb: () => (/* binding */ convertKgToLb),\n/* harmony export */   convertLbToKg: () => (/* binding */ convertLbToKg),\n/* harmony export */   formatDuration: () => (/* binding */ formatDuration),\n/* harmony export */   generateOrder: () => (/* binding */ generateOrder),\n/* harmony export */   isExercise: () => (/* binding */ isExercise),\n/* harmony export */   isWorkoutLogEntry: () => (/* binding */ isWorkoutLogEntry),\n/* harmony export */   isWorkoutSession: () => (/* binding */ isWorkoutSession),\n/* harmony export */   parseDuration: () => (/* binding */ parseDuration),\n/* harmony export */   parseWeightString: () => (/* binding */ parseWeightString)\n/* harmony export */ });\n/**\n * Workout Log Type Definitions for Massimino\n * Comprehensive type system for workout tracking and management\n */ // ============================================================================\n// ENUMS\n// ============================================================================\n// ============================================================================\n// CONSTANTS\n// ============================================================================\n/**\n * Set type configurations\n */ const SET_TYPE_CONFIGS = {\n    STRAIGHT: {\n        type: 'STRAIGHT',\n        label: 'Straight Sets',\n        description: 'Regular sets with consistent weight',\n        orderPattern: 'numeric',\n        weightHandling: 'single'\n    },\n    SUPERSET: {\n        type: 'SUPERSET',\n        label: 'Superset',\n        description: 'Two exercises performed back-to-back',\n        orderPattern: 'grouped',\n        maxGroupSize: 2,\n        weightHandling: 'single'\n    },\n    TRISET: {\n        type: 'TRISET',\n        label: 'Triset',\n        description: 'Three exercises performed back-to-back',\n        orderPattern: 'grouped',\n        maxGroupSize: 3,\n        weightHandling: 'single'\n    },\n    GIANT_SET: {\n        type: 'GIANT_SET',\n        label: 'Giant Set',\n        description: 'Four or more exercises performed back-to-back',\n        orderPattern: 'grouped',\n        maxGroupSize: 4,\n        weightHandling: 'single'\n    },\n    PYRAMID: {\n        type: 'PYRAMID',\n        label: 'Pyramid',\n        description: 'Increasing weight with each set',\n        orderPattern: 'numeric',\n        weightHandling: 'progressive'\n    },\n    REVERSE_PYRAMID: {\n        type: 'REVERSE_PYRAMID',\n        label: 'Reverse Pyramid',\n        description: 'Decreasing weight with each set',\n        orderPattern: 'numeric',\n        weightHandling: 'progressive'\n    },\n    DROP_SET: {\n        type: 'DROP_SET',\n        label: 'Drop Set',\n        description: 'Decreasing weight within the same set',\n        orderPattern: 'numeric',\n        weightHandling: 'multiple'\n    },\n    REST_PAUSE: {\n        type: 'REST_PAUSE',\n        label: 'Rest-Pause',\n        description: 'Short rest periods within a set',\n        orderPattern: 'numeric',\n        weightHandling: 'single'\n    },\n    CLUSTER: {\n        type: 'CLUSTER',\n        label: 'Cluster',\n        description: 'Short rest periods between reps',\n        orderPattern: 'numeric',\n        weightHandling: 'single'\n    },\n    EMOM: {\n        type: 'EMOM',\n        label: 'EMOM',\n        description: 'Every Minute on the Minute',\n        orderPattern: 'numeric',\n        weightHandling: 'single'\n    },\n    AMRAP: {\n        type: 'AMRAP',\n        label: 'AMRAP',\n        description: 'As Many Rounds As Possible',\n        orderPattern: 'numeric',\n        weightHandling: 'single'\n    }\n};\n/**\n * Exercise categories\n */ const EXERCISE_CATEGORIES = [\n    {\n        name: 'Compound',\n        description: 'Multi-joint movements that work multiple muscle groups',\n        muscleGroups: [\n            'chest',\n            'back',\n            'shoulders',\n            'legs'\n        ],\n        equipment: [\n            'barbell',\n            'dumbbell',\n            'kettlebell'\n        ],\n        difficulty: 'INTERMEDIATE'\n    },\n    {\n        name: 'Isolation',\n        description: 'Single-joint movements that target specific muscles',\n        muscleGroups: [\n            'biceps',\n            'triceps',\n            'calves',\n            'abs'\n        ],\n        equipment: [\n            'dumbbell',\n            'cable',\n            'machine'\n        ],\n        difficulty: 'BEGINNER'\n    },\n    {\n        name: 'Cardio',\n        description: 'Cardiovascular exercises for endurance and conditioning',\n        muscleGroups: [\n            'heart',\n            'lungs'\n        ],\n        equipment: [\n            'treadmill',\n            'bike',\n            'rower',\n            'elliptical'\n        ],\n        difficulty: 'BEGINNER'\n    },\n    {\n        name: 'Mobility',\n        description: 'Flexibility and mobility exercises',\n        muscleGroups: [\n            'joints',\n            'connective tissue'\n        ],\n        equipment: [\n            'bodyweight',\n            'foam_roller',\n            'band'\n        ],\n        difficulty: 'BEGINNER'\n    }\n];\n/**\n * Muscle groups\n */ const MUSCLE_GROUPS = [\n    {\n        name: 'Chest',\n        description: 'Pectoralis major and minor',\n        primaryExercises: [\n            'bench_press',\n            'push_ups',\n            'dumbbell_press'\n        ],\n        secondaryExercises: [\n            'dips',\n            'flyes',\n            'cable_crossovers'\n        ]\n    },\n    {\n        name: 'Back',\n        description: 'Latissimus dorsi, rhomboids, trapezius',\n        primaryExercises: [\n            'pull_ups',\n            'rows',\n            'deadlift'\n        ],\n        secondaryExercises: [\n            'lat_pulldowns',\n            'face_pulls',\n            'shrugs'\n        ]\n    },\n    {\n        name: 'Shoulders',\n        description: 'Deltoids (anterior, lateral, posterior)',\n        primaryExercises: [\n            'overhead_press',\n            'lateral_raises',\n            'rear_delt_flyes'\n        ],\n        secondaryExercises: [\n            'arnold_press',\n            'upright_rows',\n            'face_pulls'\n        ]\n    },\n    {\n        name: 'Arms',\n        description: 'Biceps and triceps',\n        primaryExercises: [\n            'bicep_curls',\n            'tricep_dips',\n            'hammer_curls'\n        ],\n        secondaryExercises: [\n            'preacher_curls',\n            'skull_crushers',\n            'concentration_curls'\n        ]\n    },\n    {\n        name: 'Legs',\n        description: 'Quadriceps, hamstrings, glutes, calves',\n        primaryExercises: [\n            'squats',\n            'deadlifts',\n            'lunges'\n        ],\n        secondaryExercises: [\n            'leg_press',\n            'leg_curls',\n            'calf_raises'\n        ]\n    },\n    {\n        name: 'Core',\n        description: 'Abdominals, obliques, lower back',\n        primaryExercises: [\n            'planks',\n            'crunches',\n            'dead_bugs'\n        ],\n        secondaryExercises: [\n            'russian_twists',\n            'leg_raises',\n            'mountain_climbers'\n        ]\n    }\n];\n// ============================================================================\n// TYPE GUARDS\n// ============================================================================\n/**\n * Type guard for workout log entry\n */ const isWorkoutLogEntry = (obj)=>{\n    return obj && typeof obj.id === 'string' && typeof obj.userId === 'string' && obj.date instanceof Date && typeof obj.exerciseId === 'string' && typeof obj.order === 'string' && typeof obj.setNumber === 'number' && typeof obj.reps === 'number' && typeof obj.weight === 'string' && typeof obj.unit === 'string';\n};\n/**\n * Type guard for exercise\n */ const isExercise = (obj)=>{\n    return obj && typeof obj.id === 'string' && typeof obj.name === 'string' && typeof obj.category === 'string' && Array.isArray(obj.muscleGroups) && Array.isArray(obj.equipment);\n};\n/**\n * Type guard for workout session\n */ const isWorkoutSession = (obj)=>{\n    return obj && typeof obj.id === 'string' && typeof obj.userId === 'string' && obj.date instanceof Date && obj.startTime instanceof Date;\n};\n// ============================================================================\n// HELPER FUNCTIONS\n// ============================================================================\n/**\n * Convert weight from lb to kg\n */ const convertLbToKg = (weight)=>{\n    return weight * 0.453592;\n};\n/**\n * Convert weight from kg to lb\n */ const convertKgToLb = (weight)=>{\n    return weight / 0.453592;\n};\n/**\n * Parse weight string to numbers\n */ const parseWeightString = (weight)=>{\n    return weight.split(',').map((w)=>w.trim()).filter((w)=>w.length > 0).map((w)=>parseFloat(w)).filter((w)=>!isNaN(w));\n};\n/**\n * Calculate average weight from weight string\n */ const calculateAverageWeight = (weight)=>{\n    const weights = parseWeightString(weight);\n    if (weights.length === 0) return 0;\n    return weights.reduce((sum, w)=>sum + w, 0) / weights.length;\n};\n/**\n * Calculate training volume\n */ const calculateTrainingVolume = (sets, reps, averageWeight, unit)=>{\n    const weightKg = unit === 'LB' ? convertLbToKg(averageWeight) : averageWeight;\n    return sets * reps * weightKg;\n};\n/**\n * Generate order string based on set type and context\n */ const generateOrder = (setType, context)=>{\n    const config = SET_TYPE_CONFIGS[setType];\n    if (config && config.orderPattern === 'numeric') {\n        return context.currentGroupNumber.toString();\n    } else {\n        // Grouped pattern (A, B, C, etc.)\n        return `${context.currentGroupNumber}${context.currentSubOrder}`;\n    }\n};\n/**\n * Format duration string\n */ const formatDuration = (seconds)=>{\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const secs = seconds % 60;\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n};\n/**\n * Parse duration string\n */ const parseDuration = (duration)=>{\n    const parts = duration.split(':').map(Number);\n    if (parts.length === 3) {\n        return (parts[0] || 0) * 3600 + (parts[1] || 0) * 60 + (parts[2] || 0);\n    }\n    return 0;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/types/workout.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@prisma/client");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream/web");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/formdata-node","vendor-chunks/next","vendor-chunks/next-auth","vendor-chunks/@opentelemetry","vendor-chunks/@babel","vendor-chunks/node-fetch","vendor-chunks/openai","vendor-chunks/jose","vendor-chunks/openid-client","vendor-chunks/web-streams-polyfill","vendor-chunks/bcryptjs","vendor-chunks/oauth","vendor-chunks/event-target-shim","vendor-chunks/agentkeepalive","vendor-chunks/object-hash","vendor-chunks/preact","vendor-chunks/uuid","vendor-chunks/form-data-encoder","vendor-chunks/preact-render-to-string","vendor-chunks/cookie","vendor-chunks/abort-controller","vendor-chunks/@panva","vendor-chunks/oidc-token-hash","vendor-chunks/ms","vendor-chunks/humanize-ms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fprofile%2Froute&page=%2Fapi%2Fprofile%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprofile%2Froute.ts&appDir=%2FUsers%2Fvictorsole%2FDocuments%2FGitHub%2Fmassimino%2Fmassimino%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fvictorsole%2FDocuments%2FGitHub%2Fmassimino%2Fmassimino&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();