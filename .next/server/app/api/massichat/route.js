/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/massichat/route";
exports.ids = ["app/api/massichat/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fmassichat%2Froute&page=%2Fapi%2Fmassichat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmassichat%2Froute.ts&appDir=%2FUsers%2Fvictorsole%2FDocuments%2FGitHub%2Fmassimino%2Fmassimino%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fvictorsole%2FDocuments%2FGitHub%2Fmassimino%2Fmassimino&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fmassichat%2Froute&page=%2Fapi%2Fmassichat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmassichat%2Froute.ts&appDir=%2FUsers%2Fvictorsole%2FDocuments%2FGitHub%2Fmassimino%2Fmassimino%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fvictorsole%2FDocuments%2FGitHub%2Fmassimino%2Fmassimino&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_victorsole_Documents_GitHub_massimino_massimino_src_app_api_massichat_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/massichat/route.ts */ \"(rsc)/./src/app/api/massichat/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/massichat/route\",\n        pathname: \"/api/massichat\",\n        filename: \"route\",\n        bundlePath: \"app/api/massichat/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"/Users/victorsole/Documents/GitHub/massimino/massimino/src/app/api/massichat/route.ts\",\n    nextConfigOutput,\n    userland: _Users_victorsole_Documents_GitHub_massimino_massimino_src_app_api_massichat_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/massichat/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fmassichat%2Froute&page=%2Fapi%2Fmassichat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmassichat%2Froute.ts&appDir=%2FUsers%2Fvictorsole%2FDocuments%2FGitHub%2Fmassimino%2Fmassimino%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fvictorsole%2FDocuments%2FGitHub%2Fmassimino%2Fmassimino&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/massichat/route.ts":
/*!****************************************!*\
  !*** ./src/app/api/massichat/route.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   PATCH: () => (/* binding */ PATCH),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth */ \"(rsc)/./node_modules/next-auth/index.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/core */ \"(rsc)/./src/core/index.ts\");\n/* harmony import */ var _core_database__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/core/database */ \"(rsc)/./src/core/database/index.ts\");\n/* harmony import */ var _services_ai_massichat_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/ai/massichat_service */ \"(rsc)/./src/services/ai/massichat_service.ts\");\n\n\n\n\n\nasync function POST(request) {\n    try {\n        const session = await (0,next_auth__WEBPACK_IMPORTED_MODULE_1__.getServerSession)(_core__WEBPACK_IMPORTED_MODULE_2__.authOptions);\n        if (!session?.user?.id) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Unauthorized'\n        }, {\n            status: 401\n        });\n        const { message, sessionId, includeAssessments, includeWorkoutHistory } = await request.json();\n        if (!message || typeof message !== 'string') {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Message is required'\n            }, {\n                status: 400\n            });\n        }\n        const res = await (0,_services_ai_massichat_service__WEBPACK_IMPORTED_MODULE_4__.sendMassichatMessage)({\n            userId: session.user.id,\n            sessionId,\n            message,\n            includeAssessments: includeAssessments ?? true,\n            includeWorkoutHistory: includeWorkoutHistory ?? true\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(res);\n    } catch (err) {\n        const raw = err?.message || 'Internal server error';\n        const redacted = redactSecrets(raw);\n        console.error('Massichat POST error:', redacted);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: redacted\n        }, {\n            status: 500\n        });\n    }\n}\nasync function GET(request) {\n    try {\n        const session = await (0,next_auth__WEBPACK_IMPORTED_MODULE_1__.getServerSession)(_core__WEBPACK_IMPORTED_MODULE_2__.authOptions);\n        if (!session?.user?.id) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Unauthorized'\n        }, {\n            status: 401\n        });\n        const { searchParams } = new URL(request.url);\n        const list = searchParams.get('list') === 'true';\n        const sessionId = searchParams.get('sessionId');\n        const db = _core_database__WEBPACK_IMPORTED_MODULE_3__.prisma;\n        if (!db?.ai_chat_sessions) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Massichat tables not available. Run migrations.'\n            }, {\n                status: 500\n            });\n        }\n        if (list) {\n            const sessions = await db.ai_chat_sessions.findMany({\n                where: {\n                    userId: session.user.id\n                },\n                orderBy: {\n                    updatedAt: 'desc'\n                },\n                take: 20,\n                include: {\n                    ai_chat_messages: {\n                        orderBy: {\n                            createdAt: 'desc'\n                        },\n                        take: 1\n                    }\n                }\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                sessions\n            });\n        }\n        if (!sessionId) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'sessionId required'\n        }, {\n            status: 400\n        });\n        const sess = await db.ai_chat_sessions.findFirst({\n            where: {\n                id: sessionId,\n                userId: session.user.id\n            }\n        });\n        if (!sess) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Not found'\n        }, {\n            status: 404\n        });\n        const messages = await db.ai_chat_messages.findMany({\n            where: {\n                sessionId\n            },\n            orderBy: {\n                createdAt: 'asc'\n            }\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            session: sess,\n            messages\n        });\n    } catch (err) {\n        const raw = err?.message || 'Internal server error';\n        const redacted = redactSecrets(raw);\n        console.error('Massichat GET error:', redacted);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: redacted\n        }, {\n            status: 500\n        });\n    }\n}\nasync function PATCH(request) {\n    try {\n        const session = await (0,next_auth__WEBPACK_IMPORTED_MODULE_1__.getServerSession)(_core__WEBPACK_IMPORTED_MODULE_2__.authOptions);\n        if (!session?.user?.id) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Unauthorized'\n        }, {\n            status: 401\n        });\n        const body = await request.json().catch(()=>({}));\n        const sessionId = body.sessionId;\n        const title = (body.title || '').trim();\n        const db = _core_database__WEBPACK_IMPORTED_MODULE_3__.prisma;\n        if (!db?.ai_chat_sessions?.update) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Massichat tables not available'\n        }, {\n            status: 500\n        });\n        if (!sessionId || !title) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'sessionId and title are required'\n        }, {\n            status: 400\n        });\n        const updated = await db.ai_chat_sessions.update({\n            where: {\n                id: sessionId,\n                userId: session.user.id\n            },\n            data: {\n                title\n            }\n        }).catch(()=>null);\n        if (!updated) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Not found'\n        }, {\n            status: 404\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true\n        });\n    } catch (err) {\n        const raw = err?.message || 'Internal server error';\n        const redacted = redactSecrets(raw);\n        console.error('Massichat PATCH error:', redacted);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: redacted\n        }, {\n            status: 500\n        });\n    }\n}\nasync function DELETE(request) {\n    try {\n        const session = await (0,next_auth__WEBPACK_IMPORTED_MODULE_1__.getServerSession)(_core__WEBPACK_IMPORTED_MODULE_2__.authOptions);\n        if (!session?.user?.id) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Unauthorized'\n        }, {\n            status: 401\n        });\n        const { searchParams } = new URL(request.url);\n        const sessionId = searchParams.get('sessionId');\n        const db = _core_database__WEBPACK_IMPORTED_MODULE_3__.prisma;\n        if (!db?.ai_chat_sessions?.deleteMany) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Massichat tables not available'\n        }, {\n            status: 500\n        });\n        if (!sessionId) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'sessionId required'\n        }, {\n            status: 400\n        });\n        const res = await db.ai_chat_sessions.deleteMany({\n            where: {\n                id: sessionId,\n                userId: session.user.id\n            }\n        });\n        if (res.count === 0) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Not found'\n        }, {\n            status: 404\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true\n        });\n    } catch (err) {\n        const raw = err?.message || 'Internal server error';\n        const redacted = redactSecrets(raw);\n        console.error('Massichat DELETE error:', redacted);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: redacted\n        }, {\n            status: 500\n        });\n    }\n}\nfunction redactSecrets(msg) {\n    try {\n        // Redact API keys like sk-... or sk-proj-...\n        return msg.replace(/sk-[a-zA-Z0-9_\\-]+/g, 'sk-***');\n    } catch  {\n        return 'Internal server error';\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/massichat/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/core/auth/config.ts":
/*!*********************************!*\
  !*** ./src/core/auth/config.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authOptions: () => (/* binding */ authOptions),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var next_auth_providers_google__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/providers/google */ \"(rsc)/./node_modules/next-auth/providers/google.js\");\n/* harmony import */ var next_auth_providers_linkedin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/providers/linkedin */ \"(rsc)/./node_modules/next-auth/providers/linkedin.js\");\n/* harmony import */ var next_auth_providers_facebook__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next-auth/providers/facebook */ \"(rsc)/./node_modules/next-auth/providers/facebook.js\");\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next-auth/providers/credentials */ \"(rsc)/./node_modules/next-auth/providers/credentials.js\");\n/* harmony import */ var _core_database__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/core/database */ \"(rsc)/./src/core/database/index.ts\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/index.js\");\n/* harmony import */ var _prisma_adapter_custom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./prisma-adapter-custom */ \"(rsc)/./src/core/auth/prisma-adapter-custom.ts\");\n// src/lib/auth/config.ts\n/**\n * Authentication Configuration for Massimino\n * Safety-first approach with strict validation and role-based access\n */ // import { PrismaAdapter } from '@next-auth/prisma-adapter'; // Standard adapter doesn't work with lowercase table names\n\n\n\n\n\n\n\n// Define enums as const values since Prisma client may not be available\nconst UserRole = {\n    CLIENT: 'CLIENT',\n    TRAINER: 'TRAINER',\n    ADMIN: 'ADMIN'\n};\nconst UserStatus = {\n    ACTIVE: 'ACTIVE',\n    SUSPENDED: 'SUSPENDED',\n    BANNED: 'BANNED'\n};\n// Environment variable validation\n// Require NEXTAUTH_SECRET always; allow NEXTAUTH_URL to default in development\nconst devDefaultNextAuthUrl =  true ? 'http://localhost:3000' : 0;\nconst requiredEnvVars = {\n    NEXTAUTH_SECRET: process.env.NEXTAUTH_SECRET\n};\n// Ensure NEXTAUTH_URL is defined at runtime for libraries that read it\nif (false) {}\n// Google OAuth configuration (optional)\nconst googleConfig = {\n    GOOGLE_CLIENT_ID: process.env.GOOGLE_CLIENT_ID,\n    GOOGLE_CLIENT_SECRET: process.env.GOOGLE_CLIENT_SECRET\n};\n// LinkedIn OAuth configuration (optional)\nconst linkedinConfig = {\n    LINKEDIN_CLIENT_ID: process.env.LINKEDIN_CLIENT_ID,\n    LINKEDIN_CLIENT_SECRET: process.env.LINKEDIN_CLIENT_SECRET\n};\n// Facebook OAuth configuration (optional)\nconst facebookConfig = {\n    FACEBOOK_CLIENT_ID: process.env.FACEBOOK_CLIENT_ID,\n    FACEBOOK_CLIENT_SECRET: process.env.FACEBOOK_CLIENT_SECRET\n};\n// Validate required environment variables\nfor (const [key, value] of Object.entries(requiredEnvVars)){\n    if (!value) {\n        throw new Error(`Missing required environment variable: ${key}`);\n    }\n}\n// Admin bootstrap via environment variable list (comma-separated emails)\nconst ADMIN_EMAILS = (process.env.ADMIN_EMAILS || '').split(',').map((e)=>e.trim().toLowerCase()).filter(Boolean);\n// Build providers array dynamically\nconst providers = [\n    // Email/Password authentication\n    (0,next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({\n        name: 'credentials',\n        credentials: {\n            email: {\n                label: 'Email',\n                type: 'email'\n            },\n            password: {\n                label: 'Password',\n                type: 'password'\n            }\n        },\n        async authorize (credentials) {\n            if (!credentials?.email || !credentials?.password) {\n                return null;\n            }\n            try {\n                // Find user by email\n                const user = await _core_database__WEBPACK_IMPORTED_MODULE_4__.prisma.users.findUnique({\n                    where: {\n                        email: credentials.email\n                    },\n                    select: {\n                        id: true,\n                        email: true,\n                        name: true,\n                        password: true,\n                        role: true,\n                        status: true,\n                        reputationScore: true,\n                        warningCount: true,\n                        trainerVerified: true,\n                        suspendedUntil: true\n                    }\n                });\n                if (!user || !user.password) {\n                    return null;\n                }\n                // Check password\n                const isValid = await bcryptjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"].compare(credentials.password, user.password);\n                if (!isValid) {\n                    return null;\n                }\n                // Check if user is active\n                if (user.status !== UserStatus.ACTIVE) {\n                    return null;\n                }\n                // Update last login\n                await _core_database__WEBPACK_IMPORTED_MODULE_4__.prisma.users.update({\n                    where: {\n                        id: user.id\n                    },\n                    data: {\n                        lastLoginAt: new Date()\n                    }\n                });\n                return {\n                    id: user.id,\n                    email: user.email,\n                    name: user.name || '',\n                    image: null,\n                    role: user.role,\n                    status: user.status,\n                    reputationScore: user.reputationScore,\n                    warningCount: user.warningCount,\n                    trainerVerified: user.trainerVerified,\n                    suspendedUntil: user.suspendedUntil\n                };\n            } catch (error) {\n                console.error('Auth error:', error);\n                return null;\n            }\n        }\n    })\n];\n// Add Google provider if configured\nif (googleConfig.GOOGLE_CLIENT_ID && googleConfig.GOOGLE_CLIENT_SECRET) {\n    providers.push((0,next_auth_providers_google__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        clientId: googleConfig.GOOGLE_CLIENT_ID,\n        clientSecret: googleConfig.GOOGLE_CLIENT_SECRET,\n        authorization: {\n            params: {\n                scope: 'openid email profile',\n                prompt: 'consent',\n                access_type: 'offline',\n                response_type: 'code'\n            }\n        },\n        profile (profile) {\n            return {\n                id: profile.sub,\n                name: profile.name,\n                email: profile.email,\n                image: profile.picture,\n                role: UserRole.CLIENT,\n                status: UserStatus.ACTIVE,\n                emailVerified: profile.email_verified ? new Date() : null,\n                googleId: profile.sub,\n                reputationScore: 0,\n                warningCount: 0,\n                trainerVerified: false\n            };\n        }\n    }));\n} else if (true) {\n    console.warn('Google OAuth not configured (GOOGLE_CLIENT_ID/SECRET missing).');\n}\n// Add LinkedIn provider if configured\nif (linkedinConfig.LINKEDIN_CLIENT_ID && linkedinConfig.LINKEDIN_CLIENT_SECRET) {\n    providers.push((0,next_auth_providers_linkedin__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n        clientId: linkedinConfig.LINKEDIN_CLIENT_ID,\n        clientSecret: linkedinConfig.LINKEDIN_CLIENT_SECRET,\n        authorization: {\n            params: {\n                scope: 'r_liteprofile r_emailaddress',\n                state: 'random_state_string'\n            }\n        },\n        profile (profile) {\n            return {\n                id: profile.id,\n                name: `${profile.localizedFirstName} ${profile.localizedLastName}`,\n                email: profile.emailAddress,\n                image: profile.profilePicture?.['displayImage~']?.elements?.[0]?.identifiers?.[0]?.identifier || null,\n                role: UserRole.CLIENT,\n                status: UserStatus.ACTIVE,\n                emailVerified: new Date(),\n                linkedinId: profile.id,\n                reputationScore: 0,\n                warningCount: 0,\n                trainerVerified: false\n            };\n        }\n    }));\n} else if (true) {\n    console.warn('LinkedIn OAuth not configured (LINKEDIN_CLIENT_ID/SECRET missing).');\n}\n// Add Facebook provider if configured\nif (facebookConfig.FACEBOOK_CLIENT_ID && facebookConfig.FACEBOOK_CLIENT_SECRET) {\n    providers.push((0,next_auth_providers_facebook__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n        clientId: facebookConfig.FACEBOOK_CLIENT_ID,\n        clientSecret: facebookConfig.FACEBOOK_CLIENT_SECRET,\n        authorization: {\n            params: {\n                scope: 'email,public_profile'\n            }\n        }\n    }));\n} else if (true) {\n    console.warn('Facebook OAuth not configured (FACEBOOK_CLIENT_ID/SECRET missing).');\n}\nconst authOptions = {\n    // Use custom Prisma adapter for lowercase model names (accounts, sessions, verificationtokens)\n    adapter: (0,_prisma_adapter_custom__WEBPACK_IMPORTED_MODULE_6__.CustomPrismaAdapter)(_core_database__WEBPACK_IMPORTED_MODULE_4__.prisma),\n    // Authentication providers\n    providers,\n    // Database session strategy for better security\n    session: {\n        strategy: 'database',\n        // Session expires after 30 days of inactivity\n        maxAge: 30 * 24 * 60 * 60,\n        // Update session activity every 24 hours\n        updateAge: 24 * 60 * 60\n    },\n    // JWT configuration (for API routes)\n    jwt: {\n        // JWT expires after 1 hour for better security\n        maxAge: 60 * 60\n    },\n    // Custom pages for better UX and branding\n    pages: {\n        signIn: '/login',\n        error: '/login',\n        newUser: '/dashboard'\n    },\n    // Security and safety callbacks\n    callbacks: {\n        // Control who can sign in\n        async signIn ({ user, account }) {\n            try {\n                // Safety check: ensure user has a valid email\n                if (!user.email) {\n                    console.warn('Sign-in attempt without email:', {\n                        user,\n                        account\n                    });\n                    return false;\n                }\n                // Check if user exists\n                const existingUser = await _core_database__WEBPACK_IMPORTED_MODULE_4__.prisma.users.findUnique({\n                    where: {\n                        email: user.email\n                    },\n                    select: {\n                        status: true,\n                        suspendedUntil: true\n                    }\n                });\n                if (existingUser) {\n                    // Block banned users\n                    if (existingUser.status === UserStatus.BANNED) {\n                        console.warn('Banned user attempted sign-in:', user.email);\n                        return false;\n                    }\n                    // Check if suspension has expired\n                    if (existingUser.status === UserStatus.SUSPENDED && existingUser.suspendedUntil && existingUser.suspendedUntil > new Date()) {\n                        console.warn('Suspended user attempted sign-in:', user.email);\n                        return false;\n                    }\n                    // Auto-activate users whose suspension has expired\n                    if (existingUser.status === UserStatus.SUSPENDED && existingUser.suspendedUntil && existingUser.suspendedUntil <= new Date()) {\n                        await _core_database__WEBPACK_IMPORTED_MODULE_4__.prisma.users.update({\n                            where: {\n                                email: user.email\n                            },\n                            data: {\n                                status: UserStatus.ACTIVE,\n                                suspendedUntil: null\n                            }\n                        });\n                    }\n                    // Update last login time for security tracking\n                    await _core_database__WEBPACK_IMPORTED_MODULE_4__.prisma.users.update({\n                        where: {\n                            email: user.email\n                        },\n                        data: {\n                            lastLoginAt: new Date()\n                        }\n                    });\n                    // Promote to ADMIN if email is defined in ADMIN_EMAILS list\n                    if (user.email && ADMIN_EMAILS.includes(user.email.toLowerCase())) {\n                        try {\n                            await _core_database__WEBPACK_IMPORTED_MODULE_4__.prisma.users.update({\n                                where: {\n                                    email: user.email\n                                },\n                                data: {\n                                    role: UserRole.ADMIN,\n                                    trainerVerified: true\n                                }\n                            });\n                        } catch (e) {\n                            console.warn('Admin promotion skipped:', e);\n                        }\n                    }\n                } else {\n                    // Allow OAuth providers to create new users automatically\n                    if (account?.provider && account.provider !== 'credentials') {\n                        console.log('Allowing automatic user creation for OAuth provider:', account.provider);\n                        return true;\n                    } else {\n                        // Block credentials login for non-existing users\n                        console.warn('Credentials login attempted for non-existing user:', user.email);\n                        return false;\n                    }\n                }\n                return true;\n            } catch (error) {\n                console.error('Sign-in callback error:', error);\n                return false;\n            }\n        },\n        // Customize session data\n        async session ({ session, user }) {\n            if (session.user && user) {\n                // Add user role and safety info to session\n                const dbUser = await _core_database__WEBPACK_IMPORTED_MODULE_4__.prisma.users.findUnique({\n                    where: {\n                        id: user.id\n                    },\n                    select: {\n                        id: true,\n                        role: true,\n                        status: true,\n                        reputationScore: true,\n                        warningCount: true,\n                        trainerVerified: true,\n                        suspendedUntil: true\n                    }\n                });\n                if (dbUser) {\n                    session.user.id = user.id;\n                    session.user.role = dbUser.role;\n                    session.user.status = dbUser.status;\n                    session.user.reputationScore = dbUser.reputationScore;\n                    session.user.warningCount = dbUser.warningCount;\n                    session.user.trainerVerified = dbUser.trainerVerified;\n                    session.user.suspendedUntil = dbUser.suspendedUntil;\n                    // Safety flag for UI\n                    session.user.isSafe = dbUser.status === UserStatus.ACTIVE && dbUser.reputationScore >= 50;\n                }\n            }\n            return session;\n        },\n        // Handle JWT tokens for API routes\n        async jwt ({ token, user }) {\n            // Store user ID in token on first sign in\n            if (user) {\n                token.userId = user.id;\n                token.role = user.role || UserRole.CLIENT;\n            }\n            return token;\n        },\n        // Handle redirects after authentication\n        async redirect ({ url, baseUrl }) {\n            // Always redirect to app domain for security\n            if (url.startsWith('/')) {\n                return `${baseUrl}${url}`;\n            }\n            // Only allow redirects to same domain\n            if (new URL(url).origin === baseUrl) {\n                return url;\n            }\n            return baseUrl;\n        }\n    },\n    // Event handlers for logging and safety\n    events: {\n        async signIn ({ user, account: _account, isNewUser }) {\n            console.log('User signed in:', {\n                userId: user.id,\n                email: user.email,\n                isNewUser,\n                provider: _account?.provider\n            });\n            // Log new user registrations for safety monitoring\n            if (isNewUser) {\n                console.log('New user registered:', {\n                    userId: user.id,\n                    email: user.email,\n                    provider: _account?.provider,\n                    timestamp: new Date().toISOString()\n                });\n            }\n        },\n        async signOut ({ session, token }) {\n            console.log('User signed out:', {\n                userId: session?.user?.id || token?.userId,\n                timestamp: new Date().toISOString()\n            });\n        },\n        async createUser ({ user }) {\n            console.log('User created in database:', {\n                userId: user.id,\n                email: user.email,\n                role: user.role,\n                timestamp: new Date().toISOString()\n            });\n            // Initialize safety settings for new users\n            try {\n                // Note: SafetySettings model needs to be added to Prisma schema\n                // For now, skip this initialization\n                console.log('Safety settings initialization skipped - model not yet defined');\n            } catch (error) {\n                console.error('Failed to create safety settings for new user:', error);\n            }\n        }\n    },\n    // Security configuration\n    debug: \"development\" === 'development',\n    // Custom logger for better security monitoring\n    logger: {\n        error (code, metadata) {\n            console.error('NextAuth Error:', {\n                code,\n                metadata\n            });\n        },\n        warn (code) {\n            console.warn('NextAuth Warning:', code);\n        },\n        debug (code, metadata) {\n            if (true) {\n                console.debug('NextAuth Debug:', {\n                    code,\n                    metadata\n                });\n            }\n        }\n    }\n};\n// Export type-safe auth configuration\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (authOptions);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/core/auth/config.ts\n");

/***/ }),

/***/ "(rsc)/./src/core/auth/prisma-adapter-custom.ts":
/*!************************************************!*\
  !*** ./src/core/auth/prisma-adapter-custom.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CustomPrismaAdapter: () => (/* binding */ CustomPrismaAdapter)\n/* harmony export */ });\n// src/core/auth/prisma-adapter-custom.ts\n// Custom Prisma Adapter for lowercase model names\n// This adapter wraps the standard PrismaAdapter but uses lowercase table names\nfunction CustomPrismaAdapter(prisma) {\n    return {\n        async createUser (user) {\n            const data = {\n                id: crypto.randomUUID(),\n                email: user.email,\n                emailVerified: user.emailVerified ?? null,\n                name: user.name ?? null,\n                image: user.image ?? null,\n                updatedAt: new Date(),\n                createdAt: new Date()\n            };\n            return await prisma.users.create({\n                data\n            });\n        },\n        async getUser (id) {\n            return await prisma.users.findUnique({\n                where: {\n                    id\n                }\n            });\n        },\n        async getUserByEmail (email) {\n            return await prisma.users.findUnique({\n                where: {\n                    email\n                }\n            });\n        },\n        async getUserByAccount ({ providerAccountId, provider }) {\n            const account = await prisma.accounts.findUnique({\n                where: {\n                    provider_providerAccountId: {\n                        provider,\n                        providerAccountId\n                    }\n                },\n                include: {\n                    users: true\n                }\n            });\n            return account?.users ?? null;\n        },\n        async updateUser ({ id, ...data }) {\n            return await prisma.users.update({\n                where: {\n                    id\n                },\n                data\n            });\n        },\n        async deleteUser (userId) {\n            await prisma.users.delete({\n                where: {\n                    id: userId\n                }\n            });\n        },\n        async linkAccount (account) {\n            await prisma.accounts.create({\n                data: {\n                    id: crypto.randomUUID(),\n                    userId: account.userId,\n                    type: account.type,\n                    provider: account.provider,\n                    providerAccountId: account.providerAccountId,\n                    refresh_token: account.refresh_token ?? null,\n                    access_token: account.access_token ?? null,\n                    expires_at: account.expires_at ?? null,\n                    token_type: account.token_type ?? null,\n                    scope: account.scope ?? null,\n                    id_token: account.id_token ?? null,\n                    session_state: account.session_state ?? null\n                }\n            });\n        },\n        async unlinkAccount ({ providerAccountId, provider }) {\n            await prisma.accounts.delete({\n                where: {\n                    provider_providerAccountId: {\n                        provider,\n                        providerAccountId\n                    }\n                }\n            });\n        },\n        async createSession ({ sessionToken, userId, expires }) {\n            return await prisma.sessions.create({\n                data: {\n                    id: crypto.randomUUID(),\n                    sessionToken,\n                    userId,\n                    expires\n                }\n            });\n        },\n        async getSessionAndUser (sessionToken) {\n            const userAndSession = await prisma.sessions.findUnique({\n                where: {\n                    sessionToken\n                },\n                include: {\n                    users: true\n                }\n            });\n            if (!userAndSession) return null;\n            const { users: user, ...session } = userAndSession;\n            return {\n                user: user,\n                session: session\n            };\n        },\n        async updateSession ({ sessionToken, ...data }) {\n            return await prisma.sessions.update({\n                where: {\n                    sessionToken\n                },\n                data\n            });\n        },\n        async deleteSession (sessionToken) {\n            await prisma.sessions.delete({\n                where: {\n                    sessionToken\n                }\n            });\n        },\n        async createVerificationToken ({ identifier, expires, token }) {\n            return await prisma.verificationtokens.create({\n                data: {\n                    identifier,\n                    expires,\n                    token\n                }\n            });\n        },\n        async useVerificationToken ({ identifier, token }) {\n            try {\n                return await prisma.verificationtokens.delete({\n                    where: {\n                        identifier_token: {\n                            identifier,\n                            token\n                        }\n                    }\n                });\n            } catch (error) {\n                return null;\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/core/auth/prisma-adapter-custom.ts\n");

/***/ }),

/***/ "(rsc)/./src/core/database/client.ts":
/*!*************************************!*\
  !*** ./src/core/database/client.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * Database Client for Massimino\n * Centralized Prisma client instance\n */ \n// Create a single Prisma client instance\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) {\n    globalForPrisma.prisma = prisma;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvY29yZS9kYXRhYmFzZS9jbGllbnQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7OztDQUdDLEdBRTZDO0FBRTlDLHlDQUF5QztBQUN6QyxNQUFNQyxrQkFBa0JDO0FBSWpCLE1BQU1DLFNBQVNGLGdCQUFnQkUsTUFBTSxJQUFJLElBQUlILHdEQUFZQSxHQUFHO0FBRW5FLElBQUlJLElBQXFDLEVBQUU7SUFDekNILGdCQUFnQkUsTUFBTSxHQUFHQTtBQUMzQiIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcnNvbGUvRG9jdW1lbnRzL0dpdEh1Yi9tYXNzaW1pbm8vbWFzc2ltaW5vL3NyYy9jb3JlL2RhdGFiYXNlL2NsaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERhdGFiYXNlIENsaWVudCBmb3IgTWFzc2ltaW5vXG4gKiBDZW50cmFsaXplZCBQcmlzbWEgY2xpZW50IGluc3RhbmNlXG4gKi9cblxuaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQnO1xuXG4vLyBDcmVhdGUgYSBzaW5nbGUgUHJpc21hIGNsaWVudCBpbnN0YW5jZVxuY29uc3QgZ2xvYmFsRm9yUHJpc21hID0gZ2xvYmFsVGhpcyBhcyB1bmtub3duIGFzIHtcbiAgcHJpc21hOiBQcmlzbWFDbGllbnQgfCB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgY29uc3QgcHJpc21hID0gZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/PyBuZXcgUHJpc21hQ2xpZW50KCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBwcmlzbWE7XG59Il0sIm5hbWVzIjpbIlByaXNtYUNsaWVudCIsImdsb2JhbEZvclByaXNtYSIsImdsb2JhbFRoaXMiLCJwcmlzbWEiLCJwcm9jZXNzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/core/database/client.ts\n");

/***/ }),

/***/ "(rsc)/./src/core/database/index.ts":
/*!************************************!*\
  !*** ./src/core/database/index.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModerationAction: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.ModerationAction),\n/* harmony export */   ModerationSource: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.ModerationSource),\n/* harmony export */   UserRole: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.UserRole),\n/* harmony export */   UserStatus: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.UserStatus),\n/* harmony export */   ViolationType: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.ViolationType),\n/* harmony export */   addClientToTrainer: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.addClientToTrainer),\n/* harmony export */   addCoachFeedback: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.addCoachFeedback),\n/* harmony export */   addPersonalRecord: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.addPersonalRecord),\n/* harmony export */   addProgressMetric: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.addProgressMetric),\n/* harmony export */   approveTeamMembership: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.approveTeamMembership),\n/* harmony export */   calculate_session_experience_points: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.calculate_session_experience_points),\n/* harmony export */   checkAppointmentConflict: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.checkAppointmentConflict),\n/* harmony export */   check_and_award_achievements: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.check_and_award_achievements),\n/* harmony export */   completeWorkoutSession: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.completeWorkoutSession),\n/* harmony export */   createAppointment: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.createAppointment),\n/* harmony export */   createChallenge: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.createChallenge),\n/* harmony export */   createExercise: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.createExercise),\n/* harmony export */   createExerciseVariation: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.createExerciseVariation),\n/* harmony export */   createModerationLog: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.createModerationLog),\n/* harmony export */   createMollieCustomer: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.createMollieCustomer),\n/* harmony export */   createMolliePayment: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.createMolliePayment),\n/* harmony export */   createOrUpdateTrainerProfile: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.createOrUpdateTrainerProfile),\n/* harmony export */   createPremiumTeam: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.createPremiumTeam),\n/* harmony export */   createProgressReport: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.createProgressReport),\n/* harmony export */   createSafetyReport: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.createSafetyReport),\n/* harmony export */   createTrainingProgram: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.createTrainingProgram),\n/* harmony export */   createUserViolation: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.createUserViolation),\n/* harmony export */   createWorkoutLogEntry: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.createWorkoutLogEntry),\n/* harmony export */   createWorkoutSession: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.createWorkoutSession),\n/* harmony export */   createWorkoutTemplate: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.createWorkoutTemplate),\n/* harmony export */   deleteExercise: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.deleteExercise),\n/* harmony export */   deleteExerciseVariation: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.deleteExerciseVariation),\n/* harmony export */   deleteTrainingProgram: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.deleteTrainingProgram),\n/* harmony export */   deleteWorkoutLogEntry: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.deleteWorkoutLogEntry),\n/* harmony export */   deleteWorkoutSession: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.deleteWorkoutSession),\n/* harmony export */   deleteWorkoutTemplate: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.deleteWorkoutTemplate),\n/* harmony export */   finalise_session_with_gamification: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.finalise_session_with_gamification),\n/* harmony export */   generateSafetyReport: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.generateSafetyReport),\n/* harmony export */   generateWorkoutAnalytics: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.generateWorkoutAnalytics),\n/* harmony export */   getChallengeLeaderboard: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getChallengeLeaderboard),\n/* harmony export */   getChallenges: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getChallenges),\n/* harmony export */   getClientWorkoutLogs: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getClientWorkoutLogs),\n/* harmony export */   getEquipmentTypes: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getEquipmentTypes),\n/* harmony export */   getExercise: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getExercise),\n/* harmony export */   getExerciseCategories: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getExerciseCategories),\n/* harmony export */   getExerciseVariationById: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getExerciseVariationById),\n/* harmony export */   getExerciseVariations: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getExerciseVariations),\n/* harmony export */   getExercises: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getExercises),\n/* harmony export */   getFeaturedContent: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getFeaturedContent),\n/* harmony export */   getFlaggedUsers: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getFlaggedUsers),\n/* harmony export */   getMarketplacePrograms: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getMarketplacePrograms),\n/* harmony export */   getMarketplaceTemplates: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getMarketplaceTemplates),\n/* harmony export */   getModerationLogs: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getModerationLogs),\n/* harmony export */   getModerationStatistics: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getModerationStatistics),\n/* harmony export */   getMuscleGroups: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getMuscleGroups),\n/* harmony export */   getMyPrograms: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getMyPrograms),\n/* harmony export */   getMyTemplates: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getMyTemplates),\n/* harmony export */   getPaymentByMollieId: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getPaymentByMollieId),\n/* harmony export */   getPendingSafetyReports: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getPendingSafetyReports),\n/* harmony export */   getPersonalRecords: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getPersonalRecords),\n/* harmony export */   getPopularContent: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getPopularContent),\n/* harmony export */   getPrivacyControlledLeaderboard: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getPrivacyControlledLeaderboard),\n/* harmony export */   getProgressMetrics: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getProgressMetrics),\n/* harmony export */   getRecommendedContent: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getRecommendedContent),\n/* harmony export */   getSafetyAnalytics: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getSafetyAnalytics),\n/* harmony export */   getTeamAnalytics: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTeamAnalytics),\n/* harmony export */   getTeamMembers: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTeamMembers),\n/* harmony export */   getTeamMembership: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTeamMembership),\n/* harmony export */   getTeams: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTeams),\n/* harmony export */   getTopRatedContent: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getTopRatedContent),\n/* harmony export */   getTrainerAppointments: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTrainerAppointments),\n/* harmony export */   getTrainerAvailability: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTrainerAvailability),\n/* harmony export */   getTrainerClients: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTrainerClients),\n/* harmony export */   getTrainerEarnings: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTrainerEarnings),\n/* harmony export */   getTrainerPaymentAnalytics: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTrainerPaymentAnalytics),\n/* harmony export */   getTrainerProfileWithStats: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTrainerProfileWithStats),\n/* harmony export */   getTrainerProgressReports: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getTrainerProgressReports),\n/* harmony export */   getTrainingProgramById: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getTrainingProgramById),\n/* harmony export */   getTrainingPrograms: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getTrainingPrograms),\n/* harmony export */   getUserPrivacySettings: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getUserPrivacySettings),\n/* harmony export */   getUserProgramSubscriptions: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getUserProgramSubscriptions),\n/* harmony export */   getUserSafetyProfile: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getUserSafetyProfile),\n/* harmony export */   getUserSafetySettings: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getUserSafetySettings),\n/* harmony export */   getUserViolationHistory: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.getUserViolationHistory),\n/* harmony export */   getUserWorkoutsUnified: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getUserWorkoutsUnified),\n/* harmony export */   getWorkoutAnalytics: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getWorkoutAnalytics),\n/* harmony export */   getWorkoutLogEntries: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getWorkoutLogEntries),\n/* harmony export */   getWorkoutLogEntry: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getWorkoutLogEntry),\n/* harmony export */   getWorkoutSession: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getWorkoutSession),\n/* harmony export */   getWorkoutSessions: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getWorkoutSessions),\n/* harmony export */   getWorkoutStats: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getWorkoutStats),\n/* harmony export */   getWorkoutTemplateById: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getWorkoutTemplateById),\n/* harmony export */   getWorkoutTemplates: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.getWorkoutTemplates),\n/* harmony export */   get_assessment_based_recommendations: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.get_assessment_based_recommendations),\n/* harmony export */   joinChallenge: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.joinChallenge),\n/* harmony export */   joinPremiumTeam: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.joinPremiumTeam),\n/* harmony export */   leaveChallenge: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.leaveChallenge),\n/* harmony export */   leavePremiumTeam: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.leavePremiumTeam),\n/* harmony export */   link_session_to_assessment: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.link_session_to_assessment),\n/* harmony export */   prepare_ai_training_data: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.prepare_ai_training_data),\n/* harmony export */   prisma: () => (/* reexport safe */ _client__WEBPACK_IMPORTED_MODULE_0__.prisma),\n/* harmony export */   processRefund: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.processRefund),\n/* harmony export */   purchaseProgram: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.purchaseProgram),\n/* harmony export */   purchaseTemplate: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.purchaseTemplate),\n/* harmony export */   rateProgram: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.rateProgram),\n/* harmony export */   rateTemplate: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.rateTemplate),\n/* harmony export */   rescheduleAppointment: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.rescheduleAppointment),\n/* harmony export */   searchExercises: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.searchExercises),\n/* harmony export */   searchTrainingPrograms: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.searchTrainingPrograms),\n/* harmony export */   searchWorkoutTemplates: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.searchWorkoutTemplates),\n/* harmony export */   shareProgressReport: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.shareProgressReport),\n/* harmony export */   subscribeToProgram: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.subscribeToProgram),\n/* harmony export */   updateAppointmentStatus: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.updateAppointmentStatus),\n/* harmony export */   updateChallengeProgress: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.updateChallengeProgress),\n/* harmony export */   updateExercise: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.updateExercise),\n/* harmony export */   updateExerciseVariation: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.updateExerciseVariation),\n/* harmony export */   updatePaymentFromMollie: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.updatePaymentFromMollie),\n/* harmony export */   updateProgramProgress: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.updateProgramProgress),\n/* harmony export */   updateSafetyReport: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.updateSafetyReport),\n/* harmony export */   updateTrainingProgram: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.updateTrainingProgram),\n/* harmony export */   updateUserPrivacySettings: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.updateUserPrivacySettings),\n/* harmony export */   updateUserSafetySettings: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.updateUserSafetySettings),\n/* harmony export */   updateUserSafetyStatus: () => (/* reexport safe */ _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__.updateUserSafetyStatus),\n/* harmony export */   updateWorkoutLogEntry: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.updateWorkoutLogEntry),\n/* harmony export */   updateWorkoutSession: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.updateWorkoutSession),\n/* harmony export */   updateWorkoutTemplate: () => (/* reexport safe */ _workout_queries__WEBPACK_IMPORTED_MODULE_2__.updateWorkoutTemplate)\n/* harmony export */ });\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client */ \"(rsc)/./src/core/database/client.ts\");\n/* harmony import */ var _safety_business_queries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./safety-business-queries */ \"(rsc)/./src/core/database/safety-business-queries.ts\");\n/* harmony import */ var _workout_queries__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./workout-queries */ \"(rsc)/./src/core/database/workout-queries.ts\");\n/**\n * Database Exports\n * Centralized export point for all database functionality\n */ // Database client\n\n// Safety, moderation, and business operation queries\n\n// Workout domain queries\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvY29yZS9kYXRhYmFzZS9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7O0NBR0MsR0FFRCxrQkFBa0I7QUFDTztBQUV6QixxREFBcUQ7QUFDWDtBQUUxQyx5QkFBeUI7QUFDUyIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcnNvbGUvRG9jdW1lbnRzL0dpdEh1Yi9tYXNzaW1pbm8vbWFzc2ltaW5vL3NyYy9jb3JlL2RhdGFiYXNlL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGF0YWJhc2UgRXhwb3J0c1xuICogQ2VudHJhbGl6ZWQgZXhwb3J0IHBvaW50IGZvciBhbGwgZGF0YWJhc2UgZnVuY3Rpb25hbGl0eVxuICovXG5cbi8vIERhdGFiYXNlIGNsaWVudFxuZXhwb3J0ICogZnJvbSAnLi9jbGllbnQnO1xuXG4vLyBTYWZldHksIG1vZGVyYXRpb24sIGFuZCBidXNpbmVzcyBvcGVyYXRpb24gcXVlcmllc1xuZXhwb3J0ICogZnJvbSAnLi9zYWZldHktYnVzaW5lc3MtcXVlcmllcyc7XG5cbi8vIFdvcmtvdXQgZG9tYWluIHF1ZXJpZXNcbmV4cG9ydCAqIGZyb20gJy4vd29ya291dC1xdWVyaWVzJzsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/core/database/index.ts\n");

/***/ }),

/***/ "(rsc)/./src/core/database/safety-business-queries.ts":
/*!******************************************************!*\
  !*** ./src/core/database/safety-business-queries.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModerationAction: () => (/* binding */ ModerationAction),\n/* harmony export */   ModerationSource: () => (/* binding */ ModerationSource),\n/* harmony export */   UserRole: () => (/* binding */ UserRole),\n/* harmony export */   UserStatus: () => (/* binding */ UserStatus),\n/* harmony export */   ViolationType: () => (/* binding */ ViolationType),\n/* harmony export */   addClientToTrainer: () => (/* binding */ addClientToTrainer),\n/* harmony export */   approveTeamMembership: () => (/* binding */ approveTeamMembership),\n/* harmony export */   checkAppointmentConflict: () => (/* binding */ checkAppointmentConflict),\n/* harmony export */   createAppointment: () => (/* binding */ createAppointment),\n/* harmony export */   createChallenge: () => (/* binding */ createChallenge),\n/* harmony export */   createModerationLog: () => (/* binding */ createModerationLog),\n/* harmony export */   createMollieCustomer: () => (/* binding */ createMollieCustomer),\n/* harmony export */   createMolliePayment: () => (/* binding */ createMolliePayment),\n/* harmony export */   createOrUpdateTrainerProfile: () => (/* binding */ createOrUpdateTrainerProfile),\n/* harmony export */   createPremiumTeam: () => (/* binding */ createPremiumTeam),\n/* harmony export */   createProgressReport: () => (/* binding */ createProgressReport),\n/* harmony export */   createSafetyReport: () => (/* binding */ createSafetyReport),\n/* harmony export */   createUserViolation: () => (/* binding */ createUserViolation),\n/* harmony export */   generateSafetyReport: () => (/* binding */ generateSafetyReport),\n/* harmony export */   getChallengeLeaderboard: () => (/* binding */ getChallengeLeaderboard),\n/* harmony export */   getChallenges: () => (/* binding */ getChallenges),\n/* harmony export */   getFlaggedUsers: () => (/* binding */ getFlaggedUsers),\n/* harmony export */   getModerationLogs: () => (/* binding */ getModerationLogs),\n/* harmony export */   getModerationStatistics: () => (/* binding */ getModerationStatistics),\n/* harmony export */   getPaymentByMollieId: () => (/* binding */ getPaymentByMollieId),\n/* harmony export */   getPendingSafetyReports: () => (/* binding */ getPendingSafetyReports),\n/* harmony export */   getPrivacyControlledLeaderboard: () => (/* binding */ getPrivacyControlledLeaderboard),\n/* harmony export */   getSafetyAnalytics: () => (/* binding */ getSafetyAnalytics),\n/* harmony export */   getTeamAnalytics: () => (/* binding */ getTeamAnalytics),\n/* harmony export */   getTeamMembers: () => (/* binding */ getTeamMembers),\n/* harmony export */   getTeamMembership: () => (/* binding */ getTeamMembership),\n/* harmony export */   getTeams: () => (/* binding */ getTeams),\n/* harmony export */   getTrainerAppointments: () => (/* binding */ getTrainerAppointments),\n/* harmony export */   getTrainerAvailability: () => (/* binding */ getTrainerAvailability),\n/* harmony export */   getTrainerClients: () => (/* binding */ getTrainerClients),\n/* harmony export */   getTrainerEarnings: () => (/* binding */ getTrainerEarnings),\n/* harmony export */   getTrainerPaymentAnalytics: () => (/* binding */ getTrainerPaymentAnalytics),\n/* harmony export */   getTrainerProfileWithStats: () => (/* binding */ getTrainerProfileWithStats),\n/* harmony export */   getTrainerProgressReports: () => (/* binding */ getTrainerProgressReports),\n/* harmony export */   getUserPrivacySettings: () => (/* binding */ getUserPrivacySettings),\n/* harmony export */   getUserSafetyProfile: () => (/* binding */ getUserSafetyProfile),\n/* harmony export */   getUserSafetySettings: () => (/* binding */ getUserSafetySettings),\n/* harmony export */   getUserViolationHistory: () => (/* binding */ getUserViolationHistory),\n/* harmony export */   joinChallenge: () => (/* binding */ joinChallenge),\n/* harmony export */   joinPremiumTeam: () => (/* binding */ joinPremiumTeam),\n/* harmony export */   leaveChallenge: () => (/* binding */ leaveChallenge),\n/* harmony export */   leavePremiumTeam: () => (/* binding */ leavePremiumTeam),\n/* harmony export */   processRefund: () => (/* binding */ processRefund),\n/* harmony export */   rescheduleAppointment: () => (/* binding */ rescheduleAppointment),\n/* harmony export */   shareProgressReport: () => (/* binding */ shareProgressReport),\n/* harmony export */   updateAppointmentStatus: () => (/* binding */ updateAppointmentStatus),\n/* harmony export */   updateChallengeProgress: () => (/* binding */ updateChallengeProgress),\n/* harmony export */   updatePaymentFromMollie: () => (/* binding */ updatePaymentFromMollie),\n/* harmony export */   updateSafetyReport: () => (/* binding */ updateSafetyReport),\n/* harmony export */   updateUserPrivacySettings: () => (/* binding */ updateUserPrivacySettings),\n/* harmony export */   updateUserSafetySettings: () => (/* binding */ updateUserSafetySettings),\n/* harmony export */   updateUserSafetyStatus: () => (/* binding */ updateUserSafetyStatus)\n/* harmony export */ });\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client */ \"(rsc)/./src/core/database/client.ts\");\n// src/lib/database/queries.ts\n/**\n * Safety-Related Database Queries for Massimino\n * Optimized queries for user safety, moderation, and security operations\n */ \n// Define types locally since Prisma client may not be available\nconst UserRole = {\n    CLIENT: 'CLIENT',\n    TRAINER: 'TRAINER',\n    ADMIN: 'ADMIN'\n};\nconst UserStatus = {\n    ACTIVE: 'ACTIVE',\n    SUSPENDED: 'SUSPENDED',\n    BANNED: 'BANNED'\n};\nconst ViolationType = {\n    HARASSMENT: 'HARASSMENT',\n    HATE_SPEECH: 'HATE_SPEECH',\n    THREAT: 'THREAT',\n    INAPPROPRIATE_CONTENT: 'INAPPROPRIATE_CONTENT',\n    SPAM: 'SPAM',\n    PRIVACY_VIOLATION: 'PRIVACY_VIOLATION'\n};\nconst ModerationAction = {\n    APPROVED: 'APPROVED',\n    FLAGGED: 'FLAGGED',\n    BLOCKED: 'BLOCKED',\n    DELETED: 'DELETED'\n};\nconst ModerationSource = {\n    OPENAI: 'OPENAI',\n    CUSTOM_RULES: 'CUSTOM_RULES',\n    MANUAL: 'MANUAL'\n};\n// ============================================================================\n// USER SAFETY QUERIES\n// ============================================================================\n/**\n * Get comprehensive user safety information\n */ async function getUserSafetyProfile(userId) {\n    const user = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.findUnique({\n        where: {\n            id: userId\n        },\n        select: {\n            id: true,\n            email: true,\n            name: true,\n            image: true,\n            role: true,\n            status: true,\n            reputationScore: true,\n            warningCount: true,\n            trainerVerified: true,\n            suspendedUntil: true,\n            createdAt: true,\n            lastLoginAt: true\n        }\n    });\n    if (!user) {\n        return {\n            user: null,\n            violationCount: 0,\n            recentViolations: 0,\n            suspensionHistory: 0,\n            riskLevel: 'LOW',\n            restrictions: []\n        };\n    }\n    // Get violation statistics\n    const [violationCount, recentViolations, suspensionHistory, lastViolationResult] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.user_violations.count({\n            where: {\n                userId\n            }\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.user_violations.count({\n            where: {\n                userId,\n                createdAt: {\n                    gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)\n                }\n            }\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.user_violations.count({\n            where: {\n                userId,\n                suspensionHours: {\n                    gt: 0\n                }\n            }\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.user_violations.findFirst({\n            where: {\n                userId\n            },\n            orderBy: {\n                createdAt: 'desc'\n            },\n            select: {\n                createdAt: true\n            }\n        })\n    ]);\n    // Calculate risk level\n    const riskLevel = calculateUserRiskLevel(user.reputationScore, violationCount, recentViolations, user.warningCount);\n    // Determine active restrictions\n    const restrictions = determineUserRestrictions(user, violationCount, recentViolations);\n    return {\n        user: user ? {\n            id: user.id,\n            email: user.email,\n            name: user.name || 'Unknown',\n            ...user.image && {\n                image: user.image\n            },\n            role: user.role,\n            status: user.status,\n            reputationScore: user.reputationScore,\n            warningCount: user.warningCount,\n            trainerVerified: user.trainerVerified,\n            suspendedUntil: user.suspendedUntil || null,\n            isSafe: riskLevel === 'LOW' && user.status === UserStatus.ACTIVE,\n            createdAt: user.createdAt,\n            lastLoginAt: user.lastLoginAt || null\n        } : null,\n        violationCount,\n        recentViolations,\n        suspensionHistory,\n        ...lastViolationResult?.createdAt && {\n            lastViolation: lastViolationResult.createdAt\n        },\n        riskLevel,\n        restrictions\n    };\n}\n/**\n * Get users flagged for potential safety concerns\n */ async function getFlaggedUsers(params) {\n    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n    // Get users with safety concerns\n    const users = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.findMany({\n        where: {\n            OR: [\n                {\n                    reputationScore: {\n                        lt: 50\n                    }\n                },\n                {\n                    warningCount: {\n                        gte: 2\n                    }\n                },\n                {\n                    status: {\n                        in: [\n                            UserStatus.SUSPENDED\n                        ]\n                    }\n                }\n            ],\n            ...params.includeRecent && {\n                violations: {\n                    some: {\n                        createdAt: {\n                            gte: thirtyDaysAgo\n                        }\n                    }\n                }\n            }\n        },\n        select: {\n            id: true,\n            name: true,\n            email: true,\n            role: true,\n            reputationScore: true,\n            warningCount: true,\n            user_violations: {\n                select: {\n                    createdAt: true\n                },\n                orderBy: {\n                    createdAt: 'desc'\n                }\n            }\n        },\n        orderBy: [\n            {\n                reputationScore: 'asc'\n            },\n            {\n                warningCount: 'desc'\n            }\n        ],\n        take: params.limit || 50,\n        skip: params.offset || 0\n    });\n    return users.map((user)=>{\n        const violationCount = user.violations.length;\n        const recentViolations = user.violations.filter((v)=>v.createdAt >= thirtyDaysAgo).length;\n        const lastViolation = user.violations[0]?.createdAt;\n        const riskLevel = calculateUserRiskLevel(user.reputationScore, violationCount, recentViolations, user.warningCount);\n        return {\n            id: user.id,\n            name: user.name || 'Unknown',\n            email: user.email,\n            role: user.role,\n            reputationScore: user.reputationScore,\n            warningCount: user.warningCount,\n            violationCount,\n            recentViolations,\n            ...lastViolation && {\n                lastViolation\n            },\n            riskLevel\n        };\n    });\n}\n/**\n * Update user safety status after enforcement action\n */ async function updateUserSafetyStatus(userId, updates) {\n    // Use regular prisma transaction instead of safeTransaction for now\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.$transaction(async (tx)=>{\n        const currentUser = await tx.users.findUniqueOrThrow({\n            where: {\n                id: userId\n            },\n            select: {\n                reputationScore: true\n            }\n        });\n        const newReputationScore = updates.reputationChange ? Math.max(0, currentUser.reputationScore + updates.reputationChange) : undefined;\n        return tx.users.update({\n            where: {\n                id: userId\n            },\n            data: {\n                ...newReputationScore !== undefined && {\n                    reputationScore: newReputationScore\n                },\n                ...updates.warningCount !== undefined && {\n                    warningCount: updates.warningCount\n                },\n                ...updates.status && {\n                    status: updates.status\n                },\n                ...updates.suspendedUntil !== undefined && {\n                    suspendedUntil: updates.suspendedUntil\n                }\n            }\n        });\n    });\n}\n// ============================================================================\n// MODERATION LOG QUERIES\n// ============================================================================\n/**\n * Create moderation log entry\n */ async function createModerationLog(data) {\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.moderation_logs.create({\n        data: {\n            ...data,\n            processedAt: new Date()\n        }\n    });\n}\n/**\n * Get moderation logs with advanced filtering\n */ async function getModerationLogs(params) {\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.moderation_logs.findMany({\n        where: {\n            ...params.userId && {\n                userId: params.userId\n            },\n            ...params.action && {\n                action: params.action\n            },\n            ...params.contentType && {\n                contentType: params.contentType\n            },\n            ...(params.dateFrom || params.dateTo) && {\n                createdAt: {\n                    ...params.dateFrom && {\n                        gte: params.dateFrom\n                    },\n                    ...params.dateTo && {\n                        lte: params.dateTo\n                    }\n                }\n            }\n        },\n        ...params.includeUser && {\n            include: {\n                users: {\n                    select: {\n                        name: true,\n                        role: true\n                    }\n                }\n            }\n        },\n        orderBy: {\n            createdAt: 'desc'\n        },\n        take: params.limit || 50,\n        skip: params.offset || 0\n    });\n}\n/**\n * Get moderation statistics for dashboard\n */ async function getModerationStatistics(timeframe = 'day') {\n    const hoursMap = {\n        day: 24,\n        week: 168,\n        month: 720\n    };\n    const since = new Date(Date.now() - hoursMap[timeframe] * 60 * 60 * 1000);\n    const [logs, reasonCounts] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.moderation_logs.findMany({\n            where: {\n                createdAt: {\n                    gte: since\n                }\n            },\n            select: {\n                action: true,\n                contentType: true,\n                confidence: true,\n                userId: true,\n                flaggedReason: true,\n                users: {\n                    select: {\n                        name: true\n                    }\n                }\n            }\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.moderation_logs.groupBy({\n            by: [\n                'flaggedReason'\n            ],\n            where: {\n                createdAt: {\n                    gte: since\n                },\n                flaggedReason: {\n                    not: null\n                }\n            },\n            _count: {\n                flaggedReason: true\n            },\n            orderBy: {\n                _count: {\n                    flaggedReason: 'desc'\n                }\n            },\n            take: 10\n        })\n    ]);\n    // Calculate statistics\n    const totalActions = logs.length;\n    const actionBreakdown = {};\n    const contentTypeBreakdown = {};\n    const userActivity = {};\n    let totalConfidence = 0;\n    let confidenceCount = 0;\n    logs.forEach((log)=>{\n        // Action breakdown\n        actionBreakdown[log.action] = (actionBreakdown[log.action] || 0) + 1;\n        // Content type breakdown\n        contentTypeBreakdown[log.contentType] = (contentTypeBreakdown[log.contentType] || 0) + 1;\n        // User activity\n        if (log.userId) {\n            if (!userActivity[log.userId]) {\n                const userData = {\n                    count: 0\n                };\n                if (log.users?.name) {\n                    userData.name = log.users.name;\n                }\n                userActivity[log.userId] = userData;\n            }\n            if (userActivity[log.userId]) {\n                userActivity[log.userId].count++;\n            }\n        }\n        // Confidence calculation\n        if (log.confidence !== null) {\n            totalConfidence += log.confidence;\n            confidenceCount++;\n        }\n    });\n    const averageConfidence = confidenceCount > 0 ? totalConfidence / confidenceCount : 0;\n    const topViolationReasons = reasonCounts.map((r)=>({\n            reason: r.flaggedReason ?? 'Unknown',\n            count: r._count.flaggedReason\n        }));\n    const userActivityArray = Object.entries(userActivity).map(([userId, data])=>({\n            userId,\n            actionCount: data.count,\n            ...data.name && {\n                userName: data.name\n            }\n        })).sort((a, b)=>b.actionCount - a.actionCount).slice(0, 10);\n    return {\n        totalActions,\n        actionBreakdown,\n        contentTypeBreakdown,\n        averageConfidence,\n        topViolationReasons,\n        userActivity: userActivityArray\n    };\n}\n// ============================================================================\n// SAFETY REPORTS QUERIES\n// ============================================================================\n/**\n * Create safety report\n */ async function createSafetyReport(data) {\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.safety_reports.create({\n        data: {\n            id: crypto.randomUUID(),\n            ...data,\n            status: 'PENDING',\n            priority: determinePriority(data.violationType, data.description),\n            createdAt: new Date()\n        }\n    });\n}\n/**\n * Get pending safety reports for review\n */ async function getPendingSafetyReports(params) {\n    // @ts-expect-error Prisma type mismatch with local types\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.safety_reports.findMany({\n        where: {\n            status: {\n                in: [\n                    'PENDING',\n                    'INVESTIGATING'\n                ]\n            },\n            ...params.priority && {\n                priority: params.priority\n            }\n        },\n        include: {\n            users_safety_reports_reporterIdTousers: {\n                select: {\n                    name: true,\n                    role: true\n                }\n            },\n            users_safety_reports_reportedUserIdTousers: {\n                select: {\n                    name: true,\n                    role: true,\n                    reputationScore: true\n                }\n            }\n        },\n        orderBy: [\n            {\n                priority: 'desc'\n            },\n            {\n                createdAt: 'asc'\n            }\n        ],\n        take: params.limit || 20,\n        skip: params.offset || 0\n    });\n}\n/**\n * Update safety report status\n */ async function updateSafetyReport(reportId, updates) {\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.safety_reports.update({\n        where: {\n            id: reportId\n        },\n        data: {\n            ...updates,\n            ...updates.status === 'RESOLVED' && {\n                resolvedAt: new Date()\n            },\n            ...updates.assignedTo && {\n                status: updates.status || 'INVESTIGATING'\n            }\n        }\n    });\n}\n// ============================================================================\n// USER VIOLATIONS QUERIES\n// ============================================================================\n/**\n * Create user violation record\n */ async function createUserViolation(data) {\n    // Use regular prisma transaction instead of safeTransaction for now\n    // @ts-expect-error Prisma type mismatch with local types\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.$transaction(async (tx)=>{\n        // Create violation record\n        const violation = await tx.user_violations.create({\n            data: {\n                id: crypto.randomUUID(),\n                ...data,\n                createdAt: new Date()\n            }\n        });\n        // Update user statistics\n        if (data.warningIssued) {\n            await tx.users.update({\n                where: {\n                    id: data.userId\n                },\n                data: {\n                    warningCount: {\n                        increment: 1\n                    },\n                    reputationScore: {\n                        decrement: data.reputationHit\n                    }\n                }\n            });\n        }\n        return violation;\n    });\n}\n/**\n * Get user violation history\n */ async function getUserViolationHistory(userId, params) {\n    // @ts-expect-error Prisma type mismatch with local types\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.user_violations.findMany({\n        where: {\n            userId,\n            ...params?.includeResolved === false && {\n                resolved: false\n            }\n        },\n        orderBy: {\n            createdAt: 'desc'\n        },\n        take: params?.limit || 20,\n        skip: params?.offset || 0\n    });\n}\n// ============================================================================\n// SAFETY SETTINGS QUERIES\n// ============================================================================\n/**\n * Get user safety settings\n */ async function getUserSafetySettings(userId) {\n    // @ts-expect-error Prisma type mismatch with local types\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.safetySettings.findUnique({\n        where: {\n            userId\n        }\n    });\n}\n/**\n * Update user safety settings\n */ async function updateUserSafetySettings(userId, settings) {\n    // @ts-expect-error Prisma type mismatch with local types\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.safetySettings.upsert({\n        where: {\n            userId\n        },\n        create: {\n            userId,\n            ...settings\n        },\n        update: settings\n    });\n}\n// ============================================================================\n// ANALYTICS AND REPORTING QUERIES\n// ============================================================================\n/**\n * Get safety analytics for admin dashboard\n */ async function getSafetyAnalytics(_timeframe = 'month') {\n    // This would be implemented with complex aggregation queries\n    // For now, returning a structured response for the interface\n    return {\n        userGrowth: [],\n        violationTrends: [],\n        moderationEfficiency: {\n            averageResponseTime: 0,\n            automationRate: 0,\n            appealRate: 0\n        },\n        riskDistribution: {\n            'LOW': 0,\n            'MEDIUM': 0,\n            'HIGH': 0,\n            'CRITICAL': 0\n        },\n        trainerSafety: {\n            verifiedTrainers: 0,\n            flaggedTrainers: 0,\n            averageRating: 0\n        }\n    };\n}\n/**\n * Generate safety report for export\n */ async function generateSafetyReport(params) {\n    const summary = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.count(),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.count({\n            where: {\n                status: UserStatus.ACTIVE\n            }\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.count({\n            where: {\n                status: UserStatus.SUSPENDED\n            }\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.count({\n            where: {\n                status: UserStatus.BANNED\n            }\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.user_violations.count({\n            where: {\n                createdAt: {\n                    gte: params.startDate,\n                    lte: params.endDate\n                }\n            }\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.safety_reports.count({\n            where: {\n                status: 'RESOLVED',\n                createdAt: {\n                    gte: params.startDate,\n                    lte: params.endDate\n                }\n            }\n        })\n    ]);\n    return {\n        summary: {\n            totalUsers: summary[0],\n            activeUsers: summary[1],\n            suspendedUsers: summary[2],\n            bannedUsers: summary[3],\n            totalViolations: summary[4],\n            resolvedReports: summary[5]\n        },\n        details: []\n    };\n}\n// ============================================================================\n// UTILITY FUNCTIONS\n// ============================================================================\n/**\n * Calculate user risk level based on various factors\n */ function calculateUserRiskLevel(reputationScore, totalViolations, recentViolations, warningCount) {\n    // High risk indicators\n    if (recentViolations >= 3 || totalViolations >= 10 || warningCount >= 5) {\n        return 'CRITICAL';\n    }\n    if (recentViolations >= 2 || totalViolations >= 5 || warningCount >= 3 || reputationScore < 25) {\n        return 'HIGH';\n    }\n    if (recentViolations >= 1 || totalViolations >= 2 || warningCount >= 1 || reputationScore < 50) {\n        return 'MEDIUM';\n    }\n    return 'LOW';\n}\n/**\n * Determine user restrictions based on safety profile\n */ function determineUserRestrictions(user, totalViolations, recentViolations) {\n    const restrictions = [];\n    if (user.status === UserStatus.SUSPENDED) {\n        restrictions.push('ACCOUNT_SUSPENDED');\n    }\n    if (user.status === UserStatus.BANNED) {\n        restrictions.push('ACCOUNT_BANNED');\n    }\n    if (user.reputationScore < 25) {\n        restrictions.push('NO_DIRECT_MESSAGES');\n    }\n    if (user.warningCount >= 3 || recentViolations >= 2) {\n        restrictions.push('NO_POST_CREATION');\n        restrictions.push('NO_COMMUNITY_CREATION');\n    }\n    if (totalViolations >= 5) {\n        restrictions.push('LIMITED_INTERACTIONS');\n    }\n    return restrictions;\n}\n/**\n * Determine priority for safety reports\n */ function determinePriority(category, description) {\n    // High priority categories\n    if (category === ViolationType.THREAT || category === ViolationType.HATE_SPEECH || category === ViolationType.PRIVACY_VIOLATION) {\n        return 'URGENT';\n    }\n    if (category === ViolationType.HARASSMENT || category === ViolationType.INAPPROPRIATE_CONTENT) {\n        return 'HIGH';\n    }\n    if (category === ViolationType.SPAM) {\n        return 'LOW';\n    }\n    // Check description for urgent keywords\n    const urgentKeywords = [\n        'threat',\n        'danger',\n        'harm',\n        'suicide',\n        'violence'\n    ];\n    if (urgentKeywords.some((keyword)=>description.toLowerCase().includes(keyword))) {\n        return 'URGENT';\n    }\n    return 'MEDIUM';\n}\n// ============================================================================\n// PHASE 5: TRAINER BUSINESS QUERIES\n// ============================================================================\n/**\n * Create or update trainer profile\n */ async function createOrUpdateTrainerProfile(userId, data) {\n    const existingProfile = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_profiles.findUnique({\n        where: {\n            userId\n        }\n    });\n    if (existingProfile) {\n        return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_profiles.update({\n            where: {\n                userId\n            },\n            data\n        });\n    } else {\n        return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_profiles.create({\n            data: {\n                id: crypto.randomUUID(),\n                userId,\n                ...data\n            }\n        });\n    }\n}\n/**\n * Get trainer profile with business stats\n */ async function getTrainerProfileWithStats(trainerId) {\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_profiles.findUnique({\n        where: {\n            id: trainerId\n        },\n        include: {\n            user: {\n                select: {\n                    id: true,\n                    name: true,\n                    email: true,\n                    image: true,\n                    role: true\n                }\n            },\n            _count: {\n                select: {\n                    trainer_clients: {\n                        where: {\n                            status: 'ACTIVE'\n                        }\n                    },\n                    appointments: true,\n                    trainer_reviews: true\n                }\n            }\n        }\n    });\n}\n/**\n * Get trainer clients with pagination and filters\n */ async function getTrainerClients(trainerId, filters = {}) {\n    const { status, search, page = 1, limit = 20 } = filters;\n    const skip = (page - 1) * limit;\n    const where = {\n        trainerId,\n        ...status && {\n            status\n        },\n        ...search && {\n            client: {\n                OR: [\n                    {\n                        name: {\n                            contains: search,\n                            mode: 'insensitive'\n                        }\n                    },\n                    {\n                        email: {\n                            contains: search,\n                            mode: 'insensitive'\n                        }\n                    }\n                ]\n            }\n        }\n    };\n    const [clients, total] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_clients.findMany({\n            where,\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        email: true,\n                        image: true\n                    }\n                },\n                _count: {\n                    select: {\n                        appointments: true,\n                        progress_reports: true\n                    }\n                }\n            },\n            orderBy: {\n                createdAt: 'desc'\n            },\n            skip,\n            take: limit\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_clients.count({\n            where\n        })\n    ]);\n    return {\n        clients,\n        total,\n        page,\n        totalPages: Math.ceil(total / limit)\n    };\n}\n/**\n * Add client to trainer\n */ async function addClientToTrainer(trainerId, clientId, data) {\n    // Check if relationship already exists\n    const existing = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_clients.findUnique({\n        where: {\n            trainerId_clientId: {\n                trainerId,\n                clientId\n            }\n        }\n    });\n    if (existing) {\n        throw new Error('Client is already associated with this trainer');\n    }\n    const relationship = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_clients.create({\n        data: {\n            id: crypto.randomUUID(),\n            trainerId,\n            clientId,\n            status: 'ACTIVE',\n            ...data\n        }\n    });\n    // Update trainer's client counts\n    await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_profiles.update({\n        where: {\n            id: trainerId\n        },\n        data: {\n            activeClients: {\n                increment: 1\n            },\n            totalClients: {\n                increment: 1\n            }\n        }\n    });\n    return relationship;\n}\n/**\n * Create appointment\n */ async function createAppointment(data) {\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.appointments.create({\n        data: {\n            id: crypto.randomUUID(),\n            trainerId: data.trainerId,\n            clientId: data.clientId,\n            title: data.title,\n            description: data.description ?? null,\n            scheduledAt: data.scheduledAt,\n            duration: data.duration || 60,\n            type: data.type || 'PERSONAL_TRAINING',\n            location: data.location ?? null,\n            isVirtual: data.isVirtual ?? false,\n            price: data.price ?? null,\n            currency: data.currency ?? 'USD',\n            status: 'SCHEDULED'\n        }\n    });\n}\n/**\n * Get trainer appointments with filters\n */ async function getTrainerAppointments(trainerId, filters = {}) {\n    const { status, dateRange, clientId, page = 1, limit = 20 } = filters;\n    const skip = (page - 1) * limit;\n    const where = {\n        trainerId,\n        ...status && {\n            status: {\n                in: status\n            }\n        },\n        ...dateRange && {\n            scheduledAt: {\n                gte: dateRange.start,\n                lte: dateRange.end\n            }\n        },\n        ...clientId && {\n            clientId\n        }\n    };\n    const [appointments, total] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.appointments.findMany({\n            where,\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        email: true,\n                        image: true\n                    }\n                },\n                workout_sessions: {\n                    select: {\n                        id: true,\n                        title: true,\n                        isComplete: true\n                    }\n                }\n            },\n            orderBy: {\n                scheduledAt: 'asc'\n            },\n            skip,\n            take: limit\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.appointments.count({\n            where\n        })\n    ]);\n    return {\n        appointments,\n        total,\n        page,\n        totalPages: Math.ceil(total / limit)\n    };\n}\n/**\n * Update appointment status\n */ async function updateAppointmentStatus(appointmentId, status, updates = {}) {\n    const updateData = {\n        status,\n        ...updates\n    };\n    if (status === 'CANCELLED') {\n        updateData.cancelledAt = new Date();\n    } else if (status === 'COMPLETED') {\n        updateData.completedAt = new Date();\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.appointments.update({\n        where: {\n            id: appointmentId\n        },\n        data: updateData\n    });\n}\n/**\n * Create progress report\n */ async function createProgressReport(data) {\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.progress_reports.create({\n        data: {\n            id: crypto.randomUUID(),\n            ...data,\n            reportDate: new Date(),\n            period: data.period || 'MONTHLY'\n        }\n    });\n}\n/**\n * Get trainer's progress reports\n */ async function getTrainerProgressReports(trainerId, filters = {}) {\n    const { clientId, period, isShared, page = 1, limit = 20 } = filters;\n    const skip = (page - 1) * limit;\n    const where = {\n        trainerId,\n        ...clientId && {\n            clientId\n        },\n        ...period && {\n            period\n        },\n        ...isShared !== undefined && {\n            isShared\n        }\n    };\n    const [reports, total] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.progress_reports.findMany({\n            where,\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        email: true,\n                        image: true\n                    }\n                }\n            },\n            orderBy: {\n                reportDate: 'desc'\n            },\n            skip,\n            take: limit\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.progress_reports.count({\n            where\n        })\n    ]);\n    return {\n        reports,\n        total,\n        page,\n        totalPages: Math.ceil(total / limit)\n    };\n}\n/**\n * Share progress report with client\n */ async function shareProgressReport(reportId) {\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.progress_reports.update({\n        where: {\n            id: reportId\n        },\n        data: {\n            isShared: true\n        }\n    });\n}\n/**\n * Get trainer earnings summary\n */ async function getTrainerEarnings(trainerId, period = 'month') {\n    const now = new Date();\n    let startDate;\n    switch(period){\n        case 'week':\n            startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n            break;\n        case 'year':\n            startDate = new Date(now.getFullYear(), 0, 1);\n            break;\n        default:\n            startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n    }\n    const earnings = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.aggregate({\n        where: {\n            trainerId,\n            status: 'COMPLETED',\n            paymentDate: {\n                gte: startDate\n            }\n        },\n        _sum: {\n            amount: true,\n            trainerEarnings: true,\n            platformFee: true\n        },\n        _count: true\n    });\n    return {\n        totalAmount: earnings._sum.amount || 0,\n        trainerEarnings: earnings._sum.trainerEarnings || 0,\n        platformFee: earnings._sum.platformFee || 0,\n        transactionCount: earnings._count,\n        period\n    };\n}\n/**\n * Check for appointment scheduling conflicts\n */ async function checkAppointmentConflict(trainerId, scheduledAt, duration = 60, excludeAppointmentId) {\n    const endTime = new Date(scheduledAt.getTime() + duration * 60 * 1000);\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.appointments.findFirst({\n        where: {\n            trainerId,\n            ...excludeAppointmentId && {\n                id: {\n                    not: excludeAppointmentId\n                }\n            },\n            status: {\n                in: [\n                    'SCHEDULED',\n                    'CONFIRMED',\n                    'IN_PROGRESS'\n                ]\n            },\n            OR: [\n                // Appointment starts during new appointment\n                {\n                    AND: [\n                        {\n                            scheduledAt: {\n                                lte: scheduledAt\n                            }\n                        },\n                        {\n                            scheduledAt: {\n                                gte: new Date(scheduledAt.getTime() - 60 * 60 * 1000)\n                            }\n                        }\n                    ]\n                },\n                // Appointment ends during new appointment\n                {\n                    AND: [\n                        {\n                            scheduledAt: {\n                                lte: endTime\n                            }\n                        },\n                        {\n                            scheduledAt: {\n                                gte: scheduledAt\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    });\n}\n/**\n * Get trainer availability for date range\n */ async function getTrainerAvailability(trainerId, startDate, endDate) {\n    // Get trainer's available hours\n    const trainerProfile = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_profiles.findUnique({\n        where: {\n            id: trainerId\n        },\n        select: {\n            availableHours: true,\n            timezone: true\n        }\n    });\n    // Get existing appointments\n    const appointments = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.appointments.findMany({\n        where: {\n            trainerId,\n            scheduledAt: {\n                gte: startDate,\n                lte: endDate\n            },\n            status: {\n                in: [\n                    'SCHEDULED',\n                    'CONFIRMED',\n                    'IN_PROGRESS'\n                ]\n            }\n        },\n        select: {\n            id: true,\n            scheduledAt: true,\n            duration: true,\n            type: true,\n            title: true\n        }\n    });\n    return {\n        trainerProfile,\n        appointments,\n        dateRange: {\n            startDate,\n            endDate\n        }\n    };\n}\n/**\n * Reschedule appointment\n */ async function rescheduleAppointment(appointmentId, newScheduledAt, reason) {\n    const appointment = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.appointments.findUnique({\n        where: {\n            id: appointmentId\n        }\n    });\n    if (!appointment) {\n        throw new Error('Appointment not found');\n    }\n    // Check for conflicts\n    const conflict = await checkAppointmentConflict(appointment.trainerId, newScheduledAt, appointment.duration, appointmentId);\n    if (conflict) {\n        throw new Error('New time conflicts with existing appointment');\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.appointments.update({\n        where: {\n            id: appointmentId\n        },\n        data: {\n            scheduledAt: newScheduledAt,\n            status: 'RESCHEDULED',\n            trainerNotes: reason ? `Rescheduled: ${reason}` : 'Appointment rescheduled'\n        }\n    });\n}\n// ============================================================================\n// PHASE 5: MOLLIE PAYMENT INTEGRATION\n// ============================================================================\n/**\n * Create payment record with Mollie integration\n */ async function createMolliePayment(data) {\n    const payment = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.create({\n        data: {\n            id: crypto.randomUUID(),\n            trainerId: data.trainerId,\n            clientId: data.clientId,\n            trainerClientId: data.trainerClientId ?? null,\n            amount: data.amount,\n            currency: data.currency,\n            type: data.type,\n            status: 'PENDING',\n            method: 'MOLLIE',\n            molliePaymentId: data.molliePaymentId,\n            mollieCustomerId: data.mollieCustomerId ?? null,\n            description: data.description,\n            ...data.sessionDate ? {\n                sessionDate: data.sessionDate\n            } : {},\n            packageId: data.packageId ?? null,\n            metadata: data.metadata\n        }\n    });\n    console.log('Payment record created:', {\n        paymentId: payment.id,\n        molliePaymentId: data.molliePaymentId,\n        amount: data.amount,\n        currency: data.currency\n    });\n    return payment;\n}\n/**\n * Update payment status from Mollie webhook\n */ async function updatePaymentFromMollie(molliePaymentId, updates) {\n    const payment = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.findFirst({\n        where: {\n            molliePaymentId\n        }\n    });\n    if (!payment) {\n        throw new Error(`Payment not found for Mollie ID: ${molliePaymentId}`);\n    }\n    const updatedPayment = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.update({\n        where: {\n            id: payment.id\n        },\n        data: {\n            status: updates.status,\n            ...updates.paymentDate ? {\n                paymentDate: updates.paymentDate\n            } : {},\n            ...updates.failureReason ? {\n                failureReason: updates.failureReason\n            } : {},\n            ...typeof updates.trainerEarnings === 'number' ? {\n                trainerEarnings: updates.trainerEarnings\n            } : {},\n            ...typeof updates.platformFee === 'number' ? {\n                platformFee: updates.platformFee\n            } : {}\n        }\n    });\n    // Update trainer earnings if payment completed\n    if (updates.status === 'COMPLETED' && updates.trainerEarnings) {\n        await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_profiles.update({\n            where: {\n                id: payment.trainerId\n            },\n            data: {\n                totalEarnings: {\n                    increment: updates.trainerEarnings\n                },\n                monthlyEarnings: {\n                    increment: updates.trainerEarnings\n                }\n            }\n        });\n    }\n    console.log('Payment updated from Mollie:', {\n        paymentId: payment.id,\n        molliePaymentId,\n        status: updates.status\n    });\n    return updatedPayment;\n}\n/**\n * Create Mollie customer record\n */ async function createMollieCustomer(userId, mollieCustomerId) {\n    // Update user record with Mollie customer ID\n    const user = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.findUnique({\n        where: {\n            id: userId\n        }\n    });\n    if (!user) {\n        throw new Error('User not found');\n    }\n    // Store Mollie customer ID in user metadata or separate field\n    // For now, we'll use the payment records to track this\n    console.log('Mollie customer created for user:', userId, mollieCustomerId);\n    return {\n        userId,\n        mollieCustomerId\n    };\n}\n/**\n * Get payment by Mollie payment ID\n */ async function getPaymentByMollieId(molliePaymentId) {\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.findFirst({\n        where: {\n            molliePaymentId\n        },\n        include: {\n            trainer_profiles: {\n                include: {\n                    user: {\n                        select: {\n                            id: true,\n                            name: true,\n                            email: true\n                        }\n                    }\n                }\n            },\n            users: {\n                select: {\n                    id: true,\n                    name: true,\n                    email: true\n                }\n            }\n        }\n    });\n}\n/**\n * Process refund through Mollie\n */ async function processRefund(paymentId, refundAmount, reason) {\n    const payment = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.findUnique({\n        where: {\n            id: paymentId\n        }\n    });\n    if (!payment) {\n        throw new Error('Payment not found');\n    }\n    if (!payment.molliePaymentId) {\n        throw new Error('No Mollie payment ID found');\n    }\n    // Update payment record with refund\n    const updatedPayment = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.update({\n        where: {\n            id: paymentId\n        },\n        data: {\n            refundAmount,\n            status: refundAmount >= payment.amount ? 'REFUNDED' : 'PARTIALLY_REFUNDED',\n            metadata: {\n                ...payment.metadata,\n                refundReason: reason,\n                refundDate: new Date()\n            }\n        }\n    });\n    // Update trainer earnings\n    if (payment.trainerEarnings && refundAmount > 0) {\n        const refundFromEarnings = Math.min(refundAmount, payment.trainerEarnings);\n        await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.trainer_profiles.update({\n            where: {\n                id: payment.trainerId\n            },\n            data: {\n                totalEarnings: {\n                    decrement: refundFromEarnings\n                },\n                monthlyEarnings: {\n                    decrement: refundFromEarnings\n                }\n            }\n        });\n    }\n    console.log('Refund processed:', {\n        paymentId,\n        refundAmount,\n        reason\n    });\n    return updatedPayment;\n}\n/**\n * Get trainer payment analytics\n */ async function getTrainerPaymentAnalytics(trainerId, period = 'month') {\n    const now = new Date();\n    let startDate;\n    switch(period){\n        case 'week':\n            startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n            break;\n        case 'year':\n            startDate = new Date(now.getFullYear(), 0, 1);\n            break;\n        default:\n            startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n    }\n    const [payments, paymentsByType, paymentsByStatus] = await Promise.all([\n        // Total earnings\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.aggregate({\n            where: {\n                trainerId,\n                paymentDate: {\n                    gte: startDate\n                },\n                status: 'COMPLETED'\n            },\n            _sum: {\n                amount: true,\n                trainerEarnings: true,\n                platformFee: true\n            },\n            _count: true\n        }),\n        // Payments by type\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.groupBy({\n            by: [\n                'type'\n            ],\n            where: {\n                trainerId,\n                paymentDate: {\n                    gte: startDate\n                }\n            },\n            _sum: {\n                amount: true\n            },\n            _count: true\n        }),\n        // Payments by status\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.groupBy({\n            by: [\n                'status'\n            ],\n            where: {\n                trainerId,\n                paymentDate: {\n                    gte: startDate\n                }\n            },\n            _count: true\n        })\n    ]);\n    return {\n        totalAmount: payments._sum.amount || 0,\n        trainerEarnings: payments._sum.trainerEarnings || 0,\n        platformFee: payments._sum.platformFee || 0,\n        transactionCount: payments._count,\n        paymentsByType,\n        paymentsByStatus,\n        period\n    };\n}\n// ============================================================================\n// PREMIUM TEAMS MANAGEMENT\n// ============================================================================\n/**\n * Create premium team with validation\n */ async function createPremiumTeam(data) {\n    // Validate owner is a trainer\n    const owner = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.findUnique({\n        where: {\n            id: data.ownerId\n        },\n        select: {\n            role: true\n        }\n    });\n    if (!owner || owner.role !== 'TRAINER') {\n        throw new Error('Only trainers can create premium teams');\n    }\n    const team = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_communities.create({\n        data: {\n            id: crypto.randomUUID(),\n            name: data.name,\n            description: data.description,\n            ownerId: data.ownerId,\n            price: data.price,\n            currency: data.currency,\n            billingCycle: data.billingCycle,\n            maxMembers: data.maxMembers ?? null,\n            category: data.category,\n            tags: data.tags || [],\n            features: data.features || [],\n            rules: data.rules ?? null,\n            isPublic: data.isPublic ?? false,\n            requireApproval: data.requireApproval ?? true,\n            trialPeriodDays: data.trialPeriodDays ?? 0,\n            coverImage: data.coverImage ?? null,\n            currentMembers: 0\n        },\n        include: {\n            users: {\n                select: {\n                    id: true,\n                    name: true,\n                    image: true,\n                    trainerVerified: true\n                }\n            }\n        }\n    });\n    console.log('Premium team created:', {\n        teamId: team.id,\n        name: team.name,\n        ownerId: data.ownerId\n    });\n    return team;\n}\n/**\n * Get teams with filtering and pagination\n */ async function getTeams(params) {\n    const page = params.page || 1;\n    const limit = params.limit || 20;\n    const skip = (page - 1) * limit;\n    const where = {\n        isActive: true,\n        ...params.ownerId && {\n            ownerId: params.ownerId\n        },\n        ...params.category && {\n            category: params.category\n        },\n        ...params.isPublic !== undefined && {\n            isPublic: params.isPublic\n        },\n        ...params.search && {\n            OR: [\n                {\n                    name: {\n                        contains: params.search,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    description: {\n                        contains: params.search,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    tags: {\n                        has: params.search\n                    }\n                }\n            ]\n        }\n    };\n    const [teams, total] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_communities.findMany({\n            where,\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        image: true,\n                        trainerVerified: true\n                    }\n                },\n                _count: {\n                    select: {\n                        premium_memberships: {\n                            where: {\n                                status: 'ACTIVE'\n                            }\n                        }\n                    }\n                },\n                ...params.userId && {\n                    premium_memberships: {\n                        where: {\n                            userId: params.userId\n                        },\n                        select: {\n                            status: true,\n                            startDate: true,\n                            endDate: true,\n                            isTrialActive: true\n                        }\n                    }\n                }\n            },\n            orderBy: [\n                {\n                    currentMembers: 'desc'\n                },\n                {\n                    createdAt: 'desc'\n                }\n            ],\n            skip,\n            take: limit\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_communities.count({\n            where\n        })\n    ]);\n    return {\n        teams: teams.map((team)=>({\n                ...team,\n                userMembership: team.premium_memberships?.[0] || null\n            })),\n        pagination: {\n            page,\n            limit,\n            total,\n            totalPages: Math.ceil(total / limit)\n        }\n    };\n}\n/**\n * Join premium team\n */ async function joinPremiumTeam(teamId, userId, paymentId) {\n    // Get team details\n    const team = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_communities.findUnique({\n        where: {\n            id: teamId\n        },\n        select: {\n            id: true,\n            maxMembers: true,\n            currentMembers: true,\n            isActive: true,\n            requireApproval: true,\n            trialPeriodDays: true,\n            price: true\n        }\n    });\n    if (!team) {\n        throw new Error('Team not found');\n    }\n    if (!team.isActive) {\n        throw new Error('Team is not active');\n    }\n    // Check member limits\n    if (team.maxMembers && team.currentMembers >= team.maxMembers) {\n        throw new Error('Team is full');\n    }\n    // Check existing membership\n    const existingMembership = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.findUnique({\n        where: {\n            communityId_userId: {\n                communityId: teamId,\n                userId\n            }\n        }\n    });\n    if (existingMembership && existingMembership.status === 'ACTIVE') {\n        throw new Error('Already a team member');\n    }\n    // Determine membership status and dates\n    const now = new Date();\n    let status = 'ACTIVE';\n    let endDate;\n    let isTrialActive = false;\n    let trialEndsAt;\n    if (team.price > 0 && !paymentId) {\n        status = 'SUSPENDED';\n    } else if (team.requireApproval) {\n        status = 'SUSPENDED';\n    } else if (team.trialPeriodDays > 0) {\n        isTrialActive = true;\n        trialEndsAt = new Date(now.getTime() + team.trialPeriodDays * 24 * 60 * 60 * 1000);\n        endDate = trialEndsAt;\n        status = 'TRIAL';\n    }\n    // Create or update membership\n    const membership = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.upsert({\n        where: {\n            communityId_userId: {\n                communityId: teamId,\n                userId\n            }\n        },\n        update: {\n            status,\n            startDate: now,\n            endDate: endDate ?? null,\n            isTrialActive,\n            trialEndsAt: trialEndsAt ?? null,\n            ...paymentId ? {\n                paymentId\n            } : {},\n            cancelledAt: null,\n            cancellationReason: null\n        },\n        create: {\n            communityId: teamId,\n            userId,\n            status,\n            startDate: now,\n            endDate: endDate ?? null,\n            isTrialActive,\n            trialEndsAt: trialEndsAt ?? null,\n            ...paymentId ? {\n                paymentId\n            } : {}\n        }\n    });\n    // Update team member count if membership is active\n    if (status === 'ACTIVE') {\n        await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_communities.update({\n            where: {\n                id: teamId\n            },\n            data: {\n                currentMembers: {\n                    increment: 1\n                }\n            }\n        });\n    }\n    console.log('User joined premium team:', {\n        teamId,\n        userId,\n        membershipId: membership.id,\n        status\n    });\n    return membership;\n}\n/**\n * Leave premium team\n */ async function leavePremiumTeam(teamId, userId, reason) {\n    const membership = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.findUnique({\n        where: {\n            communityId_userId: {\n                communityId: teamId,\n                userId\n            }\n        }\n    });\n    if (!membership) {\n        throw new Error('Not a team member');\n    }\n    if (membership.status !== 'ACTIVE') {\n        throw new Error('Membership not active');\n    }\n    // Cancel membership\n    const updatedMembership = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.update({\n        where: {\n            id: membership.id\n        },\n        data: {\n            status: 'CANCELLED',\n            cancelledAt: new Date(),\n            cancellationReason: reason || 'User requested cancellation'\n        }\n    });\n    // Update team member count\n    await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_communities.update({\n        where: {\n            id: teamId\n        },\n        data: {\n            currentMembers: {\n                decrement: 1\n            }\n        }\n    });\n    console.log('User left premium team:', {\n        teamId,\n        userId,\n        membershipId: membership.id\n    });\n    return updatedMembership;\n}\n/**\n * Get team membership details\n */ async function getTeamMembership(teamId, userId) {\n    return _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.findUnique({\n        where: {\n            communityId_userId: {\n                communityId: teamId,\n                userId\n            }\n        },\n        include: {\n            premium_communities: {\n                select: {\n                    id: true,\n                    name: true,\n                    ownerId: true\n                }\n            },\n            users: {\n                select: {\n                    id: true,\n                    name: true,\n                    image: true\n                }\n            }\n        }\n    });\n}\n/**\n * Get team members with pagination\n */ async function getTeamMembers(teamId, params) {\n    const page = params.page || 1;\n    const limit = params.limit || 20;\n    const skip = (page - 1) * limit;\n    const where = {\n        communityId: teamId,\n        ...params.status && {\n            status: params.status\n        }\n    };\n    const [members, total] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.findMany({\n            where,\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        image: true,\n                        email: true\n                    }\n                }\n            },\n            orderBy: {\n                startDate: 'desc'\n            },\n            skip,\n            take: limit\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.count({\n            where\n        })\n    ]);\n    return {\n        members,\n        pagination: {\n            page,\n            limit,\n            total,\n            totalPages: Math.ceil(total / limit)\n        }\n    };\n}\n/**\n * Approve team membership\n */ async function approveTeamMembership(membershipId, approverId) {\n    const membership = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.findUnique({\n        where: {\n            id: membershipId\n        },\n        include: {\n            premium_communities: {\n                select: {\n                    ownerId: true,\n                    maxMembers: true,\n                    currentMembers: true\n                }\n            }\n        }\n    });\n    if (!membership) {\n        throw new Error('Membership not found');\n    }\n    if (membership.premium_communities.ownerId !== approverId) {\n        throw new Error('Only team owner can approve memberships');\n    }\n    if (membership.status !== 'SUSPENDED') {\n        throw new Error('Membership not pending approval');\n    }\n    // Check member limits\n    if (membership.premium_communities.maxMembers && membership.premium_communities.currentMembers >= membership.premium_communities.maxMembers) {\n        throw new Error('Team is full');\n    }\n    // Approve membership\n    const updatedMembership = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.update({\n        where: {\n            id: membershipId\n        },\n        data: {\n            status: 'ACTIVE',\n            startDate: new Date()\n        }\n    });\n    // Update team member count\n    await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_communities.update({\n        where: {\n            id: membership.communityId\n        },\n        data: {\n            currentMembers: {\n                increment: 1\n            }\n        }\n    });\n    console.log('Team membership approved:', {\n        membershipId,\n        teamId: membership.communityId,\n        userId: membership.userId,\n        approverId\n    });\n    return updatedMembership;\n}\n/**\n * Get team analytics for owner\n */ async function getTeamAnalytics(teamId, ownerId) {\n    // Verify ownership\n    const team = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_communities.findUnique({\n        where: {\n            id: teamId\n        },\n        select: {\n            ownerId: true\n        }\n    });\n    if (!team || team.ownerId !== ownerId) {\n        throw new Error('Access denied - team owner only');\n    }\n    const [memberStats, revenueStats, membershipTrends] = await Promise.all([\n        // Member statistics\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.groupBy({\n            by: [\n                'status'\n            ],\n            where: {\n                communityId: teamId\n            },\n            _count: true\n        }),\n        // Revenue statistics (simplified)\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.payments.aggregate({\n            where: {\n                metadata: {\n                    path: [\n                        'teamId'\n                    ],\n                    equals: teamId\n                },\n                status: 'COMPLETED'\n            },\n            _sum: {\n                amount: true,\n                trainerEarnings: true\n            },\n            _count: true\n        }),\n        // Membership trends (last 30 days)\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_memberships.findMany({\n            where: {\n                communityId: teamId,\n                startDate: {\n                    gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)\n                }\n            },\n            select: {\n                startDate: true,\n                status: true\n            },\n            orderBy: {\n                startDate: 'asc'\n            }\n        })\n    ]);\n    return {\n        memberStats: memberStats.reduce((acc, stat)=>{\n            acc[stat.status] = stat._count;\n            return acc;\n        }, {}),\n        revenue: {\n            totalRevenue: revenueStats._sum.amount || 0,\n            trainerEarnings: revenueStats._sum.trainerEarnings || 0,\n            totalPayments: revenueStats._count\n        },\n        trends: {\n            recentJoins: membershipTrends.length,\n            dailyJoins: membershipTrends.reduce((acc, membership)=>{\n                const date = membership.startDate.toISOString().split('T')[0];\n                acc[date] = (acc[date] || 0) + 1;\n                return acc;\n            }, {})\n        }\n    };\n}\n// ============================================================================\n// CHALLENGES & COMPETITIONS\n// ============================================================================\n/**\n * Create challenge with validation\n */ async function createChallenge(data) {\n    const challenge = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenges.create({\n        data: {\n            id: crypto.randomUUID(),\n            title: data.title,\n            description: data.description,\n            creatorId: data.creatorId,\n            type: data.type,\n            category: data.category,\n            difficulty: data.difficulty,\n            startDate: data.startDate,\n            endDate: data.endDate,\n            isPublic: data.isPublic ?? true,\n            maxParticipants: data.maxParticipants ?? null,\n            entryFee: data.entryFee ?? 0,\n            currency: data.currency ?? 'EUR',\n            prizePool: data.prizePool ?? 0,\n            rules: data.rules ?? null,\n            metrics: data.metrics ?? {},\n            rewards: data.rewards ?? [],\n            coverImage: data.coverImage ?? null,\n            tags: data.tags ?? [],\n            status: 'UPCOMING'\n        },\n        include: {\n            users: {\n                select: {\n                    id: true,\n                    name: true,\n                    image: true,\n                    trainerVerified: true\n                }\n            }\n        }\n    });\n    console.log('Challenge created:', {\n        challengeId: challenge.id,\n        title: challenge.title,\n        creatorId: data.creatorId\n    });\n    return challenge;\n}\n/**\n * Get challenges with filtering\n */ async function getChallenges(params) {\n    const page = params.page || 1;\n    const limit = params.limit || 20;\n    const skip = (page - 1) * limit;\n    const where = {\n        ...params.creatorId && {\n            creatorId: params.creatorId\n        },\n        ...params.category && {\n            category: params.category\n        },\n        ...params.difficulty && {\n            difficulty: params.difficulty\n        },\n        ...params.status && {\n            status: params.status\n        },\n        ...params.type && {\n            type: params.type\n        },\n        ...params.isPublic !== undefined && {\n            isPublic: params.isPublic\n        },\n        ...params.search && {\n            OR: [\n                {\n                    title: {\n                        contains: params.search,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    description: {\n                        contains: params.search,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    tags: {\n                        has: params.search\n                    }\n                }\n            ]\n        }\n    };\n    const [challenges, total] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenges.findMany({\n            where,\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        image: true,\n                        trainerVerified: true\n                    }\n                },\n                _count: {\n                    select: {\n                        challenge_participants: {\n                            where: {\n                                status: 'REGISTERED'\n                            }\n                        }\n                    }\n                },\n                ...params.userId && {\n                    challenge_participants: {\n                        where: {\n                            userId: params.userId\n                        },\n                        select: {\n                            status: true,\n                            joinedAt: true,\n                            rank: true\n                        }\n                    }\n                }\n            },\n            orderBy: [\n                {\n                    status: 'asc'\n                },\n                {\n                    startDate: 'asc'\n                },\n                {\n                    createdAt: 'desc'\n                }\n            ],\n            skip,\n            take: limit\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenges.count({\n            where\n        })\n    ]);\n    return {\n        challenges: challenges.map((challenge)=>({\n                ...challenge,\n                userParticipation: challenge.participants?.[0] || null\n            })),\n        pagination: {\n            page,\n            limit,\n            total,\n            totalPages: Math.ceil(total / limit)\n        }\n    };\n}\n/**\n * Join challenge\n */ async function joinChallenge(challengeId, userId, paymentId) {\n    // Get challenge details\n    const challenge = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenges.findUnique({\n        where: {\n            id: challengeId\n        },\n        select: {\n            id: true,\n            status: true,\n            maxParticipants: true,\n            currentParticipants: true,\n            entryFee: true\n        }\n    });\n    if (!challenge) {\n        throw new Error('Challenge not found');\n    }\n    if (challenge.status !== 'UPCOMING') {\n        throw new Error('Challenge is not accepting new participants');\n    }\n    // Check participant limits\n    if (challenge.maxParticipants && challenge.currentParticipants >= challenge.maxParticipants) {\n        throw new Error('Challenge is full');\n    }\n    // Check existing participation\n    const existingParticipation = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_participants.findUnique({\n        where: {\n            challengeId_userId: {\n                challengeId,\n                userId\n            }\n        }\n    });\n    if (existingParticipation) {\n        throw new Error('Already participating in this challenge');\n    }\n    // Determine status based on entry fee\n    const status = challenge.entryFee && challenge.entryFee > 0 && !paymentId ? 'PENDING_PAYMENT' : 'REGISTERED';\n    // Create participation\n    const participation = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_participants.create({\n        data: {\n            id: crypto.randomUUID(),\n            challengeId,\n            userId,\n            status: status,\n            paymentId: paymentId ?? null,\n            currentProgress: {}\n        }\n    });\n    // Update challenge participant count if registered\n    if (status === 'REGISTERED') {\n        await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenges.update({\n            where: {\n                id: challengeId\n            },\n            data: {\n                currentParticipants: {\n                    increment: 1\n                }\n            }\n        });\n    }\n    console.log('User joined challenge:', {\n        challengeId,\n        userId,\n        participationId: participation.id,\n        status\n    });\n    return participation;\n}\n/**\n * Leave challenge\n */ async function leaveChallenge(challengeId, userId) {\n    const participation = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_participants.findUnique({\n        where: {\n            challengeId_userId: {\n                challengeId,\n                userId\n            }\n        },\n        include: {\n            challenges: {\n                select: {\n                    status: true\n                }\n            }\n        }\n    });\n    if (!participation) {\n        throw new Error('Not participating in this challenge');\n    }\n    if (participation.challenges.status === 'ACTIVE') {\n        throw new Error('Cannot leave active challenge');\n    }\n    if (participation.challenges.status === 'COMPLETED') {\n        throw new Error('Cannot leave completed challenge');\n    }\n    // Remove participation\n    await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_participants.delete({\n        where: {\n            id: participation.id\n        }\n    });\n    // Update challenge participant count\n    if (participation.status === 'REGISTERED') {\n        await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenges.update({\n            where: {\n                id: challengeId\n            },\n            data: {\n                currentParticipants: {\n                    decrement: 1\n                }\n            }\n        });\n    }\n    console.log('User left challenge:', {\n        challengeId,\n        userId,\n        participationId: participation.id\n    });\n    return {\n        success: true\n    };\n}\n/**\n * Update challenge progress\n */ async function updateChallengeProgress(challengeId, userId, data) {\n    // Get participation\n    const participation = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_participants.findUnique({\n        where: {\n            challengeId_userId: {\n                challengeId,\n                userId\n            }\n        }\n    });\n    if (!participation) {\n        throw new Error('Not participating in this challenge');\n    }\n    if (participation.status !== 'REGISTERED') {\n        throw new Error('Must be registered to update progress');\n    }\n    // Create progress entry\n    const progressEntry = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_progress.create({\n        data: {\n            id: crypto.randomUUID(),\n            participantId: participation.id,\n            date: data.date,\n            metrics: data.metrics,\n            notes: data.notes ?? null,\n            proofImages: data.proofImages || [],\n            isVerified: false\n        }\n    });\n    // Update aggregated progress\n    const allProgress = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_progress.findMany({\n        where: {\n            participantId: participation.id\n        },\n        orderBy: {\n            date: 'asc'\n        }\n    });\n    const aggregatedProgress = calculateProgressAggregation(allProgress);\n    await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_participants.update({\n        where: {\n            id: participation.id\n        },\n        data: {\n            currentProgress: aggregatedProgress,\n            updatedAt: new Date()\n        }\n    });\n    console.log('Challenge progress updated:', {\n        challengeId,\n        userId,\n        progressId: progressEntry.id\n    });\n    return {\n        progressEntry,\n        aggregatedProgress\n    };\n}\n/**\n * Get challenge leaderboard\n */ async function getChallengeLeaderboard(challengeId, params) {\n    const page = params.page || 1;\n    const limit = params.limit || 50;\n    const skip = (page - 1) * limit;\n    const [leaderboard, total] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_leaderboard.findMany({\n            where: {\n                challengeId\n            },\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        image: true\n                    }\n                }\n            },\n            orderBy: {\n                rank: 'asc'\n            },\n            skip,\n            take: limit\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_leaderboard.count({\n            where: {\n                challengeId\n            }\n        })\n    ]);\n    return {\n        leaderboard,\n        pagination: {\n            page,\n            limit,\n            total,\n            totalPages: Math.ceil(total / limit)\n        }\n    };\n}\n/**\n * Calculate progress aggregation\n */ function calculateProgressAggregation(progressEntries) {\n    const aggregated = {};\n    progressEntries.forEach((entry)=>{\n        if (entry.metrics && typeof entry.metrics === 'object') {\n            Object.keys(entry.metrics).forEach((metric)=>{\n                if (!aggregated[metric]) {\n                    aggregated[metric] = {\n                        total: 0,\n                        count: 0,\n                        latest: 0\n                    };\n                }\n                const value = parseFloat(entry.metrics[metric]) || 0;\n                aggregated[metric].total += value;\n                aggregated[metric].count += 1;\n                aggregated[metric].latest = value;\n            });\n        }\n    });\n    // Calculate averages\n    Object.keys(aggregated).forEach((metric)=>{\n        if (aggregated[metric].count > 0) {\n            aggregated[metric].average = aggregated[metric].total / aggregated[metric].count;\n        }\n    });\n    return aggregated;\n}\n// ============================================================================\n// PRIVACY-CONTROLLED LEADERBOARDS\n// ============================================================================\n/**\n * Get privacy-controlled leaderboard data\n */ async function getPrivacyControlledLeaderboard(params) {\n    const page = params.page || 1;\n    const limit = Math.min(params.limit || 50, 100);\n    const skip = (page - 1) * limit;\n    // Calculate timeframe dates\n    const timeframeDates = calculateTimeframeRange(params.timeframe || 'all_time');\n    let leaderboardData = [];\n    let total = 0;\n    switch(params.type){\n        case 'workout':\n            ({ leaderboardData, total } = await buildWorkoutLeaderboard({\n                category: params.category,\n                timeframe: timeframeDates,\n                metric: params.metric || 'total_volume',\n                skip,\n                limit,\n                userId: params.userId\n            }));\n            break;\n        case 'challenge':\n            ({ leaderboardData, total } = await buildChallengeLeaderboard({\n                timeframe: timeframeDates,\n                skip,\n                limit,\n                userId: params.userId\n            }));\n            break;\n        case 'team':\n            ({ leaderboardData, total } = await buildTeamLeaderboard({\n                timeframe: timeframeDates,\n                skip,\n                limit,\n                userId: params.userId\n            }));\n            break;\n        default:\n            // Default to workout leaderboard for global\n            ({ leaderboardData, total } = await buildWorkoutLeaderboard({\n                category: null,\n                timeframe: timeframeDates,\n                metric: params.metric || 'total_volume',\n                skip,\n                limit,\n                userId: params.userId\n            }));\n    }\n    // Apply privacy controls\n    const processedLeaderboard = leaderboardData.map((entry, index)=>applyLeaderboardPrivacyControls(entry, params.userId, skip + index + 1, params.includeAnonymous)).filter((entry)=>entry !== null);\n    return {\n        leaderboard: processedLeaderboard,\n        pagination: {\n            page,\n            limit,\n            total,\n            totalPages: Math.ceil(total / limit)\n        }\n    };\n}\n/**\n * Update user privacy settings\n */ async function updateUserPrivacySettings(userId, settings) {\n    // Model no longer stores privacy settings on User. Simulate update by returning merged object.\n    const updatedUser = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.findUnique({\n        where: {\n            id: userId\n        },\n        select: {\n            id: true\n        }\n    });\n    const updatedSettings = {\n        ...settings,\n        lastUpdated: new Date().toISOString()\n    };\n    return {\n        id: updatedUser?.id || userId,\n        privacySettings: updatedSettings\n    };\n}\n/**\n * Get user's privacy settings\n */ async function getUserPrivacySettings(userId) {\n    const user = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.findUnique({\n        where: {\n            id: userId\n        },\n        select: {\n            id: true\n        }\n    });\n    if (!user) {\n        throw new Error('User not found');\n    }\n    // Default privacy settings\n    const defaultSettings = {\n        allowLeaderboards: true,\n        allowPublicProfile: true,\n        allowWorkoutSharing: true,\n        allowChallengeParticipation: true,\n        allowTeamVisibility: true,\n        leaderboardVisibilityLevel: 'public',\n        profileVisibilityLevel: 'public',\n        workoutDataVisibility: 'summary',\n        showRealName: true,\n        showProfileImage: true,\n        showLocation: false,\n        showPersonalRecords: true,\n        allowDirectMessages: true\n    };\n    return defaultSettings;\n}\n/**\n * Build workout leaderboard\n */ async function buildWorkoutLeaderboard(params) {\n    const { category, timeframe, metric, skip, limit } = params;\n    const whereClause = {\n        isComplete: true,\n        ...timeframe.start && {\n            startTime: {\n                gte: timeframe.start,\n                lte: timeframe.end\n            }\n        },\n        ...category && {\n            entries: {\n                some: {\n                    exercise: {\n                        category: category\n                    }\n                }\n            }\n        }\n    };\n    const workoutStats = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.workout_sessions.groupBy({\n        by: [\n            'userId'\n        ],\n        where: whereClause,\n        _sum: {\n            totalVolume: true,\n            duration: true\n        },\n        _count: {\n            id: true\n        },\n        _avg: {\n            totalVolume: true,\n            duration: true\n        }\n    });\n    // Sort by metric\n    const sortedStats = workoutStats.sort((a, b)=>{\n        const valueA = getLeaderboardMetricValue(a, metric);\n        const valueB = getLeaderboardMetricValue(b, metric);\n        return valueB - valueA;\n    });\n    const total = sortedStats.length;\n    const paginatedStats = sortedStats.slice(skip, skip + limit);\n    // Get user details\n    const userIds = paginatedStats.map((stat)=>stat.userId);\n    const users = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.findMany({\n        where: {\n            id: {\n                in: userIds\n            }\n        },\n        select: {\n            id: true,\n            name: true,\n            image: true\n        }\n    });\n    const userMap = users.reduce((acc, user)=>{\n        acc[user.id] = user;\n        return acc;\n    }, {});\n    const leaderboardData = paginatedStats.map((stat, index)=>({\n            userId: stat.userId,\n            user: userMap[stat.userId],\n            rank: skip + index + 1,\n            score: getLeaderboardMetricValue(stat, metric),\n            metrics: {\n                totalVolume: stat._sum.totalVolume || 0,\n                totalWorkouts: stat._count.id,\n                avgVolume: stat._avg.totalVolume || 0,\n                totalDuration: stat._sum.duration || 0,\n                avgDuration: stat._avg.duration || 0\n            },\n            type: 'workout'\n        }));\n    return {\n        leaderboardData,\n        total\n    };\n}\n/**\n * Build challenge leaderboard\n */ async function buildChallengeLeaderboard(params) {\n    const { timeframe, skip, limit } = params;\n    const whereClause = {\n        ...timeframe.start && {\n            lastUpdated: {\n                gte: timeframe.start,\n                lte: timeframe.end\n            }\n        }\n    };\n    const challengeStats = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.challenge_leaderboard.groupBy({\n        by: [\n            'userId'\n        ],\n        where: whereClause,\n        _sum: {\n            score: true\n        },\n        _count: {\n            id: true\n        },\n        _avg: {\n            score: true,\n            rank: true\n        }\n    });\n    const sortedStats = challengeStats.sort((a, b)=>(b._sum.score || 0) - (a._sum.score || 0));\n    const total = sortedStats.length;\n    const paginatedStats = sortedStats.slice(skip, skip + limit);\n    const userIds = paginatedStats.map((stat)=>stat.userId);\n    const users = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.findMany({\n        where: {\n            id: {\n                in: userIds\n            }\n        },\n        select: {\n            id: true,\n            name: true,\n            image: true\n        }\n    });\n    const userMap = users.reduce((acc, user)=>{\n        acc[user.id] = user;\n        return acc;\n    }, {});\n    const leaderboardData = paginatedStats.map((stat, index)=>({\n            userId: stat.userId,\n            user: userMap[stat.userId],\n            rank: skip + index + 1,\n            score: stat._sum.score || 0,\n            metrics: {\n                totalChallengeScore: stat._sum.score || 0,\n                challengesParticipated: stat._count.id,\n                avgScore: stat._avg.score || 0,\n                avgRank: stat._avg.rank || 0\n            },\n            type: 'challenge'\n        }));\n    return {\n        leaderboardData,\n        total\n    };\n}\n/**\n * Build team leaderboard\n */ async function buildTeamLeaderboard(params) {\n    const { timeframe, skip, limit } = params;\n    const teamStats = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.premium_communities.findMany({\n        where: {\n            isActive: true,\n            ...timeframe.start && {\n                createdAt: {\n                    gte: timeframe.start,\n                    lte: timeframe.end\n                }\n            }\n        },\n        select: {\n            ownerId: true,\n            currentMembers: true,\n            name: true\n        }\n    });\n    // Aggregate by owner\n    const ownerStats = teamStats.reduce((acc, team)=>{\n        if (!acc[team.ownerId]) {\n            acc[team.ownerId] = {\n                userId: team.ownerId,\n                totalMembers: 0,\n                teamsCreated: 0\n            };\n        }\n        acc[team.ownerId].totalMembers += team.currentMembers;\n        acc[team.ownerId].teamsCreated += 1;\n        return acc;\n    }, {});\n    const sortedStats = Object.values(ownerStats).sort((a, b)=>b.totalMembers - a.totalMembers);\n    const total = sortedStats.length;\n    const paginatedStats = sortedStats.slice(skip, skip + limit);\n    const userIds = paginatedStats.map((stat)=>stat.userId);\n    const users = await _client__WEBPACK_IMPORTED_MODULE_0__.prisma.users.findMany({\n        where: {\n            id: {\n                in: userIds\n            }\n        },\n        select: {\n            id: true,\n            name: true,\n            image: true\n        }\n    });\n    const userMap = users.reduce((acc, user)=>{\n        acc[user.id] = user;\n        return acc;\n    }, {});\n    const leaderboardData = paginatedStats.map((stat, index)=>({\n            userId: stat.userId,\n            user: userMap[stat.userId],\n            rank: skip + index + 1,\n            score: stat.totalMembers,\n            metrics: {\n                totalMembers: stat.totalMembers,\n                teamsCreated: stat.teamsCreated,\n                avgMembersPerTeam: stat.totalMembers / stat.teamsCreated\n            },\n            type: 'team'\n        }));\n    return {\n        leaderboardData,\n        total\n    };\n}\n/**\n * Apply privacy controls to leaderboard entry\n */ function applyLeaderboardPrivacyControls(entry, currentUserId, position, includeAnonymous) {\n    const isOwnEntry = entry.userId === currentUserId;\n    const user = entry.user;\n    if (!user) return null;\n    // Check user privacy settings\n    const privacySettings = user.privacySettings || {};\n    const allowLeaderboards = privacySettings.allowLeaderboards !== false;\n    const allowPublicProfile = privacySettings.allowPublicProfile !== false;\n    // If user doesn't allow leaderboards and it's not their own entry, hide completely\n    if (!allowLeaderboards && !isOwnEntry && !includeAnonymous) {\n        return null;\n    }\n    // If user doesn't allow public profile, anonymize\n    if (!allowPublicProfile && !isOwnEntry) {\n        return {\n            ...entry,\n            user: {\n                id: 'anonymous',\n                name: `User #${position}`,\n                image: null,\n                isAnonymized: true\n            },\n            isAnonymized: true\n        };\n    }\n    // Show normal entry\n    return {\n        ...entry,\n        isCurrentUser: isOwnEntry,\n        isAnonymized: false\n    };\n}\n/**\n * Calculate timeframe range\n */ function calculateTimeframeRange(timeframe) {\n    const now = new Date();\n    switch(timeframe){\n        case 'daily':\n            return {\n                start: new Date(now.getFullYear(), now.getMonth(), now.getDate()),\n                end: new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1)\n            };\n        case 'weekly':\n            const weekStart = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n            return {\n                start: weekStart,\n                end: now\n            };\n        case 'monthly':\n            const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n            return {\n                start: monthStart,\n                end: now\n            };\n        case 'yearly':\n            const yearStart = new Date(now.getFullYear(), 0, 1);\n            return {\n                start: yearStart,\n                end: now\n            };\n        default:\n            return {\n                start: null,\n                end: null\n            };\n    }\n}\n/**\n * Get metric value for leaderboard sorting\n */ function getLeaderboardMetricValue(stat, metric) {\n    switch(metric){\n        case 'total_volume':\n            return stat._sum.totalVolume || 0;\n        case 'total_workouts':\n            return stat._count.id;\n        case 'avg_volume':\n            return stat._avg.totalVolume || 0;\n        case 'total_duration':\n            return stat._sum.duration || 0;\n        default:\n            return stat._sum.totalVolume || 0;\n    }\n} // Note: named exports are declared inline above; avoid re-export block to prevent duplicate symbol errors\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/core/database/safety-business-queries.ts\n");

/***/ }),

/***/ "(rsc)/./src/core/database/workout-queries.ts":
/*!**********************************************!*\
  !*** ./src/core/database/workout-queries.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCoachFeedback: () => (/* binding */ addCoachFeedback),\n/* harmony export */   addPersonalRecord: () => (/* binding */ addPersonalRecord),\n/* harmony export */   addProgressMetric: () => (/* binding */ addProgressMetric),\n/* harmony export */   calculate_session_experience_points: () => (/* binding */ calculate_session_experience_points),\n/* harmony export */   check_and_award_achievements: () => (/* binding */ check_and_award_achievements),\n/* harmony export */   completeWorkoutSession: () => (/* binding */ completeWorkoutSession),\n/* harmony export */   createExercise: () => (/* binding */ createExercise),\n/* harmony export */   createExerciseVariation: () => (/* binding */ createExerciseVariation),\n/* harmony export */   createTrainingProgram: () => (/* binding */ createTrainingProgram),\n/* harmony export */   createWorkoutLogEntry: () => (/* binding */ createWorkoutLogEntry),\n/* harmony export */   createWorkoutSession: () => (/* binding */ createWorkoutSession),\n/* harmony export */   createWorkoutTemplate: () => (/* binding */ createWorkoutTemplate),\n/* harmony export */   deleteExercise: () => (/* binding */ deleteExercise),\n/* harmony export */   deleteExerciseVariation: () => (/* binding */ deleteExerciseVariation),\n/* harmony export */   deleteTrainingProgram: () => (/* binding */ deleteTrainingProgram),\n/* harmony export */   deleteWorkoutLogEntry: () => (/* binding */ deleteWorkoutLogEntry),\n/* harmony export */   deleteWorkoutSession: () => (/* binding */ deleteWorkoutSession),\n/* harmony export */   deleteWorkoutTemplate: () => (/* binding */ deleteWorkoutTemplate),\n/* harmony export */   finalise_session_with_gamification: () => (/* binding */ finalise_session_with_gamification),\n/* harmony export */   generateWorkoutAnalytics: () => (/* binding */ generateWorkoutAnalytics),\n/* harmony export */   getClientWorkoutLogs: () => (/* binding */ getClientWorkoutLogs),\n/* harmony export */   getEquipmentTypes: () => (/* binding */ getEquipmentTypes),\n/* harmony export */   getExercise: () => (/* binding */ getExercise),\n/* harmony export */   getExerciseCategories: () => (/* binding */ getExerciseCategories),\n/* harmony export */   getExerciseVariationById: () => (/* binding */ getExerciseVariationById),\n/* harmony export */   getExerciseVariations: () => (/* binding */ getExerciseVariations),\n/* harmony export */   getExercises: () => (/* binding */ getExercises),\n/* harmony export */   getFeaturedContent: () => (/* binding */ getFeaturedContent),\n/* harmony export */   getMarketplacePrograms: () => (/* binding */ getMarketplacePrograms),\n/* harmony export */   getMarketplaceTemplates: () => (/* binding */ getMarketplaceTemplates),\n/* harmony export */   getMuscleGroups: () => (/* binding */ getMuscleGroups),\n/* harmony export */   getMyPrograms: () => (/* binding */ getMyPrograms),\n/* harmony export */   getMyTemplates: () => (/* binding */ getMyTemplates),\n/* harmony export */   getPersonalRecords: () => (/* binding */ getPersonalRecords),\n/* harmony export */   getPopularContent: () => (/* binding */ getPopularContent),\n/* harmony export */   getProgressMetrics: () => (/* binding */ getProgressMetrics),\n/* harmony export */   getRecommendedContent: () => (/* binding */ getRecommendedContent),\n/* harmony export */   getTopRatedContent: () => (/* binding */ getTopRatedContent),\n/* harmony export */   getTrainingProgramById: () => (/* binding */ getTrainingProgramById),\n/* harmony export */   getTrainingPrograms: () => (/* binding */ getTrainingPrograms),\n/* harmony export */   getUserProgramSubscriptions: () => (/* binding */ getUserProgramSubscriptions),\n/* harmony export */   getUserWorkoutsUnified: () => (/* binding */ getUserWorkoutsUnified),\n/* harmony export */   getWorkoutAnalytics: () => (/* binding */ getWorkoutAnalytics),\n/* harmony export */   getWorkoutLogEntries: () => (/* binding */ getWorkoutLogEntries),\n/* harmony export */   getWorkoutLogEntry: () => (/* binding */ getWorkoutLogEntry),\n/* harmony export */   getWorkoutSession: () => (/* binding */ getWorkoutSession),\n/* harmony export */   getWorkoutSessions: () => (/* binding */ getWorkoutSessions),\n/* harmony export */   getWorkoutStats: () => (/* binding */ getWorkoutStats),\n/* harmony export */   getWorkoutTemplateById: () => (/* binding */ getWorkoutTemplateById),\n/* harmony export */   getWorkoutTemplates: () => (/* binding */ getWorkoutTemplates),\n/* harmony export */   get_assessment_based_recommendations: () => (/* binding */ get_assessment_based_recommendations),\n/* harmony export */   link_session_to_assessment: () => (/* binding */ link_session_to_assessment),\n/* harmony export */   prepare_ai_training_data: () => (/* binding */ prepare_ai_training_data),\n/* harmony export */   purchaseProgram: () => (/* binding */ purchaseProgram),\n/* harmony export */   purchaseTemplate: () => (/* binding */ purchaseTemplate),\n/* harmony export */   rateProgram: () => (/* binding */ rateProgram),\n/* harmony export */   rateTemplate: () => (/* binding */ rateTemplate),\n/* harmony export */   searchExercises: () => (/* binding */ searchExercises),\n/* harmony export */   searchTrainingPrograms: () => (/* binding */ searchTrainingPrograms),\n/* harmony export */   searchWorkoutTemplates: () => (/* binding */ searchWorkoutTemplates),\n/* harmony export */   subscribeToProgram: () => (/* binding */ subscribeToProgram),\n/* harmony export */   updateExercise: () => (/* binding */ updateExercise),\n/* harmony export */   updateExerciseVariation: () => (/* binding */ updateExerciseVariation),\n/* harmony export */   updateProgramProgress: () => (/* binding */ updateProgramProgress),\n/* harmony export */   updateTrainingProgram: () => (/* binding */ updateTrainingProgram),\n/* harmony export */   updateWorkoutLogEntry: () => (/* binding */ updateWorkoutLogEntry),\n/* harmony export */   updateWorkoutSession: () => (/* binding */ updateWorkoutSession),\n/* harmony export */   updateWorkoutTemplate: () => (/* binding */ updateWorkoutTemplate)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./client */ \"(rsc)/./src/core/database/client.ts\");\n/* harmony import */ var _types_workout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types/workout */ \"(rsc)/./src/types/workout.ts\");\n/* harmony import */ var _services_ai_workout_suggestions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/ai/workout-suggestions */ \"(rsc)/./src/services/ai/workout-suggestions.ts\");\n// src/core/database/workout-queries.ts\n/**\n * Workout Log Database Queries for Massimino\n * Comprehensive query functions for workout tracking and management\n */ \n\n\n\n// ============================================================================\n// WORKOUT LOG ENTRY QUERIES\n// ============================================================================\n/**\n * Get unified workout entries (personal + team workouts) with filtering, sorting, and pagination\n */ async function getUserWorkoutsUnified(userId, options = {}) {\n    const { filters = {}, sort = {\n        field: 'date',\n        direction: 'desc'\n    }, pagination = {}, includeTeamWorkouts = true } = options;\n    const page = pagination.page || 1;\n    const limit = pagination.limit || 50;\n    const offset = (page - 1) * limit;\n    // Build where clause\n    const where = {\n        userId\n    };\n    if (filters.dateRange) {\n        where.date = {\n            gte: filters.dateRange.start,\n            lte: filters.dateRange.end\n        };\n    }\n    if (filters.exercises && filters.exercises.length > 0) {\n        where.exerciseId = {\n            in: filters.exercises\n        };\n    }\n    if (filters.setTypes && filters.setTypes.length > 0) {\n        where.setType = {\n            in: filters.setTypes\n        };\n    }\n    if (filters.coachId) {\n        where.coachId = filters.coachId;\n    }\n    // Filter by team workout status if specified\n    if (!includeTeamWorkouts) {\n        where.isTeamWorkout = false;\n    }\n    // Get total count\n    const total = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.count({\n        where\n    });\n    // Get entries with relationships\n    const entries = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.findMany({\n        where,\n        include: {\n            exercises: true,\n            users_workout_log_entries_userIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            },\n            users_workout_log_entries_coachIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            }\n        },\n        orderBy: {\n            [sort.field]: sort.direction\n        },\n        skip: offset,\n        take: limit\n    });\n    const totalPages = Math.ceil(total / limit);\n    // Map the Prisma relation names to the expected format\n    const mappedEntries = entries.map((entry)=>({\n            ...entry,\n            exercise: entry.exercises,\n            user: entry.users_workout_log_entries_userIdTousers,\n            coach: entry.users_workout_log_entries_coachIdTousers\n        }));\n    return {\n        entries: mappedEntries,\n        pagination: {\n            page,\n            limit,\n            total,\n            totalPages,\n            hasMore: page < totalPages\n        }\n    };\n}\n/**\n * Get workout log entries with filtering, sorting, and pagination\n */ async function getWorkoutLogEntries(userId, options = {}) {\n    const { filters = {}, sort = {\n        field: 'date',\n        direction: 'desc'\n    }, pagination = {} } = options;\n    const page = pagination.page || 1;\n    const limit = pagination.limit || 50;\n    const offset = (page - 1) * limit;\n    // Build where clause\n    const where = {\n        userId\n    };\n    if (filters.dateRange) {\n        where.date = {\n            gte: filters.dateRange.start,\n            lte: filters.dateRange.end\n        };\n    }\n    if (filters.exercises && filters.exercises.length > 0) {\n        where.exerciseId = {\n            in: filters.exercises\n        };\n    }\n    if (filters.setTypes && filters.setTypes.length > 0) {\n        where.setType = {\n            in: filters.setTypes\n        };\n    }\n    if (filters.coachId) {\n        where.coachId = filters.coachId;\n    }\n    // Get total count\n    const total = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.count({\n        where\n    });\n    // Get entries with relationships\n    const entries = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.findMany({\n        where,\n        include: {\n            exercises: true,\n            users_workout_log_entries_userIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            },\n            users_workout_log_entries_coachIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            }\n        },\n        orderBy: {\n            [sort.field]: sort.direction\n        },\n        skip: offset,\n        take: limit\n    });\n    const totalPages = Math.ceil(total / limit);\n    // Map the Prisma relation names to the expected format\n    const mappedEntries = entries.map((entry)=>({\n            ...entry,\n            exercise: entry.exercises,\n            user: entry.users_workout_log_entries_userIdTousers,\n            coach: entry.users_workout_log_entries_coachIdTousers\n        }));\n    return {\n        entries: mappedEntries,\n        pagination: {\n            page,\n            limit,\n            total,\n            totalPages,\n            hasMore: page < totalPages\n        }\n    };\n}\n/**\n * Get a single workout log entry by ID\n */ async function getWorkoutLogEntry(id, userId) {\n    const entry = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.findFirst({\n        where: {\n            id,\n            userId\n        },\n        include: {\n            exercises: true,\n            users_workout_log_entries_userIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            },\n            users_workout_log_entries_coachIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            }\n        }\n    });\n    if (!entry) return null;\n    // Map the Prisma relation names to the expected format\n    return {\n        ...entry,\n        exercise: entry.exercises,\n        user: entry.users_workout_log_entries_userIdTousers,\n        coach: entry.users_workout_log_entries_coachIdTousers\n    };\n}\n/**\n * Create a new workout log entry\n */ async function createWorkoutLogEntry(userId, data, coachId) {\n    // Calculate training volume\n    const averageWeight = (0,_types_workout__WEBPACK_IMPORTED_MODULE_2__.calculateAverageWeight)(data.weight);\n    const trainingVolume = (0,_types_workout__WEBPACK_IMPORTED_MODULE_2__.calculateTrainingVolume)(1, data.reps, averageWeight, data.unit);\n    // Check for personal records\n    const is_weight_pr = await check_personal_record(userId, data.exerciseId, averageWeight, data.reps);\n    const is_volume_pr = await check_volume_record(userId, data.exerciseId, trainingVolume);\n    // Entry is a PR if it's either a weight PR or volume PR\n    const is_personal_record = is_weight_pr || is_volume_pr;\n    // Generate order based on set type\n    const context = {\n        currentSetType: data.setType,\n        currentGroupNumber: data.setNumber,\n        currentSubOrder: 'A',\n        totalEntries: 0\n    };\n    const order = (0,_types_workout__WEBPACK_IMPORTED_MODULE_2__.generateOrder)(data.setType, context);\n    // Create entry and update exercise usage metrics in a transaction\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.$transaction(async (tx)=>{\n        const entry = await tx.workout_log_entries.create({\n            data: {\n                id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n                userId,\n                coachId: coachId ?? null,\n                date: new Date(data.date),\n                exerciseId: data.exerciseId,\n                order,\n                setNumber: data.setNumber,\n                setType: data.setType,\n                reps: data.reps,\n                weight: data.weight,\n                unit: data.unit,\n                ...data.intensity !== undefined && {\n                    intensity: data.intensity\n                },\n                ...data.intensityType !== undefined && {\n                    intensityType: data.intensityType\n                },\n                ...data.tempo !== undefined && {\n                    tempo: data.tempo\n                },\n                ...data.restSeconds !== undefined && {\n                    restSeconds: data.restSeconds\n                },\n                trainingVolume,\n                personalRecord: is_personal_record,\n                ...data.userComments !== undefined && {\n                    userComments: data.userComments\n                },\n                ...data.coachFeedback !== undefined && {\n                    coachFeedback: data.coachFeedback\n                },\n                updatedAt: new Date()\n            }\n        });\n        await tx.exercises.update({\n            where: {\n                id: data.exerciseId\n            },\n            data: {\n                usageCount: {\n                    increment: 1\n                },\n                lastUsed: new Date()\n            }\n        });\n        return entry;\n    });\n}\n/**\n * Update a workout log entry\n */ async function updateWorkoutLogEntry(id, userId, data) {\n    // Get existing entry\n    const existing = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.findFirst({\n        where: {\n            id,\n            userId\n        }\n    });\n    if (!existing) {\n        return null;\n    }\n    // Calculate new training volume if weight or reps changed\n    let trainingVolume = existing.trainingVolume;\n    if (data.weight || data.reps) {\n        const newWeight = data.weight || existing.weight;\n        const newReps = data.reps || existing.reps;\n        const averageWeight = (0,_types_workout__WEBPACK_IMPORTED_MODULE_2__.calculateAverageWeight)(newWeight);\n        trainingVolume = (0,_types_workout__WEBPACK_IMPORTED_MODULE_2__.calculateTrainingVolume)(1, newReps, averageWeight, data.unit || existing.unit);\n    }\n    const updated = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.update({\n        where: {\n            id\n        },\n        data: {\n            ...data.date && {\n                date: new Date(data.date)\n            },\n            ...data.exerciseId && {\n                exerciseId: data.exerciseId\n            },\n            ...data.setNumber && {\n                setNumber: data.setNumber\n            },\n            ...data.setType && {\n                setType: data.setType\n            },\n            ...data.reps && {\n                reps: data.reps\n            },\n            ...data.weight && {\n                weight: data.weight\n            },\n            ...data.unit && {\n                unit: data.unit\n            },\n            ...data.intensity && {\n                intensity: data.intensity\n            },\n            ...data.intensityType && {\n                intensityType: data.intensityType\n            },\n            ...data.tempo && {\n                tempo: data.tempo\n            },\n            ...data.restSeconds && {\n                restSeconds: data.restSeconds\n            },\n            ...trainingVolume !== undefined && {\n                trainingVolume\n            },\n            ...data.userComments && {\n                userComments: data.userComments\n            },\n            ...data.coachFeedback && {\n                coachFeedback: data.coachFeedback\n            }\n        }\n    });\n    // If exercise changed, update usage metrics for the new exercise\n    if (data.exerciseId && data.exerciseId !== existing.exerciseId) {\n        await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercises.update({\n            where: {\n                id: data.exerciseId\n            },\n            data: {\n                usageCount: {\n                    increment: 1\n                },\n                lastUsed: new Date()\n            }\n        });\n    }\n    return updated;\n}\n/**\n * Delete a workout log entry\n */ async function deleteWorkoutLogEntry(id, userId) {\n    const result = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.deleteMany({\n        where: {\n            id,\n            userId\n        }\n    });\n    return result.count > 0;\n}\n/**\n * Get workout statistics for a user\n */ async function getWorkoutStats(userId, dateRange) {\n    const where = {\n        userId\n    };\n    if (dateRange) {\n        where.date = {\n            gte: dateRange.start,\n            lte: dateRange.end\n        };\n    }\n    const entries = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.findMany({\n        where,\n        include: {\n            exercises: true\n        }\n    });\n    const totalWorkouts = new Set(entries.map((e)=>e.date.toDateString())).size;\n    const totalVolume = entries.reduce((sum, e)=>sum + (e.trainingVolume || 0), 0);\n    const totalSets = entries.length;\n    const totalReps = entries.reduce((sum, e)=>sum + e.reps, 0);\n    // Calculate average workout duration\n    const sessions = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findMany({\n        where,\n        select: {\n            duration: true\n        }\n    });\n    const averageWorkoutDuration = sessions.length > 0 ? sessions.reduce((sum, s)=>sum + (s.duration || 0), 0) / sessions.length : 0;\n    // Most used exercises\n    const exerciseCounts = entries.reduce((acc, entry)=>{\n        const key = entry.exerciseId;\n        acc[key] = (acc[key] || 0) + 1;\n        return acc;\n    }, {});\n    const mostUsedExercises = Object.entries(exerciseCounts).map(([exerciseId, count])=>({\n            exerciseId,\n            count,\n            name: entries.find((e)=>e.exerciseId === exerciseId)?.exercises.name || ''\n        })).sort((a, b)=>b.count - a.count).slice(0, 10);\n    // Volume by muscle group\n    const volumeByMuscleGroup = entries.reduce((acc, entry)=>{\n        entry.exercises.muscleGroups.forEach((muscleGroup)=>{\n            acc[muscleGroup] = (acc[muscleGroup] || 0) + (entry.trainingVolume || 0);\n        });\n        return acc;\n    }, {});\n    return {\n        totalWorkouts,\n        totalVolume,\n        totalSets,\n        totalReps,\n        averageWorkoutDuration,\n        mostUsedExercises,\n        volumeByMuscleGroup: Object.entries(volumeByMuscleGroup).map(([muscleGroup, volume])=>({\n                muscleGroup,\n                volume\n            }))\n    };\n}\n// ============================================================================\n// EXERCISE QUERIES\n// ============================================================================\n/**\n * Get all exercises with optional filtering\n */ async function getExercises(options = {}) {\n    const where = {};\n    if (options.category) {\n        where.category = options.category;\n    }\n    if (options.muscleGroups && options.muscleGroups.length > 0) {\n        where.muscleGroups = {\n            hasSome: options.muscleGroups\n        };\n    }\n    if (options.equipment && options.equipment.length > 0) {\n        where.equipment = {\n            hasSome: options.equipment\n        };\n    }\n    if (options.difficulty) {\n        where.difficulty = options.difficulty;\n    }\n    if (options.isActive !== undefined) {\n        where.isActive = options.isActive;\n    }\n    if (options.search) {\n        where.name = {\n            contains: options.search,\n            mode: 'insensitive'\n        };\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercises.findMany({\n        where,\n        orderBy: {\n            name: 'asc'\n        }\n    });\n}\n/**\n * Get exercise by ID\n */ async function getExercise(id) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercises.findUnique({\n        where: {\n            id\n        }\n    });\n}\n/**\n * Create a new exercise\n */ async function createExercise(data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercises.create({\n        data: {\n            id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n            name: data.name,\n            category: data.category,\n            muscleGroups: data.muscleGroups,\n            equipment: data.equipment,\n            instructions: data.instructions ?? null,\n            videoUrl: data.videoUrl ?? null,\n            imageUrl: data.imageUrl ?? null,\n            difficulty: data.difficulty || 'BEGINNER',\n            safetyNotes: data.safetyNotes ?? null,\n            formCues: data.formCues || [],\n            commonMistakes: data.commonMistakes || [],\n            createdBy: data.createdBy ?? null,\n            isCustom: data.isCustom || false,\n            updatedAt: new Date()\n        }\n    });\n}\n/**\n * Update an exercise\n */ async function updateExercise(id, data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercises.update({\n        where: {\n            id\n        },\n        data\n    });\n}\n/**\n * Delete an exercise (soft delete by setting isActive to false)\n */ async function deleteExercise(id) {\n    const result = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercises.update({\n        where: {\n            id\n        },\n        data: {\n            isActive: false\n        }\n    });\n    return result.isActive === false;\n}\n// ============================================================================\n// EXERCISE VARIATION QUERIES\n// ============================================================================\n/**\n * Get exercise variations for an exercise\n */ async function getExerciseVariations(exerciseId, options = {}) {\n    const where = {\n        exerciseId,\n        isActive: true\n    };\n    if (options.difficulty) {\n        where.difficulty = options.difficulty;\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercise_variations.findMany({\n        where,\n        include: {\n            exercises: {\n                select: {\n                    id: true,\n                    name: true,\n                    category: true\n                }\n            }\n        },\n        orderBy: {\n            difficulty: 'asc'\n        }\n    });\n}\n/**\n * Get exercise variation by ID\n */ async function getExerciseVariationById(id) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercise_variations.findUnique({\n        where: {\n            id\n        },\n        include: {\n            exercises: {\n                select: {\n                    id: true,\n                    name: true,\n                    category: true\n                }\n            }\n        }\n    });\n}\n/**\n * Create exercise variation\n */ async function createExerciseVariation(data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercise_variations.create({\n        data: {\n            id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n            exerciseId: data.exerciseId,\n            name: data.name,\n            description: data.description ?? null,\n            difficulty: data.difficulty || 'BEGINNER',\n            videoUrl: data.videoUrl ?? null,\n            imageUrl: data.imageUrl ?? null,\n            instructions: data.instructions ?? null,\n            updatedAt: new Date()\n        },\n        include: {\n            exercises: {\n                select: {\n                    id: true,\n                    name: true,\n                    category: true\n                }\n            }\n        }\n    });\n}\n/**\n * Update exercise variation\n */ async function updateExerciseVariation(id, data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercise_variations.update({\n        where: {\n            id\n        },\n        data: {\n            ...data.name && {\n                name: data.name\n            },\n            ...data.description && {\n                description: data.description\n            },\n            ...data.difficulty && {\n                difficulty: data.difficulty\n            },\n            ...data.videoUrl && {\n                videoUrl: data.videoUrl\n            },\n            ...data.imageUrl && {\n                imageUrl: data.imageUrl\n            },\n            ...data.instructions && {\n                instructions: data.instructions\n            },\n            ...data.isActive !== undefined && {\n                isActive: data.isActive\n            }\n        },\n        include: {\n            exercises: {\n                select: {\n                    id: true,\n                    name: true,\n                    category: true\n                }\n            }\n        }\n    });\n}\n/**\n * Delete exercise variation\n */ async function deleteExerciseVariation(id) {\n    const result = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercise_variations.update({\n        where: {\n            id\n        },\n        data: {\n            isActive: false\n        }\n    });\n    return result.isActive === false;\n}\n// ============================================================================\n// WORKOUT SESSION QUERIES\n// ============================================================================\n/**\n * Get workout sessions for a user\n */ async function getWorkoutSessions(userId, options = {}) {\n    const { dateRange, isComplete, isTemplate, pagination = {} } = options;\n    const page = pagination.page || 1;\n    const limit = pagination.limit || 20;\n    const offset = (page - 1) * limit;\n    const where = {\n        userId\n    };\n    if (dateRange) {\n        where.date = {\n            gte: dateRange.start,\n            lte: dateRange.end\n        };\n    }\n    if (isComplete !== undefined) {\n        where.isComplete = isComplete;\n    }\n    if (isTemplate !== undefined) {\n        where.isTemplate = isTemplate;\n    }\n    const total = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.count({\n        where\n    });\n    const sessions = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findMany({\n        where,\n        include: {\n            users_workout_sessions_userIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            },\n            users_workout_sessions_coachIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            },\n            workout_log_entries: {\n                include: {\n                    exercises: true\n                },\n                orderBy: {\n                    order: 'asc'\n                }\n            }\n        },\n        orderBy: {\n            date: 'desc'\n        },\n        skip: offset,\n        take: limit\n    });\n    // Map the Prisma relation names to the expected format\n    const mappedSessions = sessions.map((session)=>({\n            ...session,\n            user: session.users_workout_sessions_userIdTousers,\n            coach: session.users_workout_sessions_coachIdTousers,\n            entries: session.workout_log_entries.map((entry)=>({\n                    ...entry,\n                    exercise: entry.exercises\n                }))\n        }));\n    return {\n        sessions: mappedSessions,\n        pagination: {\n            page,\n            limit,\n            total,\n            totalPages: Math.ceil(total / limit),\n            hasMore: page < Math.ceil(total / limit)\n        }\n    };\n}\n/**\n * Get a single workout session by ID\n */ async function getWorkoutSession(id, userId) {\n    const session = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findFirst({\n        where: {\n            id,\n            userId\n        },\n        include: {\n            users_workout_sessions_userIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            },\n            users_workout_sessions_coachIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            },\n            workout_log_entries: {\n                include: {\n                    exercises: true\n                },\n                orderBy: {\n                    order: 'asc'\n                }\n            }\n        }\n    });\n    if (!session) return null;\n    // Map the Prisma relation names to the expected format\n    return {\n        ...session,\n        user: session.users_workout_sessions_userIdTousers,\n        coach: session.users_workout_sessions_coachIdTousers,\n        entries: session.workout_log_entries.map((entry)=>({\n                ...entry,\n                exercise: entry.exercises\n            }))\n    };\n}\n/**\n * Create a new workout session\n */ async function createWorkoutSession(userId, data, coachId) {\n    const startTime = new Date(`${data.date}T${data.startTime}`);\n    const endTime = data.endTime ? new Date(`${data.date}T${data.endTime}`) : null;\n    let duration;\n    if (startTime && endTime) {\n        duration = Math.floor((endTime.getTime() - startTime.getTime()) / 1000);\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.create({\n        data: {\n            id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n            userId,\n            coachId: coachId ?? null,\n            date: new Date(data.date),\n            startTime,\n            endTime,\n            ...duration !== undefined && {\n                duration\n            },\n            ...data.title !== undefined && {\n                title: data.title\n            },\n            ...data.notes !== undefined && {\n                notes: data.notes\n            },\n            ...data.location !== undefined && {\n                location: data.location\n            },\n            isTemplate: data.isTemplate || false,\n            updatedAt: new Date()\n        }\n    });\n}\n/**\n * Update a workout session\n */ async function updateWorkoutSession(id, userId, data) {\n    const existing = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findFirst({\n        where: {\n            id,\n            userId\n        }\n    });\n    if (!existing) {\n        return null;\n    }\n    let startTime = existing.startTime;\n    let endTime = existing.endTime;\n    let duration = existing.duration;\n    if (data.date && data.startTime) {\n        startTime = new Date(`${data.date}T${data.startTime}`);\n    }\n    if (data.date && data.endTime) {\n        endTime = new Date(`${data.date}T${data.endTime}`);\n    }\n    if (startTime && endTime) {\n        duration = Math.floor((endTime.getTime() - startTime.getTime()) / 1000);\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.update({\n        where: {\n            id\n        },\n        data: {\n            ...data.date && {\n                date: new Date(data.date)\n            },\n            ...startTime && {\n                startTime\n            },\n            ...endTime && {\n                endTime\n            },\n            ...duration !== undefined && {\n                duration\n            },\n            ...data.title && {\n                title: data.title\n            },\n            ...data.notes && {\n                notes: data.notes\n            },\n            ...data.location && {\n                location: data.location\n            },\n            ...data.isTemplate !== undefined && {\n                isTemplate: data.isTemplate\n            }\n        }\n    });\n}\n/**\n * Complete a workout session\n */ async function completeWorkoutSession(id, userId, endTime) {\n    const session = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findFirst({\n        where: {\n            id,\n            userId\n        }\n    });\n    if (!session) {\n        return null;\n    }\n    const endTimeToUse = endTime || new Date();\n    const duration = Math.floor((endTimeToUse.getTime() - session.startTime.getTime()) / 1000);\n    // Calculate total volume and stats\n    const entries = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.findMany({\n        where: {\n            userId,\n            date: session.date\n        }\n    });\n    const totalVolume = entries.reduce((sum, entry)=>sum + (entry.trainingVolume || 0), 0);\n    const totalSets = entries.length;\n    const totalReps = entries.reduce((sum, entry)=>sum + entry.reps, 0);\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.update({\n        where: {\n            id\n        },\n        data: {\n            endTime: endTimeToUse,\n            duration,\n            isComplete: true,\n            totalVolume,\n            totalSets,\n            totalReps\n        }\n    });\n}\n/**\n * Delete a workout session\n */ async function deleteWorkoutSession(id, userId) {\n    const result = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.deleteMany({\n        where: {\n            id,\n            userId\n        }\n    });\n    return result.count > 0;\n}\n// ============================================================================\n// COACH-SPECIFIC QUERIES\n// ============================================================================\n/**\n * Get workout logs for clients assigned to a coach\n */ async function getClientWorkoutLogs(coachId, options = {}) {\n    const { clientId, dateRange, pagination = {} } = options;\n    const page = pagination.page || 1;\n    const limit = pagination.limit || 50;\n    const offset = (page - 1) * limit;\n    const where = {\n        coachId\n    };\n    if (clientId) {\n        where.userId = clientId;\n    }\n    if (dateRange) {\n        where.date = {\n            gte: dateRange.start,\n            lte: dateRange.end\n        };\n    }\n    const total = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.count({\n        where\n    });\n    const entries = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.findMany({\n        where,\n        include: {\n            exercises: true,\n            users_workout_log_entries_userIdTousers: {\n                select: {\n                    id: true,\n                    name: true,\n                    role: true\n                }\n            }\n        },\n        orderBy: {\n            date: 'desc'\n        },\n        skip: offset,\n        take: limit\n    });\n    const totalPages = Math.ceil(total / limit);\n    // Map the Prisma relation names to the expected format\n    const mappedEntries = entries.map((entry)=>({\n            ...entry,\n            exercise: entry.exercises,\n            user: entry.users_workout_log_entries_userIdTousers\n        }));\n    return {\n        entries: mappedEntries,\n        pagination: {\n            page,\n            limit,\n            total,\n            totalPages,\n            hasMore: page < totalPages\n        }\n    };\n}\n/**\n * Add coach feedback to a workout entry\n */ async function addCoachFeedback(entryId, coachId, feedback) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.update({\n        where: {\n            id: entryId,\n            coachId\n        },\n        data: {\n            coachFeedback: feedback\n        }\n    });\n}\n// ============================================================================\n// UTILITY QUERIES\n// ============================================================================\n/**\n * Get exercise categories for filtering\n */ async function getExerciseCategories() {\n    const exercises = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercises.findMany({\n        select: {\n            category: true\n        },\n        where: {\n            isActive: true\n        }\n    });\n    return [\n        ...new Set(exercises.map((e)=>e.category))\n    ];\n}\n/**\n * Get muscle groups for filtering\n */ async function getMuscleGroups() {\n    const exercises = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercises.findMany({\n        select: {\n            muscleGroups: true\n        },\n        where: {\n            isActive: true\n        }\n    });\n    const allMuscleGroups = exercises.flatMap((e)=>e.muscleGroups);\n    return [\n        ...new Set(allMuscleGroups)\n    ];\n}\n/**\n * Get equipment types for filtering\n */ async function getEquipmentTypes() {\n    const exercises = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercises.findMany({\n        select: {\n            equipment: true\n        },\n        where: {\n            isActive: true\n        }\n    });\n    const allEquipment = exercises.flatMap((e)=>e.equipment);\n    return [\n        ...new Set(allEquipment)\n    ];\n}\n/**\n * Search exercises by name\n */ async function searchExercises(query, limit = 10) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.exercises.findMany({\n        where: {\n            name: {\n                contains: query,\n                mode: 'insensitive'\n            },\n            isActive: true\n        },\n        orderBy: {\n            usageCount: 'desc'\n        },\n        take: limit\n    });\n}\n// ============================================================================\n// WORKOUT TEMPLATE QUERIES\n// ============================================================================\n/**\n * Get workout templates with filtering\n */ async function getWorkoutTemplates(filters = {}) {\n    const where = {\n        isActive: true\n    };\n    if (filters.publicOnly) {\n        where.isPublic = true;\n    }\n    if (filters.category) {\n        where.category = filters.category;\n    }\n    if (filters.difficulty) {\n        where.difficulty = filters.difficulty;\n    }\n    if (filters.minRating) {\n        where.rating = {\n            gte: filters.minRating\n        };\n    }\n    if (filters.priceRange) {\n        const [min, max] = filters.priceRange.split('-').map(Number);\n        where.price = {\n            gte: min,\n            lte: max\n        };\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.findMany({\n        where,\n        include: {\n            users: {\n                select: {\n                    id: true,\n                    name: true,\n                    trainerVerified: true\n                }\n            },\n            workout_template_exercises: {\n                include: {\n                    exercises: true\n                },\n                orderBy: {\n                    order: 'asc'\n                }\n            },\n            _count: {\n                select: {\n                    template_ratings: true\n                }\n            }\n        },\n        orderBy: {\n            rating: 'desc'\n        },\n        take: filters.limit || 20\n    });\n}\n/**\n * Get workout template by ID\n */ async function getWorkoutTemplateById(id) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.findUnique({\n        where: {\n            id\n        },\n        include: {\n            users: {\n                select: {\n                    id: true,\n                    name: true,\n                    trainerVerified: true\n                }\n            },\n            workout_template_exercises: {\n                include: {\n                    exercises: true\n                },\n                orderBy: {\n                    order: 'asc'\n                }\n            },\n            template_ratings: {\n                include: {\n                    users: {\n                        select: {\n                            id: true,\n                            name: true\n                        }\n                    }\n                },\n                orderBy: {\n                    createdAt: 'desc'\n                },\n                take: 10\n            },\n            _count: {\n                select: {\n                    template_ratings: true\n                }\n            }\n        }\n    });\n}\n/**\n * Create workout template\n */ async function createWorkoutTemplate(data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.create({\n        data: {\n            id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n            updatedAt: new Date(),\n            name: data.name,\n            description: data.description,\n            category: data.category,\n            difficulty: data.difficulty || 'BEGINNER',\n            duration: data.duration,\n            equipment: data.equipment || [],\n            isPublic: data.isPublic || false,\n            price: data.price,\n            currency: data.currency || 'USD',\n            tags: data.tags || [],\n            users: {\n                connect: {\n                    id: data.createdBy\n                }\n            },\n            workout_template_exercises: {\n                create: data.exercises?.map((exercise)=>({\n                        exerciseId: exercise.exerciseId,\n                        order: exercise.order,\n                        sets: exercise.sets,\n                        reps: exercise.reps,\n                        weight: exercise.weight,\n                        restTime: exercise.restTime,\n                        notes: exercise.notes,\n                        isSuperset: exercise.isSuperset || false,\n                        supersetGroup: exercise.supersetGroup\n                    })) || []\n            }\n        },\n        include: {\n            workout_template_exercises: {\n                include: {\n                    exercises: true\n                }\n            }\n        }\n    });\n}\n/**\n * Update workout template\n */ async function updateWorkoutTemplate(id, data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.update({\n        where: {\n            id\n        },\n        data: {\n            ...data.name && {\n                name: data.name\n            },\n            ...data.description && {\n                description: data.description\n            },\n            ...data.category && {\n                category: data.category\n            },\n            ...data.difficulty && {\n                difficulty: data.difficulty\n            },\n            ...data.duration && {\n                duration: data.duration\n            },\n            ...data.equipment && {\n                equipment: data.equipment\n            },\n            ...data.isPublic !== undefined && {\n                isPublic: data.isPublic\n            },\n            ...data.price !== undefined && {\n                price: data.price\n            },\n            ...data.tags && {\n                tags: data.tags\n            }\n        }\n    });\n}\n/**\n * Delete workout template\n */ async function deleteWorkoutTemplate(id) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.update({\n        where: {\n            id\n        },\n        data: {\n            isActive: false\n        }\n    });\n}\n/**\n * Get user's templates\n */ async function getMyTemplates(userId) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.findMany({\n        where: {\n            createdBy: userId,\n            isActive: true\n        },\n        include: {\n            workout_template_exercises: {\n                include: {\n                    exercises: true\n                },\n                orderBy: {\n                    order: 'asc'\n                }\n            },\n            _count: {\n                select: {\n                    template_ratings: true\n                }\n            }\n        },\n        orderBy: {\n            createdAt: 'desc'\n        }\n    });\n}\n/**\n * Search workout templates\n */ async function searchWorkoutTemplates(query, options = {}) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.findMany({\n        where: {\n            isActive: true,\n            ...options.publicOnly && {\n                isPublic: true\n            },\n            OR: [\n                {\n                    name: {\n                        contains: query,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    description: {\n                        contains: query,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    tags: {\n                        has: query\n                    }\n                }\n            ]\n        },\n        include: {\n            users: {\n                select: {\n                    id: true,\n                    name: true,\n                    trainerVerified: true\n                }\n            },\n            _count: {\n                select: {\n                    template_ratings: true\n                }\n            }\n        },\n        orderBy: {\n            rating: 'desc'\n        },\n        take: options.limit || 20\n    });\n}\n/**\n * Purchase template\n */ async function purchaseTemplate(templateId, userId) {\n    const template = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.findUnique({\n        where: {\n            id: templateId\n        },\n        select: {\n            price: true,\n            currency: true\n        }\n    });\n    if (!template) throw new Error('Template not found');\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.$transaction(async (tx)=>{\n        const purchase = await tx.template_purchases.create({\n            data: {\n                id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n                userId,\n                templateId,\n                price: template.price || 0,\n                currency: template.currency\n            }\n        });\n        await tx.workout_templates.update({\n            where: {\n                id: templateId\n            },\n            data: {\n                purchaseCount: {\n                    increment: 1\n                }\n            }\n        });\n        return purchase;\n    });\n}\n/**\n * Rate template\n */ async function rateTemplate(templateId, userId, data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.$transaction(async (tx)=>{\n        const rating = await tx.template_ratings.upsert({\n            where: {\n                userId_templateId: {\n                    userId,\n                    templateId\n                }\n            },\n            update: {\n                rating: data.rating,\n                review: data.review\n            },\n            create: {\n                id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n                userId,\n                templateId,\n                rating: data.rating,\n                review: data.review\n            }\n        });\n        // Recalculate average rating\n        const ratings = await tx.template_ratings.findMany({\n            where: {\n                templateId\n            },\n            select: {\n                rating: true\n            }\n        });\n        const avgRating = ratings.reduce((sum, r)=>sum + r.rating, 0) / ratings.length;\n        await tx.workout_templates.update({\n            where: {\n                id: templateId\n            },\n            data: {\n                rating: avgRating,\n                ratingCount: ratings.length\n            }\n        });\n        return rating;\n    });\n}\n// ============================================================================\n// TRAINING PROGRAM QUERIES\n// ============================================================================\n/**\n * Get training programs with filtering\n */ async function getTrainingPrograms(filters = {}) {\n    const where = {\n        isActive: true\n    };\n    if (filters.publicOnly) {\n        where.isPublic = true;\n    }\n    if (filters.category) {\n        where.category = filters.category;\n    }\n    if (filters.difficulty) {\n        where.difficulty = filters.difficulty;\n    }\n    if (filters.duration) {\n        where.duration = filters.duration;\n    }\n    if (filters.minRating) {\n        where.rating = {\n            gte: filters.minRating\n        };\n    }\n    if (filters.priceRange) {\n        const [min, max] = filters.priceRange.split('-').map(Number);\n        where.price = {\n            gte: min,\n            lte: max\n        };\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.findMany({\n        where,\n        include: {\n            users: {\n                select: {\n                    id: true,\n                    name: true,\n                    trainerVerified: true\n                }\n            },\n            program_weeks: {\n                orderBy: {\n                    weekNumber: 'asc'\n                }\n            },\n            _count: {\n                select: {\n                    program_ratings: true,\n                    program_subscriptions: true\n                }\n            }\n        },\n        orderBy: {\n            rating: 'desc'\n        },\n        take: filters.limit || 20\n    });\n}\n/**\n * Get training program by ID\n */ async function getTrainingProgramById(id) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.findUnique({\n        where: {\n            id\n        },\n        include: {\n            users: {\n                select: {\n                    id: true,\n                    name: true,\n                    trainerVerified: true\n                }\n            },\n            program_weeks: {\n                orderBy: {\n                    weekNumber: 'asc'\n                }\n            },\n            workout_templates: {\n                include: {\n                    workout_template_exercises: {\n                        include: {\n                            exercises: true\n                        },\n                        orderBy: {\n                            order: 'asc'\n                        }\n                    }\n                }\n            },\n            program_ratings: {\n                include: {\n                    users: {\n                        select: {\n                            id: true,\n                            name: true\n                        }\n                    }\n                },\n                orderBy: {\n                    createdAt: 'desc'\n                },\n                take: 10\n            },\n            _count: {\n                select: {\n                    program_ratings: true,\n                    program_subscriptions: true\n                }\n            }\n        }\n    });\n}\n/**\n * Create training program\n */ async function createTrainingProgram(data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.create({\n        data: {\n            id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n            updatedAt: new Date(),\n            name: data.name,\n            description: data.description,\n            duration: data.duration,\n            difficulty: data.difficulty || 'BEGINNER',\n            category: data.category,\n            isPublic: data.isPublic || false,\n            price: data.price,\n            currency: data.currency || 'USD',\n            tags: data.tags || [],\n            users: {\n                connect: {\n                    id: data.createdBy\n                }\n            },\n            program_weeks: {\n                create: data.weeks?.map((week)=>({\n                        weekNumber: week.weekNumber,\n                        title: week.title,\n                        description: week.description,\n                        workouts: week.workouts\n                    })) || []\n            }\n        },\n        include: {\n            program_weeks: {\n                orderBy: {\n                    weekNumber: 'asc'\n                }\n            }\n        }\n    });\n}\n/**\n * Update training program\n */ async function updateTrainingProgram(id, data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.update({\n        where: {\n            id\n        },\n        data: {\n            ...data.name && {\n                name: data.name\n            },\n            ...data.description && {\n                description: data.description\n            },\n            ...data.duration && {\n                duration: data.duration\n            },\n            ...data.difficulty && {\n                difficulty: data.difficulty\n            },\n            ...data.category && {\n                category: data.category\n            },\n            ...data.isPublic !== undefined && {\n                isPublic: data.isPublic\n            },\n            ...data.price !== undefined && {\n                price: data.price\n            },\n            ...data.tags && {\n                tags: data.tags\n            }\n        }\n    });\n}\n/**\n * Delete training program\n */ async function deleteTrainingProgram(id) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.update({\n        where: {\n            id\n        },\n        data: {\n            isActive: false\n        }\n    });\n}\n/**\n * Get user's programs\n */ async function getMyPrograms(userId) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.findMany({\n        where: {\n            createdBy: userId,\n            isActive: true\n        },\n        include: {\n            program_weeks: {\n                orderBy: {\n                    weekNumber: 'asc'\n                }\n            },\n            _count: {\n                select: {\n                    program_ratings: true,\n                    program_subscriptions: true\n                }\n            }\n        },\n        orderBy: {\n            createdAt: 'desc'\n        }\n    });\n}\n/**\n * Search training programs\n */ async function searchTrainingPrograms(query, options = {}) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.findMany({\n        where: {\n            isActive: true,\n            ...options.publicOnly && {\n                isPublic: true\n            },\n            OR: [\n                {\n                    name: {\n                        contains: query,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    description: {\n                        contains: query,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    tags: {\n                        has: query\n                    }\n                }\n            ]\n        },\n        include: {\n            users: {\n                select: {\n                    id: true,\n                    name: true,\n                    trainerVerified: true\n                }\n            },\n            _count: {\n                select: {\n                    program_ratings: true,\n                    program_subscriptions: true\n                }\n            }\n        },\n        orderBy: {\n            rating: 'desc'\n        },\n        take: options.limit || 20\n    });\n}\n/**\n * Get user program subscriptions\n */ async function getUserProgramSubscriptions(userId) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_subscriptions.findMany({\n        where: {\n            userId,\n            isActive: true\n        },\n        include: {\n            program_templates: {\n                include: {\n                    users: {\n                        select: {\n                            id: true,\n                            name: true,\n                            trainerVerified: true\n                        }\n                    },\n                    program_weeks: {\n                        orderBy: {\n                            weekNumber: 'asc'\n                        }\n                    }\n                }\n            }\n        },\n        orderBy: {\n            startDate: 'desc'\n        }\n    });\n}\n/**\n * Purchase program\n */ async function purchaseProgram(programId, userId) {\n    const program = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.findUnique({\n        where: {\n            id: programId\n        },\n        select: {\n            price: true,\n            currency: true\n        }\n    });\n    if (!program) throw new Error('Program not found');\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.$transaction(async (tx)=>{\n        const purchase = await tx.program_purchases.create({\n            data: {\n                id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n                userId,\n                programId,\n                price: program.price || 0,\n                currency: program.currency\n            }\n        });\n        await tx.program_templates.update({\n            where: {\n                id: programId\n            },\n            data: {\n                purchaseCount: {\n                    increment: 1\n                }\n            }\n        });\n        return purchase;\n    });\n}\n/**\n * Subscribe to program\n */ async function subscribeToProgram(programId, userId) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_subscriptions.create({\n        data: {\n            id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n            userId,\n            programId,\n            currentWeek: 1,\n            currentDay: 1,\n            updatedAt: new Date()\n        }\n    });\n}\n/**\n * Rate program\n */ async function rateProgram(programId, userId, data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.$transaction(async (tx)=>{\n        const rating = await tx.program_ratings.upsert({\n            where: {\n                userId_programId: {\n                    userId,\n                    programId\n                }\n            },\n            update: {\n                rating: data.rating,\n                review: data.review\n            },\n            create: {\n                id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n                userId,\n                programId,\n                rating: data.rating,\n                review: data.review\n            }\n        });\n        // Recalculate average rating\n        const ratings = await tx.program_ratings.findMany({\n            where: {\n                programId\n            },\n            select: {\n                rating: true\n            }\n        });\n        const avgRating = ratings.reduce((sum, r)=>sum + r.rating, 0) / ratings.length;\n        await tx.program_templates.update({\n            where: {\n                id: programId\n            },\n            data: {\n                rating: avgRating,\n                ratingCount: ratings.length\n            }\n        });\n        return rating;\n    });\n}\n/**\n * Update program progress\n */ async function updateProgramProgress(programId, userId, data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_subscriptions.update({\n        where: {\n            userId_programId: {\n                userId,\n                programId\n            }\n        },\n        data: {\n            currentWeek: data.currentWeek,\n            currentDay: data.currentDay,\n            progressData: data.progressData\n        }\n    });\n}\n// ============================================================================\n// ANALYTICS & PROGRESS TRACKING QUERIES\n// ============================================================================\n/**\n * Get workout analytics for a user\n */ async function getWorkoutAnalytics(userId, options = {}) {\n    const where = {\n        userId\n    };\n    if (options.startDate || options.endDate) {\n        where.date = {};\n        if (options.startDate) where.date.gte = options.startDate;\n        if (options.endDate) where.date.lte = options.endDate;\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_analytics.findMany({\n        where,\n        orderBy: {\n            date: 'desc'\n        }\n    });\n}\n/**\n * Get progress metrics for a user\n */ async function getProgressMetrics(userId, options = {}) {\n    const where = {\n        userId\n    };\n    if (options.metricType) {\n        where.metricType = options.metricType;\n    }\n    if (options.startDate || options.endDate) {\n        where.recordedAt = {};\n        if (options.startDate) where.recordedAt.gte = options.startDate;\n        if (options.endDate) where.recordedAt.lte = options.endDate;\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.progress_metrics.findMany({\n        where,\n        orderBy: {\n            recordedAt: 'desc'\n        }\n    });\n}\n/**\n * Get personal records for a user\n */ async function getPersonalRecords(userId, options = {}) {\n    const where = {\n        userId\n    };\n    if (options.exerciseId) {\n        where.exerciseId = options.exerciseId;\n    }\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.personal_records.findMany({\n        where,\n        include: {\n            exercises: {\n                select: {\n                    id: true,\n                    name: true,\n                    category: true\n                }\n            }\n        },\n        orderBy: {\n            achievedAt: 'desc'\n        }\n    });\n}\n/**\n * Add progress metric\n */ async function addProgressMetric(data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.progress_metrics.create({\n        data: {\n            id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n            userId: data.userId,\n            metricType: data.metricType,\n            value: data.value,\n            unit: data.unit ?? null,\n            bodyPart: data.bodyPart ?? null,\n            notes: data.notes ?? null,\n            imageUrl: data.imageUrl ?? null,\n            recordedAt: data.recordedAt || new Date()\n        }\n    });\n}\n/**\n * Add personal record\n */ async function addPersonalRecord(data) {\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.personal_records.create({\n        data: {\n            id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n            userId: data.userId,\n            exerciseId: data.exerciseId,\n            recordType: data.recordType,\n            value: data.value,\n            unit: data.unit,\n            reps: data.reps ?? null,\n            notes: data.notes ?? null,\n            achievedAt: data.achievedAt || new Date()\n        }\n    });\n}\n/**\n * Generate workout analytics for a user\n */ async function generateWorkoutAnalytics(userId) {\n    // Get last 30 days of workout data\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 30);\n    const workoutLogs = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.findMany({\n        where: {\n            userId,\n            date: {\n                gte: startDate,\n                lte: endDate\n            }\n        },\n        include: {\n            exercises: true\n        }\n    });\n    // Group by date and calculate daily stats\n    const dailyStats = workoutLogs.reduce((acc, log)=>{\n        const dateKey = log.date.toISOString().split('T')[0];\n        if (!dateKey) return acc;\n        if (!acc[dateKey]) {\n            acc[dateKey] = {\n                date: log.date,\n                totalVolume: 0,\n                totalSets: 0,\n                totalReps: 0,\n                muscleGroups: new Set()\n            };\n        }\n        acc[dateKey].totalVolume += log.trainingVolume || 0;\n        acc[dateKey].totalSets += 1;\n        acc[dateKey].totalReps += log.reps;\n        log.exercises.muscleGroups.forEach((mg)=>acc[dateKey]?.muscleGroups.add(mg));\n        return acc;\n    }, {});\n    // Create or update analytics records\n    const analyticsPromises = Object.entries(dailyStats).map(([dateKey, stats])=>{\n        const topMuscleGroup = Array.from(stats.muscleGroups).length > 0 ? Array.from(stats.muscleGroups)[0] : null;\n        return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_analytics.upsert({\n            where: {\n                userId_date: {\n                    userId,\n                    date: new Date(dateKey)\n                }\n            },\n            update: {\n                totalWorkouts: 1,\n                totalVolume: stats.totalVolume,\n                totalSets: stats.totalSets,\n                totalReps: stats.totalReps,\n                topMuscleGroup,\n                updatedAt: new Date()\n            },\n            create: {\n                id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n                userId,\n                date: new Date(dateKey),\n                totalWorkouts: 1,\n                totalVolume: stats.totalVolume,\n                totalSets: stats.totalSets,\n                totalReps: stats.totalReps,\n                topMuscleGroup,\n                updatedAt: new Date()\n            }\n        });\n    });\n    return Promise.all(analyticsPromises);\n}\n// ============================================================================\n// MARKETPLACE QUERIES\n// ============================================================================\n/**\n * Get marketplace templates\n */ async function getMarketplaceTemplates(filters = {}) {\n    return getWorkoutTemplates({\n        ...filters,\n        publicOnly: true\n    });\n}\n/**\n * Get marketplace programs\n */ async function getMarketplacePrograms(filters = {}) {\n    return getTrainingPrograms({\n        ...filters,\n        publicOnly: true\n    });\n}\n/**\n * Get featured content\n */ async function getFeaturedContent() {\n    const [templates, programs] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.findMany({\n            where: {\n                isPublic: true,\n                isActive: true,\n                rating: {\n                    gte: 4.5\n                }\n            },\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        trainerVerified: true\n                    }\n                },\n                _count: {\n                    select: {\n                        template_ratings: true\n                    }\n                }\n            },\n            orderBy: {\n                rating: 'desc'\n            },\n            take: 6\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.findMany({\n            where: {\n                isPublic: true,\n                isActive: true,\n                rating: {\n                    gte: 4.5\n                }\n            },\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        trainerVerified: true\n                    }\n                },\n                _count: {\n                    select: {\n                        program_ratings: true,\n                        program_subscriptions: true\n                    }\n                }\n            },\n            orderBy: {\n                rating: 'desc'\n            },\n            take: 6\n        })\n    ]);\n    return {\n        templates,\n        programs\n    };\n}\n/**\n * Get top rated content\n */ async function getTopRatedContent() {\n    const [templates, programs] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.findMany({\n            where: {\n                isPublic: true,\n                isActive: true,\n                ratingCount: {\n                    gte: 5\n                }\n            },\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        trainerVerified: true\n                    }\n                },\n                _count: {\n                    select: {\n                        template_ratings: true\n                    }\n                }\n            },\n            orderBy: [\n                {\n                    rating: 'desc'\n                },\n                {\n                    ratingCount: 'desc'\n                }\n            ],\n            take: 10\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.findMany({\n            where: {\n                isPublic: true,\n                isActive: true,\n                ratingCount: {\n                    gte: 5\n                }\n            },\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        trainerVerified: true\n                    }\n                },\n                _count: {\n                    select: {\n                        program_ratings: true,\n                        program_subscriptions: true\n                    }\n                }\n            },\n            orderBy: [\n                {\n                    rating: 'desc'\n                },\n                {\n                    ratingCount: 'desc'\n                }\n            ],\n            take: 10\n        })\n    ]);\n    return {\n        templates,\n        programs\n    };\n}\n/**\n * Get popular content\n */ async function getPopularContent() {\n    const [templates, programs] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.findMany({\n            where: {\n                isPublic: true,\n                isActive: true\n            },\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        trainerVerified: true\n                    }\n                },\n                _count: {\n                    select: {\n                        template_ratings: true\n                    }\n                }\n            },\n            orderBy: {\n                purchaseCount: 'desc'\n            },\n            take: 10\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.findMany({\n            where: {\n                isPublic: true,\n                isActive: true\n            },\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        trainerVerified: true\n                    }\n                },\n                _count: {\n                    select: {\n                        program_ratings: true,\n                        program_subscriptions: true\n                    }\n                }\n            },\n            orderBy: {\n                purchaseCount: 'desc'\n            },\n            take: 10\n        })\n    ]);\n    return {\n        templates,\n        programs\n    };\n}\n/**\n * Get recommended content for a user\n */ async function getRecommendedContent(userId) {\n    if (!userId) {\n        // Return popular content for anonymous users\n        return getPopularContent();\n    }\n    // Get user's preferences and past purchases\n    const user = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.users.findUnique({\n        where: {\n            id: userId\n        },\n        select: {\n            fitnessGoals: true,\n            experienceLevel: true,\n            preferredWorkoutTypes: true,\n            template_purchases: {\n                include: {\n                    workout_templates: {\n                        select: {\n                            category: true,\n                            difficulty: true,\n                            tags: true\n                        }\n                    }\n                }\n            },\n            program_purchases: {\n                include: {\n                    program_templates: {\n                        select: {\n                            category: true,\n                            difficulty: true,\n                            tags: true\n                        }\n                    }\n                }\n            }\n        }\n    });\n    if (!user) {\n        return getPopularContent();\n    }\n    // Extract user preferences for recommendations\n    const userCategories = [\n        ...user.template_purchases.map((p)=>p.workout_templates.category),\n        ...user.program_purchases.map((p)=>p.program_templates.category)\n    ].filter(Boolean);\n    const userTags = [\n        ...user.template_purchases.flatMap((p)=>p.workout_templates.tags),\n        ...user.program_purchases.flatMap((p)=>p.program_templates.tags),\n        ...user.fitnessGoals,\n        ...user.preferredWorkoutTypes\n    ].filter(Boolean);\n    const [templates, programs] = await Promise.all([\n        _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_templates.findMany({\n            where: {\n                isPublic: true,\n                isActive: true,\n                OR: [\n                    {\n                        category: {\n                            in: userCategories\n                        }\n                    },\n                    {\n                        difficulty: user.experienceLevel\n                    },\n                    {\n                        tags: {\n                            hasSome: userTags\n                        }\n                    }\n                ]\n            },\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        trainerVerified: true\n                    }\n                },\n                _count: {\n                    select: {\n                        template_ratings: true\n                    }\n                }\n            },\n            orderBy: {\n                rating: 'desc'\n            },\n            take: 10\n        }),\n        _client__WEBPACK_IMPORTED_MODULE_1__.prisma.program_templates.findMany({\n            where: {\n                isPublic: true,\n                isActive: true,\n                OR: [\n                    {\n                        category: {\n                            in: userCategories\n                        }\n                    },\n                    {\n                        difficulty: user.experienceLevel\n                    },\n                    {\n                        tags: {\n                            hasSome: userTags\n                        }\n                    }\n                ]\n            },\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true,\n                        trainerVerified: true\n                    }\n                },\n                _count: {\n                    select: {\n                        program_ratings: true,\n                        program_subscriptions: true\n                    }\n                }\n            },\n            orderBy: {\n                rating: 'desc'\n            },\n            take: 10\n        })\n    ]);\n    return {\n        templates,\n        programs\n    };\n}\n// Link workout session to assessment\nasync function link_session_to_assessment(session_id, assessment_id) {\n    const assessment = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.assessments.findUnique({\n        where: {\n            id: assessment_id\n        }\n    });\n    if (!assessment) {\n        throw new Error('Assessment not found');\n    }\n    // Extract fitness level and goals from assessment\n    const assessment_data = {\n        fitness_level: determine_fitness_level(assessment),\n        primary_goal: assessment.primaryGoal || 'GENERAL_FITNESS',\n        movement_limitations: assessment.limitations || [],\n        experience_years: assessment.experienceYears || 0\n    };\n    return _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.update({\n        where: {\n            id: session_id\n        },\n        data: {\n            assessmentId: assessment_id,\n            fitnessLevel: assessment_data.fitness_level,\n            primaryGoal: assessment_data.primary_goal,\n            updatedAt: new Date()\n        }\n    });\n}\n// Determine fitness level from assessment scores\nfunction determine_fitness_level(assessment) {\n    // Analyse assessment metrics\n    const squat_score = assessment.squatScore || 0;\n    const push_score = assessment.pushScore || 0;\n    const pull_score = assessment.pullScore || 0;\n    const average_score = (squat_score + push_score + pull_score) / 3;\n    if (average_score >= 8) return 'ADVANCED';\n    if (average_score >= 5) return 'INTERMEDIATE';\n    return 'BEGINNER';\n}\n// Get workout recommendations based on assessment\nasync function get_assessment_based_recommendations(user_id) {\n    // Get most recent assessment\n    const latest_assessment = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.assessments.findFirst({\n        where: {\n            clientId: user_id\n        },\n        orderBy: {\n            createdAt: 'desc'\n        }\n    });\n    if (!latest_assessment) {\n        return null;\n    }\n    const fitness_level = determine_fitness_level(latest_assessment);\n    // Get exercise recommendations\n    const exercise_recommendations = (0,_services_ai_workout_suggestions__WEBPACK_IMPORTED_MODULE_3__.get_exercise_recommendations)(fitness_level, latest_assessment.primaryGoal || 'GENERAL_FITNESS', 'SQUAT' // Example pattern\n    );\n    return {\n        fitness_level,\n        recommended_volume: calculate_recommended_volume(fitness_level),\n        recommended_frequency: calculate_recommended_frequency(fitness_level),\n        training_phase: exercise_recommendations.progression_level,\n        coaching_cues: exercise_recommendations.coaching_cues\n    };\n}\nfunction calculate_recommended_volume(fitness_level) {\n    const volume_map = {\n        BEGINNER: 10,\n        INTERMEDIATE: 15,\n        ADVANCED: 20\n    };\n    return volume_map[fitness_level] || 12;\n}\nfunction calculate_recommended_frequency(fitness_level) {\n    const frequency_map = {\n        BEGINNER: 3,\n        INTERMEDIATE: 4,\n        ADVANCED: 5\n    };\n    return frequency_map[fitness_level] || 3;\n}\n// Prepare workout data for AI analysis\nasync function prepare_ai_training_data(user_id) {\n    // Get all user sessions from last 90 days\n    const ninety_days_ago = new Date();\n    ninety_days_ago.setDate(ninety_days_ago.getDate() - 90);\n    const sessions = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findMany({\n        where: {\n            userId: user_id,\n            date: {\n                gte: ninety_days_ago\n            },\n            isComplete: true\n        },\n        include: {\n            workout_log_entries: {\n                include: {\n                    exercises: true\n                }\n            }\n        },\n        orderBy: {\n            date: 'asc'\n        }\n    });\n    const entries = sessions.flatMap((s)=>s.workout_log_entries);\n    // Calculate metrics\n    const total_volume = entries.reduce((sum, e)=>sum + (e.trainingVolume || 0), 0);\n    const average_volume = sessions.length > 0 ? total_volume / sessions.length : 0;\n    // Find favourite exercises (most frequently used)\n    const exercise_frequency = new Map();\n    entries.forEach((e)=>{\n        exercise_frequency.set(e.exerciseId, (exercise_frequency.get(e.exerciseId) || 0) + 1);\n    });\n    const favourite_exercises = Array.from(exercise_frequency.entries()).sort((a, b)=>b[1] - a[1]).slice(0, 10).map(([id])=>id);\n    // Calculate consistency score (sessions per week)\n    const weeks_in_period = 13; // ~90 days\n    const consistency_score = sessions.length / weeks_in_period / 4; // Normalised to 0-1\n    // Get latest assessment\n    const latest_assessment = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.assessments.findFirst({\n        where: {\n            clientId: user_id\n        },\n        orderBy: {\n            createdAt: 'desc'\n        }\n    });\n    return {\n        user_profile: {\n            fitness_level: 'INTERMEDIATE',\n            primary_goal: latest_assessment?.primaryGoal || 'GENERAL_FITNESS',\n            experience_years: latest_assessment?.experienceYears || 1\n        },\n        workout_history: {\n            total_sessions: sessions.length,\n            average_volume,\n            favourite_exercises,\n            consistency_score: Math.min(consistency_score, 1)\n        },\n        performance_metrics: {\n            strength_progression: calculate_strength_progression(entries),\n            volume_progression: calculate_volume_progression(sessions),\n            technique_scores: entries.filter((e)=>e.formQuality !== null).map((e)=>e.formQuality)\n        },\n        preferences: {\n            preferred_set_types: calculate_preferred_set_types(entries),\n            preferred_rep_ranges: calculate_preferred_rep_range(entries),\n            preferred_rest_durations: calculate_preferred_rest_durations(entries)\n        }\n    };\n}\nfunction calculate_strength_progression(entries) {\n    // Compare first 20% of entries with last 20%\n    const total = entries.length;\n    if (total < 10) return 0; // Need minimum data\n    const early_entries = entries.slice(0, Math.floor(total * 0.2));\n    const recent_entries = entries.slice(Math.floor(total * 0.8));\n    const early_avg_volume = early_entries.reduce((sum, e)=>sum + (e.trainingVolume || 0), 0) / early_entries.length;\n    const recent_avg_volume = recent_entries.reduce((sum, e)=>sum + (e.trainingVolume || 0), 0) / recent_entries.length;\n    return early_avg_volume > 0 ? (recent_avg_volume - early_avg_volume) / early_avg_volume * 100 : 0;\n}\nfunction calculate_volume_progression(sessions) {\n    if (sessions.length < 2) return 0;\n    const first_session = sessions[0];\n    const last_session = sessions[sessions.length - 1];\n    const first_volume = first_session.totalVolume || 0;\n    const last_volume = last_session.totalVolume || 0;\n    return first_volume > 0 ? (last_volume - first_volume) / first_volume * 100 : 0;\n}\nfunction calculate_preferred_set_types(entries) {\n    const set_type_counts = new Map();\n    entries.forEach((e)=>{\n        set_type_counts.set(e.setType, (set_type_counts.get(e.setType) || 0) + 1);\n    });\n    return Array.from(set_type_counts.entries()).sort((a, b)=>b[1] - a[1]).slice(0, 3).map(([type])=>type);\n}\nfunction calculate_preferred_rep_range(entries) {\n    const reps = entries.map((e)=>e.reps).filter((r)=>r > 0);\n    if (reps.length === 0) return [\n        8,\n        12\n    ];\n    reps.sort((a, b)=>a - b);\n    const percentile_25 = reps[Math.floor(reps.length * 0.25)];\n    const percentile_75 = reps[Math.floor(reps.length * 0.75)];\n    return [\n        percentile_25,\n        percentile_75\n    ];\n}\nfunction calculate_preferred_rest_durations(entries) {\n    const rest_durations = entries.map((e)=>e.restSeconds).filter((r)=>r !== null && r !== undefined);\n    if (rest_durations.length === 0) return [\n        60,\n        90,\n        120\n    ];\n    const avg = rest_durations.reduce((sum, r)=>sum + r, 0) / rest_durations.length;\n    return [\n        Math.floor(avg * 0.8),\n        Math.floor(avg),\n        Math.floor(avg * 1.2)\n    ];\n}\n// Calculate experience points for a session\nasync function calculate_session_experience_points(session_id) {\n    const session = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findUnique({\n        where: {\n            id: session_id\n        },\n        include: {\n            workout_log_entries: true\n        }\n    });\n    if (!session) {\n        throw new Error('Session not found');\n    }\n    const breakdown = {\n        base_points: 100,\n        volume_bonus: 0,\n        technique_bonus: 0,\n        consistency_bonus: 0,\n        achievement_bonus: 0,\n        total: 0\n    };\n    // Volume bonus (1 point per 100kg total volume)\n    const total_volume = session.totalVolume || 0;\n    breakdown.volume_bonus = Math.floor(total_volume / 100);\n    // Technique bonus (average form quality)\n    const entries_with_form = session.workout_log_entries.filter((e)=>e.formQuality !== null);\n    if (entries_with_form.length > 0) {\n        const avg_form = entries_with_form.reduce((sum, e)=>sum + (e.formQuality || 0), 0) / entries_with_form.length;\n        breakdown.technique_bonus = Math.floor(avg_form * 20); // Max 100 bonus for perfect form\n    }\n    // Consistency bonus (check if session continues a streak)\n    const streak_bonus = await calculate_consistency_streak_bonus(session.userId, session.date);\n    breakdown.consistency_bonus = streak_bonus;\n    // Achievement bonus (any personal records)\n    const pr_count = session.workout_log_entries.filter((e)=>e.personalRecord || e.volumeRecord).length;\n    breakdown.achievement_bonus = pr_count * 50; // 50 points per PR\n    breakdown.total = breakdown.base_points + breakdown.volume_bonus + breakdown.technique_bonus + breakdown.consistency_bonus + breakdown.achievement_bonus;\n    return breakdown;\n}\nasync function calculate_consistency_streak_bonus(user_id, session_date) {\n    // Get recent sessions to calculate streak\n    const seven_days_ago = new Date(session_date);\n    seven_days_ago.setDate(seven_days_ago.getDate() - 7);\n    const recent_sessions = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findMany({\n        where: {\n            userId: user_id,\n            date: {\n                gte: seven_days_ago,\n                lte: session_date\n            },\n            isComplete: true\n        },\n        orderBy: {\n            date: 'desc'\n        }\n    });\n    // Award bonus for 3+ sessions in 7 days\n    if (recent_sessions.length >= 3) {\n        return 50 * recent_sessions.length; // Escalating bonus\n    }\n    return 0;\n}\n// Check and award achievements after session\nasync function check_and_award_achievements(user_id, session_id) {\n    const awarded_achievement_ids = [];\n    // Get all achievements\n    const all_achievements = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.achievements.findMany();\n    // Get user's existing achievements\n    const existing_achievements = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.user_achievements.findMany({\n        where: {\n            userId: user_id\n        },\n        select: {\n            achievementId: true\n        }\n    });\n    const existing_ids = new Set(existing_achievements.map((a)=>a.achievementId));\n    // Check each achievement\n    for (const achievement of all_achievements){\n        if (existing_ids.has(achievement.id)) continue; // Already earned\n        const criteria = achievement.criteria;\n        const meets_criteria = await check_achievement_criteria(user_id, session_id, criteria);\n        if (meets_criteria) {\n            // Award achievement\n            await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.user_achievements.create({\n                data: {\n                    id: crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID(),\n                    userId: user_id,\n                    achievementId: achievement.id,\n                    sessionId: session_id\n                }\n            });\n            awarded_achievement_ids.push(achievement.id);\n        }\n    }\n    return awarded_achievement_ids;\n}\nasync function check_achievement_criteria(user_id, session_id, criteria) {\n    switch(criteria.type){\n        case 'VOLUME':\n            return check_volume_achievement(user_id, session_id, criteria);\n        case 'CONSISTENCY':\n            return check_consistency_achievement(user_id, criteria);\n        case 'STRENGTH':\n            return check_strength_achievement(user_id, criteria);\n        case 'TECHNIQUE':\n            return check_technique_achievement(user_id, session_id, criteria);\n        case 'MILESTONE':\n            return check_milestone_achievement(user_id, criteria);\n        default:\n            return false;\n    }\n}\nasync function check_volume_achievement(_user_id, session_id, criteria) {\n    const session = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findUnique({\n        where: {\n            id: session_id\n        }\n    });\n    if (!session) return false;\n    const total_volume = session.totalVolume || 0;\n    return total_volume >= criteria.threshold;\n}\nasync function check_consistency_achievement(user_id, criteria) {\n    const thirty_days_ago = new Date();\n    thirty_days_ago.setDate(thirty_days_ago.getDate() - 30);\n    const session_count = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.count({\n        where: {\n            userId: user_id,\n            date: {\n                gte: thirty_days_ago\n            },\n            isComplete: true\n        }\n    });\n    return session_count >= criteria.threshold;\n}\nasync function check_strength_achievement(user_id, criteria) {\n    // Check for personal records\n    const pr_count = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.count({\n        where: {\n            userId: user_id,\n            personalRecord: true\n        }\n    });\n    return pr_count >= criteria.threshold;\n}\nasync function check_technique_achievement(_user_id, session_id, criteria) {\n    const session = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findUnique({\n        where: {\n            id: session_id\n        },\n        include: {\n            workout_log_entries: true\n        }\n    });\n    if (!session) return false;\n    const entries_with_form = session.workout_log_entries.filter((e)=>e.formQuality !== null);\n    if (entries_with_form.length === 0) return false;\n    const avg_form = entries_with_form.reduce((sum, e)=>sum + (e.formQuality || 0), 0) / entries_with_form.length;\n    return avg_form >= criteria.threshold;\n}\nasync function check_milestone_achievement(user_id, criteria) {\n    const total_sessions = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.count({\n        where: {\n            userId: user_id,\n            isComplete: true\n        }\n    });\n    return total_sessions === criteria.threshold; // Exact milestone\n}\n// Update session with XP and achievements\nasync function finalise_session_with_gamification(session_id) {\n    const session = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.findUnique({\n        where: {\n            id: session_id\n        }\n    });\n    if (!session) {\n        throw new Error('Session not found');\n    }\n    // Calculate XP\n    const xp_breakdown = await calculate_session_experience_points(session_id);\n    // Check achievements\n    const new_achievements = await check_and_award_achievements(session.userId, session_id);\n    // Add achievement bonus to XP\n    const achievement_xp = new_achievements.length * 100;\n    xp_breakdown.achievement_bonus = achievement_xp;\n    xp_breakdown.total += achievement_xp;\n    // Update session\n    await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_sessions.update({\n        where: {\n            id: session_id\n        },\n        data: {\n            experiencePoints: xp_breakdown.total,\n            achievementsEarned: new_achievements,\n            updatedAt: new Date()\n        }\n    });\n    return {\n        experience_points: xp_breakdown,\n        achievements_earned: new_achievements\n    };\n}\n// ============================================================================\n// PERSONAL RECORDS DETECTION\n// ============================================================================\n/**\n * Check if a workout entry is a personal record for weight\n * @param userId - User ID\n * @param exerciseId - Exercise ID\n * @param weight - Weight lifted (numeric value)\n * @param reps - Number of reps\n * @returns true if this is a PR, false otherwise\n */ async function check_personal_record(userId, exerciseId, weight, reps) {\n    // Find the highest weight for this exercise with the same or more reps\n    const previous_best = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.findFirst({\n        where: {\n            userId,\n            exerciseId,\n            reps: {\n                gte: reps\n            }\n        },\n        orderBy: {\n            trainingVolume: 'desc'\n        },\n        select: {\n            weight: true,\n            trainingVolume: true\n        }\n    });\n    if (!previous_best) {\n        // First time doing this exercise - it's a PR!\n        return true;\n    }\n    // Extract numeric weight from previous best (handles \"135 lbs\" format)\n    const previous_weight = parseFloat(previous_best.weight.replace(/[^\\d.,]/g, ''));\n    // Is current weight higher than previous best?\n    return weight > previous_weight;\n}\n/**\n * Check if a workout entry is a volume record\n * @param userId - User ID\n * @param exerciseId - Exercise ID\n * @param volume - Training volume (weight × reps)\n * @returns true if this is a volume PR, false otherwise\n */ async function check_volume_record(userId, exerciseId, volume) {\n    // Find the highest training volume for this exercise\n    const previous_best = await _client__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_log_entries.findFirst({\n        where: {\n            userId,\n            exerciseId\n        },\n        orderBy: {\n            trainingVolume: 'desc'\n        },\n        select: {\n            trainingVolume: true\n        }\n    });\n    if (!previous_best || !previous_best.trainingVolume) {\n        // First time doing this exercise - it's a volume PR!\n        return true;\n    }\n    // Is current volume higher than previous best?\n    return volume > previous_best.trainingVolume;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/core/database/workout-queries.ts\n");

/***/ }),

/***/ "(rsc)/./src/core/index.ts":
/*!***************************!*\
  !*** ./src/core/index.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiResponseSchema: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_4__.ApiResponseSchema),\n/* harmony export */   AuthenticationError: () => (/* reexport safe */ _utils_error_handling__WEBPACK_IMPORTED_MODULE_5__.AuthenticationError),\n/* harmony export */   BaseAppError: () => (/* reexport safe */ _utils_error_handling__WEBPACK_IMPORTED_MODULE_5__.BaseAppError),\n/* harmony export */   CommentCreationSchema: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_4__.CommentCreationSchema),\n/* harmony export */   CommunityCreationSchema: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_4__.CommunityCreationSchema),\n/* harmony export */   DirectMessageSchema: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_4__.DirectMessageSchema),\n/* harmony export */   ErrorCode: () => (/* reexport safe */ _utils_error_handling__WEBPACK_IMPORTED_MODULE_5__.ErrorCode),\n/* harmony export */   ExternalServiceError: () => (/* reexport safe */ _utils_error_handling__WEBPACK_IMPORTED_MODULE_5__.ExternalServiceError),\n/* harmony export */   FileUploadSchema: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_4__.FileUploadSchema),\n/* harmony export */   ModerationAction: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.ModerationAction),\n/* harmony export */   ModerationActionSchema: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_4__.ModerationActionSchema),\n/* harmony export */   ModerationError: () => (/* reexport safe */ _utils_error_handling__WEBPACK_IMPORTED_MODULE_5__.ModerationError),\n/* harmony export */   ModerationSource: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.ModerationSource),\n/* harmony export */   MollieApiError: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.MollieApiError),\n/* harmony export */   NotFoundError: () => (/* reexport safe */ _utils_error_handling__WEBPACK_IMPORTED_MODULE_5__.NotFoundError),\n/* harmony export */   PaginationSchema: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_4__.PaginationSchema),\n/* harmony export */   PostCreationSchema: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_4__.PostCreationSchema),\n/* harmony export */   RateLimitError: () => (/* reexport safe */ _utils_error_handling__WEBPACK_IMPORTED_MODULE_5__.RateLimitError),\n/* harmony export */   ReportSubmissionSchema: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_4__.ReportSubmissionSchema),\n/* harmony export */   SafetyViolationError: () => (/* reexport safe */ _utils_error_handling__WEBPACK_IMPORTED_MODULE_5__.SafetyViolationError),\n/* harmony export */   SearchSchema: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_4__.SearchSchema),\n/* harmony export */   SocketServer: () => (/* reexport safe */ _socket_server__WEBPACK_IMPORTED_MODULE_3__.SocketServer),\n/* harmony export */   TrainerProfileSchema: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_4__.TrainerProfileSchema),\n/* harmony export */   UserProfileUpdateSchema: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_4__.UserProfileUpdateSchema),\n/* harmony export */   UserRegistrationSchema: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_4__.UserRegistrationSchema),\n/* harmony export */   UserRole: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.UserRole),\n/* harmony export */   UserStatus: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.UserStatus),\n/* harmony export */   ValidationError: () => (/* reexport safe */ _utils_error_handling__WEBPACK_IMPORTED_MODULE_5__.ValidationError),\n/* harmony export */   ViolationType: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.ViolationType),\n/* harmony export */   addClientToTrainer: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.addClientToTrainer),\n/* harmony export */   addCoachFeedback: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.addCoachFeedback),\n/* harmony export */   addCoachFeedbackRequestSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.addCoachFeedbackRequestSchema),\n/* harmony export */   addPersonalRecord: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.addPersonalRecord),\n/* harmony export */   addPersonalRecordSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.addPersonalRecordSchema),\n/* harmony export */   addProgressMetric: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.addProgressMetric),\n/* harmony export */   addProgressMetricSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.addProgressMetricSchema),\n/* harmony export */   approveTeamMembership: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.approveTeamMembership),\n/* harmony export */   authOptions: () => (/* reexport safe */ _auth_config__WEBPACK_IMPORTED_MODULE_1__.authOptions),\n/* harmony export */   calculate_session_experience_points: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.calculate_session_experience_points),\n/* harmony export */   cancelPayment: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.cancelPayment),\n/* harmony export */   cancelSubscription: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.cancelSubscription),\n/* harmony export */   checkAppointmentConflict: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.checkAppointmentConflict),\n/* harmony export */   check_and_award_achievements: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.check_and_award_achievements),\n/* harmony export */   completeWorkoutSession: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.completeWorkoutSession),\n/* harmony export */   createAppointment: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.createAppointment),\n/* harmony export */   createChallenge: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.createChallenge),\n/* harmony export */   createCustomer: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.createCustomer),\n/* harmony export */   createErrorResponse: () => (/* reexport safe */ _utils_error_handling__WEBPACK_IMPORTED_MODULE_5__.createErrorResponse),\n/* harmony export */   createExercise: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.createExercise),\n/* harmony export */   createExerciseSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.createExerciseSchema),\n/* harmony export */   createExerciseVariation: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.createExerciseVariation),\n/* harmony export */   createExerciseVariationSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.createExerciseVariationSchema),\n/* harmony export */   createModerationLog: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.createModerationLog),\n/* harmony export */   createMollieClient: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.createMollieClient),\n/* harmony export */   createMollieCustomer: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.createMollieCustomer),\n/* harmony export */   createMolliePayment: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.createMolliePayment),\n/* harmony export */   createOrUpdateTrainerProfile: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.createOrUpdateTrainerProfile),\n/* harmony export */   createPackagePayment: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.createPackagePayment),\n/* harmony export */   createPayment: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.createPayment),\n/* harmony export */   createPremiumTeam: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.createPremiumTeam),\n/* harmony export */   createProgressReport: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.createProgressReport),\n/* harmony export */   createSafetyReport: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.createSafetyReport),\n/* harmony export */   createSessionPayment: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.createSessionPayment),\n/* harmony export */   createSubscription: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.createSubscription),\n/* harmony export */   createSuccessResponse: () => (/* reexport safe */ _utils_error_handling__WEBPACK_IMPORTED_MODULE_5__.createSuccessResponse),\n/* harmony export */   createTrainingProgram: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.createTrainingProgram),\n/* harmony export */   createTrainingProgramSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.createTrainingProgramSchema),\n/* harmony export */   createUserViolation: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.createUserViolation),\n/* harmony export */   createWorkoutEntriesRequestSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.createWorkoutEntriesRequestSchema),\n/* harmony export */   createWorkoutLogEntry: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.createWorkoutLogEntry),\n/* harmony export */   createWorkoutLogEntrySchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.createWorkoutLogEntrySchema),\n/* harmony export */   createWorkoutSession: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.createWorkoutSession),\n/* harmony export */   createWorkoutSessionSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.createWorkoutSessionSchema),\n/* harmony export */   createWorkoutTemplate: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.createWorkoutTemplate),\n/* harmony export */   createWorkoutTemplateSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.createWorkoutTemplateSchema),\n/* harmony export */   dateRangeSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.dateRangeSchema),\n/* harmony export */   dateStringSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.dateStringSchema),\n/* harmony export */   deleteExercise: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.deleteExercise),\n/* harmony export */   deleteExerciseDoc: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.deleteExerciseDoc),\n/* harmony export */   deleteExerciseVariation: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.deleteExerciseVariation),\n/* harmony export */   deleteTrainingProgram: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.deleteTrainingProgram),\n/* harmony export */   deleteWorkoutEntryRequestSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.deleteWorkoutEntryRequestSchema),\n/* harmony export */   deleteWorkoutLogEntry: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.deleteWorkoutLogEntry),\n/* harmony export */   deleteWorkoutSession: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.deleteWorkoutSession),\n/* harmony export */   deleteWorkoutTemplate: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.deleteWorkoutTemplate),\n/* harmony export */   durationStringSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.durationStringSchema),\n/* harmony export */   enhancedCreateExerciseSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.enhancedCreateExerciseSchema),\n/* harmony export */   enhancedUpdateExerciseSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.enhancedUpdateExerciseSchema),\n/* harmony export */   exchangeCodeForToken: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.exchangeCodeForToken),\n/* harmony export */   exerciseSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.exerciseSchema),\n/* harmony export */   exerciseSearchOptionsSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.exerciseSearchOptionsSchema),\n/* harmony export */   finalise_session_with_gamification: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.finalise_session_with_gamification),\n/* harmony export */   formatAmount: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.formatAmount),\n/* harmony export */   formatWorkoutCaption: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.formatWorkoutCaption),\n/* harmony export */   generateAuthUrl: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.generateAuthUrl),\n/* harmony export */   generateSafetyReport: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.generateSafetyReport),\n/* harmony export */   generateWorkoutAnalytics: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.generateWorkoutAnalytics),\n/* harmony export */   getAvailablePlatforms: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.getAvailablePlatforms),\n/* harmony export */   getChallengeLeaderboard: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getChallengeLeaderboard),\n/* harmony export */   getChallenges: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getChallenges),\n/* harmony export */   getClientWorkoutLogs: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getClientWorkoutLogs),\n/* harmony export */   getCustomer: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.getCustomer),\n/* harmony export */   getEquipmentTypes: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getEquipmentTypes),\n/* harmony export */   getExercise: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getExercise),\n/* harmony export */   getExerciseCategories: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getExerciseCategories),\n/* harmony export */   getExerciseVariationById: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getExerciseVariationById),\n/* harmony export */   getExerciseVariations: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getExerciseVariations),\n/* harmony export */   getExercises: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getExercises),\n/* harmony export */   getFeaturedContent: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getFeaturedContent),\n/* harmony export */   getFirestore: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.getFirestore),\n/* harmony export */   getFirestoreExercise: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.getFirestoreExercise),\n/* harmony export */   getFirestoreUserByEmail: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.getFirestoreUserByEmail),\n/* harmony export */   getFlaggedUsers: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getFlaggedUsers),\n/* harmony export */   getFriendlyErrorMessage: () => (/* reexport safe */ _utils_error_handling__WEBPACK_IMPORTED_MODULE_5__.getFriendlyErrorMessage),\n/* harmony export */   getMarketplacePrograms: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getMarketplacePrograms),\n/* harmony export */   getMarketplaceTemplates: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getMarketplaceTemplates),\n/* harmony export */   getModerationLogs: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getModerationLogs),\n/* harmony export */   getModerationStatistics: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getModerationStatistics),\n/* harmony export */   getMollieClient: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.getMollieClient),\n/* harmony export */   getMuscleGroups: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getMuscleGroups),\n/* harmony export */   getMyPrograms: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getMyPrograms),\n/* harmony export */   getMyTemplates: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getMyTemplates),\n/* harmony export */   getPayment: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.getPayment),\n/* harmony export */   getPaymentByMollieId: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getPaymentByMollieId),\n/* harmony export */   getPendingSafetyReports: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getPendingSafetyReports),\n/* harmony export */   getPersonalRecords: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getPersonalRecords),\n/* harmony export */   getPlatformCapabilities: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.getPlatformCapabilities),\n/* harmony export */   getPopularContent: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getPopularContent),\n/* harmony export */   getPrivacyControlledLeaderboard: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getPrivacyControlledLeaderboard),\n/* harmony export */   getProgressMetrics: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getProgressMetrics),\n/* harmony export */   getRecommendedContent: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getRecommendedContent),\n/* harmony export */   getSafetyAnalytics: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getSafetyAnalytics),\n/* harmony export */   getSocketServer: () => (/* reexport safe */ _socket_server__WEBPACK_IMPORTED_MODULE_3__.getSocketServer),\n/* harmony export */   getTeamAnalytics: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getTeamAnalytics),\n/* harmony export */   getTeamMembers: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getTeamMembers),\n/* harmony export */   getTeamMembership: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getTeamMembership),\n/* harmony export */   getTeams: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getTeams),\n/* harmony export */   getTopRatedContent: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getTopRatedContent),\n/* harmony export */   getTrainerAppointments: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getTrainerAppointments),\n/* harmony export */   getTrainerAvailability: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getTrainerAvailability),\n/* harmony export */   getTrainerClients: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getTrainerClients),\n/* harmony export */   getTrainerEarnings: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getTrainerEarnings),\n/* harmony export */   getTrainerPaymentAnalytics: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getTrainerPaymentAnalytics),\n/* harmony export */   getTrainerProfileWithStats: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getTrainerProfileWithStats),\n/* harmony export */   getTrainerProgressReports: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getTrainerProgressReports),\n/* harmony export */   getTrainingProgramById: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getTrainingProgramById),\n/* harmony export */   getTrainingPrograms: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getTrainingPrograms),\n/* harmony export */   getUserPrivacySettings: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getUserPrivacySettings),\n/* harmony export */   getUserProgramSubscriptions: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getUserProgramSubscriptions),\n/* harmony export */   getUserSafetyProfile: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getUserSafetyProfile),\n/* harmony export */   getUserSafetySettings: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getUserSafetySettings),\n/* harmony export */   getUserViolationHistory: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getUserViolationHistory),\n/* harmony export */   getUserWorkoutsUnified: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getUserWorkoutsUnified),\n/* harmony export */   getWorkoutAnalytics: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getWorkoutAnalytics),\n/* harmony export */   getWorkoutLogEntries: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getWorkoutLogEntries),\n/* harmony export */   getWorkoutLogEntry: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getWorkoutLogEntry),\n/* harmony export */   getWorkoutSession: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getWorkoutSession),\n/* harmony export */   getWorkoutSessions: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getWorkoutSessions),\n/* harmony export */   getWorkoutStats: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getWorkoutStats),\n/* harmony export */   getWorkoutTemplateById: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getWorkoutTemplateById),\n/* harmony export */   getWorkoutTemplates: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.getWorkoutTemplates),\n/* harmony export */   get_assessment_based_recommendations: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.get_assessment_based_recommendations),\n/* harmony export */   initializeSocketServer: () => (/* reexport safe */ _socket_server__WEBPACK_IMPORTED_MODULE_3__.initializeSocketServer),\n/* harmony export */   intensityStringSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.intensityStringSchema),\n/* harmony export */   intensityTypeSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.intensityTypeSchema),\n/* harmony export */   isPaymentFailed: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.isPaymentFailed),\n/* harmony export */   isPaymentPending: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.isPaymentPending),\n/* harmony export */   isPaymentSuccessful: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.isPaymentSuccessful),\n/* harmony export */   isPlatformConfigured: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.isPlatformConfigured),\n/* harmony export */   joinChallenge: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.joinChallenge),\n/* harmony export */   joinPremiumTeam: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.joinPremiumTeam),\n/* harmony export */   leaveChallenge: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.leaveChallenge),\n/* harmony export */   leavePremiumTeam: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.leavePremiumTeam),\n/* harmony export */   link_session_to_assessment: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.link_session_to_assessment),\n/* harmony export */   logError: () => (/* reexport safe */ _utils_error_handling__WEBPACK_IMPORTED_MODULE_5__.logError),\n/* harmony export */   normalizeError: () => (/* reexport safe */ _utils_error_handling__WEBPACK_IMPORTED_MODULE_5__.normalizeError),\n/* harmony export */   paginationSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.paginationSchema),\n/* harmony export */   parseAmount: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.parseAmount),\n/* harmony export */   prepare_ai_training_data: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.prepare_ai_training_data),\n/* harmony export */   prisma: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.prisma),\n/* harmony export */   processRefund: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.processRefund),\n/* harmony export */   processWebhook: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.processWebhook),\n/* harmony export */   programWeekSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.programWeekSchema),\n/* harmony export */   publishAccreditedProvider: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.publishAccreditedProvider),\n/* harmony export */   publishExercise: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.publishExercise),\n/* harmony export */   publishUserSummary: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.publishUserSummary),\n/* harmony export */   purchaseProgram: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.purchaseProgram),\n/* harmony export */   purchaseTemplate: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.purchaseTemplate),\n/* harmony export */   rateProgram: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.rateProgram),\n/* harmony export */   rateProgramSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.rateProgramSchema),\n/* harmony export */   rateTemplate: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.rateTemplate),\n/* harmony export */   rateTemplateSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.rateTemplateSchema),\n/* harmony export */   rescheduleAppointment: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.rescheduleAppointment),\n/* harmony export */   safeAsync: () => (/* reexport safe */ _utils_error_handling__WEBPACK_IMPORTED_MODULE_5__.safeAsync),\n/* harmony export */   sanitizeTextInput: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_4__.sanitizeTextInput),\n/* harmony export */   searchExercises: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.searchExercises),\n/* harmony export */   searchTrainingPrograms: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.searchTrainingPrograms),\n/* harmony export */   searchWorkoutTemplates: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.searchWorkoutTemplates),\n/* harmony export */   setTypeSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.setTypeSchema),\n/* harmony export */   shareProgressReport: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.shareProgressReport),\n/* harmony export */   shareToFacebook: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.shareToFacebook),\n/* harmony export */   shareToInstagram: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.shareToInstagram),\n/* harmony export */   shareToTikTok: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.shareToTikTok),\n/* harmony export */   shareToYouTube: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.shareToYouTube),\n/* harmony export */   subscribeToProgram: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.subscribeToProgram),\n/* harmony export */   tempoStringSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.tempoStringSchema),\n/* harmony export */   timeStringSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.timeStringSchema),\n/* harmony export */   updateAppointmentStatus: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.updateAppointmentStatus),\n/* harmony export */   updateChallengeProgress: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.updateChallengeProgress),\n/* harmony export */   updateExercise: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.updateExercise),\n/* harmony export */   updateExerciseSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.updateExerciseSchema),\n/* harmony export */   updateExerciseVariation: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.updateExerciseVariation),\n/* harmony export */   updateExerciseVariationSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.updateExerciseVariationSchema),\n/* harmony export */   updatePaymentFromMollie: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.updatePaymentFromMollie),\n/* harmony export */   updateProgramProgress: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.updateProgramProgress),\n/* harmony export */   updateProgramProgressSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.updateProgramProgressSchema),\n/* harmony export */   updateSafetyReport: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.updateSafetyReport),\n/* harmony export */   updateTrainingProgram: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.updateTrainingProgram),\n/* harmony export */   updateTrainingProgramSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.updateTrainingProgramSchema),\n/* harmony export */   updateUserPrivacySettings: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.updateUserPrivacySettings),\n/* harmony export */   updateUserSafetySettings: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.updateUserSafetySettings),\n/* harmony export */   updateUserSafetyStatus: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.updateUserSafetyStatus),\n/* harmony export */   updateWorkoutEntryRequestSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.updateWorkoutEntryRequestSchema),\n/* harmony export */   updateWorkoutLogEntry: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.updateWorkoutLogEntry),\n/* harmony export */   updateWorkoutLogEntrySchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.updateWorkoutLogEntrySchema),\n/* harmony export */   updateWorkoutSession: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.updateWorkoutSession),\n/* harmony export */   updateWorkoutSessionSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.updateWorkoutSessionSchema),\n/* harmony export */   updateWorkoutTemplate: () => (/* reexport safe */ _database__WEBPACK_IMPORTED_MODULE_0__.updateWorkoutTemplate),\n/* harmony export */   updateWorkoutTemplateSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.updateWorkoutTemplateSchema),\n/* harmony export */   validateContentSafety: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_4__.validateContentSafety),\n/* harmony export */   validateDateString: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.validateDateString),\n/* harmony export */   validateHashtags: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_4__.validateHashtags),\n/* harmony export */   validateIntensityString: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.validateIntensityString),\n/* harmony export */   validateMentions: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_4__.validateMentions),\n/* harmony export */   validateTempoString: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.validateTempoString),\n/* harmony export */   validateTimeString: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.validateTimeString),\n/* harmony export */   validateWeightString: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.validateWeightString),\n/* harmony export */   verifyWebhookSignature: () => (/* reexport safe */ _integrations__WEBPACK_IMPORTED_MODULE_2__.verifyWebhookSignature),\n/* harmony export */   weightStringSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.weightStringSchema),\n/* harmony export */   weightUnitSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.weightUnitSchema),\n/* harmony export */   withErrorHandling: () => (/* reexport safe */ _utils_error_handling__WEBPACK_IMPORTED_MODULE_5__.withErrorHandling),\n/* harmony export */   workoutFilterOptionsSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.workoutFilterOptionsSchema),\n/* harmony export */   workoutLogEntryBaseSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.workoutLogEntryBaseSchema),\n/* harmony export */   workoutLogEntrySchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.workoutLogEntrySchema),\n/* harmony export */   workoutSessionFilterOptionsSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.workoutSessionFilterOptionsSchema),\n/* harmony export */   workoutSessionSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.workoutSessionSchema),\n/* harmony export */   workoutSortOptionsSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.workoutSortOptionsSchema),\n/* harmony export */   workoutStatsRequestSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.workoutStatsRequestSchema),\n/* harmony export */   workoutStatsResponseSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.workoutStatsResponseSchema),\n/* harmony export */   workoutTemplateExerciseSchema: () => (/* reexport safe */ _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__.workoutTemplateExerciseSchema)\n/* harmony export */ });\n/* harmony import */ var _database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./database */ \"(rsc)/./src/core/database/index.ts\");\n/* harmony import */ var _auth_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./auth/config */ \"(rsc)/./src/core/auth/config.ts\");\n/* harmony import */ var _integrations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./integrations */ \"(rsc)/./src/core/integrations/index.ts\");\n/* harmony import */ var _socket_server__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./socket/server */ \"(rsc)/./src/core/socket/server.ts\");\n/* harmony import */ var _utils_validation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/validation */ \"(rsc)/./src/core/utils/validation.ts\");\n/* harmony import */ var _utils_error_handling__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/error-handling */ \"(rsc)/./src/core/utils/error-handling.ts\");\n/* harmony import */ var _utils_workout_validation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/workout-validation */ \"(rsc)/./src/core/utils/workout-validation.ts\");\n/**\n * Core Infrastructure Exports\n * Main entry point for all framework-level infrastructure code\n */ // Database functionality - will be available via database/index.ts\n\n// Authentication configuration\n\n// External integrations - will be available via integrations/index.ts\n\n// Socket server\n\n// Utilities - will be available via utils/index.ts\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvY29yZS9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Q0FHQyxHQUVELG1FQUFtRTtBQUN4QztBQUUzQiwrQkFBK0I7QUFDYTtBQUc1QyxzRUFBc0U7QUFDdkM7QUFFL0IsZ0JBQWdCO0FBQ2dCO0FBRWhDLG1EQUFtRDtBQW1CdkI7QUFDVztBQUNJIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yc29sZS9Eb2N1bWVudHMvR2l0SHViL21hc3NpbWluby9tYXNzaW1pbm8vc3JjL2NvcmUvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3JlIEluZnJhc3RydWN0dXJlIEV4cG9ydHNcbiAqIE1haW4gZW50cnkgcG9pbnQgZm9yIGFsbCBmcmFtZXdvcmstbGV2ZWwgaW5mcmFzdHJ1Y3R1cmUgY29kZVxuICovXG5cbi8vIERhdGFiYXNlIGZ1bmN0aW9uYWxpdHkgLSB3aWxsIGJlIGF2YWlsYWJsZSB2aWEgZGF0YWJhc2UvaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gJy4vZGF0YWJhc2UnO1xuXG4vLyBBdXRoZW50aWNhdGlvbiBjb25maWd1cmF0aW9uXG5leHBvcnQgeyBhdXRoT3B0aW9ucyB9IGZyb20gJy4vYXV0aC9jb25maWcnO1xuZXhwb3J0IHR5cGUgeyBTYWZlVXNlciB9IGZyb20gJy4vYXV0aC9wcm92aWRlcnMnO1xuXG4vLyBFeHRlcm5hbCBpbnRlZ3JhdGlvbnMgLSB3aWxsIGJlIGF2YWlsYWJsZSB2aWEgaW50ZWdyYXRpb25zL2luZGV4LnRzXG5leHBvcnQgKiBmcm9tICcuL2ludGVncmF0aW9ucyc7XG5cbi8vIFNvY2tldCBzZXJ2ZXJcbmV4cG9ydCAqIGZyb20gJy4vc29ja2V0L3NlcnZlcic7XG5cbi8vIFV0aWxpdGllcyAtIHdpbGwgYmUgYXZhaWxhYmxlIHZpYSB1dGlscy9pbmRleC50c1xuZXhwb3J0IHtcbiAgVXNlclJlZ2lzdHJhdGlvblNjaGVtYSxcbiAgVXNlclByb2ZpbGVVcGRhdGVTY2hlbWEsXG4gIFRyYWluZXJQcm9maWxlU2NoZW1hLFxuICBQb3N0Q3JlYXRpb25TY2hlbWEsXG4gIENvbW1lbnRDcmVhdGlvblNjaGVtYSxcbiAgRGlyZWN0TWVzc2FnZVNjaGVtYSxcbiAgQ29tbXVuaXR5Q3JlYXRpb25TY2hlbWEsXG4gIFJlcG9ydFN1Ym1pc3Npb25TY2hlbWEsXG4gIE1vZGVyYXRpb25BY3Rpb25TY2hlbWEsXG4gIFNlYXJjaFNjaGVtYSxcbiAgUGFnaW5hdGlvblNjaGVtYSxcbiAgQXBpUmVzcG9uc2VTY2hlbWEsXG4gIEZpbGVVcGxvYWRTY2hlbWEsXG4gIHZhbGlkYXRlQ29udGVudFNhZmV0eSxcbiAgc2FuaXRpemVUZXh0SW5wdXQsXG4gIHZhbGlkYXRlTWVudGlvbnMsXG4gIHZhbGlkYXRlSGFzaHRhZ3Ncbn0gZnJvbSAnLi91dGlscy92YWxpZGF0aW9uJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMvZXJyb3ItaGFuZGxpbmcnO1xuZXhwb3J0ICogZnJvbSAnLi91dGlscy93b3Jrb3V0LXZhbGlkYXRpb24nOyJdLCJuYW1lcyI6WyJhdXRoT3B0aW9ucyIsIlVzZXJSZWdpc3RyYXRpb25TY2hlbWEiLCJVc2VyUHJvZmlsZVVwZGF0ZVNjaGVtYSIsIlRyYWluZXJQcm9maWxlU2NoZW1hIiwiUG9zdENyZWF0aW9uU2NoZW1hIiwiQ29tbWVudENyZWF0aW9uU2NoZW1hIiwiRGlyZWN0TWVzc2FnZVNjaGVtYSIsIkNvbW11bml0eUNyZWF0aW9uU2NoZW1hIiwiUmVwb3J0U3VibWlzc2lvblNjaGVtYSIsIk1vZGVyYXRpb25BY3Rpb25TY2hlbWEiLCJTZWFyY2hTY2hlbWEiLCJQYWdpbmF0aW9uU2NoZW1hIiwiQXBpUmVzcG9uc2VTY2hlbWEiLCJGaWxlVXBsb2FkU2NoZW1hIiwidmFsaWRhdGVDb250ZW50U2FmZXR5Iiwic2FuaXRpemVUZXh0SW5wdXQiLCJ2YWxpZGF0ZU1lbnRpb25zIiwidmFsaWRhdGVIYXNodGFncyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/core/index.ts\n");

/***/ }),

/***/ "(rsc)/./src/core/integrations/firebase.ts":
/*!*******************************************!*\
  !*** ./src/core/integrations/firebase.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deleteExerciseDoc: () => (/* binding */ deleteExerciseDoc),\n/* harmony export */   getFirestore: () => (/* binding */ getFirestore),\n/* harmony export */   getFirestoreExercise: () => (/* binding */ getFirestoreExercise),\n/* harmony export */   getFirestoreUserByEmail: () => (/* binding */ getFirestoreUserByEmail),\n/* harmony export */   publishAccreditedProvider: () => (/* binding */ publishAccreditedProvider),\n/* harmony export */   publishExercise: () => (/* binding */ publishExercise),\n/* harmony export */   publishUserSummary: () => (/* binding */ publishUserSummary)\n/* harmony export */ });\n// Firebase Admin integration (optional)\n// Initializes Firestore when env vars are present. Safe no-op otherwise.\nlet firestoreSingleton = null;\nfunction getFirebaseConfigFromEnv() {\n    const projectId = process.env.FIREBASE_PROJECT_ID;\n    const clientEmail = process.env.FIREBASE_CLIENT_EMAIL;\n    let privateKey = process.env.FIREBASE_PRIVATE_KEY;\n    if (privateKey) {\n        privateKey = privateKey.replace(/\\\\n/g, '\\n');\n    }\n    if (!projectId || !clientEmail || !privateKey) return null;\n    return {\n        projectId,\n        clientEmail,\n        privateKey\n    };\n}\nasync function getFirestore() {\n    if (firestoreSingleton) return firestoreSingleton;\n    const cfg = getFirebaseConfigFromEnv();\n    if (!cfg) return null;\n    try {\n        const admin = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! firebase-admin */ \"firebase-admin\", 23));\n        const apps = admin.getApps?.() || [];\n        if (!apps.length) {\n            admin.initializeApp({\n                credential: admin.credential.cert({\n                    projectId: cfg.projectId,\n                    clientEmail: cfg.clientEmail,\n                    privateKey: cfg.privateKey\n                })\n            });\n        }\n        firestoreSingleton = admin.firestore();\n        return firestoreSingleton;\n    } catch (err) {\n        console.warn('Firebase Admin not available or failed to initialize:', err);\n        return null;\n    }\n}\nasync function publishUserSummary(user) {\n    const db = await getFirestore();\n    if (!db) return;\n    const adminDocRef = db.collection('admin').doc('users').collection('items').doc(user.id);\n    const userDocRef = db.collection('users').doc(user.email);\n    const payload = {\n        email: user.email,\n        name: user.name,\n        role: user.role,\n        status: user.status,\n        reputationScore: user.reputationScore,\n        warningCount: user.warningCount,\n        trainerVerified: user.trainerVerified,\n        updatedAt: (user.updatedAt ?? new Date()).toISOString()\n    };\n    await adminDocRef.set(payload, {\n        merge: true\n    });\n    await userDocRef.set({\n        // Mirror a simpler shape commonly used in Firestore\n        email: user.email,\n        name: user.name,\n        admin: user.role === 'ADMIN',\n        trainer: user.role === 'TRAINER' || user.role === 'ADMIN',\n        trainer_verified: user.trainerVerified,\n        created_at: new Date(),\n        updated_at: new Date()\n    }, {\n        merge: true\n    });\n}\nasync function getFirestoreUserByEmail(email) {\n    const db = await getFirestore();\n    if (!db) return {\n        exists: false\n    };\n    const snap = await db.collection('users').doc(email).get();\n    if (!snap.exists) return {\n        exists: false\n    };\n    return {\n        exists: true,\n        ...snap.data()\n    };\n}\nasync function publishExercise(ex) {\n    const db = await getFirestore();\n    if (!db) return;\n    const docRef = db.collection('exercises').doc(ex.id);\n    const keywords = Array.from(new Set([\n        ex.name,\n        ex.category,\n        ...ex.muscleGroups,\n        ...ex.equipment\n    ].join(' ').toLowerCase().split(/[^a-z0-9]+/).filter(Boolean)));\n    await docRef.set({\n        name: ex.name,\n        category: ex.category,\n        muscleGroups: ex.muscleGroups,\n        equipment: ex.equipment,\n        difficulty: ex.difficulty,\n        instructions: ex.instructions ?? null,\n        safetyNotes: ex.safetyNotes ?? null,\n        imageUrl: ex.imageUrl ?? null,\n        videoUrl: ex.videoUrl ?? null,\n        isActive: ex.isActive ?? true,\n        usageCount: ex.usageCount ?? 0,\n        lastUsed: ex.lastUsed ? ex.lastUsed : null,\n        keywords,\n        updated_at: new Date()\n    }, {\n        merge: true\n    });\n}\nasync function deleteExerciseDoc(id) {\n    const db = await getFirestore();\n    if (!db) return;\n    await db.collection('exercises').doc(id).set({\n        isActive: false,\n        updated_at: new Date()\n    }, {\n        merge: true\n    });\n}\nasync function getFirestoreExercise(id) {\n    const db = await getFirestore();\n    if (!db) return null;\n    const snap = await db.collection('exercises').doc(id).get();\n    return snap.exists ? snap.data() : null;\n}\nasync function publishAccreditedProvider(p) {\n    const db = await getFirestore();\n    if (!db) return;\n    const docRef = db.collection('accredited_providers').doc(p.id);\n    await docRef.set({\n        name: p.name,\n        country: p.country,\n        qualifications: p.qualifications,\n        profileUrl: p.profileUrl ?? null,\n        profilePath: p.profilePath ?? null,\n        slug: p.slug ?? null,\n        source: p.source ?? 'EREPS',\n        isActive: p.isActive ?? true,\n        updated_at: new Date()\n    }, {\n        merge: true\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/core/integrations/firebase.ts\n");

/***/ }),

/***/ "(rsc)/./src/core/integrations/index.ts":
/*!****************************************!*\
  !*** ./src/core/integrations/index.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MollieApiError: () => (/* reexport safe */ _mollie__WEBPACK_IMPORTED_MODULE_1__.MollieApiError),\n/* harmony export */   cancelPayment: () => (/* reexport safe */ _mollie__WEBPACK_IMPORTED_MODULE_1__.cancelPayment),\n/* harmony export */   cancelSubscription: () => (/* reexport safe */ _mollie__WEBPACK_IMPORTED_MODULE_1__.cancelSubscription),\n/* harmony export */   createCustomer: () => (/* reexport safe */ _mollie__WEBPACK_IMPORTED_MODULE_1__.createCustomer),\n/* harmony export */   createMollieClient: () => (/* reexport safe */ _mollie__WEBPACK_IMPORTED_MODULE_1__.createMollieClient),\n/* harmony export */   createPackagePayment: () => (/* reexport safe */ _mollie__WEBPACK_IMPORTED_MODULE_1__.createPackagePayment),\n/* harmony export */   createPayment: () => (/* reexport safe */ _mollie__WEBPACK_IMPORTED_MODULE_1__.createPayment),\n/* harmony export */   createSessionPayment: () => (/* reexport safe */ _mollie__WEBPACK_IMPORTED_MODULE_1__.createSessionPayment),\n/* harmony export */   createSubscription: () => (/* reexport safe */ _mollie__WEBPACK_IMPORTED_MODULE_1__.createSubscription),\n/* harmony export */   deleteExerciseDoc: () => (/* reexport safe */ _firebase__WEBPACK_IMPORTED_MODULE_0__.deleteExerciseDoc),\n/* harmony export */   exchangeCodeForToken: () => (/* reexport safe */ _social_media__WEBPACK_IMPORTED_MODULE_2__.exchangeCodeForToken),\n/* harmony export */   formatAmount: () => (/* reexport safe */ _mollie__WEBPACK_IMPORTED_MODULE_1__.formatAmount),\n/* harmony export */   formatWorkoutCaption: () => (/* reexport safe */ _social_media__WEBPACK_IMPORTED_MODULE_2__.formatWorkoutCaption),\n/* harmony export */   generateAuthUrl: () => (/* reexport safe */ _social_media__WEBPACK_IMPORTED_MODULE_2__.generateAuthUrl),\n/* harmony export */   getAvailablePlatforms: () => (/* reexport safe */ _social_media__WEBPACK_IMPORTED_MODULE_2__.getAvailablePlatforms),\n/* harmony export */   getCustomer: () => (/* reexport safe */ _mollie__WEBPACK_IMPORTED_MODULE_1__.getCustomer),\n/* harmony export */   getFirestore: () => (/* reexport safe */ _firebase__WEBPACK_IMPORTED_MODULE_0__.getFirestore),\n/* harmony export */   getFirestoreExercise: () => (/* reexport safe */ _firebase__WEBPACK_IMPORTED_MODULE_0__.getFirestoreExercise),\n/* harmony export */   getFirestoreUserByEmail: () => (/* reexport safe */ _firebase__WEBPACK_IMPORTED_MODULE_0__.getFirestoreUserByEmail),\n/* harmony export */   getMollieClient: () => (/* reexport safe */ _mollie__WEBPACK_IMPORTED_MODULE_1__.getMollieClient),\n/* harmony export */   getPayment: () => (/* reexport safe */ _mollie__WEBPACK_IMPORTED_MODULE_1__.getPayment),\n/* harmony export */   getPlatformCapabilities: () => (/* reexport safe */ _social_media__WEBPACK_IMPORTED_MODULE_2__.getPlatformCapabilities),\n/* harmony export */   isPaymentFailed: () => (/* reexport safe */ _mollie__WEBPACK_IMPORTED_MODULE_1__.isPaymentFailed),\n/* harmony export */   isPaymentPending: () => (/* reexport safe */ _mollie__WEBPACK_IMPORTED_MODULE_1__.isPaymentPending),\n/* harmony export */   isPaymentSuccessful: () => (/* reexport safe */ _mollie__WEBPACK_IMPORTED_MODULE_1__.isPaymentSuccessful),\n/* harmony export */   isPlatformConfigured: () => (/* reexport safe */ _social_media__WEBPACK_IMPORTED_MODULE_2__.isPlatformConfigured),\n/* harmony export */   parseAmount: () => (/* reexport safe */ _mollie__WEBPACK_IMPORTED_MODULE_1__.parseAmount),\n/* harmony export */   processWebhook: () => (/* reexport safe */ _mollie__WEBPACK_IMPORTED_MODULE_1__.processWebhook),\n/* harmony export */   publishAccreditedProvider: () => (/* reexport safe */ _firebase__WEBPACK_IMPORTED_MODULE_0__.publishAccreditedProvider),\n/* harmony export */   publishExercise: () => (/* reexport safe */ _firebase__WEBPACK_IMPORTED_MODULE_0__.publishExercise),\n/* harmony export */   publishUserSummary: () => (/* reexport safe */ _firebase__WEBPACK_IMPORTED_MODULE_0__.publishUserSummary),\n/* harmony export */   shareToFacebook: () => (/* reexport safe */ _social_media__WEBPACK_IMPORTED_MODULE_2__.shareToFacebook),\n/* harmony export */   shareToInstagram: () => (/* reexport safe */ _social_media__WEBPACK_IMPORTED_MODULE_2__.shareToInstagram),\n/* harmony export */   shareToTikTok: () => (/* reexport safe */ _social_media__WEBPACK_IMPORTED_MODULE_2__.shareToTikTok),\n/* harmony export */   shareToYouTube: () => (/* reexport safe */ _social_media__WEBPACK_IMPORTED_MODULE_2__.shareToYouTube),\n/* harmony export */   verifyWebhookSignature: () => (/* reexport safe */ _mollie__WEBPACK_IMPORTED_MODULE_1__.verifyWebhookSignature)\n/* harmony export */ });\n/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./firebase */ \"(rsc)/./src/core/integrations/firebase.ts\");\n/* harmony import */ var _mollie__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mollie */ \"(rsc)/./src/core/integrations/mollie.ts\");\n/* harmony import */ var _social_media__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./social_media */ \"(rsc)/./src/core/integrations/social_media.ts\");\n/**\n * External Integrations Exports\n * Centralized export point for all third-party service integrations\n */ // Firebase integration for notifications and authentication\n\n// Mollie payment processing integration\n\n// Social media platform integrations\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvY29yZS9pbnRlZ3JhdGlvbnMvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7OztDQUdDLEdBRUQsNERBQTREO0FBQ2pDO0FBRTNCLHdDQUF3QztBQUNmO0FBRXpCLHFDQUFxQztBQUNOIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yc29sZS9Eb2N1bWVudHMvR2l0SHViL21hc3NpbWluby9tYXNzaW1pbm8vc3JjL2NvcmUvaW50ZWdyYXRpb25zL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgSW50ZWdyYXRpb25zIEV4cG9ydHNcbiAqIENlbnRyYWxpemVkIGV4cG9ydCBwb2ludCBmb3IgYWxsIHRoaXJkLXBhcnR5IHNlcnZpY2UgaW50ZWdyYXRpb25zXG4gKi9cblxuLy8gRmlyZWJhc2UgaW50ZWdyYXRpb24gZm9yIG5vdGlmaWNhdGlvbnMgYW5kIGF1dGhlbnRpY2F0aW9uXG5leHBvcnQgKiBmcm9tICcuL2ZpcmViYXNlJztcblxuLy8gTW9sbGllIHBheW1lbnQgcHJvY2Vzc2luZyBpbnRlZ3JhdGlvblxuZXhwb3J0ICogZnJvbSAnLi9tb2xsaWUnO1xuXG4vLyBTb2NpYWwgbWVkaWEgcGxhdGZvcm0gaW50ZWdyYXRpb25zXG5leHBvcnQgKiBmcm9tICcuL3NvY2lhbF9tZWRpYSc7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/core/integrations/index.ts\n");

/***/ }),

/***/ "(rsc)/./src/core/integrations/mollie.ts":
/*!*****************************************!*\
  !*** ./src/core/integrations/mollie.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MollieApiError: () => (/* reexport safe */ _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.MollieApiError),\n/* harmony export */   cancelPayment: () => (/* binding */ cancelPayment),\n/* harmony export */   cancelSubscription: () => (/* binding */ cancelSubscription),\n/* harmony export */   createCustomer: () => (/* binding */ createCustomer),\n/* harmony export */   createMollieClient: () => (/* reexport safe */ _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.createMollieClient),\n/* harmony export */   createPackagePayment: () => (/* binding */ createPackagePayment),\n/* harmony export */   createPayment: () => (/* binding */ createPayment),\n/* harmony export */   createSessionPayment: () => (/* binding */ createSessionPayment),\n/* harmony export */   createSubscription: () => (/* binding */ createSubscription),\n/* harmony export */   formatAmount: () => (/* binding */ formatAmount),\n/* harmony export */   getCustomer: () => (/* binding */ getCustomer),\n/* harmony export */   getMollieClient: () => (/* binding */ getMollieClient),\n/* harmony export */   getPayment: () => (/* binding */ getPayment),\n/* harmony export */   isPaymentFailed: () => (/* binding */ isPaymentFailed),\n/* harmony export */   isPaymentPending: () => (/* binding */ isPaymentPending),\n/* harmony export */   isPaymentSuccessful: () => (/* binding */ isPaymentSuccessful),\n/* harmony export */   parseAmount: () => (/* binding */ parseAmount),\n/* harmony export */   processWebhook: () => (/* binding */ processWebhook),\n/* harmony export */   verifyWebhookSignature: () => (/* binding */ verifyWebhookSignature)\n/* harmony export */ });\n/* harmony import */ var _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @mollie/api-client */ \"(rsc)/./node_modules/@mollie/api-client/dist/mollie.esm.js\");\n/**\n * Mollie Payment Integration\n * Handles payment processing for trainer business transactions\n */ \n// ============================================================================\n// CLIENT SETUP\n// ============================================================================\nlet mollieClientSingleton = null;\nfunction getMollieConfigFromEnv() {\n    const apiKey = process.env.MOLLIE_API_KEY;\n    if (!apiKey) {\n        console.warn('Mollie API key not found in environment variables');\n        return null;\n    }\n    return {\n        apiKey\n    };\n}\nfunction getMollieClient() {\n    if (mollieClientSingleton) return mollieClientSingleton;\n    const config = getMollieConfigFromEnv();\n    if (!config) return null;\n    try {\n        mollieClientSingleton = (0,_mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.createMollieClient)({\n            apiKey: config.apiKey,\n            // Mollie expects an array of version strings\n            versionStrings: [\n                'massimino/1.0.0'\n            ]\n        });\n        console.log('✅ Mollie client initialized successfully');\n        return mollieClientSingleton;\n    } catch (error) {\n        console.error('❌ Failed to initialize Mollie client:', error);\n        return null;\n    }\n}\n// ============================================================================\n// PAYMENT OPERATIONS\n// ============================================================================\n/**\n * Create a one-time payment\n */ async function createPayment(paymentData) {\n    const client = getMollieClient();\n    if (!client) {\n        throw new Error('Mollie client not available');\n    }\n    try {\n        const payment = await client.payments.create(paymentData);\n        console.log('💳 Payment created:', payment.id);\n        return payment;\n    } catch (error) {\n        console.error('❌ Payment creation failed:', error);\n        if (error instanceof _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.MollieApiError) {\n            throw new Error(`Mollie API Error: ${error.message}`);\n        }\n        throw error;\n    }\n}\n/**\n * Get payment details\n */ async function getPayment(paymentId) {\n    const client = getMollieClient();\n    if (!client) {\n        throw new Error('Mollie client not available');\n    }\n    try {\n        const payment = await client.payments.get(paymentId);\n        return payment;\n    } catch (error) {\n        console.error('❌ Failed to get payment:', error);\n        if (error instanceof _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.MollieApiError) {\n            throw new Error(`Mollie API Error: ${error.message}`);\n        }\n        throw error;\n    }\n}\n/**\n * Cancel a payment\n */ async function cancelPayment(paymentId) {\n    const client = getMollieClient();\n    if (!client) {\n        throw new Error('Mollie client not available');\n    }\n    try {\n        const payment = await client.payments.cancel(paymentId);\n        console.log('🚫 Payment cancelled:', paymentId);\n        return payment;\n    } catch (error) {\n        console.error('❌ Failed to cancel payment:', error);\n        if (error instanceof _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.MollieApiError) {\n            throw new Error(`Mollie API Error: ${error.message}`);\n        }\n        throw error;\n    }\n}\n// ============================================================================\n// CUSTOMER OPERATIONS\n// ============================================================================\n/**\n * Create a customer for recurring payments\n */ async function createCustomer(customerData) {\n    const client = getMollieClient();\n    if (!client) {\n        throw new Error('Mollie client not available');\n    }\n    try {\n        const customer = await client.customers.create(customerData);\n        console.log('👤 Customer created:', customer.id);\n        return customer;\n    } catch (error) {\n        console.error('❌ Customer creation failed:', error);\n        if (error instanceof _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.MollieApiError) {\n            throw new Error(`Mollie API Error: ${error.message}`);\n        }\n        throw error;\n    }\n}\n/**\n * Get customer details\n */ async function getCustomer(customerId) {\n    const client = getMollieClient();\n    if (!client) {\n        throw new Error('Mollie client not available');\n    }\n    try {\n        const customer = await client.customers.get(customerId);\n        return customer;\n    } catch (error) {\n        console.error('❌ Failed to get customer:', error);\n        if (error instanceof _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.MollieApiError) {\n            throw new Error(`Mollie API Error: ${error.message}`);\n        }\n        throw error;\n    }\n}\n// ============================================================================\n// SUBSCRIPTION OPERATIONS\n// ============================================================================\n/**\n * Create a subscription for recurring payments\n */ async function createSubscription(customerId, subscriptionData) {\n    const client = getMollieClient();\n    if (!client) {\n        throw new Error('Mollie client not available');\n    }\n    try {\n        const subscription = await client.customerSubscriptions.create({\n            customerId,\n            ...subscriptionData\n        });\n        console.log('🔄 Subscription created:', subscription.id);\n        return subscription;\n    } catch (error) {\n        console.error('❌ Subscription creation failed:', error);\n        if (error instanceof _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.MollieApiError) {\n            throw new Error(`Mollie API Error: ${error.message}`);\n        }\n        throw error;\n    }\n}\n/**\n * Cancel a subscription\n */ async function cancelSubscription(customerId, subscriptionId) {\n    const client = getMollieClient();\n    if (!client) {\n        throw new Error('Mollie client not available');\n    }\n    try {\n        const subscription = await client.customerSubscriptions.cancel({\n            customerId,\n            id: subscriptionId\n        });\n        console.log('🚫 Subscription cancelled:', subscriptionId);\n        return subscription;\n    } catch (error) {\n        console.error('❌ Failed to cancel subscription:', error);\n        if (error instanceof _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.MollieApiError) {\n            throw new Error(`Mollie API Error: ${error.message}`);\n        }\n        throw error;\n    }\n}\n// ============================================================================\n// WEBHOOK VERIFICATION\n// ============================================================================\n/**\n * Verify webhook signature (implement if using webhook signatures)\n */ function verifyWebhookSignature(_payload, _signature, _secret) {\n    // Implementation depends on your webhook setup\n    // Mollie typically uses simple ID-based verification\n    return true; // Placeholder\n}\n/**\n * Process webhook payload\n */ async function processWebhook(paymentId) {\n    try {\n        const payment = await getPayment(paymentId);\n        console.log('🔔 Webhook processed for payment:', paymentId, 'Status:', payment.status);\n        return {\n            paymentId: payment.id,\n            status: payment.status,\n            amount: payment.amount,\n            description: payment.description,\n            metadata: payment.metadata\n        };\n    } catch (error) {\n        console.error('❌ Webhook processing failed:', error);\n        throw error;\n    }\n}\n// ============================================================================\n// UTILITY FUNCTIONS\n// ============================================================================\n/**\n * Format amount for Mollie (requires string with 2 decimals)\n */ function formatAmount(amount) {\n    return (amount / 100).toFixed(2);\n}\n/**\n * Parse amount from Mollie (returns cents as integer)\n */ function parseAmount(amount) {\n    return Math.round(parseFloat(amount) * 100);\n}\n/**\n * Validate payment status\n */ function isPaymentSuccessful(status) {\n    return status === 'paid';\n}\nfunction isPaymentPending(status) {\n    return [\n        'open',\n        'pending'\n    ].includes(status);\n}\nfunction isPaymentFailed(status) {\n    return [\n        'failed',\n        'canceled',\n        'expired'\n    ].includes(status);\n}\n// ============================================================================\n// TRAINER-SPECIFIC FUNCTIONS\n// ============================================================================\n/**\n * Create payment for trainer session\n */ async function createSessionPayment(data) {\n    const paymentData = {\n        amount: {\n            value: formatAmount(data.amount),\n            currency: data.currency\n        },\n        description: data.description,\n        redirectUrl: data.redirectUrl,\n        ...data.webhookUrl ? {\n            webhookUrl: data.webhookUrl\n        } : {},\n        metadata: {\n            type: 'session_payment',\n            trainerId: data.trainerId,\n            clientId: data.clientId,\n            appointmentId: data.appointmentId\n        }\n    };\n    return await createPayment(paymentData);\n}\n/**\n * Create payment for trainer package\n */ async function createPackagePayment(data) {\n    const paymentData = {\n        amount: {\n            value: formatAmount(data.amount),\n            currency: data.currency\n        },\n        description: data.description,\n        redirectUrl: data.redirectUrl,\n        ...data.webhookUrl ? {\n            webhookUrl: data.webhookUrl\n        } : {},\n        metadata: {\n            type: 'package_payment',\n            trainerId: data.trainerId,\n            clientId: data.clientId,\n            packageId: data.packageId\n        }\n    };\n    return await createPayment(paymentData);\n}\n// ============================================================================\n// EXPORTS\n// ============================================================================\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/core/integrations/mollie.ts\n");

/***/ }),

/***/ "(rsc)/./src/core/integrations/social_media.ts":
/*!***********************************************!*\
  !*** ./src/core/integrations/social_media.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exchangeCodeForToken: () => (/* binding */ exchangeCodeForToken),\n/* harmony export */   formatWorkoutCaption: () => (/* binding */ formatWorkoutCaption),\n/* harmony export */   generateAuthUrl: () => (/* binding */ generateAuthUrl),\n/* harmony export */   getAvailablePlatforms: () => (/* binding */ getAvailablePlatforms),\n/* harmony export */   getPlatformCapabilities: () => (/* binding */ getPlatformCapabilities),\n/* harmony export */   isPlatformConfigured: () => (/* binding */ isPlatformConfigured),\n/* harmony export */   shareToFacebook: () => (/* binding */ shareToFacebook),\n/* harmony export */   shareToInstagram: () => (/* binding */ shareToInstagram),\n/* harmony export */   shareToTikTok: () => (/* binding */ shareToTikTok),\n/* harmony export */   shareToYouTube: () => (/* binding */ shareToYouTube)\n/* harmony export */ });\n/**\n * Social Media Integration Service for Massimino\n * Handles Instagram, TikTok, and other platform integrations\n */ // Platform configurations\nconst PLATFORM_CONFIGS = {\n    instagram: {\n        name: 'Instagram',\n        clientId: process.env.INSTAGRAM_CLIENT_ID || '',\n        clientSecret: process.env.INSTAGRAM_CLIENT_SECRET || '',\n        scopes: [\n            'user_profile',\n            'user_media'\n        ],\n        authUrl: 'https://api.instagram.com/oauth/authorize',\n        tokenUrl: 'https://api.instagram.com/oauth/access_token',\n        apiBaseUrl: 'https://graph.instagram.com'\n    },\n    tiktok: {\n        name: 'TikTok',\n        clientId: process.env.TIKTOK_CLIENT_KEY || '',\n        clientSecret: process.env.TIKTOK_CLIENT_SECRET || '',\n        scopes: [\n            'user.info.basic',\n            'video.upload'\n        ],\n        authUrl: 'https://www.tiktok.com/auth/authorize/',\n        tokenUrl: 'https://open-api.tiktok.com/oauth/access_token/',\n        apiBaseUrl: 'https://open-api.tiktok.com'\n    },\n    youtube: {\n        name: 'YouTube',\n        clientId: process.env.YOUTUBE_CLIENT_ID || '',\n        clientSecret: process.env.YOUTUBE_CLIENT_SECRET || '',\n        scopes: [\n            'https://www.googleapis.com/auth/youtube.upload'\n        ],\n        authUrl: 'https://accounts.google.com/o/oauth2/auth',\n        tokenUrl: 'https://oauth2.googleapis.com/token',\n        apiBaseUrl: 'https://www.googleapis.com/youtube/v3'\n    },\n    facebook: {\n        name: 'Facebook',\n        clientId: process.env.FACEBOOK_APP_ID || '',\n        clientSecret: process.env.FACEBOOK_APP_SECRET || '',\n        scopes: [\n            'pages_manage_posts',\n            'pages_read_engagement'\n        ],\n        authUrl: 'https://www.facebook.com/v18.0/dialog/oauth',\n        tokenUrl: 'https://graph.facebook.com/v18.0/oauth/access_token',\n        apiBaseUrl: 'https://graph.facebook.com/v18.0'\n    }\n};\n/**\n * Generate OAuth authorization URL for a platform\n */ function generateAuthUrl(platform, redirectUri, state) {\n    const config = PLATFORM_CONFIGS[platform];\n    if (!config) {\n        throw new Error(`Unsupported platform: ${platform}`);\n    }\n    const params = new URLSearchParams({\n        client_id: config.clientId,\n        redirect_uri: redirectUri,\n        scope: config.scopes.join(' '),\n        response_type: 'code',\n        ...state && {\n            state\n        }\n    });\n    return `${config.authUrl}?${params.toString()}`;\n}\n/**\n * Exchange authorization code for access token\n */ async function exchangeCodeForToken(platform, code, redirectUri) {\n    const config = PLATFORM_CONFIGS[platform];\n    if (!config) {\n        return {\n            success: false,\n            error: `Unsupported platform: ${platform}`\n        };\n    }\n    try {\n        const response = await fetch(config.tokenUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: new URLSearchParams({\n                client_id: config.clientId,\n                client_secret: config.clientSecret,\n                code,\n                grant_type: 'authorization_code',\n                redirect_uri: redirectUri\n            })\n        });\n        const data = await response.json();\n        if (!response.ok) {\n            return {\n                success: false,\n                error: data.error_description || data.error || 'Token exchange failed'\n            };\n        }\n        const result = {\n            success: true,\n            accessToken: data.access_token,\n            refreshToken: data.refresh_token\n        };\n        if (data.expires_in) {\n            result.expiresAt = new Date(Date.now() + data.expires_in * 1000);\n        }\n        return result;\n    } catch (error) {\n        console.error(`Token exchange error for ${platform}:`, error);\n        return {\n            success: false,\n            error: 'Token exchange failed'\n        };\n    }\n}\n/**\n * Format workout data into social media caption\n */ function formatWorkoutCaption(post) {\n    let caption = post.caption;\n    if (post.workoutData) {\n        const { exercise, sets, reps, weight, duration } = post.workoutData;\n        caption += `\\n\\n💪 Workout Details:\\n`;\n        caption += `🏋️ Exercise: ${exercise}\\n`;\n        caption += `📊 Sets: ${sets} × ${reps} reps\\n`;\n        caption += `⚖️ Weight: ${weight}\\n`;\n        if (duration) {\n            caption += `⏱️ Duration: ${duration}\\n`;\n        }\n    }\n    if (post.hashtags && post.hashtags.length > 0) {\n        caption += `\\n\\n${post.hashtags.map((tag)=>`#${tag}`).join(' ')}`;\n    }\n    // Add platform-specific fitness hashtags\n    const defaultHashtags = [\n        'fitness',\n        'workout',\n        'gym',\n        'health',\n        'motivation',\n        'massimino'\n    ];\n    caption += `\\n\\n${defaultHashtags.map((tag)=>`#${tag}`).join(' ')}`;\n    return caption;\n}\n/**\n * Share content to Instagram\n */ async function shareToInstagram(post, accessToken) {\n    try {\n        const config = PLATFORM_CONFIGS.instagram;\n        const caption = formatWorkoutCaption(post);\n        // Step 1: Create media container\n        const containerResponse = await fetch(`${config.apiBaseUrl}/me/media`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                image_url: post.mediaType === 'photo' ? post.mediaUrl : undefined,\n                video_url: post.mediaType === 'video' ? post.mediaUrl : undefined,\n                caption,\n                media_type: post.mediaType === 'photo' ? 'IMAGE' : 'VIDEO'\n            })\n        });\n        const containerData = await containerResponse.json();\n        if (!containerResponse.ok) {\n            return {\n                success: false,\n                error: containerData.error?.message || 'Failed to create media container'\n            };\n        }\n        // Step 2: Publish the media\n        const publishResponse = await fetch(`${config.apiBaseUrl}/me/media_publish`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                creation_id: containerData.id\n            })\n        });\n        const publishData = await publishResponse.json();\n        if (!publishResponse.ok) {\n            return {\n                success: false,\n                error: publishData.error?.message || 'Failed to publish media'\n            };\n        }\n        return {\n            success: true,\n            postId: publishData.id\n        };\n    } catch (error) {\n        console.error('Instagram sharing error:', error);\n        return {\n            success: false,\n            error: 'Instagram sharing failed'\n        };\n    }\n}\n/**\n * Share content to TikTok\n */ async function shareToTikTok(post, accessToken) {\n    try {\n        const config = PLATFORM_CONFIGS.tiktok;\n        if (post.mediaType !== 'video') {\n            return {\n                success: false,\n                error: 'TikTok only supports video content'\n            };\n        }\n        const caption = formatWorkoutCaption(post);\n        const response = await fetch(`${config.apiBaseUrl}/v2/post/publish/video/init/`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                post_info: {\n                    title: caption.substring(0, 150),\n                    privacy_level: 'SELF_ONLY',\n                    disable_duet: false,\n                    disable_comment: false,\n                    disable_stitch: false,\n                    video_cover_timestamp_ms: 1000\n                },\n                source_info: {\n                    source: 'FILE_UPLOAD',\n                    video_url: post.mediaUrl\n                }\n            })\n        });\n        const data = await response.json();\n        if (!response.ok) {\n            return {\n                success: false,\n                error: data.error?.message || 'TikTok upload failed'\n            };\n        }\n        return {\n            success: true,\n            postId: data.data?.publish_id\n        };\n    } catch (error) {\n        console.error('TikTok sharing error:', error);\n        return {\n            success: false,\n            error: 'TikTok sharing failed'\n        };\n    }\n}\n/**\n * Share content to YouTube Shorts\n */ async function shareToYouTube(post, accessToken) {\n    try {\n        const config = PLATFORM_CONFIGS.youtube;\n        if (post.mediaType !== 'video') {\n            return {\n                success: false,\n                error: 'YouTube only supports video content'\n            };\n        }\n        const caption = formatWorkoutCaption(post);\n        const response = await fetch(`${config.apiBaseUrl}/videos?part=snippet,status`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                snippet: {\n                    title: `${post.workoutData?.exercise || 'Workout'} - Massimino Fitness`,\n                    description: caption,\n                    tags: post.hashtags || [\n                        'fitness',\n                        'workout',\n                        'shorts'\n                    ],\n                    categoryId: '17'\n                },\n                status: {\n                    privacyStatus: 'private'\n                }\n            })\n        });\n        const data = await response.json();\n        if (!response.ok) {\n            return {\n                success: false,\n                error: data.error?.message || 'YouTube upload failed'\n            };\n        }\n        return {\n            success: true,\n            postId: data.id\n        };\n    } catch (error) {\n        console.error('YouTube sharing error:', error);\n        return {\n            success: false,\n            error: 'YouTube sharing failed'\n        };\n    }\n}\n/**\n * Share content to Facebook\n */ async function shareToFacebook(post, accessToken, pageId) {\n    try {\n        const config = PLATFORM_CONFIGS.facebook;\n        const caption = formatWorkoutCaption(post);\n        const response = await fetch(`${config.apiBaseUrl}/${pageId}/photos`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                url: post.mediaUrl,\n                caption,\n                published: true\n            })\n        });\n        const data = await response.json();\n        if (!response.ok) {\n            return {\n                success: false,\n                error: data.error?.message || 'Facebook sharing failed'\n            };\n        }\n        return {\n            success: true,\n            postId: data.id\n        };\n    } catch (error) {\n        console.error('Facebook sharing error:', error);\n        return {\n            success: false,\n            error: 'Facebook sharing failed'\n        };\n    }\n}\n/**\n * Get platform sharing capabilities\n */ function getPlatformCapabilities(platform) {\n    const capabilities = {\n        instagram: {\n            supportsPhoto: true,\n            supportsVideo: true,\n            requiresAuth: true\n        },\n        tiktok: {\n            supportsPhoto: false,\n            supportsVideo: true,\n            requiresAuth: true\n        },\n        youtube: {\n            supportsPhoto: false,\n            supportsVideo: true,\n            requiresAuth: true\n        },\n        facebook: {\n            supportsPhoto: true,\n            supportsVideo: true,\n            requiresAuth: true\n        }\n    };\n    return capabilities[platform] || {\n        supportsPhoto: false,\n        supportsVideo: false,\n        requiresAuth: true\n    };\n}\n/**\n * Validate platform configuration\n */ function isPlatformConfigured(platform) {\n    const config = PLATFORM_CONFIGS[platform];\n    if (!config) return false;\n    return !!(config.clientId && config.clientSecret);\n}\n/**\n * Get available platforms\n */ function getAvailablePlatforms() {\n    return Object.keys(PLATFORM_CONFIGS).filter(isPlatformConfigured);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/core/integrations/social_media.ts\n");

/***/ }),

/***/ "(rsc)/./src/core/socket/server.ts":
/*!***********************************!*\
  !*** ./src/core/socket/server.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SocketServer: () => (/* binding */ SocketServer),\n/* harmony export */   getSocketServer: () => (/* binding */ getSocketServer),\n/* harmony export */   initializeSocketServer: () => (/* binding */ initializeSocketServer)\n/* harmony export */ });\n/* harmony import */ var socket_io__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! socket.io */ \"(rsc)/./node_modules/socket.io/wrapper.mjs\");\n/* harmony import */ var _database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../database */ \"(rsc)/./src/core/database/index.ts\");\n/* harmony import */ var _services_moderation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/services/moderation */ \"(rsc)/./src/services/moderation/index.ts\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_3__);\n/**\n * Socket.IO Server Configuration\n * Phase 4.2: Real-time communication server\n */ \n\n\n\nclass SocketServer {\n    io;\n    connectedUsers = new Map();\n    constructor(httpServer){\n        this.io = new socket_io__WEBPACK_IMPORTED_MODULE_0__.Server(httpServer, {\n            cors: {\n                origin:  false ? 0 : [\n                    'http://localhost:3000',\n                    'http://localhost:3001'\n                ],\n                methods: [\n                    'GET',\n                    'POST'\n                ],\n                credentials: true\n            },\n            transports: [\n                'websocket',\n                'polling'\n            ]\n        });\n        this.setupMiddleware();\n        this.setupEventHandlers();\n    }\n    setupMiddleware() {\n        // Authentication middleware\n        this.io.use(async (socket, next)=>{\n            try {\n                // const token = socket.handshake.auth.token; // unused\n                const userId = socket.handshake.auth.userId;\n                if (!userId) {\n                    throw new Error('User ID required');\n                }\n                // Verify user exists in database\n                const user = await _database__WEBPACK_IMPORTED_MODULE_1__.prisma.users.findUnique({\n                    where: {\n                        id: userId\n                    },\n                    select: {\n                        id: true,\n                        name: true,\n                        status: true\n                    }\n                });\n                if (!user || user.status !== 'ACTIVE') {\n                    throw new Error('Invalid or inactive user');\n                }\n                socket.userId = user.id;\n                socket.userName = user.name || 'Unknown User';\n                next();\n            } catch (error) {\n                console.error('Socket authentication error:', error);\n                next(new Error('Authentication failed'));\n            }\n        });\n    }\n    setupEventHandlers() {\n        this.io.on('connection', (socket)=>{\n            console.log(`User ${socket.userId} connected:`, socket.id);\n            // Track connected user\n            if (socket.userId) {\n                this.connectedUsers.set(socket.userId, socket.id);\n            }\n            // Chat event handlers\n            this.setupChatHandlers(socket);\n            // Live session event handlers\n            this.setupLiveSessionHandlers(socket);\n            // Workout progress event handlers\n            this.setupWorkoutProgressHandlers(socket);\n            // Video call event handlers\n            this.setupVideoCallHandlers(socket);\n            // Handle disconnection\n            socket.on('disconnect', (reason)=>{\n                console.log(`User ${socket.userId} disconnected:`, reason);\n                if (socket.userId) {\n                    this.connectedUsers.delete(socket.userId);\n                }\n            });\n        });\n    }\n    setupChatHandlers(socket) {\n        // Join chat room\n        socket.on('join_room', async ({ roomId })=>{\n            try {\n                // Verify user has access to this room\n                const hasAccess = await this.verifyRoomAccess(socket.userId, roomId);\n                if (!hasAccess) {\n                    socket.emit('error', {\n                        message: 'Access denied to this room'\n                    });\n                    return;\n                }\n                socket.join(roomId);\n                console.log(`User ${socket.userId} joined room ${roomId}`);\n                // Notify others in the room\n                socket.to(roomId).emit('user_joined', {\n                    userId: socket.userId,\n                    userName: socket.userName\n                });\n            } catch (error) {\n                console.error('Error joining room:', error);\n                socket.emit('error', {\n                    message: 'Failed to join room'\n                });\n            }\n        });\n        // Leave chat room\n        socket.on('leave_room', ({ roomId })=>{\n            socket.leave(roomId);\n            socket.to(roomId).emit('user_left', {\n                userId: socket.userId,\n                userName: socket.userName\n            });\n        });\n        // Send message\n        socket.on('send_message', async ({ roomId, content, type = 'text', metadata })=>{\n            try {\n                // Moderate content\n                const moderationResult = await (0,_services_moderation__WEBPACK_IMPORTED_MODULE_2__.moderateContent)(content);\n                if (moderationResult.flagged) {\n                    socket.emit('message_blocked', {\n                        reason: 'Content flagged by moderation system',\n                        flaggedReason: moderationResult.reason\n                    });\n                    return;\n                }\n                // Save message to database\n                const message = await _database__WEBPACK_IMPORTED_MODULE_1__.prisma.chat_messages.create({\n                    data: {\n                        id: (0,crypto__WEBPACK_IMPORTED_MODULE_3__.randomUUID)(),\n                        roomId,\n                        senderId: socket.userId,\n                        content: content,\n                        type,\n                        metadata\n                    },\n                    include: {\n                        users: {\n                            select: {\n                                id: true,\n                                name: true\n                            }\n                        }\n                    }\n                });\n                // Broadcast message to room\n                this.io.to(roomId).emit('message', {\n                    id: message.id,\n                    roomId,\n                    content: message.content,\n                    senderId: message.senderId,\n                    senderName: message.users?.name,\n                    timestamp: message.createdAt.getTime(),\n                    type: message.type,\n                    metadata: message.metadata\n                });\n                // Send push notifications to offline users\n                await this.sendMessageNotifications(roomId, message, socket.userId);\n            } catch (error) {\n                console.error('Error sending message:', error);\n                socket.emit('error', {\n                    message: 'Failed to send message'\n                });\n            }\n        });\n        // Typing indicators\n        socket.on('typing', ({ roomId, isTyping })=>{\n            socket.to(roomId).emit('typing', {\n                roomId,\n                userId: socket.userId,\n                userName: socket.userName,\n                isTyping\n            });\n        });\n    }\n    setupLiveSessionHandlers(socket) {\n        // Join live workout session\n        socket.on('join_session', async ({ sessionId })=>{\n            try {\n                // Verify user has access to this session\n                const hasAccess = await this.verifySessionAccess(socket.userId, sessionId);\n                if (!hasAccess) {\n                    socket.emit('error', {\n                        message: 'Access denied to this session'\n                    });\n                    return;\n                }\n                socket.join(`session_${sessionId}`);\n                // Get current session participants\n                const room = this.io.sockets.adapter.rooms.get(`session_${sessionId}`);\n                const participants = await this.getSessionParticipants(sessionId, room);\n                // Broadcast participant joined\n                this.io.to(`session_${sessionId}`).emit('participant_joined', {\n                    sessionId,\n                    participants,\n                    newParticipant: {\n                        userId: socket.userId,\n                        userName: socket.userName\n                    }\n                });\n            } catch (error) {\n                console.error('Error joining session:', error);\n                socket.emit('error', {\n                    message: 'Failed to join session'\n                });\n            }\n        });\n        // Leave live session\n        socket.on('leave_session', async ({ sessionId })=>{\n            socket.leave(`session_${sessionId}`);\n            const room = this.io.sockets.adapter.rooms.get(`session_${sessionId}`);\n            const participants = await this.getSessionParticipants(sessionId, room);\n            socket.to(`session_${sessionId}`).emit('participant_left', {\n                sessionId,\n                participants,\n                leftParticipant: {\n                    userId: socket.userId,\n                    userName: socket.userName\n                }\n            });\n        });\n        // Update session state\n        socket.on('session_update', ({ sessionId, update })=>{\n            socket.to(`session_${sessionId}`).emit('session_update', {\n                sessionId,\n                update,\n                updatedBy: {\n                    userId: socket.userId,\n                    userName: socket.userName\n                }\n            });\n        });\n    }\n    setupWorkoutProgressHandlers(socket) {\n        // Real-time workout progress sharing\n        socket.on('workout_progress', async ({ sessionId, progress })=>{\n            try {\n                // Save progress to database\n                await _database__WEBPACK_IMPORTED_MODULE_1__.prisma.workout_progress.upsert({\n                    where: {\n                        userId_sessionId: {\n                            userId: socket.userId,\n                            sessionId\n                        }\n                    },\n                    update: {\n                        progress,\n                        updatedAt: new Date()\n                    },\n                    create: {\n                        id: (0,crypto__WEBPACK_IMPORTED_MODULE_3__.randomUUID)(),\n                        userId: socket.userId,\n                        sessionId,\n                        progress,\n                        updatedAt: new Date()\n                    }\n                });\n                // Broadcast progress update\n                this.io.to(`session_${sessionId}`).emit('workout_progress', {\n                    sessionId,\n                    userId: socket.userId,\n                    userName: socket.userName,\n                    progress,\n                    timestamp: Date.now()\n                });\n            } catch (error) {\n                console.error('Error updating workout progress:', error);\n                socket.emit('error', {\n                    message: 'Failed to update progress'\n                });\n            }\n        });\n        // Heart rate and biometric updates\n        socket.on('biometric_update', ({ sessionId, data })=>{\n            socket.to(`session_${sessionId}`).emit('biometric_update', {\n                sessionId,\n                userId: socket.userId,\n                userName: socket.userName,\n                data,\n                timestamp: Date.now()\n            });\n        });\n    }\n    async verifyRoomAccess(userId, roomId) {\n        try {\n            const participant = await _database__WEBPACK_IMPORTED_MODULE_1__.prisma.chat_room_participants.findFirst({\n                where: {\n                    roomId,\n                    userId,\n                    isActive: true\n                }\n            });\n            return !!participant;\n        } catch (error) {\n            console.error('Error verifying room access:', error);\n            return false;\n        }\n    }\n    async verifySessionAccess(userId, sessionId) {\n        try {\n            const session = await _database__WEBPACK_IMPORTED_MODULE_1__.prisma.live_workout_sessions.findFirst({\n                where: {\n                    id: sessionId,\n                    OR: [\n                        {\n                            trainerId: userId\n                        },\n                        {\n                            live_session_participants: {\n                                some: {\n                                    userId\n                                }\n                            }\n                        }\n                    ]\n                }\n            });\n            return !!session;\n        } catch (error) {\n            console.error('Error verifying session access:', error);\n            return false;\n        }\n    }\n    async getSessionParticipants(sessionId, room) {\n        // Get participants from database and merge with online users\n        const dbParticipants = await _database__WEBPACK_IMPORTED_MODULE_1__.prisma.live_session_participants.findMany({\n            where: {\n                sessionId\n            },\n            include: {\n                users: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                }\n            }\n        });\n        return dbParticipants.map((p)=>({\n                userId: p.userId,\n                userName: p.users?.name || 'Unknown',\n                isOnline: room ? this.connectedUsers.has(p.userId) : false\n            }));\n    }\n    async sendMessageNotifications(roomId, message, senderId) {\n        try {\n            // Get room participants excluding the sender\n            const roomParticipants = await _database__WEBPACK_IMPORTED_MODULE_1__.prisma.chat_room_participants.findMany({\n                where: {\n                    roomId,\n                    userId: {\n                        not: senderId\n                    }\n                },\n                include: {\n                    users: {\n                        include: {\n                            device_tokens: {\n                                where: {\n                                    isActive: true\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n            // Send push notifications to offline users\n            for (const participant of roomParticipants){\n                const isOnline = this.connectedUsers.has(participant.userId);\n                if (!isOnline && participant.users.device_tokens.length > 0) {\n                    // Send push notification to each device\n                    for (const deviceToken of participant.users.device_tokens){\n                        try {\n                            await this.sendPushNotification(deviceToken.token, {\n                                title: `Message from ${message.users?.name}`,\n                                body: message.content.length > 100 ? message.content.substring(0, 100) + '...' : message.content,\n                                data: {\n                                    type: 'message',\n                                    roomId,\n                                    messageId: message.id\n                                }\n                            });\n                        } catch (error) {\n                            console.error(`Failed to send push notification to ${deviceToken.token}:`, error);\n                        }\n                    }\n                }\n            }\n        } catch (error) {\n            console.error('Error sending message notifications:', error);\n        }\n    }\n    async sendPushNotification(deviceToken, notification) {\n        // For Expo push notifications\n        const message = {\n            to: deviceToken,\n            sound: 'default',\n            title: notification.title,\n            body: notification.body,\n            data: notification.data,\n            badge: 1\n        };\n        try {\n            const response = await fetch('https://exp.host/--/api/v2/push/send', {\n                method: 'POST',\n                headers: {\n                    Accept: 'application/json',\n                    'Accept-encoding': 'gzip, deflate',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(message)\n            });\n            const result = await response.json();\n            if (!response.ok || result.errors) {\n                throw new Error(`Push notification failed: ${JSON.stringify(result)}`);\n            }\n            console.log('Push notification sent successfully:', result);\n        } catch (error) {\n            console.error('Failed to send push notification:', error);\n            throw error;\n        }\n    }\n    setupVideoCallHandlers(socket) {\n        // Join video call\n        socket.on('join_video_call', async ({ sessionId, isTrainer })=>{\n            try {\n                // Verify access to session\n                const hasAccess = await this.verifySessionAccess(socket.userId, sessionId);\n                if (!hasAccess) {\n                    socket.emit('error', {\n                        message: 'Access denied to this session'\n                    });\n                    return;\n                }\n                const callRoom = `call_${sessionId}`;\n                socket.join(callRoom);\n                console.log(`User ${socket.userId} joined video call for session ${sessionId}`);\n                // Notify others in the call\n                socket.to(callRoom).emit('user_joined_call', {\n                    userId: socket.userId,\n                    userName: socket.userName,\n                    isTrainer\n                });\n                // Send list of current call participants to the new user\n                const room = this.io.sockets.adapter.rooms.get(callRoom);\n                if (room) {\n                    const participants = await this.getCallParticipants(sessionId, room);\n                    socket.emit('call_participants', {\n                        participants\n                    });\n                }\n            } catch (error) {\n                console.error('Error joining video call:', error);\n                socket.emit('error', {\n                    message: 'Failed to join video call'\n                });\n            }\n        });\n        // Leave video call\n        socket.on('leave_video_call', ({ sessionId })=>{\n            const callRoom = `call_${sessionId}`;\n            socket.leave(callRoom);\n            socket.to(callRoom).emit('user_left_call', {\n                userId: socket.userId,\n                userName: socket.userName\n            });\n            console.log(`User ${socket.userId} left video call for session ${sessionId}`);\n        });\n        // WebRTC signaling - offer\n        socket.on('video_offer', ({ sessionId, to, offer })=>{\n            socket.to(`call_${sessionId}`).emit('video_offer', {\n                from: socket.userId,\n                fromName: socket.userName,\n                to,\n                offer\n            });\n        });\n        // WebRTC signaling - answer\n        socket.on('video_answer', ({ sessionId, to, answer })=>{\n            socket.to(`call_${sessionId}`).emit('video_answer', {\n                from: socket.userId,\n                fromName: socket.userName,\n                to,\n                answer\n            });\n        });\n        // WebRTC signaling - ICE candidate\n        socket.on('ice_candidate', ({ sessionId, to, candidate })=>{\n            socket.to(`call_${sessionId}`).emit('ice_candidate', {\n                from: socket.userId,\n                fromName: socket.userName,\n                to,\n                candidate\n            });\n        });\n        // Media state changes (mute/unmute, video on/off)\n        socket.on('media_state_change', ({ sessionId, isAudioEnabled, isVideoEnabled })=>{\n            socket.to(`call_${sessionId}`).emit('user_media_state', {\n                userId: socket.userId,\n                userName: socket.userName,\n                isAudioEnabled,\n                isVideoEnabled\n            });\n        });\n        // Screen sharing (for trainer demonstrations)\n        socket.on('start_screen_share', ({ sessionId })=>{\n            socket.to(`call_${sessionId}`).emit('screen_share_started', {\n                userId: socket.userId,\n                userName: socket.userName\n            });\n        });\n        socket.on('stop_screen_share', ({ sessionId })=>{\n            socket.to(`call_${sessionId}`).emit('screen_share_stopped', {\n                userId: socket.userId,\n                userName: socket.userName\n            });\n        });\n    }\n    async getCallParticipants(sessionId, room) {\n        try {\n            // Get session participants who are currently in the call\n            const sessionParticipants = await _database__WEBPACK_IMPORTED_MODULE_1__.prisma.live_session_participants.findMany({\n                where: {\n                    sessionId\n                },\n                include: {\n                    users: {\n                        select: {\n                            id: true,\n                            name: true,\n                            image: true\n                        }\n                    }\n                }\n            });\n            // Also include trainer\n            const session = await _database__WEBPACK_IMPORTED_MODULE_1__.prisma.live_workout_sessions.findUnique({\n                where: {\n                    id: sessionId\n                },\n                include: {\n                    users: {\n                        select: {\n                            id: true,\n                            name: true,\n                            image: true\n                        }\n                    }\n                }\n            });\n            const allParticipants = [\n                ...sessionParticipants\n            ];\n            if (session) {\n                allParticipants.push({\n                    users: session.users,\n                    userId: session.trainerId,\n                    sessionId,\n                    joinedAt: new Date(),\n                    id: `trainer_${session.trainerId}`,\n                    isActive: true,\n                    leftAt: null\n                });\n            }\n            // Filter to only those currently in the call room\n            return allParticipants.filter((p)=>room ? this.connectedUsers.has(p.userId) : false).map((p)=>({\n                    userId: p.userId,\n                    userName: p.users?.name || 'Unknown',\n                    image: p.users?.image,\n                    isTrainer: p.userId === session?.trainerId,\n                    isOnline: true\n                }));\n        } catch (error) {\n            console.error('Error getting call participants:', error);\n            return [];\n        }\n    }\n    // Public methods for external use\n    sendToUser(userId, event, data) {\n        const socketId = this.connectedUsers.get(userId);\n        if (socketId) {\n            this.io.to(socketId).emit(event, data);\n        }\n    }\n    sendToRoom(roomId, event, data) {\n        this.io.to(roomId).emit(event, data);\n    }\n    getUsersInRoom(roomId) {\n        const room = this.io.sockets.adapter.rooms.get(roomId);\n        return room ? Array.from(room) : [];\n    }\n    getConnectedUserCount() {\n        return this.connectedUsers.size;\n    }\n}\n// Export singleton instance\nlet socketServer = null;\nconst initializeSocketServer = (httpServer)=>{\n    if (!socketServer) {\n        socketServer = new SocketServer(httpServer);\n    }\n    return socketServer;\n};\nconst getSocketServer = ()=>{\n    return socketServer;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/core/socket/server.ts\n");

/***/ }),

/***/ "(rsc)/./src/core/utils/error-handling.ts":
/*!******************************************!*\
  !*** ./src/core/utils/error-handling.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthenticationError: () => (/* binding */ AuthenticationError),\n/* harmony export */   BaseAppError: () => (/* binding */ BaseAppError),\n/* harmony export */   ErrorCode: () => (/* binding */ ErrorCode),\n/* harmony export */   ExternalServiceError: () => (/* binding */ ExternalServiceError),\n/* harmony export */   ModerationError: () => (/* binding */ ModerationError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   RateLimitError: () => (/* binding */ RateLimitError),\n/* harmony export */   SafetyViolationError: () => (/* binding */ SafetyViolationError),\n/* harmony export */   ValidationError: () => (/* binding */ ValidationError),\n/* harmony export */   createErrorResponse: () => (/* binding */ createErrorResponse),\n/* harmony export */   createSuccessResponse: () => (/* binding */ createSuccessResponse),\n/* harmony export */   getFriendlyErrorMessage: () => (/* binding */ getFriendlyErrorMessage),\n/* harmony export */   logError: () => (/* binding */ logError),\n/* harmony export */   normalizeError: () => (/* binding */ normalizeError),\n/* harmony export */   safeAsync: () => (/* binding */ safeAsync),\n/* harmony export */   withErrorHandling: () => (/* binding */ withErrorHandling)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/ZodError.js\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_1__);\n/**\n * Centralized Error Management for Massimino\n * Comprehensive error handling with safety-focused logging and user feedback\n */ \n\n\n// ============================================================================\n// ERROR TYPE DEFINITIONS\n// ============================================================================\nvar ErrorCode = /*#__PURE__*/ function(ErrorCode) {\n    // Authentication & Authorization\n    ErrorCode[\"UNAUTHORIZED\"] = \"UNAUTHORIZED\";\n    ErrorCode[\"FORBIDDEN\"] = \"FORBIDDEN\";\n    ErrorCode[\"TOKEN_EXPIRED\"] = \"TOKEN_EXPIRED\";\n    ErrorCode[\"INVALID_CREDENTIALS\"] = \"INVALID_CREDENTIALS\";\n    ErrorCode[\"ACCOUNT_SUSPENDED\"] = \"ACCOUNT_SUSPENDED\";\n    ErrorCode[\"ACCOUNT_BANNED\"] = \"ACCOUNT_BANNED\";\n    // Validation\n    ErrorCode[\"VALIDATION_ERROR\"] = \"VALIDATION_ERROR\";\n    ErrorCode[\"INVALID_INPUT\"] = \"INVALID_INPUT\";\n    ErrorCode[\"MISSING_REQUIRED_FIELD\"] = \"MISSING_REQUIRED_FIELD\";\n    // Content Moderation\n    ErrorCode[\"CONTENT_BLOCKED\"] = \"CONTENT_BLOCKED\";\n    ErrorCode[\"CONTENT_FLAGGED\"] = \"CONTENT_FLAGGED\";\n    ErrorCode[\"MODERATION_ERROR\"] = \"MODERATION_ERROR\";\n    ErrorCode[\"SAFETY_VIOLATION\"] = \"SAFETY_VIOLATION\";\n    // Resource Management\n    ErrorCode[\"NOT_FOUND\"] = \"NOT_FOUND\";\n    ErrorCode[\"RESOURCE_EXISTS\"] = \"RESOURCE_EXISTS\";\n    ErrorCode[\"RESOURCE_LIMIT_EXCEEDED\"] = \"RESOURCE_LIMIT_EXCEEDED\";\n    // Rate Limiting\n    ErrorCode[\"RATE_LIMIT_EXCEEDED\"] = \"RATE_LIMIT_EXCEEDED\";\n    ErrorCode[\"TOO_MANY_REQUESTS\"] = \"TOO_MANY_REQUESTS\";\n    // File Handling\n    ErrorCode[\"FILE_TOO_LARGE\"] = \"FILE_TOO_LARGE\";\n    ErrorCode[\"INVALID_FILE_TYPE\"] = \"INVALID_FILE_TYPE\";\n    ErrorCode[\"UPLOAD_FAILED\"] = \"UPLOAD_FAILED\";\n    // Database\n    ErrorCode[\"DATABASE_ERROR\"] = \"DATABASE_ERROR\";\n    ErrorCode[\"CONSTRAINT_VIOLATION\"] = \"CONSTRAINT_VIOLATION\";\n    ErrorCode[\"CONNECTION_ERROR\"] = \"CONNECTION_ERROR\";\n    // External Services\n    ErrorCode[\"OPENAI_ERROR\"] = \"OPENAI_ERROR\";\n    ErrorCode[\"EMAIL_SERVICE_ERROR\"] = \"EMAIL_SERVICE_ERROR\";\n    ErrorCode[\"EXTERNAL_SERVICE_ERROR\"] = \"EXTERNAL_SERVICE_ERROR\";\n    // General\n    ErrorCode[\"INTERNAL_SERVER_ERROR\"] = \"INTERNAL_SERVER_ERROR\";\n    ErrorCode[\"BAD_REQUEST\"] = \"BAD_REQUEST\";\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    return ErrorCode;\n}({});\n// ============================================================================\n// CUSTOM ERROR CLASSES\n// ============================================================================\n/**\n * Base application error class\n */ class BaseAppError extends Error {\n    code;\n    statusCode;\n    details;\n    userMessage;\n    shouldLog;\n    shouldNotifyUser;\n    constructor(message, code, statusCode, options = {}){\n        super(message);\n        this.name = this.constructor.name;\n        this.code = code;\n        this.statusCode = statusCode;\n        this.details = options.details;\n        this.userMessage = options.userMessage || message;\n        this.shouldLog = options.shouldLog ?? true;\n        this.shouldNotifyUser = options.shouldNotifyUser ?? false;\n        // Maintains proper stack trace for where our error was thrown (only available on V8)\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n    }\n}\n/**\n * Validation error for input validation failures\n */ class ValidationError extends BaseAppError {\n    constructor(message, details){\n        super(message, \"VALIDATION_ERROR\", 400, {\n            details,\n            userMessage: 'Please check your input and try again.',\n            shouldLog: false\n        });\n    }\n}\n/**\n * Authentication error\n */ class AuthenticationError extends BaseAppError {\n    constructor(message, code = \"UNAUTHORIZED\"){\n        const statusCode = code === \"FORBIDDEN\" ? 403 : 401;\n        super(message, code, statusCode, {\n            userMessage: 'Authentication required. Please sign in and try again.',\n            shouldLog: true\n        });\n    }\n}\n/**\n * Content moderation error\n */ class ModerationError extends BaseAppError {\n    constructor(message, code = \"CONTENT_BLOCKED\", details){\n        super(message, code, 400, {\n            details,\n            userMessage: 'Your content violates our community guidelines. Please review and modify your submission.',\n            shouldLog: true,\n            shouldNotifyUser: true\n        });\n    }\n}\n/**\n * Safety violation error (more serious than moderation)\n */ class SafetyViolationError extends BaseAppError {\n    constructor(message, details){\n        super(message, \"SAFETY_VIOLATION\", 403, {\n            details,\n            userMessage: 'This action violates our safety policies and has been blocked.',\n            shouldLog: true,\n            shouldNotifyUser: true\n        });\n    }\n}\n/**\n * Resource not found error\n */ class NotFoundError extends BaseAppError {\n    constructor(resource, identifier){\n        const message = identifier ? `${resource} with identifier ${identifier} not found` : `${resource} not found`;\n        super(message, \"NOT_FOUND\", 404, {\n            userMessage: 'The requested resource could not be found.',\n            shouldLog: false\n        });\n    }\n}\n/**\n * Rate limiting error\n */ class RateLimitError extends BaseAppError {\n    constructor(limit, windowMs){\n        super(`Rate limit exceeded: ${limit} requests per ${windowMs}ms`, \"RATE_LIMIT_EXCEEDED\", 429, {\n            details: {\n                limit,\n                windowMs\n            },\n            userMessage: 'Too many requests. Please slow down and try again later.',\n            shouldLog: true\n        });\n    }\n}\n/**\n * External service error\n */ class ExternalServiceError extends BaseAppError {\n    constructor(service, message, details){\n        super(`${service} error: ${message}`, \"EXTERNAL_SERVICE_ERROR\", 503, {\n            details: {\n                service,\n                ...details\n            },\n            userMessage: 'A service is temporarily unavailable. Please try again later.',\n            shouldLog: true,\n            shouldNotifyUser: true\n        });\n    }\n}\n// ============================================================================\n// ERROR DETECTION AND TRANSFORMATION\n// ============================================================================\n/**\n * Convert unknown errors to standardized AppError format\n */ function normalizeError(error, context) {\n    // Already an AppError\n    if (error instanceof BaseAppError) {\n        return error;\n    }\n    // Zod validation errors\n    if (error instanceof zod__WEBPACK_IMPORTED_MODULE_2__.ZodError) {\n        const issues = error.issues.map((issue)=>({\n                field: issue.path.join('.'),\n                message: issue.message,\n                code: issue.code\n            }));\n        return new ValidationError('Validation failed', {\n            issues\n        });\n    }\n    // Prisma database errors\n    if (error instanceof _prisma_client__WEBPACK_IMPORTED_MODULE_1__.Prisma.PrismaClientKnownRequestError) {\n        return handlePrismaError(error, context);\n    }\n    // Standard JavaScript errors\n    if (error instanceof Error) {\n        // Check for specific error patterns\n        if (error.message.includes('fetch failed') || error.message.includes('ENOTFOUND')) {\n            return new ExternalServiceError('Network', error.message);\n        }\n        if (error.message.includes('OpenAI')) {\n            return new ExternalServiceError('OpenAI', error.message, {\n                originalError: error.message\n            });\n        }\n        // Generic error conversion\n        return new BaseAppError(error.message, \"INTERNAL_SERVER_ERROR\", 500, {\n            details: {\n                originalError: error.message,\n                stack: error.stack\n            },\n            userMessage: 'An unexpected error occurred. Please try again.',\n            shouldLog: true\n        });\n    }\n    // Unknown error types\n    return new BaseAppError('Unknown error occurred', \"UNKNOWN_ERROR\", 500, {\n        details: {\n            error: String(error)\n        },\n        userMessage: 'An unexpected error occurred. Please try again.',\n        shouldLog: true\n    });\n}\n/**\n * Handle Prisma database errors\n */ function handlePrismaError(error, _context) {\n    switch(error.code){\n        case 'P2002':\n            const field = error.meta?.target?.join(', ') || 'field';\n            return new BaseAppError(`Duplicate entry for ${field}`, \"CONSTRAINT_VIOLATION\", 409, {\n                details: {\n                    field,\n                    constraint: 'unique'\n                },\n                userMessage: `This ${field} is already taken. Please choose another.`,\n                shouldLog: false\n            });\n        case 'P2003':\n            return new BaseAppError('Referenced record does not exist', \"CONSTRAINT_VIOLATION\", 400, {\n                details: {\n                    constraint: 'foreign_key'\n                },\n                userMessage: 'Invalid reference to another record.',\n                shouldLog: true\n            });\n        case 'P2004':\n            return new BaseAppError('Database constraint violation', \"CONSTRAINT_VIOLATION\", 400, {\n                userMessage: 'The operation violates database constraints.',\n                shouldLog: true\n            });\n        case 'P2025':\n            return new NotFoundError('Record');\n        case 'P1001':\n        case 'P1002':\n            return new BaseAppError('Database connection error', \"CONNECTION_ERROR\", 503, {\n                userMessage: 'Database is temporarily unavailable. Please try again later.',\n                shouldLog: true,\n                shouldNotifyUser: true\n            });\n        default:\n            return new BaseAppError('Database error', \"DATABASE_ERROR\", 500, {\n                details: {\n                    prismaCode: error.code,\n                    prismaMessage: error.message\n                },\n                userMessage: 'A database error occurred. Please try again.',\n                shouldLog: true\n            });\n    }\n}\n/**\n * Log errors with appropriate level and detail\n */ function logError(error, context) {\n    if (!error.shouldLog) return;\n    const logEntry = {\n        timestamp: new Date(),\n        level: getLogLevel(error),\n        message: error.message,\n        code: error.code,\n        statusCode: error.statusCode,\n        details: error.details\n    };\n    if (context) {\n        logEntry.context = context;\n    }\n    if (error.stack) {\n        logEntry.stack = error.stack;\n    }\n    // Log to console (in production, this would go to a logging service)\n    switch(logEntry.level){\n        case 'error':\n            console.error('🚨 Application Error:', logEntry);\n            break;\n        case 'warn':\n            console.warn('⚠️ Application Warning:', logEntry);\n            break;\n        case 'info':\n            console.info('ℹ️ Application Info:', logEntry);\n            break;\n    }\n    // In production, also send to monitoring service\n    if (false) {}\n}\n/**\n * Determine appropriate log level based on error\n */ function getLogLevel(error) {\n    if (error.statusCode >= 500) return 'error';\n    if (error.statusCode >= 400) return 'warn';\n    return 'info';\n}\n/**\n * Send error to monitoring service (placeholder)\n */ function sendToMonitoringService(logEntry) {\n    // In production, this would send to Sentry, DataDog, etc.\n    // For now, just a placeholder\n    if (process.env.SENTRY_DSN && logEntry.level === 'error') {\n        // Sentry integration would go here\n        console.log('📊 Would send to monitoring service:', {\n            message: logEntry.message,\n            code: logEntry.code,\n            userId: logEntry.context?.userId\n        });\n    }\n}\n// ============================================================================\n// ERROR RESPONSE HELPERS\n// ============================================================================\n/**\n * Create standardized error response for API endpoints\n */ function createErrorResponse(error, context) {\n    // Log the error\n    logError(error, context);\n    // Create safe response for user\n    const responseBody = {\n        success: false,\n        error: {\n            code: error.code,\n            message: error.userMessage || error.message,\n            ... true && {\n                details: error.details,\n                stack: error.stack\n            }\n        },\n        ...context?.requestId && {\n            requestId: context.requestId\n        }\n    };\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(responseBody, {\n        status: error.statusCode,\n        headers: {\n            'X-Error-Code': error.code,\n            'X-Request-ID': context?.requestId || 'unknown'\n        }\n    });\n}\n/**\n * Create success response\n */ function createSuccessResponse(data, options = {}) {\n    const responseBody = {\n        success: true,\n        data,\n        ...options.message && {\n            message: options.message\n        },\n        ...options.pagination && {\n            pagination: options.pagination\n        },\n        ...options.requestId && {\n            requestId: options.requestId\n        }\n    };\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(responseBody);\n}\n// ============================================================================\n// ERROR HANDLING MIDDLEWARE\n// ============================================================================\n/**\n * Async error wrapper for API routes\n */ function withErrorHandling(handler) {\n    return async (...args)=>{\n        try {\n            return await handler(...args);\n        } catch (error) {\n            const context = {\n                timestamp: new Date()\n            };\n            const normalizedError = normalizeError(error, context);\n            return createErrorResponse(normalizedError, context);\n        }\n    };\n}\n/**\n * Try-catch wrapper with error normalization\n */ async function safeAsync(operation, context) {\n    try {\n        const data = await operation();\n        return {\n            data\n        };\n    } catch (error) {\n        const normalizedError = normalizeError(error, context);\n        logError(normalizedError, context);\n        return {\n            error: normalizedError\n        };\n    }\n}\n// ============================================================================\n// USER-FRIENDLY ERROR MESSAGES\n// ============================================================================\n/**\n * Get user-friendly error message for common scenarios\n */ function getFriendlyErrorMessage(code, _context) {\n    const messages = {\n        [\"UNAUTHORIZED\"]: 'Please sign in to continue.',\n        [\"FORBIDDEN\"]: 'You don\\'t have permission to perform this action.',\n        [\"TOKEN_EXPIRED\"]: 'Your session has expired. Please sign in again.',\n        [\"INVALID_CREDENTIALS\"]: 'Invalid email or password.',\n        [\"ACCOUNT_SUSPENDED\"]: 'Your account has been temporarily suspended. Contact support for assistance.',\n        [\"ACCOUNT_BANNED\"]: 'Your account has been permanently banned.',\n        [\"VALIDATION_ERROR\"]: 'Please check your input and try again.',\n        [\"INVALID_INPUT\"]: 'Some information you provided is not valid.',\n        [\"MISSING_REQUIRED_FIELD\"]: 'Please fill in all required fields.',\n        [\"CONTENT_BLOCKED\"]: 'Your content violates our community guidelines and has been blocked.',\n        [\"CONTENT_FLAGGED\"]: 'Your content has been flagged for review.',\n        [\"MODERATION_ERROR\"]: 'Unable to process your content. Please try again.',\n        [\"SAFETY_VIOLATION\"]: 'This action violates our safety policies.',\n        [\"NOT_FOUND\"]: 'The requested resource could not be found.',\n        [\"RESOURCE_EXISTS\"]: 'This resource already exists.',\n        [\"RESOURCE_LIMIT_EXCEEDED\"]: 'You have reached your limit for this resource.',\n        [\"RATE_LIMIT_EXCEEDED\"]: 'Too many requests. Please slow down and try again.',\n        [\"TOO_MANY_REQUESTS\"]: 'Too many requests. Please wait before trying again.',\n        [\"FILE_TOO_LARGE\"]: 'The file you uploaded is too large.',\n        [\"INVALID_FILE_TYPE\"]: 'This file type is not supported.',\n        [\"UPLOAD_FAILED\"]: 'File upload failed. Please try again.',\n        [\"DATABASE_ERROR\"]: 'A database error occurred. Please try again.',\n        [\"CONSTRAINT_VIOLATION\"]: 'This action would violate data constraints.',\n        [\"CONNECTION_ERROR\"]: 'Unable to connect to the database.',\n        [\"OPENAI_ERROR\"]: 'Content moderation service is temporarily unavailable.',\n        [\"EMAIL_SERVICE_ERROR\"]: 'Unable to send email at this time.',\n        [\"EXTERNAL_SERVICE_ERROR\"]: 'An external service is temporarily unavailable.',\n        [\"INTERNAL_SERVER_ERROR\"]: 'An unexpected error occurred. Please try again.',\n        [\"BAD_REQUEST\"]: 'Invalid request. Please check your input.',\n        [\"UNKNOWN_ERROR\"]: 'An unknown error occurred. Please try again.'\n    };\n    return messages[code] || 'An error occurred. Please try again.';\n}\n// ============================================================================\n// EXPORT UTILITIES\n// ============================================================================\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/core/utils/error-handling.ts\n");

/***/ }),

/***/ "(rsc)/./src/core/utils/validation.ts":
/*!**************************************!*\
  !*** ./src/core/utils/validation.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiResponseSchema: () => (/* binding */ ApiResponseSchema),\n/* harmony export */   CommentCreationSchema: () => (/* binding */ CommentCreationSchema),\n/* harmony export */   CommunityCreationSchema: () => (/* binding */ CommunityCreationSchema),\n/* harmony export */   ContentLimits: () => (/* binding */ ContentLimits),\n/* harmony export */   DirectMessageSchema: () => (/* binding */ DirectMessageSchema),\n/* harmony export */   FileUploadSchema: () => (/* binding */ FileUploadSchema),\n/* harmony export */   ModerationActionSchema: () => (/* binding */ ModerationActionSchema),\n/* harmony export */   PaginationSchema: () => (/* binding */ PaginationSchema),\n/* harmony export */   PostCreationSchema: () => (/* binding */ PostCreationSchema),\n/* harmony export */   ReportSubmissionSchema: () => (/* binding */ ReportSubmissionSchema),\n/* harmony export */   SearchSchema: () => (/* binding */ SearchSchema),\n/* harmony export */   TrainerProfileSchema: () => (/* binding */ TrainerProfileSchema),\n/* harmony export */   UserProfileUpdateSchema: () => (/* binding */ UserProfileUpdateSchema),\n/* harmony export */   UserRegistrationSchema: () => (/* binding */ UserRegistrationSchema),\n/* harmony export */   ValidationPatterns: () => (/* binding */ ValidationPatterns),\n/* harmony export */   sanitizeTextInput: () => (/* binding */ sanitizeTextInput),\n/* harmony export */   validateContentSafety: () => (/* binding */ validateContentSafety),\n/* harmony export */   validateHashtags: () => (/* binding */ validateHashtags),\n/* harmony export */   validateMentions: () => (/* binding */ validateMentions)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * Input Validation Schemas for Massimino\n * Comprehensive validation with safety-first approach using Zod\n */ \n\n// ============================================================================\n// BASIC VALIDATION HELPERS\n// ============================================================================\n/**\n * Common validation patterns and constraints\n */ const ValidationPatterns = {\n    // Text content validation\n    EMAIL: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n    PHONE: /^\\+?[\\d\\s\\-\\(\\)]{10,15}$/,\n    URL: /^https?:\\/\\/[^\\s$.?#].[^\\s]*$/,\n    // Fitness-specific patterns\n    USERNAME: /^[a-zA-Z0-9_]{3,20}$/,\n    HASHTAG: /^#[a-zA-Z0-9_]{1,30}$/,\n    MENTION: /^@[a-zA-Z0-9_]{1,20}$/,\n    // Safety patterns (things to watch for)\n    SUSPICIOUS_CONTACT: /(\\b(call|text|dm|message)\\s+me\\b|@gmail\\.com|\\d{3}[-.]?\\d{3}[-.]?\\d{4})/i,\n    EXTERNAL_LINKS: /\\b(?:bit\\.ly|tinyurl|t\\.co|goo\\.gl|short\\.link)\\b/i,\n    CRYPTOCURRENCY: /\\b(bitcoin|btc|ethereum|eth|crypto|NFT|blockchain)\\b/i\n};\n/**\n * Content length constraints\n */ const ContentLimits = {\n    POST_TITLE: {\n        min: 1,\n        max: 200\n    },\n    POST_CONTENT: {\n        min: 1,\n        max: 5000\n    },\n    COMMENT: {\n        min: 1,\n        max: 1000\n    },\n    MESSAGE: {\n        min: 1,\n        max: 2000\n    },\n    BIO: {\n        min: 0,\n        max: 500\n    },\n    USERNAME: {\n        min: 3,\n        max: 20\n    },\n    NAME: {\n        min: 1,\n        max: 50\n    },\n    EMAIL: {\n        min: 5,\n        max: 100\n    }\n};\n// ============================================================================\n// USER VALIDATION SCHEMAS\n// ============================================================================\n/**\n * User registration validation\n */ const UserRegistrationSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(ContentLimits.NAME.min, 'Name is required').max(ContentLimits.NAME.max, 'Name is too long').regex(/^[a-zA-Z\\s\\-'\\.]+$/, 'Name contains invalid characters').transform((str)=>str.trim()),\n    email: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(ContentLimits.EMAIL.min, 'Email is required').max(ContentLimits.EMAIL.max, 'Email is too long').email('Invalid email format').toLowerCase(),\n    role: zod__WEBPACK_IMPORTED_MODULE_1__.nativeEnum(_prisma_client__WEBPACK_IMPORTED_MODULE_0__.UserRole).default(_prisma_client__WEBPACK_IMPORTED_MODULE_0__.UserRole.CLIENT),\n    // Safety agreement\n    agreeToGuidelines: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().refine((val)=>val === true, 'You must agree to the community guidelines'),\n    agreeToTerms: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().refine((val)=>val === true, 'You must agree to the terms of service'),\n    // Optional fields\n    profileImage: zod__WEBPACK_IMPORTED_MODULE_1__.string().url('Invalid image URL').optional(),\n    timezone: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional()\n});\n/**\n * User profile update validation\n */ const UserProfileUpdateSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(ContentLimits.NAME.min).max(ContentLimits.NAME.max).regex(/^[a-zA-Z\\s\\-'\\.]+$/, 'Name contains invalid characters').transform((str)=>str.trim()).optional(),\n    bio: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(ContentLimits.BIO.max, 'Bio is too long').transform((str)=>str.trim()).optional(),\n    profileImage: zod__WEBPACK_IMPORTED_MODULE_1__.string().url('Invalid image URL').optional(),\n    // Privacy settings\n    profileVisibility: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'PUBLIC',\n        'PRIVATE',\n        'TRAINERS_ONLY'\n    ]).optional(),\n    showRealName: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional(),\n    acceptDMs: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional(),\n    onlyTrainerDMs: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional()\n});\n/**\n * Trainer profile validation\n */ const TrainerProfileSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    bio: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(50, 'Trainer bio must be at least 50 characters').max(ContentLimits.BIO.max, 'Bio is too long').transform((str)=>str.trim()),\n    specializations: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string()).min(1, 'At least one specialization is required').max(10, 'Maximum 10 specializations allowed').refine((arr)=>arr.every((spec)=>spec.length >= 3 && spec.length <= 50), 'Each specialization must be 3-50 characters'),\n    certifications: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.object({\n        name: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Certification name is required'),\n        organization: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Organization is required'),\n        date: zod__WEBPACK_IMPORTED_MODULE_1__.string().datetime('Invalid certification date'),\n        expirationDate: zod__WEBPACK_IMPORTED_MODULE_1__.string().datetime().optional(),\n        credentialUrl: zod__WEBPACK_IMPORTED_MODULE_1__.string().url().optional()\n    })).min(1, 'At least one certification is required'),\n    yearsExperience: zod__WEBPACK_IMPORTED_MODULE_1__.number().min(0, 'Years of experience cannot be negative').max(50, 'Years of experience seems unrealistic'),\n    hourlyRate: zod__WEBPACK_IMPORTED_MODULE_1__.number().min(10, 'Minimum hourly rate is $10').max(500, 'Maximum hourly rate is $500').optional()\n});\n// ============================================================================\n// CONTENT VALIDATION SCHEMAS\n// ============================================================================\n/**\n * Post creation validation\n */ const PostCreationSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    title: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(ContentLimits.POST_TITLE.min, 'Title is required').max(ContentLimits.POST_TITLE.max, 'Title is too long').transform((str)=>str.trim()).refine((str)=>!ValidationPatterns.SUSPICIOUS_CONTACT.test(str), 'Title contains potentially inappropriate contact information'),\n    content: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(ContentLimits.POST_CONTENT.min, 'Content is required').max(ContentLimits.POST_CONTENT.max, 'Content is too long').transform((str)=>str.trim()).refine((str)=>str.split('\\n').length <= 100, 'Too many line breaks in content'),\n    communityId: zod__WEBPACK_IMPORTED_MODULE_1__.string().uuid('Invalid community ID').optional(),\n    tags: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string().regex(ValidationPatterns.HASHTAG)).max(10, 'Maximum 10 tags allowed').optional(),\n    attachments: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n            'IMAGE',\n            'VIDEO',\n            'DOCUMENT'\n        ]),\n        url: zod__WEBPACK_IMPORTED_MODULE_1__.string().url('Invalid attachment URL'),\n        name: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1).max(100),\n        size: zod__WEBPACK_IMPORTED_MODULE_1__.number().max(50 * 1024 * 1024)\n    })).max(5, 'Maximum 5 attachments allowed').optional()\n});\n/**\n * Comment creation validation\n */ const CommentCreationSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    content: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(ContentLimits.COMMENT.min, 'Comment cannot be empty').max(ContentLimits.COMMENT.max, 'Comment is too long').transform((str)=>str.trim()).refine((str)=>!ValidationPatterns.SUSPICIOUS_CONTACT.test(str), 'Comment contains potentially inappropriate contact information'),\n    postId: zod__WEBPACK_IMPORTED_MODULE_1__.string().uuid('Invalid post ID'),\n    parentId: zod__WEBPACK_IMPORTED_MODULE_1__.string().uuid('Invalid parent comment ID').optional()\n});\n/**\n * Direct message validation\n */ const DirectMessageSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    content: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(ContentLimits.MESSAGE.min, 'Message cannot be empty').max(ContentLimits.MESSAGE.max, 'Message is too long').transform((str)=>str.trim()),\n    recipientId: zod__WEBPACK_IMPORTED_MODULE_1__.string().uuid('Invalid recipient ID'),\n    attachments: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n            'IMAGE',\n            'DOCUMENT'\n        ]),\n        url: zod__WEBPACK_IMPORTED_MODULE_1__.string().url(),\n        name: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1).max(100)\n    })).max(3, 'Maximum 3 attachments allowed').optional()\n});\n/**\n * Community creation validation\n */ const CommunityCreationSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(3, 'Community name must be at least 3 characters').max(50, 'Community name is too long').regex(/^[a-zA-Z0-9\\s\\-_]+$/, 'Community name contains invalid characters').transform((str)=>str.trim()),\n    description: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(10, 'Description must be at least 10 characters').max(500, 'Description is too long').transform((str)=>str.trim()),\n    type: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'PUBLIC',\n        'PRIVATE',\n        'TRAINER'\n    ]),\n    rules: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string().min(5).max(200)).max(10, 'Maximum 10 community rules allowed').optional(),\n    category: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'GENERAL_FITNESS',\n        'STRENGTH_TRAINING',\n        'CARDIO',\n        'YOGA',\n        'NUTRITION',\n        'WEIGHT_LOSS',\n        'MUSCLE_BUILDING',\n        'ENDURANCE',\n        'BEGINNERS',\n        'ADVANCED',\n        'WOMENS_FITNESS',\n        'MENS_FITNESS'\n    ])\n});\n// ============================================================================\n// MODERATION VALIDATION SCHEMAS\n// ============================================================================\n/**\n * Report submission validation\n */ const ReportSubmissionSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    reportedUserId: zod__WEBPACK_IMPORTED_MODULE_1__.string().uuid('Invalid user ID'),\n    category: zod__WEBPACK_IMPORTED_MODULE_1__.nativeEnum(_prisma_client__WEBPACK_IMPORTED_MODULE_0__.ViolationType),\n    description: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(10, 'Please provide a detailed description').max(1000, 'Description is too long').transform((str)=>str.trim()),\n    evidence: zod__WEBPACK_IMPORTED_MODULE_1__.object({\n        screenshots: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string().url()).max(5).optional(),\n        messageIds: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string().uuid()).max(10).optional(),\n        additionalContext: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(500).optional()\n    }).optional(),\n    contentId: zod__WEBPACK_IMPORTED_MODULE_1__.string().uuid().optional(),\n    contentType: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'POST',\n        'COMMENT',\n        'MESSAGE',\n        'PROFILE'\n    ]).optional()\n});\n/**\n * Moderation action validation\n */ const ModerationActionSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    userId: zod__WEBPACK_IMPORTED_MODULE_1__.string().uuid('Invalid user ID'),\n    action: zod__WEBPACK_IMPORTED_MODULE_1__.nativeEnum(_prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction),\n    reason: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(10, 'Please provide a detailed reason').max(500, 'Reason is too long').transform((str)=>str.trim()),\n    duration: zod__WEBPACK_IMPORTED_MODULE_1__.number().min(1, 'Duration must be positive').max(8760, 'Maximum duration is 1 year (8760 hours)').optional(),\n    severity: zod__WEBPACK_IMPORTED_MODULE_1__.number().min(1).max(5),\n    violationType: zod__WEBPACK_IMPORTED_MODULE_1__.nativeEnum(_prisma_client__WEBPACK_IMPORTED_MODULE_0__.ViolationType),\n    evidence: zod__WEBPACK_IMPORTED_MODULE_1__.object({\n        contentId: zod__WEBPACK_IMPORTED_MODULE_1__.string().uuid().optional(),\n        screenshots: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string().url()).optional(),\n        moderationLogId: zod__WEBPACK_IMPORTED_MODULE_1__.string().uuid().optional()\n    }).optional()\n});\n// ============================================================================\n// SEARCH AND FILTERING SCHEMAS\n// ============================================================================\n/**\n * Search validation\n */ const SearchSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    query: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Search query is required').max(100, 'Search query is too long').transform((str)=>str.trim()),\n    type: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'POSTS',\n        'USERS',\n        'COMMUNITIES',\n        'ALL'\n    ]).default('ALL'),\n    filters: zod__WEBPACK_IMPORTED_MODULE_1__.object({\n        category: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional(),\n        dateFrom: zod__WEBPACK_IMPORTED_MODULE_1__.string().datetime().optional(),\n        dateTo: zod__WEBPACK_IMPORTED_MODULE_1__.string().datetime().optional(),\n        userRole: zod__WEBPACK_IMPORTED_MODULE_1__.nativeEnum(_prisma_client__WEBPACK_IMPORTED_MODULE_0__.UserRole).optional()\n    }).optional(),\n    page: zod__WEBPACK_IMPORTED_MODULE_1__.number().min(1).max(100).default(1),\n    limit: zod__WEBPACK_IMPORTED_MODULE_1__.number().min(1).max(100).default(20)\n});\n/**\n * Pagination validation\n */ const PaginationSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    page: zod__WEBPACK_IMPORTED_MODULE_1__.number().min(1, 'Page must be at least 1').default(1),\n    limit: zod__WEBPACK_IMPORTED_MODULE_1__.number().min(1, 'Limit must be at least 1').max(100, 'Maximum limit is 100').default(20),\n    sortBy: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional(),\n    sortOrder: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'asc',\n        'desc'\n    ]).default('desc')\n});\n// ============================================================================\n// API REQUEST VALIDATION\n// ============================================================================\n/**\n * Generic API response validation\n */ const ApiResponseSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    success: zod__WEBPACK_IMPORTED_MODULE_1__.boolean(),\n    data: zod__WEBPACK_IMPORTED_MODULE_1__.any().optional(),\n    error: zod__WEBPACK_IMPORTED_MODULE_1__.object({\n        code: zod__WEBPACK_IMPORTED_MODULE_1__.string(),\n        message: zod__WEBPACK_IMPORTED_MODULE_1__.string(),\n        details: zod__WEBPACK_IMPORTED_MODULE_1__.any().optional()\n    }).optional(),\n    pagination: zod__WEBPACK_IMPORTED_MODULE_1__.object({\n        page: zod__WEBPACK_IMPORTED_MODULE_1__.number(),\n        limit: zod__WEBPACK_IMPORTED_MODULE_1__.number(),\n        total: zod__WEBPACK_IMPORTED_MODULE_1__.number(),\n        totalPages: zod__WEBPACK_IMPORTED_MODULE_1__.number()\n    }).optional()\n});\n/**\n * File upload validation\n */ const FileUploadSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    file: zod__WEBPACK_IMPORTED_MODULE_1__.object({\n        name: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Filename is required'),\n        size: zod__WEBPACK_IMPORTED_MODULE_1__.number().min(1, 'File cannot be empty').max(50 * 1024 * 1024, 'File too large (max 50MB)'),\n        type: zod__WEBPACK_IMPORTED_MODULE_1__.string().refine((type)=>[\n                'image/jpeg',\n                'image/png',\n                'image/webp',\n                'image/gif',\n                'video/mp4',\n                'video/webm',\n                'application/pdf',\n                'text/plain'\n            ].includes(type), 'File type not allowed')\n    }),\n    category: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'PROFILE_IMAGE',\n        'POST_ATTACHMENT',\n        'MESSAGE_ATTACHMENT',\n        'CERTIFICATE'\n    ]),\n    alt: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(200, 'Alt text too long').optional()\n});\n// ============================================================================\n// VALIDATION UTILITIES\n// ============================================================================\n/**\n * Validate content for safety issues\n */ function validateContentSafety(content) {\n    const issues = [];\n    const suggestions = [];\n    // Check for suspicious contact patterns\n    if (ValidationPatterns.SUSPICIOUS_CONTACT.test(content)) {\n        issues.push('Content contains potential contact information sharing');\n        suggestions.push('Avoid sharing personal contact details in public posts');\n    }\n    // Check for external links\n    if (ValidationPatterns.EXTERNAL_LINKS.test(content)) {\n        issues.push('Content contains potentially unsafe shortened links');\n        suggestions.push('Use full URLs instead of shortened links for transparency');\n    }\n    // Check for off-topic content\n    if (ValidationPatterns.CRYPTOCURRENCY.test(content)) {\n        issues.push('Content may be off-topic for fitness platform');\n        suggestions.push('Keep discussions focused on fitness, health, and wellness');\n    }\n    // Check content length and quality\n    if (content.length < 10) {\n        issues.push('Content is very short');\n        suggestions.push('Provide more detailed information to help the community');\n    }\n    // Check for excessive caps\n    const capsRatio = (content.match(/[A-Z]/g) || []).length / content.length;\n    if (capsRatio > 0.5 && content.length > 20) {\n        issues.push('Excessive use of capital letters');\n        suggestions.push('Use normal capitalization for better readability');\n    }\n    return {\n        isValid: issues.length === 0,\n        issues,\n        suggestions\n    };\n}\n/**\n * Clean and sanitize text input\n */ function sanitizeTextInput(text) {\n    return text.trim().replace(/\\s+/g, ' ') // Replace multiple spaces with single space\n    .replace(/\\n{3,}/g, '\\n\\n') // Replace excessive line breaks\n    .replace(/[^\\w\\s\\-_.,:;!?@#()[\\]{}'\"]/g, '') // Remove special characters except common ones\n    .substring(0, 5000); // Truncate to max length\n}\n/**\n * Extract and validate mentions\n */ function validateMentions(content) {\n    const mentionMatches = content.match(/@(\\w+)/g) || [];\n    const mentions = mentionMatches.map((m)=>m.substring(1));\n    const errors = [];\n    if (mentions.length > 10) {\n        errors.push('Too many mentions (maximum 10 allowed)');\n    }\n    mentions.forEach((mention)=>{\n        if (!ValidationPatterns.USERNAME.test(mention)) {\n            errors.push(`Invalid username format: @${mention}`);\n        }\n    });\n    return {\n        mentions,\n        isValid: errors.length === 0,\n        errors\n    };\n}\n/**\n * Validate hashtags\n */ function validateHashtags(content) {\n    const hashtagMatches = content.match(/#(\\w+)/g) || [];\n    const hashtags = hashtagMatches.map((h)=>h.toLowerCase());\n    const errors = [];\n    if (hashtags.length > 20) {\n        errors.push('Too many hashtags (maximum 20 allowed)');\n    }\n    hashtags.forEach((hashtag)=>{\n        if (hashtag.length < 2) {\n            errors.push(`Hashtag too short: ${hashtag}`);\n        }\n        if (hashtag.length > 30) {\n            errors.push(`Hashtag too long: ${hashtag}`);\n        }\n    });\n    return {\n        hashtags,\n        isValid: errors.length === 0,\n        errors\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/core/utils/validation.ts\n");

/***/ }),

/***/ "(rsc)/./src/core/utils/workout-validation.ts":
/*!**********************************************!*\
  !*** ./src/core/utils/workout-validation.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCoachFeedbackRequestSchema: () => (/* binding */ addCoachFeedbackRequestSchema),\n/* harmony export */   addPersonalRecordSchema: () => (/* binding */ addPersonalRecordSchema),\n/* harmony export */   addProgressMetricSchema: () => (/* binding */ addProgressMetricSchema),\n/* harmony export */   createExerciseSchema: () => (/* binding */ createExerciseSchema),\n/* harmony export */   createExerciseVariationSchema: () => (/* binding */ createExerciseVariationSchema),\n/* harmony export */   createTrainingProgramSchema: () => (/* binding */ createTrainingProgramSchema),\n/* harmony export */   createWorkoutEntriesRequestSchema: () => (/* binding */ createWorkoutEntriesRequestSchema),\n/* harmony export */   createWorkoutLogEntrySchema: () => (/* binding */ createWorkoutLogEntrySchema),\n/* harmony export */   createWorkoutSessionSchema: () => (/* binding */ createWorkoutSessionSchema),\n/* harmony export */   createWorkoutTemplateSchema: () => (/* binding */ createWorkoutTemplateSchema),\n/* harmony export */   dateRangeSchema: () => (/* binding */ dateRangeSchema),\n/* harmony export */   dateStringSchema: () => (/* binding */ dateStringSchema),\n/* harmony export */   deleteWorkoutEntryRequestSchema: () => (/* binding */ deleteWorkoutEntryRequestSchema),\n/* harmony export */   durationStringSchema: () => (/* binding */ durationStringSchema),\n/* harmony export */   enhancedCreateExerciseSchema: () => (/* binding */ enhancedCreateExerciseSchema),\n/* harmony export */   enhancedUpdateExerciseSchema: () => (/* binding */ enhancedUpdateExerciseSchema),\n/* harmony export */   exerciseSchema: () => (/* binding */ exerciseSchema),\n/* harmony export */   exerciseSearchOptionsSchema: () => (/* binding */ exerciseSearchOptionsSchema),\n/* harmony export */   intensityStringSchema: () => (/* binding */ intensityStringSchema),\n/* harmony export */   intensityTypeSchema: () => (/* binding */ intensityTypeSchema),\n/* harmony export */   paginationSchema: () => (/* binding */ paginationSchema),\n/* harmony export */   programWeekSchema: () => (/* binding */ programWeekSchema),\n/* harmony export */   rateProgramSchema: () => (/* binding */ rateProgramSchema),\n/* harmony export */   rateTemplateSchema: () => (/* binding */ rateTemplateSchema),\n/* harmony export */   setTypeSchema: () => (/* binding */ setTypeSchema),\n/* harmony export */   tempoStringSchema: () => (/* binding */ tempoStringSchema),\n/* harmony export */   timeStringSchema: () => (/* binding */ timeStringSchema),\n/* harmony export */   updateExerciseSchema: () => (/* binding */ updateExerciseSchema),\n/* harmony export */   updateExerciseVariationSchema: () => (/* binding */ updateExerciseVariationSchema),\n/* harmony export */   updateProgramProgressSchema: () => (/* binding */ updateProgramProgressSchema),\n/* harmony export */   updateTrainingProgramSchema: () => (/* binding */ updateTrainingProgramSchema),\n/* harmony export */   updateWorkoutEntryRequestSchema: () => (/* binding */ updateWorkoutEntryRequestSchema),\n/* harmony export */   updateWorkoutLogEntrySchema: () => (/* binding */ updateWorkoutLogEntrySchema),\n/* harmony export */   updateWorkoutSessionSchema: () => (/* binding */ updateWorkoutSessionSchema),\n/* harmony export */   updateWorkoutTemplateSchema: () => (/* binding */ updateWorkoutTemplateSchema),\n/* harmony export */   validateDateString: () => (/* binding */ validateDateString),\n/* harmony export */   validateIntensityString: () => (/* binding */ validateIntensityString),\n/* harmony export */   validateTempoString: () => (/* binding */ validateTempoString),\n/* harmony export */   validateTimeString: () => (/* binding */ validateTimeString),\n/* harmony export */   validateWeightString: () => (/* binding */ validateWeightString),\n/* harmony export */   weightStringSchema: () => (/* binding */ weightStringSchema),\n/* harmony export */   weightUnitSchema: () => (/* binding */ weightUnitSchema),\n/* harmony export */   workoutFilterOptionsSchema: () => (/* binding */ workoutFilterOptionsSchema),\n/* harmony export */   workoutLogEntryBaseSchema: () => (/* binding */ workoutLogEntryBaseSchema),\n/* harmony export */   workoutLogEntrySchema: () => (/* binding */ workoutLogEntrySchema),\n/* harmony export */   workoutSessionFilterOptionsSchema: () => (/* binding */ workoutSessionFilterOptionsSchema),\n/* harmony export */   workoutSessionSchema: () => (/* binding */ workoutSessionSchema),\n/* harmony export */   workoutSortOptionsSchema: () => (/* binding */ workoutSortOptionsSchema),\n/* harmony export */   workoutStatsRequestSchema: () => (/* binding */ workoutStatsRequestSchema),\n/* harmony export */   workoutStatsResponseSchema: () => (/* binding */ workoutStatsResponseSchema),\n/* harmony export */   workoutTemplateExerciseSchema: () => (/* binding */ workoutTemplateExerciseSchema)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * Workout Log Validation Schemas for Massimino\n * Comprehensive validation using Zod for workout tracking and management\n */ \n\n// ============================================================================\n// BASE SCHEMAS\n// ============================================================================\n/**\n * Date string validation (YYYY-MM-DD format)\n */ const dateStringSchema = zod__WEBPACK_IMPORTED_MODULE_1__.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, {\n    message: 'Date must be in YYYY-MM-DD format'\n});\n/**\n * Time string validation (HH:MM format)\n */ const timeStringSchema = zod__WEBPACK_IMPORTED_MODULE_1__.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/, {\n    message: 'Time must be in HH:MM format'\n});\n/**\n * Duration string validation (HH:MM:SS format)\n */ const durationStringSchema = zod__WEBPACK_IMPORTED_MODULE_1__.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/, {\n    message: 'Duration must be in HH:MM:SS format'\n});\n/**\n * Weight string validation (single number or comma-separated)\n */ const weightStringSchema = zod__WEBPACK_IMPORTED_MODULE_1__.string().refine((value)=>{\n    const weights = value.split(',').map((w)=>w.trim());\n    return weights.every((w)=>!isNaN(parseFloat(w)) && parseFloat(w) > 0);\n}, {\n    message: 'Weight must be a single number or comma-separated numbers (e.g., \"40\" or \"40,45,50\")'\n});\n/**\n * Intensity string validation (%1RM or RPE format)\n */ const intensityStringSchema = zod__WEBPACK_IMPORTED_MODULE_1__.string().refine((value)=>{\n    // Check for percentage format (e.g., \"85%\")\n    if (/^\\d{1,3}%$/.test(value)) {\n        const percentage = parseInt(value);\n        return percentage >= 1 && percentage <= 100;\n    }\n    // Check for RPE format (e.g., \"RPE 8\" or \"8\")\n    if (/^(RPE\\s?)?[1-9](\\.[0-9])?$/.test(value)) {\n        const rpe = parseFloat(value.replace('RPE', '').trim());\n        return rpe >= 1 && rpe <= 10;\n    }\n    return false;\n}, {\n    message: 'Intensity must be percentage (e.g., \"85%\") or RPE (e.g., \"RPE 8\" or \"8\")'\n});\n/**\n * Tempo string validation (e.g., \"3-1-1-0\")\n */ const tempoStringSchema = zod__WEBPACK_IMPORTED_MODULE_1__.string().regex(/^\\d+-\\d+-\\d+-\\d+$/, {\n    message: 'Tempo must be in format: eccentric-pause-concentric-pause (e.g., \"3-1-1-0\")'\n});\n// ============================================================================\n// ENUM SCHEMAS\n// ============================================================================\nconst setTypeSchema = zod__WEBPACK_IMPORTED_MODULE_1__.nativeEnum(_prisma_client__WEBPACK_IMPORTED_MODULE_0__.SetType);\nconst weightUnitSchema = zod__WEBPACK_IMPORTED_MODULE_1__.nativeEnum(_prisma_client__WEBPACK_IMPORTED_MODULE_0__.WeightUnit);\nconst intensityTypeSchema = zod__WEBPACK_IMPORTED_MODULE_1__.nativeEnum(_prisma_client__WEBPACK_IMPORTED_MODULE_0__.IntensityType);\n// ============================================================================\n// WORKOUT LOG ENTRY SCHEMAS\n// ============================================================================\n/**\n * Base workout log entry schema\n */ const workoutLogEntryBaseSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    sessionId: zod__WEBPACK_IMPORTED_MODULE_1__.string().uuid().optional(),\n    date: dateStringSchema,\n    exerciseId: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Exercise is required'),\n    setNumber: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().positive('Set number must be a positive integer'),\n    setType: setTypeSchema,\n    reps: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().positive('Reps must be a positive integer'),\n    weight: weightStringSchema,\n    unit: weightUnitSchema,\n    subOrder: zod__WEBPACK_IMPORTED_MODULE_1__.string().regex(/^[A-Z]$/).optional(),\n    intensity: intensityStringSchema.optional(),\n    intensityType: intensityTypeSchema.optional(),\n    tempo: tempoStringSchema.optional(),\n    restSeconds: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().min(0, 'Rest time must be non-negative').optional(),\n    userComments: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(500, 'Comments must be less than 500 characters').optional(),\n    coachFeedback: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(1000, 'Coach feedback must be less than 1000 characters').optional()\n});\n/**\n * Create workout log entry schema\n */ const createWorkoutLogEntrySchema = workoutLogEntryBaseSchema;\n/**\n * Update workout log entry schema (all fields optional)\n */ const updateWorkoutLogEntrySchema = workoutLogEntryBaseSchema.partial();\n/**\n * Workout log entry with calculated fields\n */ const workoutLogEntrySchema = workoutLogEntryBaseSchema.extend({\n    id: zod__WEBPACK_IMPORTED_MODULE_1__.string().cuid(),\n    userId: zod__WEBPACK_IMPORTED_MODULE_1__.string().cuid(),\n    coachId: zod__WEBPACK_IMPORTED_MODULE_1__.string().cuid().optional(),\n    order: zod__WEBPACK_IMPORTED_MODULE_1__.string(),\n    trainingVolume: zod__WEBPACK_IMPORTED_MODULE_1__.number().nonnegative().optional(),\n    duration: durationStringSchema.optional(),\n    createdAt: zod__WEBPACK_IMPORTED_MODULE_1__.date(),\n    updatedAt: zod__WEBPACK_IMPORTED_MODULE_1__.date()\n});\n// ============================================================================\n// EXERCISE SCHEMAS\n// ============================================================================\n/**\n * Create exercise schema\n */ const createExerciseSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Exercise name is required').max(100, 'Exercise name must be less than 100 characters'),\n    category: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Category is required'),\n    muscleGroups: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string()).min(1, 'At least one muscle group is required'),\n    equipment: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string()).min(1, 'At least one equipment type is required'),\n    instructions: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(2000, 'Instructions must be less than 2000 characters').optional(),\n    videoUrl: zod__WEBPACK_IMPORTED_MODULE_1__.string().url('Must be a valid URL').optional(),\n    imageUrl: zod__WEBPACK_IMPORTED_MODULE_1__.string().url('Must be a valid URL').optional(),\n    difficulty: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'BEGINNER',\n        'INTERMEDIATE',\n        'ADVANCED'\n    ]).default('BEGINNER'),\n    safetyNotes: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(1000, 'Safety notes must be less than 1000 characters').optional()\n});\n/**\n * Update exercise schema\n */ const updateExerciseSchema = createExerciseSchema.partial().extend({\n    isActive: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional()\n});\n/**\n * Exercise with all fields\n */ const exerciseSchema = createExerciseSchema.extend({\n    id: zod__WEBPACK_IMPORTED_MODULE_1__.string().cuid(),\n    isActive: zod__WEBPACK_IMPORTED_MODULE_1__.boolean(),\n    usageCount: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().nonnegative(),\n    lastUsed: zod__WEBPACK_IMPORTED_MODULE_1__.date().optional(),\n    createdAt: zod__WEBPACK_IMPORTED_MODULE_1__.date(),\n    updatedAt: zod__WEBPACK_IMPORTED_MODULE_1__.date()\n});\n// ============================================================================\n// WORKOUT SESSION SCHEMAS\n// ============================================================================\n/**\n * Create workout session schema\n */ const createWorkoutSessionSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    date: dateStringSchema,\n    title: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(100, 'Title must be less than 100 characters').optional(),\n    notes: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(1000, 'Notes must be less than 1000 characters').optional(),\n    location: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(100, 'Location must be less than 100 characters').optional(),\n    startTime: timeStringSchema,\n    endTime: timeStringSchema.optional(),\n    isTemplate: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().default(false)\n});\n/**\n * Update workout session schema\n */ const updateWorkoutSessionSchema = createWorkoutSessionSchema.partial();\n/**\n * Workout session with all fields\n */ const workoutSessionSchema = createWorkoutSessionSchema.extend({\n    id: zod__WEBPACK_IMPORTED_MODULE_1__.string().cuid(),\n    userId: zod__WEBPACK_IMPORTED_MODULE_1__.string().cuid(),\n    coachId: zod__WEBPACK_IMPORTED_MODULE_1__.string().cuid().optional(),\n    startTime: zod__WEBPACK_IMPORTED_MODULE_1__.date(),\n    endTime: zod__WEBPACK_IMPORTED_MODULE_1__.date().optional(),\n    duration: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().nonnegative().optional(),\n    totalVolume: zod__WEBPACK_IMPORTED_MODULE_1__.number().nonnegative().optional(),\n    totalSets: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().nonnegative(),\n    totalReps: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().nonnegative(),\n    isComplete: zod__WEBPACK_IMPORTED_MODULE_1__.boolean(),\n    isTemplate: zod__WEBPACK_IMPORTED_MODULE_1__.boolean(),\n    createdAt: zod__WEBPACK_IMPORTED_MODULE_1__.date(),\n    updatedAt: zod__WEBPACK_IMPORTED_MODULE_1__.date()\n});\n// ============================================================================\n// FILTER AND SORT SCHEMAS\n// ============================================================================\n/**\n * Date range filter schema\n */ const dateRangeSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    start: zod__WEBPACK_IMPORTED_MODULE_1__.date(),\n    end: zod__WEBPACK_IMPORTED_MODULE_1__.date()\n}).refine((data)=>data.start <= data.end, {\n    message: 'Start date must be before or equal to end date',\n    path: [\n        'end'\n    ]\n});\n/**\n * Workout filter options schema\n */ const workoutFilterOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    dateRange: dateRangeSchema.optional(),\n    exercises: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string().cuid()).optional(),\n    setTypes: zod__WEBPACK_IMPORTED_MODULE_1__.array(setTypeSchema).optional(),\n    coachId: zod__WEBPACK_IMPORTED_MODULE_1__.string().cuid().optional(),\n    userId: zod__WEBPACK_IMPORTED_MODULE_1__.string().cuid().optional()\n});\n/**\n * Workout sort options schema\n */ const workoutSortOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    field: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'date',\n        'exerciseId',\n        'setNumber',\n        'setType',\n        'reps',\n        'weight',\n        'trainingVolume',\n        'createdAt'\n    ]),\n    direction: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'asc',\n        'desc'\n    ])\n});\n/**\n * Pagination schema\n */ const paginationSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    page: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().positive().default(1),\n    limit: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().positive().max(100).default(50)\n});\n// ============================================================================\n// API REQUEST SCHEMAS\n// ============================================================================\n/**\n * Create multiple workout entries request\n */ const createWorkoutEntriesRequestSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    sessionId: zod__WEBPACK_IMPORTED_MODULE_1__.string().uuid().optional(),\n    entries: zod__WEBPACK_IMPORTED_MODULE_1__.array(createWorkoutLogEntrySchema).min(1, 'At least one entry is required')\n});\n/**\n * Update workout entry request\n */ const updateWorkoutEntryRequestSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    id: zod__WEBPACK_IMPORTED_MODULE_1__.string().cuid(),\n    data: updateWorkoutLogEntrySchema\n});\n/**\n * Delete workout entry request\n */ const deleteWorkoutEntryRequestSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    id: zod__WEBPACK_IMPORTED_MODULE_1__.string().cuid()\n});\n/**\n * Add coach feedback request\n */ const addCoachFeedbackRequestSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    entryId: zod__WEBPACK_IMPORTED_MODULE_1__.string().cuid(),\n    feedback: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Feedback is required').max(1000, 'Feedback must be less than 1000 characters')\n});\n// ============================================================================\n// SEARCH AND FILTER SCHEMAS\n// ============================================================================\n/**\n * Exercise search options schema\n */ const exerciseSearchOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    category: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional(),\n    muscleGroups: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string()).optional(),\n    equipment: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string()).optional(),\n    difficulty: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'BEGINNER',\n        'INTERMEDIATE',\n        'ADVANCED'\n    ]).optional(),\n    isActive: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional(),\n    search: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(100, 'Search query must be less than 100 characters').optional()\n});\n/**\n * Workout session filter options schema\n */ const workoutSessionFilterOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    dateRange: dateRangeSchema.optional(),\n    isComplete: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional(),\n    isTemplate: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional()\n});\n// ============================================================================\n// STATISTICS SCHEMAS\n// ============================================================================\n/**\n * Workout statistics request schema\n */ const workoutStatsRequestSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    dateRange: dateRangeSchema.optional()\n});\n/**\n * Workout statistics response schema\n */ const workoutStatsResponseSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    totalWorkouts: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().nonnegative(),\n    totalVolume: zod__WEBPACK_IMPORTED_MODULE_1__.number().nonnegative(),\n    totalSets: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().nonnegative(),\n    totalReps: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().nonnegative(),\n    averageWorkoutDuration: zod__WEBPACK_IMPORTED_MODULE_1__.number().nonnegative(),\n    mostUsedExercises: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.object({\n        exerciseId: zod__WEBPACK_IMPORTED_MODULE_1__.string().cuid(),\n        count: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().positive(),\n        name: zod__WEBPACK_IMPORTED_MODULE_1__.string()\n    })),\n    volumeByMuscleGroup: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.object({\n        muscleGroup: zod__WEBPACK_IMPORTED_MODULE_1__.string(),\n        volume: zod__WEBPACK_IMPORTED_MODULE_1__.number().nonnegative()\n    }))\n});\n// ============================================================================\n// VALIDATION HELPERS\n// ============================================================================\n/**\n * Validate weight string and return parsed values\n */ const validateWeightString = (weight)=>{\n    const result = weightStringSchema.safeParse(weight);\n    if (!result.success) {\n        throw new Error(result.error.errors[0]?.message ?? 'Invalid weight');\n    }\n    return weight.split(',').map((w)=>w.trim()).map((w)=>parseFloat(w)).filter((w)=>!isNaN(w));\n};\n/**\n * Validate intensity string and return parsed value\n */ const validateIntensityString = (intensity)=>{\n    const result = intensityStringSchema.safeParse(intensity);\n    if (!result.success) {\n        throw new Error(result.error.errors[0]?.message ?? 'Invalid intensity');\n    }\n    // Check if it's a percentage\n    if (intensity.includes('%')) {\n        const percentage = parseInt(intensity);\n        return {\n            value: percentage,\n            type: 'percentage'\n        };\n    }\n    // Must be RPE\n    const rpe = parseFloat(intensity.replace('RPE', '').trim());\n    return {\n        value: rpe,\n        type: 'rpe'\n    };\n};\n/**\n * Validate tempo string and return parsed values\n */ const validateTempoString = (tempo)=>{\n    const result = tempoStringSchema.safeParse(tempo);\n    if (!result.success) {\n        throw new Error(result.error.errors[0]?.message ?? 'Invalid tempo');\n    }\n    const [eccentric, pause1, concentric, pause2] = tempo.split('-').map(Number);\n    return {\n        eccentric,\n        pause1,\n        concentric,\n        pause2\n    };\n};\n/**\n * Validate date string and return Date object\n */ const validateDateString = (date)=>{\n    const result = dateStringSchema.safeParse(date);\n    if (!result.success) {\n        throw new Error(result.error.errors[0]?.message ?? 'Invalid date');\n    }\n    return new Date(date);\n};\n/**\n * Validate time string and return Date object\n */ const validateTimeString = (time)=>{\n    const result = timeStringSchema.safeParse(time);\n    if (!result.success) {\n        throw new Error(result.error.errors[0]?.message ?? 'Invalid time');\n    }\n    return new Date(`2000-01-01T${time}`);\n};\n// ============================================================================\n// WORKOUT TEMPLATE SCHEMAS (Phase 3)\n// ============================================================================\n/**\n * Workout template exercise schema\n */ const workoutTemplateExerciseSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    exerciseId: zod__WEBPACK_IMPORTED_MODULE_1__.string().cuid('Invalid exercise ID'),\n    order: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().positive('Order must be positive'),\n    sets: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().positive('Sets must be positive'),\n    reps: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Reps is required'),\n    weight: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional(),\n    restTime: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional(),\n    notes: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(200, 'Notes must be less than 200 characters').optional(),\n    isSuperset: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().default(false),\n    supersetGroup: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional()\n});\n/**\n * Create workout template schema\n */ const createWorkoutTemplateSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Template name is required').max(100, 'Name must be less than 100 characters'),\n    description: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(500, 'Description must be less than 500 characters').optional(),\n    category: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Category is required').optional(),\n    difficulty: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'BEGINNER',\n        'INTERMEDIATE',\n        'ADVANCED'\n    ]).default('BEGINNER'),\n    duration: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(50, 'Duration must be less than 50 characters').optional(),\n    equipment: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string()).default([]),\n    isPublic: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().default(false),\n    price: zod__WEBPACK_IMPORTED_MODULE_1__.number().min(0, 'Price must be non-negative').optional(),\n    currency: zod__WEBPACK_IMPORTED_MODULE_1__.string().length(3, 'Currency must be 3 characters').default('USD'),\n    tags: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string()).default([]),\n    exercises: zod__WEBPACK_IMPORTED_MODULE_1__.array(workoutTemplateExerciseSchema).min(1, 'At least one exercise is required')\n});\n/**\n * Update workout template schema\n */ const updateWorkoutTemplateSchema = createWorkoutTemplateSchema.partial().omit({\n    exercises: true\n});\n/**\n * Rate template schema\n */ const rateTemplateSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    rating: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().min(1, 'Rating must be at least 1').max(5, 'Rating must be at most 5'),\n    review: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(500, 'Review must be less than 500 characters').optional()\n});\n// ============================================================================\n// TRAINING PROGRAM SCHEMAS (Phase 3)\n// ============================================================================\n/**\n * Program week schema\n */ const programWeekSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    weekNumber: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().positive('Week number must be positive'),\n    title: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(100, 'Title must be less than 100 characters').optional(),\n    description: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(500, 'Description must be less than 500 characters').optional(),\n    workouts: zod__WEBPACK_IMPORTED_MODULE_1__.any() // JSON field for flexible workout structure\n});\n/**\n * Create training program schema\n */ const createTrainingProgramSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Program name is required').max(100, 'Name must be less than 100 characters'),\n    description: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(1000, 'Description must be less than 1000 characters').optional(),\n    duration: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Duration is required').max(50, 'Duration must be less than 50 characters'),\n    difficulty: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'BEGINNER',\n        'INTERMEDIATE',\n        'ADVANCED'\n    ]).default('BEGINNER'),\n    category: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Category is required').optional(),\n    isPublic: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().default(false),\n    price: zod__WEBPACK_IMPORTED_MODULE_1__.number().min(0, 'Price must be non-negative').optional(),\n    currency: zod__WEBPACK_IMPORTED_MODULE_1__.string().length(3, 'Currency must be 3 characters').default('USD'),\n    tags: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string()).default([]),\n    weeks: zod__WEBPACK_IMPORTED_MODULE_1__.array(programWeekSchema).min(1, 'At least one week is required')\n});\n/**\n * Update training program schema\n */ const updateTrainingProgramSchema = createTrainingProgramSchema.partial().omit({\n    weeks: true\n});\n/**\n * Rate program schema\n */ const rateProgramSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    rating: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().min(1, 'Rating must be at least 1').max(5, 'Rating must be at most 5'),\n    review: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(500, 'Review must be less than 500 characters').optional()\n});\n/**\n * Update program progress schema\n */ const updateProgramProgressSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    currentWeek: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().positive('Week must be positive'),\n    currentDay: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().positive('Day must be positive'),\n    progressData: zod__WEBPACK_IMPORTED_MODULE_1__.any().optional() // JSON field for flexible progress data\n});\n// ============================================================================\n// EXERCISE VARIATION SCHEMAS (Phase 3)\n// ============================================================================\n/**\n * Create exercise variation schema\n */ const createExerciseVariationSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Variation name is required').max(100, 'Name must be less than 100 characters'),\n    description: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(500, 'Description must be less than 500 characters').optional(),\n    difficulty: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'BEGINNER',\n        'INTERMEDIATE',\n        'ADVANCED'\n    ]).default('BEGINNER'),\n    videoUrl: zod__WEBPACK_IMPORTED_MODULE_1__.string().url('Must be a valid URL').optional(),\n    imageUrl: zod__WEBPACK_IMPORTED_MODULE_1__.string().url('Must be a valid URL').optional(),\n    instructions: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(1000, 'Instructions must be less than 1000 characters').optional()\n});\n/**\n * Update exercise variation schema\n */ const updateExerciseVariationSchema = createExerciseVariationSchema.partial().extend({\n    isActive: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional()\n});\n// ============================================================================\n// ANALYTICS & PROGRESS SCHEMAS (Phase 3)\n// ============================================================================\n/**\n * Add progress metric schema\n */ const addProgressMetricSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    metricType: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Metric type is required'),\n    value: zod__WEBPACK_IMPORTED_MODULE_1__.number({\n        invalid_type_error: 'Value must be a number'\n    }),\n    unit: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(20, 'Unit must be less than 20 characters').optional(),\n    bodyPart: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(50, 'Body part must be less than 50 characters').optional(),\n    notes: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(500, 'Notes must be less than 500 characters').optional(),\n    imageUrl: zod__WEBPACK_IMPORTED_MODULE_1__.string().url('Must be a valid URL').optional(),\n    recordedAt: zod__WEBPACK_IMPORTED_MODULE_1__.date().optional()\n});\n/**\n * Add personal record schema\n */ const addPersonalRecordSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    exerciseId: zod__WEBPACK_IMPORTED_MODULE_1__.string().cuid('Invalid exercise ID'),\n    recordType: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Record type is required'),\n    value: zod__WEBPACK_IMPORTED_MODULE_1__.number({\n        invalid_type_error: 'Value must be a number'\n    }),\n    unit: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Unit is required'),\n    reps: zod__WEBPACK_IMPORTED_MODULE_1__.number().int().positive('Reps must be positive').optional(),\n    notes: zod__WEBPACK_IMPORTED_MODULE_1__.string().max(500, 'Notes must be less than 500 characters').optional(),\n    achievedAt: zod__WEBPACK_IMPORTED_MODULE_1__.date().optional()\n});\n// ============================================================================\n// ENHANCED EXERCISE SCHEMAS (Phase 3)\n// ============================================================================\n/**\n * Enhanced create exercise schema with Phase 3 features\n */ const enhancedCreateExerciseSchema = createExerciseSchema.extend({\n    formCues: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string()).default([]),\n    commonMistakes: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string()).default([]),\n    isCustom: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().default(false)\n});\n/**\n * Enhanced update exercise schema\n */ const enhancedUpdateExerciseSchema = enhancedCreateExerciseSchema.partial().extend({\n    isActive: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional()\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/core/utils/workout-validation.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/ai/context_builder.ts":
/*!********************************************!*\
  !*** ./src/services/ai/context_builder.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildUserContext: () => (/* binding */ buildUserContext)\n/* harmony export */ });\n/* harmony import */ var _core_database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/core/database */ \"(rsc)/./src/core/database/index.ts\");\n\nasync function buildUserContext(userId, opts) {\n    const focusIds = opts?.focusAssessmentIds?.filter(Boolean);\n    const [user, assessments, recentWorkouts] = await Promise.all([\n        _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.users.findUnique({\n            where: {\n                id: userId\n            },\n            select: {\n                name: true,\n                role: true,\n                // Preference fields present in current schema\n                fitnessGoals: true,\n                experienceLevel: true,\n                preferredWorkoutTypes: true,\n                availableWorkoutDays: true,\n                preferredWorkoutDuration: true\n            }\n        }),\n        focusIds?.length ? _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.assessments.findMany({\n            where: {\n                id: {\n                    in: focusIds\n                },\n                clientId: userId,\n                status: 'complete'\n            },\n            orderBy: {\n                updatedAt: 'desc'\n            },\n            take: 3\n        }) : _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.assessments.findMany({\n            where: {\n                clientId: userId,\n                status: 'complete'\n            },\n            orderBy: {\n                updatedAt: 'desc'\n            },\n            take: 3\n        }),\n        _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.workout_log_entries.findMany({\n            where: {\n                userId\n            },\n            include: {\n                exercises: true\n            },\n            orderBy: {\n                date: 'desc'\n            },\n            take: 10\n        })\n    ]);\n    const userProfile = formatUserProfile(user);\n    const assessmentSummary = summarizeAssessments(assessments);\n    const workoutHistory = summarizeWorkouts(recentWorkouts);\n    return {\n        userProfile,\n        assessmentSummary,\n        workoutHistory\n    };\n}\nfunction formatUserProfile(user) {\n    if (!user) return 'User profile not available.';\n    const parts = [];\n    parts.push(`Name: ${user.name || 'N/A'}`);\n    parts.push(`Role: ${user.role || 'CLIENT'}`);\n    if (user.fitnessGoals?.length) parts.push(`Goals: ${user.fitnessGoals.join(', ')}`);\n    if (user.experienceLevel) parts.push(`Experience: ${user.experienceLevel}`);\n    if (user.preferredWorkoutTypes?.length) parts.push(`Prefers: ${user.preferredWorkoutTypes.join(', ')}`);\n    if (user.availableWorkoutDays?.length) parts.push(`Days: ${user.availableWorkoutDays.join(', ')}`);\n    if (user.preferredWorkoutDuration) parts.push(`Duration: ${user.preferredWorkoutDuration}`);\n    if (user.age) parts.push(`Age: ${user.age}`);\n    if (user.height) parts.push(`Height: ${user.height}`);\n    if (user.weight) parts.push(`Weight: ${user.weight}`);\n    if (user.injuries?.length) parts.push(`Injuries: ${user.injuries.join(', ')}`);\n    return parts.join('\\n');\n}\nfunction summarizeAssessments(assessments) {\n    if (!assessments?.length) return 'No recent assessments.';\n    const lines = [\n        'Recent Assessments:'\n    ];\n    for (const a of assessments){\n        const when = new Date(a.updatedAt || a.createdAt).toISOString().split('T')[0];\n        lines.push(`- ${a.type} (${when})`);\n        if (a.data?.overactive_muscles) lines.push(`  Overactive: ${a.data.overactive_muscles}`);\n        if (a.data?.underactive_muscles) lines.push(`  Underactive: ${a.data.underactive_muscles}`);\n        if (a.data?.bmi) lines.push(`  BMI: ${a.data.bmi}`);\n        if (a.data?.vo2_max) lines.push(`  VO2 Max: ${a.data.vo2_max}`);\n    }\n    return lines.join('\\n');\n}\nfunction summarizeWorkouts(entries) {\n    if (!entries?.length) return 'No recent workouts.';\n    const lines = [\n        'Recent Workouts (last 10 entries):'\n    ];\n    for (const e of entries){\n        const when = new Date(e.date).toISOString().split('T')[0];\n        lines.push(`- ${when} • ${e.exercises?.name || 'Exercise'} • sets#${e.setNumber} • reps ${e.reps}`);\n    }\n    return lines.join('\\n');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/ai/context_builder.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/ai/massichat_service.ts":
/*!**********************************************!*\
  !*** ./src/services/ai/massichat_service.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   acceptWorkoutProposal: () => (/* binding */ acceptWorkoutProposal),\n/* harmony export */   sendMassichatMessage: () => (/* binding */ sendMassichatMessage)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _core_database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/core/database */ \"(rsc)/./src/core/database/index.ts\");\n/* harmony import */ var _context_builder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./context_builder */ \"(rsc)/./src/services/ai/context_builder.ts\");\n/* harmony import */ var _vector_search__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vector_search */ \"(rsc)/./src/services/ai/vector_search.ts\");\n\n\n\n\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY,\n    organization: process.env.OPENAI_ORG_ID,\n    // Optional: allow pinning a specific OpenAI project if provided\n    project: process.env.OPENAI_PROJECT\n});\nfunction provider() {\n    const p = (process.env.AI_PROVIDER || 'openai').toLowerCase();\n    return p === 'anthropic' ? 'anthropic' : 'openai';\n}\nasync function sendMassichatMessage(req) {\n    const prov = provider();\n    if (prov === 'openai') {\n        if (!process.env.OPENAI_API_KEY) {\n            throw new Error('OPENAI_API_KEY not configured. Set it in your environment to use Massichat.');\n        }\n    } else {\n        if (!process.env.ANTHROPIC_API_KEY) {\n            throw new Error('ANTHROPIC_API_KEY not configured. Set it in your environment or set AI_PROVIDER=openai.');\n        }\n    }\n    const db = _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma;\n    if (!db?.ai_chat_sessions?.create || !db?.ai_chat_messages?.create) {\n        throw new Error('Massichat tables not available. Run: npm run db:generate && npm run db:migrate');\n    }\n    // 1) ensure session\n    let sessionId = req.sessionId;\n    let session;\n    if (sessionId) {\n        session = await db.ai_chat_sessions.findUnique({\n            where: {\n                id: sessionId\n            }\n        });\n    }\n    if (!session) {\n        session = await db.ai_chat_sessions.create({\n            data: {\n                userId: req.userId,\n                title: null,\n                status: 'active'\n            }\n        });\n        sessionId = session.id;\n    }\n    // 2) build context\n    const focus = req.assessmentId ? [\n        req.assessmentId\n    ] : req.assessmentIds;\n    const context = await (0,_context_builder__WEBPACK_IMPORTED_MODULE_1__.buildUserContext)(req.userId, ...focus ? [\n        {\n            focusAssessmentIds: focus\n        }\n    ] : []);\n    // 3) persist user message\n    await db.ai_chat_messages.create({\n        data: {\n            sessionId,\n            role: 'user',\n            content: req.message,\n            metadata: null,\n            aiProvider: null\n        }\n    });\n    // 4) build prompt\n    const system = `You are Massichat, a specialized AI fitness coach for the Massimino app.\nAlways prioritize safety and progressive overload principles. Use concise, helpful answers.\n\nClarifications policy:\n- Ask at most ONE very short clarifying question ONLY if absolutely necessary for safety.\n- Even if you ask a question, you MUST still provide an initial recommendation or workout using safe, reasonable assumptions. Never reply with a question alone.\n- If assumptions are used, state them briefly in one line (\"Assuming: ...\").\n\nWhen proposing a workout:\n1) First write a brief 1-2 sentence rationale (and assumptions if any).\n2) Then on a new line write exactly: WORKOUT_PROPOSAL_JSON\n3) Immediately after, include a fenced JSON block with fields:\n   { title, description, items:[{ exerciseName, sets, reps, restSeconds, notes? }] }\n4) After the JSON block, include one single line:\n   FOLLOW_UP_SUGGESTIONS: [\"<short suggestion 1>\", \"<short suggestion 2>\", \"<short suggestion 3>\"]\n   Keep each suggestion under 10 words.\n5) No other prose after the suggestions line.`;\n    const userContext = `User Profile:\\n${context.userProfile}\\n\\nAssessments:\\n${context.assessmentSummary}\\n\\nHistory:\\n${context.workoutHistory}`;\n    // 3.b) Knowledge snippets (top-3)\n    let kbContext = '';\n    try {\n        const hits = await (0,_vector_search__WEBPACK_IMPORTED_MODULE_2__.searchKnowledgeBase)(req.message, 3);\n        if (hits.length) {\n            kbContext = '\\n\\nKnowledge Base Snippets (for reference):\\n' + hits.map((h)=>`- (${h.similarity.toFixed(2)}) ${h.content.slice(0, 300)}...`).join('\\n');\n        }\n    } catch  {}\n    // 5) call OpenAI\n    let aiText = 'I could not generate a response.';\n    let modelUsed = '';\n    if (prov === 'openai') {\n        const completion = await openai.chat.completions.create({\n            model: 'gpt-4o-mini',\n            messages: [\n                {\n                    role: 'system',\n                    content: system\n                },\n                {\n                    role: 'system',\n                    content: userContext + kbContext\n                },\n                {\n                    role: 'user',\n                    content: req.message\n                }\n            ],\n            temperature: 0.4,\n            max_tokens: 800\n        });\n        aiText = completion.choices[0]?.message?.content || aiText;\n        modelUsed = 'gpt-4o-mini';\n    } else {\n        // Anthropic (Claude) via HTTP to avoid SDK dependency\n        const resp = await fetch('https://api.anthropic.com/v1/messages', {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json',\n                'x-api-key': process.env.ANTHROPIC_API_KEY,\n                'anthropic-version': '2023-06-01'\n            },\n            body: JSON.stringify({\n                model: process.env.ANTHROPIC_MODEL || 'claude-3-5-sonnet-20241022',\n                max_tokens: 800,\n                temperature: 0.4,\n                system,\n                messages: [\n                    {\n                        role: 'user',\n                        content: [\n                            {\n                                type: 'text',\n                                text: `${userContext}${kbContext}\\n\\n${req.message}`\n                            }\n                        ]\n                    }\n                ]\n            })\n        });\n        if (!resp.ok) {\n            const err = await resp.text().catch(()=>'');\n            throw new Error(`Anthropic error: ${resp.status} ${err}`);\n        }\n        const data = await resp.json();\n        const parts = Array.isArray(data?.content) ? data.content : [];\n        aiText = parts.map((p)=>p?.text).filter(Boolean).join('\\n').trim() || aiText;\n        modelUsed = data?.model || 'claude';\n    }\n    const suggestions = extractFollowUps(aiText);\n    // 6) detect workout proposal JSON\n    const parsed = tryParseWorkoutProposal(aiText);\n    let workoutProposal;\n    if (parsed) {\n        if (!db?.ai_workout_proposals?.create) {\n            // If proposals table is missing, still return the text without requiring acceptance\n            workoutProposal = undefined;\n        } else {\n            const proposal = await db.ai_workout_proposals.create({\n                data: {\n                    sessionId,\n                    userId: req.userId,\n                    status: 'pending',\n                    workoutData: parsed,\n                    aiReasoning: extractReasoning(aiText)\n                }\n            });\n            workoutProposal = {\n                id: proposal.id,\n                summary: parsed.title || 'Proposed workout',\n                workoutData: parsed\n            };\n        }\n    }\n    // Fallback: if the assistant did not include a JSON proposal, make a second, strict JSON-only attempt\n    if (!workoutProposal) {\n        try {\n            const jsonOnly = await requestWorkoutJson({\n                provider: prov,\n                modelUsed,\n                system,\n                userContext: userContext + kbContext,\n                userMessage: req.message\n            });\n            if (jsonOnly) {\n                const proposal = await _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.ai_workout_proposals.create({\n                    data: {\n                        sessionId,\n                        userId: req.userId,\n                        status: 'pending',\n                        workoutData: jsonOnly,\n                        aiReasoning: extractReasoning(aiText)\n                    }\n                });\n                workoutProposal = {\n                    id: proposal.id,\n                    summary: jsonOnly.title || 'Proposed workout',\n                    workoutData: jsonOnly\n                };\n            }\n        } catch  {}\n    }\n    // 7) persist assistant message\n    await db.ai_chat_messages.create({\n        data: {\n            sessionId,\n            role: 'assistant',\n            content: aiText,\n            metadata: {\n                model: modelUsed\n            },\n            aiProvider: prov\n        }\n    });\n    // 8) update session title on first turn\n    if (!session.title) {\n        await db.ai_chat_sessions.update({\n            where: {\n                id: sessionId\n            },\n            data: {\n                title: req.message.slice(0, 60)\n            }\n        });\n    }\n    return {\n        sessionId: sessionId,\n        message: aiText,\n        ...workoutProposal ? {\n            workoutProposal\n        } : {},\n        requiresAcceptance: Boolean(workoutProposal),\n        ...suggestions.length ? {\n            suggestions\n        } : {}\n    };\n}\nasync function acceptWorkoutProposal(proposalId, overrides) {\n    const db = _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma;\n    if (!db?.ai_workout_proposals?.findUnique || !db?.workout_log_entries?.create) {\n        throw new Error('Workout proposal tables not available. Run: npm run db:migrate');\n    }\n    const proposal = await db.ai_workout_proposals.findUnique({\n        where: {\n            id: proposalId\n        }\n    });\n    if (!proposal || proposal.status !== 'pending') throw new Error('Invalid proposal');\n    const data = overrides ?? proposal.workoutData;\n    // Minimal implementation: create entries for today\n    const today = new Date();\n    const entries = [];\n    for (const item of data.items || []){\n        entries.push({\n            id: cryptoRandom(),\n            userId: proposal.userId,\n            exerciseId: await resolveExerciseId(item.exerciseName),\n            date: today,\n            order: '0',\n            setNumber: item.sets || 1,\n            setType: 'STRAIGHT',\n            reps: parseInt(String(item.reps || '8'), 10) || 8,\n            weight: '0',\n            unit: 'KG',\n            restSeconds: item.restSeconds ?? null,\n            userComments: item.notes ?? null,\n            createdAt: today,\n            updatedAt: today\n        });\n    }\n    // Create all entries in a transaction\n    await _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.$transaction(async (tx)=>{\n        for (const e of entries){\n            await tx.workout_log_entries.create({\n                data: e\n            });\n        }\n        await tx.ai_workout_proposals.update({\n            where: {\n                id: proposalId\n            },\n            data: {\n                status: 'accepted',\n                acceptedAt: new Date()\n            }\n        });\n    });\n    return 'ok';\n}\nfunction tryParseWorkoutProposal(text) {\n    // Preferred: Look for a JSON block after explicit marker\n    const marker = 'WORKOUT_PROPOSAL_JSON';\n    const idx = text.indexOf(marker);\n    if (idx !== -1) {\n        const after = text.slice(idx + marker.length);\n        const match = after.match(/```json[\\s\\S]*?```|\\{[\\s\\S]*\\}/);\n        if (match) {\n            const raw = match[0].replace(/```json|```/g, '').trim();\n            try {\n                return JSON.parse(raw);\n            } catch  {}\n        }\n    }\n    // Fallback: any fenced JSON block in the message\n    const fence = text.match(/```json\\s*([\\s\\S]*?)\\s*```/i);\n    if (fence?.[1]) {\n        try {\n            const obj = JSON.parse(fence[1]);\n            if (isWorkoutShape(obj)) return obj;\n        } catch  {}\n    }\n    // Last resort: first JSON-looking object in text\n    const brace = text.match(/\\{[\\s\\S]*\\}/);\n    if (brace) {\n        try {\n            const obj = JSON.parse(brace[0]);\n            if (isWorkoutShape(obj)) return obj;\n        } catch  {}\n    }\n    return null;\n}\nfunction isWorkoutShape(obj) {\n    return Boolean(obj && typeof obj === 'object' && Array.isArray(obj.items) && (obj.title || obj.description));\n}\nasync function requestWorkoutJson(args) {\n    const instruction = `Return ONLY a fenced JSON block (no prose) immediately after this line: WORKOUT_PROPOSAL_JSON\\n\\n\\nThe JSON MUST have: {\\n  \"title\": string,\\n  \"description\": string,\\n  \"items\": [{ \"exerciseName\": string, \"sets\": number, \"reps\": number, \"restSeconds\": number, \"notes\"?: string }]\\n}\\nNo additional text before or after the JSON.`;\n    if (args.provider === 'openai') {\n        const resp = await openai.chat.completions.create({\n            model: args.modelUsed || 'gpt-4o-mini',\n            messages: [\n                {\n                    role: 'system',\n                    content: args.system\n                },\n                {\n                    role: 'system',\n                    content: args.userContext\n                },\n                {\n                    role: 'user',\n                    content: `${args.userMessage}\\n\\n${instruction}`\n                }\n            ],\n            temperature: 0.2,\n            max_tokens: 700\n        });\n        const txt = resp.choices[0]?.message?.content || '';\n        const parsed = tryParseWorkoutProposal(txt);\n        return parsed || null;\n    } else {\n        const resp = await fetch('https://api.anthropic.com/v1/messages', {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json',\n                'x-api-key': process.env.ANTHROPIC_API_KEY,\n                'anthropic-version': '2023-06-01'\n            },\n            body: JSON.stringify({\n                model: process.env.ANTHROPIC_MODEL || 'claude-3-5-sonnet-20241022',\n                max_tokens: 700,\n                temperature: 0.2,\n                system: args.system,\n                messages: [\n                    {\n                        role: 'user',\n                        content: [\n                            {\n                                type: 'text',\n                                text: `${args.userContext}\\n\\n${args.userMessage}\\n\\n${instruction}`\n                            }\n                        ]\n                    }\n                ]\n            })\n        });\n        if (!resp.ok) return null;\n        const data = await resp.json();\n        const txt = (Array.isArray(data?.content) ? data.content : []).map((p)=>p?.text).filter(Boolean).join('\\n');\n        const parsed = tryParseWorkoutProposal(txt || '');\n        return parsed || null;\n    }\n}\nfunction extractReasoning(text) {\n    // naive: everything before marker\n    const marker = 'WORKOUT_PROPOSAL_JSON';\n    const idx = text.indexOf(marker);\n    if (idx === -1) return undefined;\n    return text.slice(0, idx).trim();\n}\nfunction extractFollowUps(text) {\n    // Look for a FOLLOW_UP_SUGGESTIONS: [ ... ] line\n    const m = text.match(/FOLLOW_UP_SUGGESTIONS\\s*:\\s*\\[(.*)\\]/i);\n    if (m && m[1]) {\n        try {\n            const arr = JSON.parse('[' + m[1] + ']');\n            return Array.isArray(arr) ? arr.map((s)=>String(s)).filter(Boolean).slice(0, 5) : [];\n        } catch  {}\n    }\n    // Fallback: parse bullets at the end\n    const lines = text.split(/\\n+/).slice(-5);\n    const hints = lines.map((l)=>l.replace(/^[-•\\*]\\s*/, '').trim()).filter((l)=>l && l.length <= 60);\n    return hints.slice(0, 3);\n}\nasync function resolveExerciseId(name) {\n    if (!name) throw new Error('Exercise name missing');\n    const ex = await _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.exercises.findFirst({\n        where: {\n            name: {\n                equals: name,\n                mode: 'insensitive'\n            }\n        },\n        select: {\n            id: true\n        }\n    });\n    if (ex) return ex.id;\n    // fallback: pick any existing exercise to avoid failing\n    const any = await _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.exercises.findFirst({\n        select: {\n            id: true\n        }\n    });\n    if (any) return any.id;\n    throw new Error('No exercises available');\n}\nfunction cryptoRandom() {\n    // Simple UUID v4 replacement without bringing extra deps\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        const r = Math.random() * 16 | 0, v = c === 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/ai/massichat_service.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/ai/vector_search.ts":
/*!******************************************!*\
  !*** ./src/services/ai/vector_search.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   embedDocument: () => (/* binding */ embedDocument),\n/* harmony export */   searchKnowledgeBase: () => (/* binding */ searchKnowledgeBase)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _core_database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/core/database */ \"(rsc)/./src/core/database/index.ts\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY,\n    organization: process.env.OPENAI_ORG_ID,\n    project: process.env.OPENAI_PROJECT\n});\nasync function embedDocument(content) {\n    if (!process.env.OPENAI_API_KEY) {\n        throw new Error('OPENAI_API_KEY not configured. Embedding requires an OpenAI API key.');\n    }\n    const res = await openai.embeddings.create({\n        model: 'text-embedding-3-small',\n        input: content\n    });\n    const vec = res.data?.[0]?.embedding;\n    if (!vec) throw new Error('Failed to compute embedding');\n    return vec;\n}\nfunction cosineSim(a, b) {\n    let dot = 0, na = 0, nb = 0;\n    const len = Math.min(a.length, b.length);\n    for(let i = 0; i < len; i++){\n        const ai = a[i] ?? 0;\n        const bi = b[i] ?? 0;\n        dot += ai * bi;\n        na += ai * ai;\n        nb += bi * bi;\n    }\n    if (na === 0 || nb === 0) return 0;\n    return dot / (Math.sqrt(na) * Math.sqrt(nb));\n}\nasync function searchKnowledgeBase(query, limit = 5) {\n    const results = [];\n    // 1) Vectorized docs from DB (if present)\n    try {\n        const q = await embedDocument(query);\n        const docs = await _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.fitness_knowledge_base.findMany({\n            select: {\n                documentName: true,\n                content: true,\n                embedding: true\n            },\n            take: 200\n        });\n        const scored = docs.map((d)=>({\n                documentName: d.documentName,\n                content: d.content,\n                similarity: cosineSim(d.embedding || [], q)\n            }));\n        scored.sort((a, b)=>b.similarity - a.similarity);\n        results.push(...scored.slice(0, Math.min(limit, 3)));\n    } catch (e) {\n    // Swallow and continue with local docs fallback\n    }\n    // 2) Local NASM docs (lexical fallback; no new files/routes required)\n    try {\n        const nasmHits = await searchLocalNasm(query, limit);\n        results.push(...nasmHits);\n    } catch (e) {\n    // ignore if FS not available\n    }\n    // 3) Deduplicate by content snippet\n    const seen = new Set();\n    const deduped = results.filter((r)=>{\n        const key = r.content.slice(0, 120);\n        if (seen.has(key)) return false;\n        seen.add(key);\n        return true;\n    });\n    deduped.sort((a, b)=>b.similarity - a.similarity);\n    return deduped.slice(0, limit);\n}\nconst NASM_ROOTS = [\n    'public/databases/NASM_CPT/converted',\n    'public/databases/NASM_CNC/converted'\n];\nasync function searchLocalNasm(query, limit) {\n    const baseDir = process.cwd();\n    const files = [];\n    for (const rel of NASM_ROOTS){\n        const dir = path__WEBPACK_IMPORTED_MODULE_2___default().join(baseDir, rel);\n        const list = await safeWalk(dir);\n        files.push(...list.filter((f)=>f.endsWith('.md') && path__WEBPACK_IMPORTED_MODULE_2___default().basename(f).toLowerCase().startsWith('section')));\n    }\n    // Keep it light: cap scanned files\n    const toScan = files.slice(0, 80);\n    const keywords = tokenize(query);\n    if (keywords.length === 0) return [];\n    const scored = [];\n    for (const abs of toScan){\n        const rel = path__WEBPACK_IMPORTED_MODULE_2___default().relative(baseDir, abs);\n        const raw = await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().readFile(abs, 'utf8');\n        const chunks = chunkMarkdown(raw);\n        for(let i = 0; i < chunks.length; i++){\n            const txt = String(chunks[i] ?? '');\n            const score = lexicalScore(txt, keywords);\n            if (score > 0) {\n                // Map lexical score [0..] to a bounded 0..0.88 so DB vectors can still outrank\n                const similarity = Math.min(0.88, score);\n                scored.push({\n                    documentName: `${rel}#${i}`,\n                    content: txt.slice(0, 1200),\n                    similarity\n                });\n            }\n        }\n    }\n    scored.sort((a, b)=>b.similarity - a.similarity);\n    return scored.slice(0, Math.max(0, limit - 0));\n}\nasync function safeWalk(dir) {\n    try {\n        const out = [];\n        const entries = await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().readdir(dir, {\n            withFileTypes: true\n        });\n        for (const e of entries){\n            const p = path__WEBPACK_IMPORTED_MODULE_2___default().join(dir, e.name);\n            if (e.isDirectory()) out.push(...await safeWalk(p));\n            else out.push(p);\n        }\n        return out;\n    } catch  {\n        return [];\n    }\n}\nfunction tokenize(text) {\n    return text.toLowerCase().replace(/[^a-z0-9\\s]/g, ' ').split(/\\s+/).filter((w)=>w.length >= 3);\n}\nfunction lexicalScore(text, keywords) {\n    const lower = text.toLowerCase();\n    let hits = 0;\n    for (const k of keywords){\n        if (lower.includes(k)) hits += 1;\n    }\n    // Normalize by keyword count\n    return hits / Math.max(1, keywords.length);\n}\nfunction chunkMarkdown(md) {\n    // Split by headings or paragraphs\n    const parts = md.split(/\\n(?=#+\\s)|\\n\\n+/);\n    const chunks = [];\n    let cur = '';\n    for (const p of parts){\n        if ((cur + p).length < 1000) cur += (cur ? '\\n\\n' : '') + p;\n        else {\n            if (cur) chunks.push(cur);\n            cur = p;\n        }\n    }\n    if (cur) chunks.push(cur);\n    return chunks;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/ai/vector_search.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/ai/workout-suggestions.ts":
/*!************************************************!*\
  !*** ./src/services/ai/workout-suggestions.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateWorkoutSuggestions: () => (/* binding */ generateWorkoutSuggestions),\n/* harmony export */   get_exercise_recommendations: () => (/* binding */ get_exercise_recommendations),\n/* harmony export */   parse_nutrition_knowledge: () => (/* binding */ parse_nutrition_knowledge),\n/* harmony export */   parse_training_knowledge: () => (/* binding */ parse_training_knowledge)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _core_database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/core/database */ \"(rsc)/./src/core/database/index.ts\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n// src/services/ai/workout-suggestions.ts\n\n\n\n\n// Initialize OpenAI using existing configuration\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\nasync function generateWorkoutSuggestions(request) {\n    try {\n        // Get user's recent workout history for context\n        const recentWorkouts = await _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.workout_log_entries.findMany({\n            where: {\n                userId: request.userId\n            },\n            include: {\n                exercises: true\n            },\n            orderBy: {\n                date: 'desc'\n            },\n            take: 10\n        });\n        // Get available exercises from database\n        const availableExercises = await _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.exercises.findMany({\n            where: {\n                isActive: true\n            },\n            select: {\n                name: true,\n                category: true,\n                muscleGroups: true,\n                difficulty: true\n            },\n            take: 50 // Limit to avoid token limits\n        });\n        // Create the AI prompt\n        const prompt = createWorkoutPrompt(request, recentWorkouts, availableExercises);\n        // Generate suggestions using OpenAI\n        const response = await openai.chat.completions.create({\n            model: 'gpt-3.5-turbo',\n            messages: [\n                {\n                    role: 'system',\n                    content: 'You are an expert personal trainer with extensive knowledge of fitness, exercise science, and workout programming. Provide practical, safe, and effective workout suggestions based on the user\\'s preferences and goals.'\n                },\n                {\n                    role: 'user',\n                    content: prompt\n                }\n            ],\n            max_tokens: 1500,\n            temperature: 0.7\n        });\n        const aiResponse = response.choices[0]?.message?.content;\n        if (!aiResponse) {\n            throw new Error('No response from AI service');\n        }\n        // Parse the AI response into structured suggestions\n        const suggestions = parseAIResponse(aiResponse);\n        return suggestions;\n    } catch (error) {\n        console.error('Error generating AI workout suggestions:', error);\n        // Fallback to rule-based suggestions if AI fails\n        return generateFallbackSuggestions(request);\n    }\n}\nfunction createWorkoutPrompt(request, recentWorkouts, availableExercises) {\n    const recentExerciseNames = recentWorkouts.map((w)=>w.exercises.name).slice(0, 5);\n    return `\nCreate 2-3 personalized workout suggestions for a user with the following profile:\n\n**User Profile:**\n- Fitness Goals: ${request.fitnessGoals.join(', ')}\n- Experience Level: ${request.experienceLevel}\n- Preferred Workout Types: ${request.preferredWorkoutTypes.join(', ')}\n- Available Days: ${request.availableWorkoutDays.join(', ')}\n- Preferred Duration: ${request.preferredWorkoutDuration} minutes\n- Recent Exercises: ${recentExerciseNames.join(', ') || 'None'}\n\n**Available Exercises (use these):**\n${availableExercises.slice(0, 20).map((ex)=>`- ${ex.name} (${ex.category}, ${ex.difficulty})`).join('\\n')}\n\n**Requirements:**\n1. Each workout should be appropriate for their experience level\n2. Align with their fitness goals and preferred workout types\n3. Fit within their preferred duration\n4. Include 4-6 exercises with specific sets, reps, and rest times\n5. Avoid exercises they've done recently (for variety)\n6. Include practical tips for execution\n\n**Format your response as JSON:**\n\\`\\`\\`json\n[\n  {\n    \"title\": \"Workout Name\",\n    \"description\": \"Brief description of the workout focus\",\n    \"duration\": \"30-45 minutes\",\n    \"difficulty\": \"Beginner/Intermediate/Advanced\",\n    \"exercises\": [\n      {\n        \"name\": \"Exercise Name\",\n        \"sets\": 3,\n        \"reps\": \"8-12\",\n        \"restTime\": \"60-90 seconds\",\n        \"notes\": \"Form tip or modification\"\n      }\n    ],\n    \"tips\": [\"Training tip 1\", \"Training tip 2\"]\n  }\n]\n\\`\\`\\`\n`;\n}\nfunction parseAIResponse(response) {\n    try {\n        // Extract JSON from response\n        const jsonMatch = response.match(/```json\\n(.*?)\\n```/s);\n        if (jsonMatch) {\n            return JSON.parse(jsonMatch[1]);\n        }\n        // Try to parse the entire response as JSON\n        return JSON.parse(response);\n    } catch (error) {\n        console.error('Error parsing AI response:', error);\n        throw new Error('Failed to parse AI response');\n    }\n}\nfunction generateFallbackSuggestions(request) {\n    // Rule-based fallback suggestions based on user preferences\n    const suggestions = [];\n    if (request.preferredWorkoutTypes.includes('Strength Training')) {\n        suggestions.push({\n            title: 'Upper Body Strength',\n            description: 'Focus on building upper body strength and muscle',\n            duration: request.preferredWorkoutDuration + ' minutes',\n            difficulty: request.experienceLevel,\n            exercises: [\n                {\n                    name: 'Push-ups',\n                    sets: request.experienceLevel === 'BEGINNER' ? 2 : 3,\n                    reps: request.experienceLevel === 'BEGINNER' ? '5-8' : '8-12',\n                    restTime: '60 seconds',\n                    notes: 'Start on knees if needed'\n                },\n                {\n                    name: 'Dumbbell Rows',\n                    sets: 3,\n                    reps: '8-12',\n                    restTime: '60-90 seconds',\n                    notes: 'Keep back straight'\n                },\n                {\n                    name: 'Shoulder Press',\n                    sets: 3,\n                    reps: '8-10',\n                    restTime: '60-90 seconds',\n                    notes: 'Control the movement'\n                }\n            ],\n            tips: [\n                'Focus on proper form over heavy weight',\n                'Progressive overload is key for strength gains',\n                'Rest adequately between sets'\n            ]\n        });\n    }\n    if (request.preferredWorkoutTypes.includes('Cardio')) {\n        suggestions.push({\n            title: 'Cardio Conditioning',\n            description: 'Improve cardiovascular fitness and endurance',\n            duration: request.preferredWorkoutDuration + ' minutes',\n            difficulty: request.experienceLevel,\n            exercises: [\n                {\n                    name: 'Jumping Jacks',\n                    sets: 3,\n                    reps: request.experienceLevel === 'BEGINNER' ? '30 seconds' : '45 seconds',\n                    restTime: '30 seconds',\n                    notes: 'Maintain steady rhythm'\n                },\n                {\n                    name: 'High Knees',\n                    sets: 3,\n                    reps: '30 seconds',\n                    restTime: '30 seconds',\n                    notes: 'Drive knees up high'\n                },\n                {\n                    name: 'Burpees',\n                    sets: request.experienceLevel === 'BEGINNER' ? 2 : 3,\n                    reps: request.experienceLevel === 'BEGINNER' ? '5' : '8-10',\n                    restTime: '60 seconds',\n                    notes: 'Modify by stepping back instead of jumping'\n                }\n            ],\n            tips: [\n                'Start at a comfortable pace and build intensity',\n                'Focus on breathing throughout the workout',\n                'Stay hydrated during cardio sessions'\n            ]\n        });\n    }\n    // Default to at least one suggestion\n    if (suggestions.length === 0) {\n        suggestions.push({\n            title: 'Full Body Workout',\n            description: 'Complete workout targeting all major muscle groups',\n            duration: request.preferredWorkoutDuration + ' minutes',\n            difficulty: request.experienceLevel,\n            exercises: [\n                {\n                    name: 'Bodyweight Squats',\n                    sets: 3,\n                    reps: '10-15',\n                    restTime: '60 seconds',\n                    notes: 'Keep chest up and knees aligned'\n                },\n                {\n                    name: 'Push-ups',\n                    sets: 3,\n                    reps: '5-10',\n                    restTime: '60 seconds',\n                    notes: 'Modify on knees if needed'\n                },\n                {\n                    name: 'Plank',\n                    sets: 3,\n                    reps: '20-30 seconds',\n                    restTime: '45 seconds',\n                    notes: 'Keep body straight'\n                }\n            ],\n            tips: [\n                'Listen to your body and rest when needed',\n                'Consistency is more important than intensity',\n                'Progress gradually over time'\n            ]\n        });\n    }\n    return suggestions.slice(0, 2); // Return max 2 suggestions\n}\n// ===================================\n// Training Knowledge Base Functions\n// ===================================\n// Parse training knowledge base from converted markdown files\nfunction parse_training_knowledge() {\n    const cpt_dir = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), 'public/databases/NASM_CPT/converted');\n    const principles = [];\n    // Parse OPT Model (section_07)\n    const opt_content = read_section_file(cpt_dir, 'section_07_integrated_training_and_the_opt_model.md');\n    if (opt_content) {\n        // Extract OPT Model principles: Stabilisation, Strength, Power\n        const opt_principles = extract_opt_model_principles(opt_content);\n        principles.push(...opt_principles);\n    }\n    // Parse Assessment protocols (section_06)\n    const assessment_content = read_section_file(cpt_dir, 'section_06_assessments.md');\n    if (assessment_content) {\n        const assessment_principles = extract_assessment_principles(assessment_content);\n        principles.push(...assessment_principles);\n    }\n    // Parse Resistance Training (section_13)\n    const resistance_content = read_section_file(cpt_dir, 'section_13_resistance_training.md');\n    if (resistance_content) {\n        const resistance_principles = extract_resistance_training_principles(resistance_content);\n        principles.push(...resistance_principles);\n    }\n    // Parse Flexibility Training (section_08)\n    const flexibility_content = read_section_file(cpt_dir, 'section_08_flexibility_training.md');\n    if (flexibility_content) {\n        const flexibility_principles = extract_flexibility_principles(flexibility_content);\n        principles.push(...flexibility_principles);\n    }\n    return principles;\n}\n// Parse nutrition knowledge base from converted markdown files\nfunction parse_nutrition_knowledge() {\n    const cnc_dir = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), 'public/databases/NASM_CNC/converted');\n    return {\n        protein: read_section_file(cnc_dir, 'section_02_protein.md') || '',\n        carbohydrates: read_section_file(cnc_dir, 'section_03_carbohydrates.md') || '',\n        fats: read_section_file(cnc_dir, 'section_04_fats.md') || '',\n        food_choices: read_section_file(cnc_dir, 'section_01_food_choices.md') || ''\n    };\n}\n// Helper function to read section files\nfunction read_section_file(directory, filename) {\n    try {\n        const file_path = path__WEBPACK_IMPORTED_MODULE_2___default().join(directory, filename);\n        return fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(file_path, 'utf-8');\n    } catch (error) {\n        console.error(`Error reading ${filename}:`, error);\n        return null;\n    }\n}\n// Extract OPT Model principles from section_07\nfunction extract_opt_model_principles(content) {\n    const principles = [];\n    // Parse for Stabilisation, Strength, and Power phases\n    const phases = [\n        'Stabilisation',\n        'Strength',\n        'Power'\n    ];\n    phases.forEach((phase)=>{\n        const phase_section = extract_section(content, phase);\n        if (phase_section) {\n            principles.push({\n                name: `OPT Model - ${phase} Phase`,\n                description: `${phase} training phase of the OPT Model`,\n                application: phase_section.substring(0, 200),\n                category: 'TRAINING',\n                source_section: 'section_07'\n            });\n        }\n    });\n    return principles;\n}\n// Extract assessment principles from section_06\nfunction extract_assessment_principles(content) {\n    const principles = [];\n    // Look for key assessment types\n    const assessments = [\n        'Overhead Squat Assessment',\n        'Postural Assessment',\n        'Movement Assessment',\n        'Performance Assessment'\n    ];\n    assessments.forEach((assessment)=>{\n        const assessment_section = extract_section(content, assessment);\n        if (assessment_section) {\n            principles.push({\n                name: assessment,\n                description: `${assessment} protocol`,\n                application: assessment_section.substring(0, 200),\n                category: 'ASSESSMENT',\n                source_section: 'section_06'\n            });\n        }\n    });\n    return principles;\n}\n// Extract resistance training principles from section_13\nfunction extract_resistance_training_principles(content) {\n    const principles = [];\n    // Extract key resistance training concepts\n    const concepts = [\n        'Progressive Overload',\n        'Training Variables',\n        'Exercise Selection',\n        'Movement Patterns'\n    ];\n    concepts.forEach((concept)=>{\n        const concept_section = extract_section(content, concept);\n        if (concept_section) {\n            principles.push({\n                name: concept,\n                description: `Resistance training principle: ${concept}`,\n                application: concept_section.substring(0, 200),\n                category: 'TRAINING',\n                source_section: 'section_13'\n            });\n        }\n    });\n    return principles;\n}\n// Extract flexibility training principles from section_08\nfunction extract_flexibility_principles(content) {\n    const principles = [];\n    const flexibility_types = [\n        'Static Stretching',\n        'Dynamic Stretching',\n        'Active Stretching',\n        'Myofascial Release'\n    ];\n    flexibility_types.forEach((type)=>{\n        const type_section = extract_section(content, type);\n        if (type_section) {\n            principles.push({\n                name: type,\n                description: `Flexibility modality: ${type}`,\n                application: type_section.substring(0, 200),\n                category: 'TRAINING',\n                source_section: 'section_08'\n            });\n        }\n    });\n    return principles;\n}\n// Get exercise recommendations based on training principles\nfunction get_exercise_recommendations(fitness_level, _primary_goal, movement_pattern) {\n    // const training_principles = parse_training_knowledge();\n    const progression_map = {\n        BEGINNER: 'Stabilisation',\n        INTERMEDIATE: 'Strength',\n        ADVANCED: 'Power'\n    };\n    return {\n        movement_pattern,\n        training_principle: 'PROGRESSIVE_OVERLOAD',\n        progression_level: progression_map[fitness_level],\n        coaching_cues: get_coaching_cues(movement_pattern, fitness_level)\n    };\n}\n// Extract section by heading\nfunction extract_section(content, heading) {\n    const lines = content.split('\\n');\n    let capturing = false;\n    let section_content = '';\n    for (const line of lines){\n        // Match heading with various markdown formats (##, ###, etc.)\n        if (line.toLowerCase().includes(heading.toLowerCase()) && line.match(/^#{1,6}\\s/)) {\n            capturing = true;\n            continue;\n        }\n        // Stop at next heading of same or higher level\n        if (capturing && line.match(/^#{1,6}\\s/)) {\n            break;\n        }\n        if (capturing) {\n            section_content += line + '\\n';\n        }\n    }\n    return section_content || null;\n}\n// Coaching cues database (to be enhanced with training knowledge)\nfunction get_coaching_cues(movement_pattern, fitness_level) {\n    const cues_database = {\n        SQUAT: {\n            BEGINNER: [\n                'Chest up',\n                'Knees track over toes',\n                'Weight in heels'\n            ],\n            INTERMEDIATE: [\n                'Brace core',\n                'Hip hinge first',\n                'Drive through heels'\n            ],\n            ADVANCED: [\n                'Maintain tension',\n                'Explosive concentric',\n                'Controlled eccentric'\n            ]\n        },\n        HINGE: {\n            BEGINNER: [\n                'Neutral spine',\n                'Slight knee bend',\n                'Push hips back'\n            ],\n            INTERMEDIATE: [\n                'Load hamstrings',\n                'Lat engagement',\n                'Hip drive'\n            ],\n            ADVANCED: [\n                'Triple extension',\n                'Posterior chain activation',\n                'Power generation'\n            ]\n        },\n        PUSH: {\n            BEGINNER: [\n                'Shoulders packed',\n                'Elbows 45 degrees',\n                'Full range of motion'\n            ],\n            INTERMEDIATE: [\n                'Scapular retraction',\n                'Core tight',\n                'Controlled tempo'\n            ],\n            ADVANCED: [\n                'Maximum tension',\n                'Peak contraction',\n                'Mind-muscle connection'\n            ]\n        },\n        PULL: {\n            BEGINNER: [\n                'Lead with elbows',\n                'Shoulders down',\n                'Squeeze shoulder blades'\n            ],\n            INTERMEDIATE: [\n                'Full scapular retraction',\n                'Chest to bar',\n                'Lat focus'\n            ],\n            ADVANCED: [\n                'Dead hang start',\n                'Explosive pull',\n                'Control eccentric'\n            ]\n        },\n        CARRY: {\n            BEGINNER: [\n                'Neutral spine',\n                'Shoulders stable',\n                'Short distances'\n            ],\n            INTERMEDIATE: [\n                'Core braced',\n                'Even weight distribution',\n                'Controlled breathing'\n            ],\n            ADVANCED: [\n                'Maximum load',\n                'Extended duration',\n                'Anti-rotation focus'\n            ]\n        }\n    };\n    return cues_database[movement_pattern]?.[fitness_level] || [];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/ai/workout-suggestions.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/moderation/enforcement.ts":
/*!************************************************!*\
  !*** ./src/services/moderation/enforcement.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ENFORCEMENT_CONFIG: () => (/* binding */ DEFAULT_ENFORCEMENT_CONFIG),\n/* harmony export */   getEnforcementAction: () => (/* binding */ getEnforcementAction),\n/* harmony export */   getEnforcementConfig: () => (/* binding */ getEnforcementConfig),\n/* harmony export */   updateEnforcementConfig: () => (/* binding */ updateEnforcementConfig)\n/* harmony export */ });\n/* harmony import */ var _core_database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/core/database */ \"(rsc)/./src/core/database/index.ts\");\n/* harmony import */ var _loggers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loggers */ \"(rsc)/./src/services/moderation/loggers.ts\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_2__);\n/**\n * Tiered Enforcement System for Massimino\n * Implements graduated responses to violations with reputation-based adjustments\n */ \n\n\n// ============================================================================\n// ENFORCEMENT CONFIGURATION\n// ============================================================================\nconst DEFAULT_ENFORCEMENT_CONFIG = {\n    // Violation count thresholds\n    warningThreshold: 3,\n    suspensionThreshold: 5,\n    banThreshold: 10,\n    // Penalty calculations\n    firstOffensePenalty: 5,\n    repeatOffenseMultiplier: 1.5,\n    severityMultipliers: {\n        1: 0.5,\n        2: 1.0,\n        3: 1.5,\n        4: 2.0,\n        5: 3.0\n    },\n    // Suspension durations (in hours)\n    suspensionDurations: {\n        first: 24,\n        second: 72,\n        third: 168,\n        subsequent: 720\n    },\n    // Reputation penalties by violation type\n    reputationPenalties: {\n        [_prisma_client__WEBPACK_IMPORTED_MODULE_2__.ViolationType.INAPPROPRIATE_CONTENT]: 15,\n        [_prisma_client__WEBPACK_IMPORTED_MODULE_2__.ViolationType.HARASSMENT]: 20,\n        [_prisma_client__WEBPACK_IMPORTED_MODULE_2__.ViolationType.SPAM]: 10,\n        [_prisma_client__WEBPACK_IMPORTED_MODULE_2__.ViolationType.IMPERSONATION]: 25,\n        [_prisma_client__WEBPACK_IMPORTED_MODULE_2__.ViolationType.OFF_TOPIC]: 5,\n        [_prisma_client__WEBPACK_IMPORTED_MODULE_2__.ViolationType.PRIVACY_VIOLATION]: 30,\n        [_prisma_client__WEBPACK_IMPORTED_MODULE_2__.ViolationType.HATE_SPEECH]: 40,\n        [_prisma_client__WEBPACK_IMPORTED_MODULE_2__.ViolationType.THREAT]: 50\n    },\n    // Auto-action thresholds\n    autoSuspendSeverity: 4,\n    autoBanSeverity: 5,\n    autoDeleteSeverity: 3\n};\n// Load config from environment or use defaults\nconst ENFORCEMENT_CONFIG = {\n    ...DEFAULT_ENFORCEMENT_CONFIG,\n    // Override with environment variables if present\n    warningThreshold: parseInt(process.env.WARNING_THRESHOLD || '3'),\n    suspensionThreshold: parseInt(process.env.SUSPENSION_THRESHOLD || '5'),\n    banThreshold: parseInt(process.env.BAN_THRESHOLD || '10'),\n    firstOffensePenalty: parseInt(process.env.REPUTATION_PENALTY || '5')\n};\n// ============================================================================\n// MAIN ENFORCEMENT FUNCTION\n// ============================================================================\n/**\n * Apply enforcement action based on moderation result\n */ async function getEnforcementAction(userId, moderationResult, contentId, contentType) {\n    try {\n        // Get user's current safety status\n        const user = await getUserSafetyInfo(userId);\n        if (!user) {\n            throw new Error('User not found');\n        }\n        // Calculate violation severity\n        const severity = calculateViolationSeverity(moderationResult);\n        // Determine appropriate action\n        const action = await determineEnforcementAction(user, severity);\n        // Calculate penalties\n        const reputationChange = calculateReputationPenalty(user, severity, moderationResult);\n        // Apply the enforcement action\n        const result = await applyEnforcementAction(userId, action, severity, reputationChange, moderationResult, contentId, contentType);\n        return result;\n    } catch (error) {\n        console.error('Enforcement action failed:', error);\n        // Return a safe default action\n        return {\n            action: 'WARN',\n            reason: 'Enforcement system error - defaulting to warning',\n            severity: 2,\n            reputationChange: -5,\n            newReputationScore: 0,\n            newWarningCount: 0,\n            newStatus: _prisma_client__WEBPACK_IMPORTED_MODULE_2__.UserStatus.ACTIVE,\n            notifyUser: true,\n            notifyReporter: false,\n            escalateToAdmin: true,\n            canAppeal: true\n        };\n    }\n}\n/**\n * Get comprehensive user safety information\n */ async function getUserSafetyInfo(userId) {\n    const user = await _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.users.findUnique({\n        where: {\n            id: userId\n        },\n        select: {\n            id: true,\n            reputationScore: true,\n            warningCount: true,\n            status: true,\n            suspendedUntil: true\n        }\n    });\n    if (!user) return null;\n    // Get violation history\n    const violations = await _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.user_violations.findMany({\n        where: {\n            userId\n        },\n        orderBy: {\n            createdAt: 'desc'\n        }\n    });\n    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n    const recentViolations = violations.filter((v)=>v.createdAt > thirtyDaysAgo);\n    // Group violations by severity and type\n    const bySeverity = {};\n    const byType = {};\n    violations.forEach((violation)=>{\n        bySeverity[violation.severity] = (bySeverity[violation.severity] || 0) + 1;\n        byType[violation.violationType] = (byType[violation.violationType] || 0) + 1;\n    });\n    // Count suspension history\n    const suspensionHistory = violations.filter((v)=>v.suspensionHours && v.suspensionHours > 0).length;\n    return {\n        ...user,\n        violationHistory: {\n            total: violations.length,\n            recent: recentViolations.length,\n            bySeverity,\n            byType,\n            ...violations[0]?.createdAt && {\n                lastViolation: violations[0].createdAt\n            }\n        },\n        suspensionHistory\n    };\n}\n// ============================================================================\n// ACTION DETERMINATION\n// ============================================================================\n/**\n * Calculate severity score from moderation result\n */ function calculateViolationSeverity(result) {\n    if (result.categories.length === 0) return 1;\n    // Use highest severity from categories\n    const maxSeverity = Math.max(...result.categories.map((c)=>c.severity));\n    // Adjust based on confidence\n    const confidenceMultiplier = result.confidence > 0.9 ? 1.2 : result.confidence > 0.7 ? 1.0 : 0.8;\n    return Math.min(Math.round(maxSeverity * confidenceMultiplier), 5);\n}\n/**\n * Determine appropriate enforcement action\n */ async function determineEnforcementAction(user, severity) {\n    const config = ENFORCEMENT_CONFIG;\n    // Check for auto-ban conditions\n    if (severity >= config.autoBanSeverity || user.violationHistory.total >= config.banThreshold) {\n        return 'BAN';\n    }\n    // Check for auto-suspend conditions\n    if (severity >= config.autoSuspendSeverity || user.warningCount >= config.warningThreshold || user.violationHistory.recent >= 3) {\n        // Determine suspension length based on history\n        if (user.suspensionHistory === 0) return 'SUSPEND_3D';\n        if (user.suspensionHistory === 1) return 'SUSPEND_7D';\n        return 'SUSPEND_30D';\n    }\n    // Check for muting (less severe than suspension)\n    if (severity >= 3 || user.violationHistory.recent >= 2) {\n        return user.warningCount >= 2 ? 'MUTE_24H' : 'MUTE_1H';\n    }\n    // Check for content deletion\n    if (severity >= config.autoDeleteSeverity) {\n        return user.warningCount >= 1 ? 'DELETE_CONTENT' : 'WARN';\n    }\n    // Default to warning for first-time or minor offenses\n    return 'WARN';\n}\n/**\n * Calculate reputation penalty\n */ function calculateReputationPenalty(user, severity, result) {\n    const config = ENFORCEMENT_CONFIG;\n    // Base penalty\n    let penalty = config.firstOffensePenalty;\n    // Apply severity multiplier\n    penalty *= config.severityMultipliers[severity] || 1;\n    // Apply repeat offense multiplier\n    if (user.violationHistory.total > 0) {\n        penalty *= Math.pow(config.repeatOffenseMultiplier, Math.min(user.violationHistory.total, 5));\n    }\n    // Apply violation type penalty\n    if (result.categories.length > 0) {\n        const primaryCategory = result.categories[0];\n        if (primaryCategory && primaryCategory.subcategory) {\n            const typeKey = Object.keys(_prisma_client__WEBPACK_IMPORTED_MODULE_2__.ViolationType).find((key)=>_prisma_client__WEBPACK_IMPORTED_MODULE_2__.ViolationType[key] === primaryCategory.subcategory);\n            if (typeKey) {\n                const typePenalty = config.reputationPenalties[primaryCategory.subcategory];\n                penalty = Math.max(penalty, typePenalty);\n            }\n        }\n    }\n    // Apply recent violation multiplier (more penalties for rapid violations)\n    if (user.violationHistory.recent > 1) {\n        penalty *= 1 + (user.violationHistory.recent - 1) * 0.5;\n    }\n    // Cap the penalty (don't destroy someone's reputation in one go)\n    const maxPenalty = Math.max(user.reputationScore * 0.3, 50); // Max 30% of current reputation or 50 points\n    return Math.round(Math.min(penalty, maxPenalty));\n}\n// ============================================================================\n// ACTION APPLICATION\n// ============================================================================\n/**\n * Apply the determined enforcement action\n */ async function applyEnforcementAction(userId, action, severity, reputationPenalty, moderationResult, contentId, contentType) {\n    const actionDetails = parseUserAction(action);\n    // Start database transaction\n    const result = await _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.$transaction(async (tx)=>{\n        // Get current user state\n        const currentUser = await tx.users.findUniqueOrThrow({\n            where: {\n                id: userId\n            },\n            select: {\n                reputationScore: true,\n                warningCount: true,\n                status: true\n            }\n        });\n        // Calculate new values\n        const newReputationScore = Math.max(0, currentUser.reputationScore - reputationPenalty);\n        const newWarningCount = actionDetails.isWarning ? currentUser.warningCount + 1 : currentUser.warningCount;\n        const newStatus = actionDetails.newStatus || currentUser.status;\n        // Update user record\n        await tx.users.update({\n            where: {\n                id: userId\n            },\n            data: {\n                reputationScore: newReputationScore,\n                warningCount: newWarningCount,\n                status: newStatus,\n                ...actionDetails.suspendedUntil && {\n                    suspendedUntil: actionDetails.suspendedUntil\n                }\n            }\n        });\n        // Create violation record\n        await tx.user_violations.create({\n            data: {\n                userId,\n                violationType: getViolationTypeFromResult(moderationResult),\n                severity,\n                description: moderationResult.reason || 'Content violation detected',\n                ...contentId && {\n                    contentId\n                },\n                ...contentType && {\n                    contentType\n                },\n                warningIssued: actionDetails.isWarning,\n                ...actionDetails.duration && {\n                    suspensionHours: actionDetails.duration\n                },\n                reputationHit: reputationPenalty,\n                moderationLogId: 'temp'\n            }\n        });\n        const result = {\n            action,\n            reason: generateEnforcementReason(action, severity, moderationResult),\n            severity,\n            reputationChange: -reputationPenalty,\n            newReputationScore,\n            newWarningCount,\n            newStatus: newStatus,\n            notifyUser: shouldNotifyUser(action),\n            notifyReporter: shouldNotifyReporter(action),\n            escalateToAdmin: shouldEscalateToAdmin(action, severity),\n            canAppeal: canAppealAction(action)\n        };\n        if (actionDetails.duration) {\n            result.duration = actionDetails.duration;\n        }\n        const appealDeadline = getAppealDeadline(action);\n        if (appealDeadline) {\n            result.appealDeadline = appealDeadline;\n        }\n        return result;\n    });\n    // Log the enforcement action\n    await (0,_loggers__WEBPACK_IMPORTED_MODULE_1__.logModerationAction)({\n        userId,\n        action: parseActionToModerationAction(action),\n        contentType: contentType || 'UNKNOWN',\n        content: 'Enforcement action applied',\n        result: moderationResult,\n        enforcement: result\n    });\n    return result;\n}\n/**\n * Parse user action into actionable details\n */ function parseUserAction(action) {\n    const now = new Date();\n    switch(action){\n        case 'WARN':\n            return {\n                isWarning: true\n            };\n        case 'MUTE_1H':\n            return {\n                isWarning: false,\n                duration: 1\n            };\n        case 'MUTE_24H':\n            return {\n                isWarning: false,\n                duration: 24\n            };\n        case 'SUSPEND_3D':\n            return {\n                isWarning: false,\n                duration: 72,\n                newStatus: _prisma_client__WEBPACK_IMPORTED_MODULE_2__.UserStatus.SUSPENDED,\n                suspendedUntil: new Date(now.getTime() + 72 * 60 * 60 * 1000)\n            };\n        case 'SUSPEND_7D':\n            return {\n                isWarning: false,\n                duration: 168,\n                newStatus: _prisma_client__WEBPACK_IMPORTED_MODULE_2__.UserStatus.SUSPENDED,\n                suspendedUntil: new Date(now.getTime() + 168 * 60 * 60 * 1000)\n            };\n        case 'SUSPEND_30D':\n            return {\n                isWarning: false,\n                duration: 720,\n                newStatus: _prisma_client__WEBPACK_IMPORTED_MODULE_2__.UserStatus.SUSPENDED,\n                suspendedUntil: new Date(now.getTime() + 720 * 60 * 60 * 1000)\n            };\n        case 'BAN':\n            return {\n                isWarning: false,\n                newStatus: _prisma_client__WEBPACK_IMPORTED_MODULE_2__.UserStatus.BANNED\n            };\n        case 'DELETE_CONTENT':\n            return {\n                isWarning: false\n            };\n        case 'EDIT_CONTENT':\n            return {\n                isWarning: false\n            };\n        default:\n            return {\n                isWarning: true\n            };\n    }\n}\n/**\n * Generate human-readable enforcement reason\n */ function generateEnforcementReason(action, severity, result) {\n    const severityText = [\n        'minor',\n        'minor',\n        'moderate',\n        'serious',\n        'severe',\n        'critical'\n    ][severity] || 'unknown';\n    const actionText = {\n        'WARN': 'warning issued',\n        'MUTE_1H': 'muted for 1 hour',\n        'MUTE_24H': 'muted for 24 hours',\n        'SUSPEND_3D': 'suspended for 3 days',\n        'SUSPEND_7D': 'suspended for 7 days',\n        'SUSPEND_30D': 'suspended for 30 days',\n        'BAN': 'permanently banned',\n        'DELETE_CONTENT': 'content deleted',\n        'EDIT_CONTENT': 'content edited'\n    }[action] || 'action taken';\n    return `${actionText.charAt(0).toUpperCase() + actionText.slice(1)} due to ${severityText} violation: ${result.reason}`;\n}\n/**\n * Helper functions for enforcement decisions\n */ function shouldNotifyUser(action) {\n    return ![\n        'DELETE_CONTENT',\n        'EDIT_CONTENT'\n    ].includes(action);\n}\nfunction shouldNotifyReporter(action) {\n    return [\n        'SUSPEND_3D',\n        'SUSPEND_7D',\n        'SUSPEND_30D',\n        'BAN'\n    ].includes(action);\n}\nfunction shouldEscalateToAdmin(action, severity) {\n    return action === 'BAN' || severity >= 4;\n}\nfunction canAppealAction(action) {\n    return ![\n        'WARN',\n        'MUTE_1H'\n    ].includes(action);\n}\nfunction getAppealDeadline(action) {\n    if (!canAppealAction(action)) return undefined;\n    const days = action === 'BAN' ? 30 : 7;\n    return new Date(Date.now() + days * 24 * 60 * 60 * 1000);\n}\nfunction getViolationTypeFromResult(result) {\n    if (result.categories.length === 0) return _prisma_client__WEBPACK_IMPORTED_MODULE_2__.ViolationType.OFF_TOPIC;\n    // Map category to violation type\n    const firstCategory = result.categories[0];\n    if (!firstCategory) return _prisma_client__WEBPACK_IMPORTED_MODULE_2__.ViolationType.OFF_TOPIC;\n    const category = firstCategory.category.toLowerCase();\n    if (category.includes('sexual') || category.includes('inappropriate')) {\n        return _prisma_client__WEBPACK_IMPORTED_MODULE_2__.ViolationType.INAPPROPRIATE_CONTENT;\n    }\n    if (category.includes('harassment') || category.includes('hate')) {\n        return _prisma_client__WEBPACK_IMPORTED_MODULE_2__.ViolationType.HARASSMENT;\n    }\n    if (category.includes('spam')) {\n        return _prisma_client__WEBPACK_IMPORTED_MODULE_2__.ViolationType.SPAM;\n    }\n    if (category.includes('privacy')) {\n        return _prisma_client__WEBPACK_IMPORTED_MODULE_2__.ViolationType.PRIVACY_VIOLATION;\n    }\n    if (category.includes('threat') || category.includes('violence')) {\n        return _prisma_client__WEBPACK_IMPORTED_MODULE_2__.ViolationType.THREAT;\n    }\n    return _prisma_client__WEBPACK_IMPORTED_MODULE_2__.ViolationType.OFF_TOPIC;\n}\nfunction parseActionToModerationAction(action) {\n    // This would map to ModerationAction enum values\n    // For now, returning a string\n    return action.includes('SUSPEND') || action === 'BAN' ? 'BLOCKED' : 'FLAGGED';\n}\n// ============================================================================\n// CONFIGURATION MANAGEMENT\n// ============================================================================\n/**\n * Update enforcement configuration\n */ function updateEnforcementConfig(updates) {\n    Object.assign(ENFORCEMENT_CONFIG, updates);\n}\n/**\n * Get current enforcement configuration\n */ function getEnforcementConfig() {\n    return {\n        ...ENFORCEMENT_CONFIG\n    };\n}\n// ============================================================================\n// EXPORT UTILITIES\n// ============================================================================\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/moderation/enforcement.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/moderation/index.ts":
/*!******************************************!*\
  !*** ./src/services/moderation/index.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CATEGORY_SEVERITY_MAP: () => (/* reexport safe */ _openai__WEBPACK_IMPORTED_MODULE_3__.CATEGORY_SEVERITY_MAP),\n/* harmony export */   ContentType: () => (/* reexport safe */ _middleware__WEBPACK_IMPORTED_MODULE_2__.ContentType),\n/* harmony export */   DEFAULT_ENFORCEMENT_CONFIG: () => (/* reexport safe */ _enforcement__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ENFORCEMENT_CONFIG),\n/* harmony export */   FITNESS_VIOLATION_PATTERNS: () => (/* reexport safe */ _rules__WEBPACK_IMPORTED_MODULE_4__.FITNESS_VIOLATION_PATTERNS),\n/* harmony export */   LOGGING_CONFIG: () => (/* reexport safe */ _loggers__WEBPACK_IMPORTED_MODULE_1__.LOGGING_CONFIG),\n/* harmony export */   MODERATION_CONFIG: () => (/* reexport safe */ _openai__WEBPACK_IMPORTED_MODULE_3__.MODERATION_CONFIG),\n/* harmony export */   ModerationAction: () => (/* reexport safe */ _middleware__WEBPACK_IMPORTED_MODULE_2__.ModerationAction),\n/* harmony export */   ModerationSource: () => (/* reexport safe */ _middleware__WEBPACK_IMPORTED_MODULE_2__.ModerationSource),\n/* harmony export */   applyCustomRules: () => (/* reexport safe */ _rules__WEBPACK_IMPORTED_MODULE_4__.applyCustomRules),\n/* harmony export */   cleanupOldLogs: () => (/* reexport safe */ _loggers__WEBPACK_IMPORTED_MODULE_1__.cleanupOldLogs),\n/* harmony export */   detectPositiveFitnessContent: () => (/* reexport safe */ _rules__WEBPACK_IMPORTED_MODULE_4__.detectPositiveFitnessContent),\n/* harmony export */   getActiveRules: () => (/* reexport safe */ _rules__WEBPACK_IMPORTED_MODULE_4__.getActiveRules),\n/* harmony export */   getEnforcementAction: () => (/* reexport safe */ _enforcement__WEBPACK_IMPORTED_MODULE_0__.getEnforcementAction),\n/* harmony export */   getEnforcementConfig: () => (/* reexport safe */ _enforcement__WEBPACK_IMPORTED_MODULE_0__.getEnforcementConfig),\n/* harmony export */   getModerationStats: () => (/* reexport safe */ _loggers__WEBPACK_IMPORTED_MODULE_1__.getModerationStats),\n/* harmony export */   getRealTimeMetrics: () => (/* reexport safe */ _loggers__WEBPACK_IMPORTED_MODULE_1__.getRealTimeMetrics),\n/* harmony export */   getRecentModerationActivity: () => (/* reexport safe */ _loggers__WEBPACK_IMPORTED_MODULE_1__.getRecentModerationActivity),\n/* harmony export */   getRuleStats: () => (/* reexport safe */ _rules__WEBPACK_IMPORTED_MODULE_4__.getRuleStats),\n/* harmony export */   getUserModerationLogs: () => (/* reexport safe */ _loggers__WEBPACK_IMPORTED_MODULE_1__.getUserModerationLogs),\n/* harmony export */   logModerationAction: () => (/* reexport safe */ _loggers__WEBPACK_IMPORTED_MODULE_1__.logModerationAction),\n/* harmony export */   moderateContent: () => (/* reexport safe */ _openai__WEBPACK_IMPORTED_MODULE_3__.moderateContent),\n/* harmony export */   moderateContentBatch: () => (/* reexport safe */ _openai__WEBPACK_IMPORTED_MODULE_3__.moderateContentBatch),\n/* harmony export */   moderationMiddleware: () => (/* reexport safe */ _middleware__WEBPACK_IMPORTED_MODULE_2__.moderationMiddleware),\n/* harmony export */   searchModerationLogs: () => (/* reexport safe */ _loggers__WEBPACK_IMPORTED_MODULE_1__.searchModerationLogs),\n/* harmony export */   updateEnforcementConfig: () => (/* reexport safe */ _enforcement__WEBPACK_IMPORTED_MODULE_0__.updateEnforcementConfig),\n/* harmony export */   updateRule: () => (/* reexport safe */ _rules__WEBPACK_IMPORTED_MODULE_4__.updateRule),\n/* harmony export */   validateContentClient: () => (/* reexport safe */ _middleware__WEBPACK_IMPORTED_MODULE_2__.validateContentClient)\n/* harmony export */ });\n/* harmony import */ var _enforcement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enforcement */ \"(rsc)/./src/services/moderation/enforcement.ts\");\n/* harmony import */ var _loggers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loggers */ \"(rsc)/./src/services/moderation/loggers.ts\");\n/* harmony import */ var _middleware__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./middleware */ \"(rsc)/./src/services/moderation/middleware.ts\");\n/* harmony import */ var _openai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./openai */ \"(rsc)/./src/services/moderation/openai.ts\");\n/* harmony import */ var _rules__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rules */ \"(rsc)/./src/services/moderation/rules.ts\");\n/**\n * Moderation Services Exports\n * Centralized export point for all content moderation functionality\n */ // Moderation enforcement actions and policies\n\n// Moderation event logging utilities\n\n// Middleware for applying moderation rules\n\n// OpenAI-based content moderation\n\n// Moderation rules engine\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2VydmljZXMvbW9kZXJhdGlvbi9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Q0FHQyxHQUVELDhDQUE4QztBQUNoQjtBQUU5QixxQ0FBcUM7QUFDWDtBQUUxQiwyQ0FBMkM7QUFDZDtBQUU3QixrQ0FBa0M7QUFDVDtBQUV6QiwwQkFBMEI7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcnNvbGUvRG9jdW1lbnRzL0dpdEh1Yi9tYXNzaW1pbm8vbWFzc2ltaW5vL3NyYy9zZXJ2aWNlcy9tb2RlcmF0aW9uL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTW9kZXJhdGlvbiBTZXJ2aWNlcyBFeHBvcnRzXG4gKiBDZW50cmFsaXplZCBleHBvcnQgcG9pbnQgZm9yIGFsbCBjb250ZW50IG1vZGVyYXRpb24gZnVuY3Rpb25hbGl0eVxuICovXG5cbi8vIE1vZGVyYXRpb24gZW5mb3JjZW1lbnQgYWN0aW9ucyBhbmQgcG9saWNpZXNcbmV4cG9ydCAqIGZyb20gJy4vZW5mb3JjZW1lbnQnO1xuXG4vLyBNb2RlcmF0aW9uIGV2ZW50IGxvZ2dpbmcgdXRpbGl0aWVzXG5leHBvcnQgKiBmcm9tICcuL2xvZ2dlcnMnO1xuXG4vLyBNaWRkbGV3YXJlIGZvciBhcHBseWluZyBtb2RlcmF0aW9uIHJ1bGVzXG5leHBvcnQgKiBmcm9tICcuL21pZGRsZXdhcmUnO1xuXG4vLyBPcGVuQUktYmFzZWQgY29udGVudCBtb2RlcmF0aW9uXG5leHBvcnQgKiBmcm9tICcuL29wZW5haSc7XG5cbi8vIE1vZGVyYXRpb24gcnVsZXMgZW5naW5lXG5leHBvcnQgKiBmcm9tICcuL3J1bGVzJzsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/services/moderation/index.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/moderation/loggers.ts":
/*!********************************************!*\
  !*** ./src/services/moderation/loggers.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LOGGING_CONFIG: () => (/* binding */ LOGGING_CONFIG),\n/* harmony export */   cleanupOldLogs: () => (/* binding */ cleanupOldLogs),\n/* harmony export */   getModerationStats: () => (/* binding */ getModerationStats),\n/* harmony export */   getRealTimeMetrics: () => (/* binding */ getRealTimeMetrics),\n/* harmony export */   getRecentModerationActivity: () => (/* binding */ getRecentModerationActivity),\n/* harmony export */   getUserModerationLogs: () => (/* binding */ getUserModerationLogs),\n/* harmony export */   logModerationAction: () => (/* binding */ logModerationAction),\n/* harmony export */   searchModerationLogs: () => (/* binding */ searchModerationLogs)\n/* harmony export */ });\n/* harmony import */ var _core_database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/core/database */ \"(rsc)/./src/core/database/index.ts\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_1__);\n/**\n * Comprehensive Moderation Action Logging for Massimino\n * Tracks all moderation activities for audit trails and analytics\n */ \n\n// ============================================================================\n// LOGGING CONFIGURATION\n// ============================================================================\nconst LOGGING_CONFIG = {\n    enabled: process.env.MODERATION_LOGGING !== 'false',\n    logLevel: process.env.LOG_LEVEL || 'info',\n    retentionDays: parseInt(process.env.LOG_RETENTION_DAYS || '90'),\n    batchSize: 100,\n    flushInterval: 5000\n};\n// ============================================================================\n// BATCH LOGGING SYSTEM\n// ============================================================================\nclass ModerationLogger {\n    logQueue = [];\n    metricsQueue = [];\n    flushTimer;\n    constructor(){\n        if (LOGGING_CONFIG.enabled) {\n            this.startBatchProcessor();\n        }\n    }\n    /**\n   * Log a moderation action\n   */ async logAction(entry) {\n        if (!LOGGING_CONFIG.enabled) return '';\n        const logId = this.generateLogId();\n        const timestamp = new Date();\n        // Add to queue for batch processing\n        this.logQueue.push({\n            entry,\n            timestamp,\n            id: logId\n        });\n        // Extract metrics\n        this.extractMetrics(entry, timestamp);\n        // Console logging for immediate visibility\n        this.logToConsole(entry, timestamp, logId);\n        // Force flush if queue is getting large\n        if (this.logQueue.length >= LOGGING_CONFIG.batchSize) {\n            await this.flushLogs();\n        }\n        return logId;\n    }\n    /**\n   * Start the batch processor\n   */ startBatchProcessor() {\n        this.flushTimer = setInterval(()=>{\n            this.flushLogs().catch((error)=>{\n                console.error('Failed to flush moderation logs:', error);\n            });\n        }, LOGGING_CONFIG.flushInterval);\n        // Cleanup on process exit\n        process.on('beforeExit', ()=>{\n            this.flushLogs().catch(console.error);\n            if (this.flushTimer) {\n                clearInterval(this.flushTimer);\n            }\n        });\n    }\n    /**\n   * Flush queued logs to database\n   */ async flushLogs() {\n        if (this.logQueue.length === 0) return;\n        const logsToFlush = this.logQueue.splice(0);\n        try {\n            // Batch insert to database\n            await _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.moderation_logs.createMany({\n                data: logsToFlush.map(({ entry, timestamp, id })=>{\n                    const contentId = this.extractContentId(entry.content);\n                    const data = {\n                        id,\n                        contentType: entry.contentType,\n                        content: this.truncateContent(entry.content),\n                        action: entry.action,\n                        source: entry.result.source,\n                        confidence: entry.result.confidence,\n                        openaiResponse: this.serializeOpenAIResponse(entry.result),\n                        processedAt: entry.result.moderatedAt,\n                        createdAt: timestamp,\n                        updatedAt: timestamp\n                    };\n                    if (entry.userId) {\n                        data.userId = entry.userId;\n                    }\n                    if (contentId) {\n                        data.contentId = contentId;\n                    }\n                    if (entry.result.reason) {\n                        data.flaggedReason = entry.result.reason;\n                    }\n                    return data;\n                }),\n                skipDuplicates: true\n            });\n            console.log(`Flushed ${logsToFlush.length} moderation logs to database`);\n        } catch (error) {\n            console.error('Failed to flush logs to database:', error);\n            // Put logs back in queue for retry\n            this.logQueue.unshift(...logsToFlush);\n        }\n    }\n    /**\n   * Extract metrics for analytics\n   */ extractMetrics(entry, timestamp) {\n        const maxSeverity = Math.max(...entry.result.categories.map((c)=>c.severity), 1);\n        const metrics = {\n            timestamp,\n            action: entry.action,\n            duration: this.calculateProcessingDuration(entry.result),\n            success: entry.result.action !== _prisma_client__WEBPACK_IMPORTED_MODULE_1__.ModerationAction.BLOCKED,\n            contentLength: entry.content.length,\n            confidence: entry.result.confidence,\n            severity: maxSeverity\n        };\n        if (entry.userId) {\n            metrics.userId = entry.userId;\n        }\n        this.metricsQueue.push(metrics);\n        // Keep metrics queue manageable\n        if (this.metricsQueue.length > 1000) {\n            this.metricsQueue.splice(0, 500); // Remove oldest 500\n        }\n    }\n    /**\n   * Console logging with appropriate levels\n   */ logToConsole(entry, timestamp, logId) {\n        const logLevel = this.determineLogLevel(entry.result.action, entry.result.confidence);\n        if (!this.shouldLog(logLevel)) return;\n        const logData = {\n            id: logId,\n            timestamp: timestamp.toISOString(),\n            userId: entry.userId || 'anonymous',\n            action: entry.action,\n            contentType: entry.contentType,\n            confidence: entry.result.confidence,\n            flagged: entry.result.flagged,\n            blocked: entry.result.blocked,\n            categories: entry.result.categories.map((c)=>c.category),\n            reason: entry.result.reason,\n            enforcement: entry.enforcement?.action\n        };\n        switch(logLevel){\n            case 'debug':\n                console.debug('🔍 Moderation Debug:', logData);\n                break;\n            case 'info':\n                console.info('ℹ️ Moderation Info:', logData);\n                break;\n            case 'warn':\n                console.warn('⚠️ Moderation Warning:', logData);\n                break;\n            case 'error':\n                console.error('🚨 Moderation Error:', logData);\n                break;\n        }\n    }\n    /**\n   * Generate unique log ID\n   */ generateLogId() {\n        return `mod_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    /**\n   * Determine appropriate log level\n   */ determineLogLevel(action, confidence) {\n        if (action === _prisma_client__WEBPACK_IMPORTED_MODULE_1__.ModerationAction.BLOCKED) return 'error';\n        if (action === _prisma_client__WEBPACK_IMPORTED_MODULE_1__.ModerationAction.FLAGGED && confidence > 0.8) return 'warn';\n        if (action === _prisma_client__WEBPACK_IMPORTED_MODULE_1__.ModerationAction.FLAGGED) return 'info';\n        return 'debug';\n    }\n    /**\n   * Check if we should log at this level\n   */ shouldLog(level) {\n        const levels = [\n            'debug',\n            'info',\n            'warn',\n            'error'\n        ];\n        const currentLevelIndex = levels.indexOf(LOGGING_CONFIG.logLevel);\n        const messageLevelIndex = levels.indexOf(level);\n        return messageLevelIndex >= currentLevelIndex;\n    }\n    /**\n   * Calculate processing duration if available\n   */ calculateProcessingDuration(result) {\n        // This would be calculated from start time if tracked\n        // For now, estimate based on complexity\n        const baseTime = 100; // 100ms base\n        const categoryTime = result.categories.length * 50; // 50ms per category\n        return baseTime + categoryTime;\n    }\n    /**\n   * Extract content ID if available\n   */ extractContentId(_content) {\n        // Try to extract ID from content metadata\n        // This would depend on how content is structured\n        return null;\n    }\n    /**\n   * Truncate content for storage\n   */ truncateContent(content) {\n        const maxLength = 1000; // Store up to 1000 chars\n        if (content.length <= maxLength) return content;\n        return content.substring(0, maxLength - 3) + '...';\n    }\n    /**\n   * Serialize OpenAI response for storage\n   */ serializeOpenAIResponse(result) {\n        if (result.source !== _prisma_client__WEBPACK_IMPORTED_MODULE_1__.ModerationSource.OPENAI_API) return null;\n        return {\n            flagged: result.flagged,\n            categories: result.categories,\n            confidence: result.confidence,\n            timestamp: result.moderatedAt\n        };\n    }\n    /**\n   * Get recent metrics\n   */ getMetrics(timeWindow = 3600000) {\n        const cutoff = new Date(Date.now() - timeWindow);\n        return this.metricsQueue.filter((m)=>m.timestamp >= cutoff);\n    }\n}\n// ============================================================================\n// SINGLETON LOGGER INSTANCE\n// ============================================================================\nconst moderationLogger = new ModerationLogger();\n// ============================================================================\n// PUBLIC API FUNCTIONS\n// ============================================================================\n/**\n * Log a moderation action\n */ async function logModerationAction(entry) {\n    return moderationLogger.logAction(entry);\n}\n/**\n * Get moderation logs for a specific user\n */ async function getUserModerationLogs(userId, limit = 50, offset = 0) {\n    return _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.moderation_logs.findMany({\n        where: {\n            userId\n        },\n        select: {\n            id: true,\n            action: true,\n            contentType: true,\n            flaggedReason: true,\n            confidence: true,\n            createdAt: true\n        },\n        orderBy: {\n            createdAt: 'desc'\n        },\n        take: limit,\n        skip: offset\n    }).then((logs)=>logs.map((log)=>({\n                id: log.id,\n                action: log.action,\n                contentType: log.contentType,\n                reason: log.flaggedReason,\n                confidence: log.confidence,\n                createdAt: log.createdAt\n            })));\n}\n/**\n * Get moderation statistics\n */ async function getModerationStats(timeWindow = 'day') {\n    const windowHours = {\n        day: 24,\n        week: 168,\n        month: 720\n    }[timeWindow];\n    const since = new Date(Date.now() - windowHours * 60 * 60 * 1000);\n    const logs = await _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.moderation_logs.findMany({\n        where: {\n            createdAt: {\n                gte: since\n            }\n        },\n        select: {\n            action: true,\n            confidence: true,\n            flaggedReason: true\n        }\n    });\n    const actionsByType = {};\n    let totalConfidence = 0;\n    let confidenceCount = 0;\n    let flaggedContent = 0;\n    let blockedContent = 0;\n    const categoryCount = {};\n    logs.forEach((log)=>{\n        actionsByType[log.action] = (actionsByType[log.action] || 0) + 1;\n        if (log.confidence !== null) {\n            totalConfidence += log.confidence;\n            confidenceCount++;\n        }\n        if (log.action === _prisma_client__WEBPACK_IMPORTED_MODULE_1__.ModerationAction.FLAGGED) flaggedContent++;\n        if (log.action === _prisma_client__WEBPACK_IMPORTED_MODULE_1__.ModerationAction.BLOCKED) blockedContent++;\n        if (log.flaggedReason) {\n            categoryCount[log.flaggedReason] = (categoryCount[log.flaggedReason] || 0) + 1;\n        }\n    });\n    const topViolationCategories = Object.entries(categoryCount).map(([category, count])=>({\n            category,\n            count\n        })).sort((a, b)=>b.count - a.count).slice(0, 10);\n    return {\n        totalActions: logs.length,\n        actionsByType,\n        averageConfidence: confidenceCount > 0 ? totalConfidence / confidenceCount : 0,\n        flaggedContent,\n        blockedContent,\n        topViolationCategories\n    };\n}\n/**\n * Get recent moderation activity\n */ async function getRecentModerationActivity(limit = 20) {\n    const logs = await _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.moderation_logs.findMany({\n        take: limit,\n        orderBy: {\n            createdAt: 'desc'\n        },\n        include: {\n            user: {\n                select: {\n                    name: true,\n                    role: true\n                }\n            }\n        }\n    });\n    return logs.map((log)=>({\n            id: log.id,\n            userId: log.userId,\n            action: log.action,\n            contentType: log.contentType,\n            confidence: log.confidence,\n            createdAt: log.createdAt,\n            ...log.user && {\n                user: {\n                    name: log.user.name,\n                    role: log.user.role\n                }\n            }\n        }));\n}\n/**\n * Search moderation logs\n */ async function searchModerationLogs(params) {\n    const where = {};\n    if (params.userId) where.userId = params.userId;\n    if (params.action) where.action = params.action;\n    if (params.contentType) where.contentType = params.contentType;\n    if (params.dateFrom || params.dateTo) {\n        where.createdAt = {};\n        if (params.dateFrom) where.createdAt.gte = params.dateFrom;\n        if (params.dateTo) where.createdAt.lte = params.dateTo;\n    }\n    return _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.moderation_logs.findMany({\n        where,\n        select: {\n            id: true,\n            userId: true,\n            action: true,\n            contentType: true,\n            content: true,\n            flaggedReason: true,\n            confidence: true,\n            createdAt: true\n        },\n        orderBy: {\n            createdAt: 'desc'\n        },\n        take: params.limit || 50,\n        skip: params.offset || 0\n    });\n}\n/**\n * Clean up old logs based on retention policy\n */ async function cleanupOldLogs() {\n    const cutoffDate = new Date(Date.now() - LOGGING_CONFIG.retentionDays * 24 * 60 * 60 * 1000);\n    const result = await _core_database__WEBPACK_IMPORTED_MODULE_0__.prisma.moderation_logs.deleteMany({\n        where: {\n            createdAt: {\n                lt: cutoffDate\n            }\n        }\n    });\n    console.log(`Cleaned up ${result.count} old moderation logs`);\n    return result.count;\n}\n/**\n * Get real-time metrics\n */ function getRealTimeMetrics(timeWindow = 3600000) {\n    const metrics = moderationLogger.getMetrics(timeWindow);\n    const windowMinutes = timeWindow / 60000;\n    const actionsPerMinute = metrics.length / windowMinutes;\n    const totalDuration = metrics.reduce((sum, m)=>sum + m.duration, 0);\n    const averageProcessingTime = metrics.length > 0 ? totalDuration / metrics.length : 0;\n    const successCount = metrics.filter((m)=>m.success).length;\n    const successRate = metrics.length > 0 ? successCount / metrics.length : 0;\n    const userCounts = {};\n    metrics.forEach((m)=>{\n        if (m.userId) {\n            userCounts[m.userId] = (userCounts[m.userId] || 0) + 1;\n        }\n    });\n    const topUsers = Object.entries(userCounts).map(([userId, actionCount])=>({\n            userId,\n            actionCount\n        })).sort((a, b)=>b.actionCount - a.actionCount).slice(0, 10);\n    return {\n        actionsPerMinute,\n        averageProcessingTime,\n        successRate,\n        topUsers\n    };\n}\n// ============================================================================\n// EXPORT UTILITIES\n// ============================================================================\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/moderation/loggers.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/moderation/middleware.ts":
/*!***********************************************!*\
  !*** ./src/services/moderation/middleware.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentType: () => (/* binding */ ContentType),\n/* harmony export */   ModerationAction: () => (/* binding */ ModerationAction),\n/* harmony export */   ModerationSource: () => (/* binding */ ModerationSource),\n/* harmony export */   moderationMiddleware: () => (/* binding */ moderationMiddleware),\n/* harmony export */   validateContentClient: () => (/* binding */ validateContentClient)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n// src/lib/moderation/middleware.ts\n/**\n * Moderation Middleware for Massimino\n * Real-time content filtering for all text inputs with fitness-specific rules\n */ \n// Define types locally since Prisma client may not be available\nconst ModerationAction = {\n    APPROVED: 'APPROVED',\n    FLAGGED: 'FLAGGED',\n    BLOCKED: 'BLOCKED',\n    DELETED: 'DELETED'\n};\nconst ModerationSource = {\n    OPENAI: 'OPENAI',\n    CUSTOM_RULES: 'CUSTOM_RULES',\n    MANUAL: 'MANUAL'\n};\nconst ContentType = {\n    POST: 'POST',\n    COMMENT: 'COMMENT',\n    MESSAGE: 'MESSAGE',\n    COMMUNITY: 'COMMUNITY',\n    PROFILE: 'PROFILE'\n};\n// Placeholder functions - would be implemented in actual files\nasync function moderateContent(_content, _context) {\n    // Placeholder implementation\n    return {\n        action: 'APPROVED',\n        blocked: false,\n        flagged: false,\n        categories: [],\n        confidence: 0,\n        moderatedAt: new Date(),\n        appealable: false,\n        source: 'CUSTOM_RULES',\n        requiresHumanReview: false,\n        reviewPriority: 'LOW'\n    };\n}\nasync function applyCustomRules(_content, _context) {\n    // Placeholder implementation\n    return {\n        action: 'APPROVED',\n        blocked: false,\n        flagged: false,\n        categories: [],\n        confidence: 0,\n        moderatedAt: new Date(),\n        appealable: false,\n        source: 'CUSTOM_RULES',\n        requiresHumanReview: false,\n        reviewPriority: 'LOW'\n    };\n}\nasync function logModerationAction(logEntry) {\n    // Placeholder implementation\n    console.log('Moderation action logged:', logEntry);\n}\nasync function getEnforcementAction(userId, result) {\n    // Placeholder implementation\n    console.log('Enforcement action for user:', userId, result);\n}\n// ============================================================================\n// MIDDLEWARE CONFIGURATION\n// ============================================================================\nconst MIDDLEWARE_CONFIG = {\n    enabled: process.env.MODERATION_ENABLED !== 'false',\n    realTime: process.env.REAL_TIME_MODERATION !== 'false',\n    skipForAdmins: true,\n    skipForTrustedUsers: true,\n    cacheResults: true,\n    cacheTTL: 300000\n};\n// Content type mappings for different endpoints\nconst ENDPOINT_CONTENT_MAP = {\n    '/api/posts': 'POST',\n    '/api/comments': 'COMMENT',\n    '/api/messages': 'MESSAGE',\n    '/api/communities': 'COMMUNITY',\n    '/api/profiles': 'PROFILE'\n};\n// Results cache for avoiding duplicate API calls\nconst moderationCache = new Map();\n// ============================================================================\n// MAIN MIDDLEWARE FUNCTION\n// ============================================================================\n/**\n * Main moderation middleware for API routes\n */ async function moderationMiddleware(request, _context) {\n    // Skip if moderation is disabled\n    if (!MIDDLEWARE_CONFIG.enabled) {\n        return;\n    }\n    // Only process POST, PUT, PATCH requests with content\n    if (![\n        'POST',\n        'PUT',\n        'PATCH'\n    ].includes(request.method)) {\n        return;\n    }\n    try {\n        const body = await request.json().catch(()=>({}));\n        const contentFields = extractContentFields(body);\n        if (contentFields.length === 0) {\n            return; // No content to moderate\n        }\n        // Get user context for moderation\n        const userContext = await getUserContext(request);\n        // Skip moderation for exempt users\n        if (shouldSkipModeration(userContext)) {\n            return;\n        }\n        // Moderate all content fields\n        const moderationResults = await moderateAllContent(contentFields, request, userContext);\n        // Check if any content was blocked\n        const blockedContent = moderationResults.filter((r)=>r.result.blocked);\n        if (blockedContent.length > 0) {\n            // Log the blocked attempt\n            if (blockedContent[0]) {\n                const logEntry = {\n                    action: ModerationAction.BLOCKED,\n                    contentType: getContentType(request.url),\n                    content: blockedContent[0].content,\n                    result: blockedContent[0].result,\n                    metadata: {\n                        ipAddress: getClientIP(request)\n                    }\n                };\n                if (userContext?.userId) {\n                    logEntry.userId = userContext.userId;\n                }\n                if (request.headers.get('user-agent')) {\n                    logEntry.metadata.userAgent = request.headers.get('user-agent');\n                }\n                await logModerationAction(logEntry);\n            }\n            // Apply enforcement action\n            if (userContext?.userId && blockedContent[0]) {\n                await getEnforcementAction(userContext.userId, blockedContent[0].result);\n            }\n            return createBlockedResponse(blockedContent[0]?.result || {\n                action: ModerationAction.BLOCKED,\n                blocked: true,\n                flagged: false,\n                categories: [],\n                confidence: 0,\n                reason: 'Content blocked',\n                moderatedAt: new Date(),\n                appealable: false,\n                source: ModerationSource.CUSTOM_RULES,\n                requiresHumanReview: false,\n                reviewPriority: 'LOW'\n            });\n        }\n        // Log flagged content for review\n        const flaggedContent = moderationResults.filter((r)=>r.result.flagged);\n        for (const flagged of flaggedContent){\n            const logEntry = {\n                action: ModerationAction.FLAGGED,\n                contentType: getContentType(request.url),\n                content: flagged.content,\n                result: flagged.result,\n                metadata: {\n                    ipAddress: getClientIP(request)\n                }\n            };\n            if (userContext?.userId) {\n                logEntry.userId = userContext.userId;\n            }\n            if (request.headers.get('user-agent')) {\n                logEntry.metadata.userAgent = request.headers.get('user-agent');\n            }\n            await logModerationAction(logEntry);\n        }\n        // Continue processing if content is approved or just flagged\n        return;\n    } catch (error) {\n        console.error('Moderation middleware error:', error);\n        // In strict mode, block content on moderation errors\n        if (MIDDLEWARE_CONFIG.realTime) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Content moderation failed',\n                code: 'MODERATION_ERROR',\n                message: 'Unable to process content due to safety checks. Please try again later.'\n            }, {\n                status: 500\n            });\n        }\n        // Otherwise, allow content through but log the error\n        return;\n    }\n}\n// ============================================================================\n// CONTENT EXTRACTION AND PROCESSING\n// ============================================================================\n/**\n * Extract text content fields from request body\n */ function extractContentFields(body) {\n    const contentFields = [];\n    // Common content field names\n    const fieldNames = [\n        'content',\n        'text',\n        'message',\n        'description',\n        'title',\n        'bio',\n        'comment',\n        'reply',\n        'post',\n        'caption'\n    ];\n    fieldNames.forEach((fieldName)=>{\n        if (body[fieldName] && typeof body[fieldName] === 'string') {\n            const content = body[fieldName].trim();\n            if (content.length > 0) {\n                contentFields.push({\n                    field: fieldName,\n                    content\n                });\n            }\n        }\n    });\n    // Check nested objects for content\n    if (body.data && typeof body.data === 'object') {\n        const nestedFields = extractContentFields(body.data);\n        contentFields.push(...nestedFields.map((f)=>({\n                field: `data.${f.field}`,\n                content: f.content\n            })));\n    }\n    return contentFields;\n}\n/**\n * Moderate all extracted content fields\n */ async function moderateAllContent(contentFields, request, userContext) {\n    const results = [];\n    for (const { field, content } of contentFields){\n        // Check cache first\n        const cacheKey = generateCacheKey(content, userContext?.userId);\n        const cached = getCachedResult(cacheKey);\n        let result;\n        if (cached) {\n            result = cached;\n        } else {\n            // Build moderation context\n            const context = {\n                isTrainerToClient: userContext?.isTrainer || false,\n                isInPrivateMessage: getContentType(request.url) === 'MESSAGE',\n                communityType: 'PUBLIC',\n                authorReputation: userContext?.reputation || 0,\n                authorWarnings: userContext?.warnings || 0,\n                isFirstOffense: userContext?.violations === 0,\n                isReply: field.includes('reply'),\n                hasImages: false,\n                mentionsUsers: extractMentions(content),\n                timeOfDay: new Date().getHours().toString(),\n                dayOfWeek: new Date().getDay().toString()\n            };\n            // Apply custom fitness-specific rules first\n            result = await applyCustomRules(content, context);\n            // If custom rules don't block, use OpenAI\n            if (result.action === ModerationAction.APPROVED) {\n                result = await moderateContent(content, context);\n            }\n            // Cache the result\n            setCachedResult(cacheKey, result);\n        }\n        results.push({\n            field,\n            content,\n            result\n        });\n    }\n    return results;\n}\n/**\n * Get user context from request\n */ async function getUserContext(_request) {\n    // This would typically extract user info from session/JWT\n    // For now, return undefined - would be implemented with actual auth\n    // Example implementation:\n    // const session = await getSessionFromRequest(request);\n    // if (!session?.user) return undefined;\n    // \n    // return {\n    //   userId: session.user.id,\n    //   role: session.user.role,\n    //   reputation: session.user.reputationScore,\n    //   warnings: session.user.warningCount,\n    //   violations: session.user.violations || 0,\n    //   isTrainer: session.user.role === 'TRAINER',\n    //   isAdmin: session.user.role === 'ADMIN',\n    //   isTrusted: session.user.reputationScore > 95,\n    // };\n    return undefined;\n}\n/**\n * Determine if moderation should be skipped for this user\n */ function shouldSkipModeration(userContext) {\n    if (!userContext) return false;\n    // Skip for admins if configured\n    if (MIDDLEWARE_CONFIG.skipForAdmins && userContext.isAdmin) {\n        return true;\n    }\n    // Skip for highly trusted users\n    if (MIDDLEWARE_CONFIG.skipForTrustedUsers && userContext.isTrusted) {\n        return true;\n    }\n    return false;\n}\n// ============================================================================\n// RESPONSE CREATION\n// ============================================================================\n/**\n * Create response for blocked content\n */ function createBlockedResponse(result) {\n    const response = {\n        error: 'Content blocked',\n        code: 'CONTENT_MODERATION_VIOLATION',\n        message: result.reason || 'Your content violates our community guidelines',\n        details: {\n            categories: result.categories,\n            confidence: result.confidence,\n            appealable: result.appealable,\n            timestamp: result.moderatedAt\n        },\n        // Safety reminder for fitness platform\n        reminder: 'Massimino is a fitness-focused platform. Please keep conversations respectful and related to health, training, and wellness.'\n    };\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response, {\n        status: 400,\n        headers: {\n            'X-Content-Blocked': 'true',\n            'X-Block-Reason': result.categories[0]?.category || 'unknown'\n        }\n    });\n}\n// ============================================================================\n// UTILITY FUNCTIONS\n// ============================================================================\n/**\n * Get content type from request URL\n */ function getContentType(url) {\n    if (!url) return 'POST';\n    for (const [endpoint, type] of Object.entries(ENDPOINT_CONTENT_MAP)){\n        if (url.includes(endpoint)) {\n            return type;\n        }\n    }\n    return 'POST';\n}\n/**\n * Extract mentions from content\n */ function extractMentions(content) {\n    const mentionRegex = /@(\\w+)/g;\n    const mentions = [];\n    let match;\n    while((match = mentionRegex.exec(content)) !== null){\n        if (match[1]) {\n            mentions.push(match[1]);\n        }\n    }\n    return mentions;\n}\n/**\n * Get client IP address\n */ function getClientIP(request) {\n    const forwarded = request.headers.get('x-forwarded-for');\n    const realIP = request.headers.get('x-real-ip');\n    if (forwarded) {\n        return forwarded.split(',')[0]?.trim() || 'unknown';\n    }\n    if (realIP) {\n        return realIP;\n    }\n    return 'unknown';\n}\n/**\n * Generate cache key for moderation result\n */ function generateCacheKey(content, userId) {\n    const contentHash = hashString(content);\n    return `mod:${contentHash}:${userId || 'anon'}`;\n}\n/**\n * Simple string hash function\n */ function hashString(str) {\n    let hash = 0;\n    for(let i = 0; i < str.length; i++){\n        const char = str.charCodeAt(i);\n        hash = (hash << 5) - hash + char;\n        hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash).toString(36);\n}\n/**\n * Get cached moderation result\n */ function getCachedResult(key) {\n    if (!MIDDLEWARE_CONFIG.cacheResults) return null;\n    const cached = moderationCache.get(key);\n    if (!cached) return null;\n    // Check if cache entry has expired\n    if (Date.now() - cached.timestamp > MIDDLEWARE_CONFIG.cacheTTL) {\n        moderationCache.delete(key);\n        return null;\n    }\n    return cached.result;\n}\n/**\n * Set cached moderation result\n */ function setCachedResult(key, result) {\n    if (!MIDDLEWARE_CONFIG.cacheResults) return;\n    moderationCache.set(key, {\n        result,\n        timestamp: Date.now()\n    });\n    // Clean up old cache entries periodically\n    if (moderationCache.size > 1000) {\n        const cutoff = Date.now() - MIDDLEWARE_CONFIG.cacheTTL;\n        Array.from(moderationCache.entries()).forEach(([k, v])=>{\n            if (v.timestamp < cutoff) {\n                moderationCache.delete(k);\n            }\n        });\n    }\n}\n// ============================================================================\n// CLIENT-SIDE MODERATION HELPER\n// ============================================================================\n/**\n * Client-side content validation before submission\n * Returns validation result with user-friendly feedback\n */ function validateContentClient(content) {\n    const warnings = [];\n    const suggestions = [];\n    // Basic content validation\n    if (content.length === 0) {\n        warnings.push('Content cannot be empty');\n        return {\n            valid: false,\n            warnings,\n            suggestions\n        };\n    }\n    if (content.length > 5000) {\n        warnings.push('Content is too long (maximum 5000 characters)');\n        suggestions.push('Try breaking your content into smaller posts');\n    }\n    // Simple client-side checks for obvious violations\n    const suspiciousPatterns = [\n        /\\b(meet me|hook up|sexy|hot pics)\\b/i,\n        /\\b(scam|fake|free money|click here)\\b/i,\n        /\\b(stupid|idiot|loser|hate you)\\b/i\n    ];\n    for (const pattern of suspiciousPatterns){\n        if (pattern.test(content)) {\n            warnings.push('Content may violate community guidelines');\n            suggestions.push('Please keep discussions respectful and fitness-focused');\n            break;\n        }\n    }\n    // Positive suggestions for fitness content\n    if (content.length > 100 && !content.match(/\\b(workout|exercise|fitness|training|health|nutrition)\\b/i)) {\n        suggestions.push('Consider relating your post to fitness, health, or training topics');\n    }\n    return {\n        valid: warnings.length === 0,\n        warnings,\n        suggestions\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/moderation/middleware.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/moderation/openai.ts":
/*!*******************************************!*\
  !*** ./src/services/moderation/openai.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CATEGORY_SEVERITY_MAP: () => (/* binding */ CATEGORY_SEVERITY_MAP),\n/* harmony export */   MODERATION_CONFIG: () => (/* binding */ MODERATION_CONFIG),\n/* harmony export */   moderateContent: () => (/* binding */ moderateContent),\n/* harmony export */   moderateContentBatch: () => (/* binding */ moderateContentBatch)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * OpenAI Moderation API Integration for Massimino\n * Core content moderation using OpenAI's moderation API with fitness-specific enhancements\n */ \n\n// ============================================================================\n// OPENAI CLIENT SETUP\n// ============================================================================\n// Validate environment variables\nif (!process.env.OPENAI_API_KEY) {\n    throw new Error('OPENAI_API_KEY environment variable is required');\n}\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY,\n    organization: process.env.OPENAI_ORG_ID\n});\n// Configuration\nconst MODERATION_CONFIG = {\n    model: 'text-moderation-latest',\n    timeout: 10000,\n    retries: 3,\n    threshold: parseFloat(process.env.MODERATION_THRESHOLD || '0.7'),\n    strictMode: process.env.MODERATION_STRICT_MODE === 'true',\n    autoBlock: process.env.MODERATION_AUTO_BLOCK === 'true'\n};\n// Category severity mapping (OpenAI categories to our severity scale 1-5)\nconst CATEGORY_SEVERITY_MAP = {\n    'sexual': 4,\n    'sexual/minors': 5,\n    'hate': 4,\n    'hate/threatening': 5,\n    'harassment': 3,\n    'harassment/threatening': 4,\n    'self-harm': 3,\n    'self-harm/intent': 4,\n    'self-harm/instructions': 5,\n    'violence': 3,\n    'violence/graphic': 4\n};\n// ============================================================================\n// CORE MODERATION FUNCTIONS\n// ============================================================================\n/**\n * Moderate content using OpenAI API\n */ async function moderateContent(content, context) {\n    try {\n        // Pre-processing checks\n        if (!content || content.trim().length === 0) {\n            return createSafeResult('Empty content provided');\n        }\n        if (content.length > 10000) {\n            return createBlockedResult('Content too long for moderation', 'CONTENT_TOO_LONG');\n        }\n        // Call OpenAI Moderation API\n        const startTime = Date.now();\n        const response = await callOpenAIModerationAPI(content);\n        const responseTime = Date.now() - startTime;\n        // Process the response\n        const result = await processOpenAIResponse(response, content, context);\n        // Log performance metrics\n        console.log(`Moderation completed in ${responseTime}ms`, {\n            contentLength: content.length,\n            flagged: result.flagged,\n            confidence: result.confidence\n        });\n        return result;\n    } catch (error) {\n        console.error('Moderation error:', error);\n        // Fallback to blocking content on API errors for safety\n        return createBlockedResult('Moderation service error - content blocked for safety', 'API_ERROR');\n    }\n}\n/**\n * Batch moderate multiple content items\n */ async function moderateContentBatch(items) {\n    const results = new Map();\n    // Process in chunks to avoid rate limits\n    const CHUNK_SIZE = 10;\n    const chunks = chunkArray(items, CHUNK_SIZE);\n    for (const chunk of chunks){\n        const promises = chunk.map(async (item)=>{\n            const result = await moderateContent(item.content, item.context);\n            return {\n                id: item.id,\n                result\n            };\n        });\n        const chunkResults = await Promise.allSettled(promises);\n        chunkResults.forEach((promiseResult, index)=>{\n            const itemId = chunk[index]?.id;\n            if (itemId) {\n                if (promiseResult.status === 'fulfilled') {\n                    results.set(itemId, promiseResult.value.result);\n                } else {\n                    console.error(`Batch moderation failed for item ${itemId}:`, promiseResult.reason);\n                    results.set(itemId, createBlockedResult('Batch moderation failed', 'BATCH_ERROR'));\n                }\n            }\n        });\n        // Rate limiting - wait between chunks\n        if (chunks.length > 1) {\n            await new Promise((resolve)=>setTimeout(resolve, 100));\n        }\n    }\n    return results;\n}\n// ============================================================================\n// OPENAI API INTERACTION\n// ============================================================================\n/**\n * Call OpenAI Moderation API with retry logic\n */ async function callOpenAIModerationAPI(content) {\n    const request = {\n        input: content,\n        model: MODERATION_CONFIG.model\n    };\n    let lastError;\n    for(let attempt = 1; attempt <= MODERATION_CONFIG.retries; attempt++){\n        try {\n            const response = await Promise.race([\n                openai.moderations.create(request),\n                new Promise((_, reject)=>setTimeout(()=>reject(new Error('Moderation timeout')), MODERATION_CONFIG.timeout))\n            ]);\n            return response;\n        } catch (error) {\n            lastError = error;\n            console.warn(`Moderation attempt ${attempt} failed:`, error);\n            // Wait before retry (exponential backoff)\n            if (attempt < MODERATION_CONFIG.retries) {\n                const delay = Math.min(1000 * Math.pow(2, attempt - 1), 5000);\n                await new Promise((resolve)=>setTimeout(resolve, delay));\n            }\n        }\n    }\n    throw lastError;\n}\n/**\n * Process OpenAI response into our ModerationResult format\n */ async function processOpenAIResponse(response, _originalContent, context) {\n    const result = response.results[0];\n    if (!result) {\n        return createSafeResult('No moderation result received');\n    }\n    const categories = extractModerationCategories(result);\n    // Calculate overall confidence and severity\n    const confidence = calculateConfidence(result);\n    const maxSeverity = Math.max(...categories.map((c)=>c.severity), 1);\n    // Determine action based on OpenAI flagging and our rules\n    const action = determineAction(result, confidence, maxSeverity, context);\n    // Create result object\n    const moderationResult = {\n        action,\n        flagged: result.flagged || action === _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.BLOCKED,\n        blocked: action === _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.BLOCKED,\n        confidence,\n        reason: generateReason(categories, action),\n        categories,\n        source: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationSource.OPENAI_API,\n        moderatedAt: new Date(),\n        requiresHumanReview: shouldRequireHumanReview(result, confidence, maxSeverity),\n        reviewPriority: determineReviewPriority(categories, confidence),\n        suggestedAction: suggestUserAction(categories, maxSeverity),\n        appealable: action !== _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.APPROVED\n    };\n    return moderationResult;\n}\n// ============================================================================\n// RESULT PROCESSING UTILITIES\n// ============================================================================\n/**\n * Extract and categorize violations from OpenAI response\n */ function extractModerationCategories(result) {\n    const categories = [];\n    Object.entries(result.categories).forEach(([category, flagged])=>{\n        if (flagged) {\n            const score = result.category_scores[category] || 0;\n            const severity = CATEGORY_SEVERITY_MAP[category] || 2;\n            categories.push({\n                category: category.replace(/[/_]/g, ' ').toUpperCase(),\n                severity,\n                confidence: score,\n                description: getCategoryDescription(category)\n            });\n        }\n    });\n    return categories;\n}\n/**\n * Calculate overall confidence score\n */ function calculateConfidence(result) {\n    if (!result.flagged) return 0;\n    const scores = Object.values(result.category_scores);\n    const maxScore = Math.max(...scores);\n    const avgScore = scores.reduce((sum, score)=>sum + score, 0) / scores.length;\n    // Weight max score more heavily but consider average\n    return Math.min(maxScore * 0.7 + avgScore * 0.3, 1);\n}\n/**\n * Determine the appropriate action based on moderation results\n */ function determineAction(result, confidence, maxSeverity, context) {\n    // Always block high-severity violations\n    if (maxSeverity >= 5) {\n        return _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.BLOCKED;\n    }\n    // Block if flagged by OpenAI and above threshold\n    if (result.flagged && confidence >= MODERATION_CONFIG.threshold) {\n        if (MODERATION_CONFIG.autoBlock) {\n            return _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.BLOCKED;\n        } else {\n            return _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.FLAGGED;\n        }\n    }\n    // Consider context for borderline cases\n    if (result.flagged && context) {\n        // More strict in public contexts\n        if (!context.isInPrivateMessage && confidence >= 0.5) {\n            return _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.FLAGGED;\n        }\n        // More strict for low-reputation users\n        if (context.authorReputation < 50 && confidence >= 0.4) {\n            return _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.FLAGGED;\n        }\n    }\n    return _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.APPROVED;\n}\n/**\n * Determine if human review is required\n */ function shouldRequireHumanReview(result, confidence, maxSeverity) {\n    // Always require review for high severity\n    if (maxSeverity >= 4) return true;\n    // Require review for borderline cases\n    if (result.flagged && confidence < MODERATION_CONFIG.threshold) return true;\n    // Require review for complex cases\n    const flaggedCategories = Object.values(result.categories).filter(Boolean).length;\n    if (flaggedCategories > 2) return true;\n    return false;\n}\n/**\n * Determine review priority\n */ function determineReviewPriority(categories, confidence) {\n    const maxSeverity = Math.max(...categories.map((c)=>c.severity), 1);\n    if (maxSeverity >= 5 || confidence >= 0.95) return 'URGENT';\n    if (maxSeverity >= 4 || confidence >= 0.85) return 'HIGH';\n    if (maxSeverity >= 3 || confidence >= 0.7) return 'MEDIUM';\n    return 'LOW';\n}\n/**\n * Suggest appropriate user action\n */ function suggestUserAction(_categories, maxSeverity) {\n    if (maxSeverity >= 5) return 'BAN';\n    if (maxSeverity >= 4) return 'SUSPEND_7D';\n    if (maxSeverity >= 3) return 'SUSPEND_3D';\n    if (maxSeverity >= 2) return 'WARN';\n    return 'DELETE_CONTENT';\n}\n// ============================================================================\n// HELPER FUNCTIONS\n// ============================================================================\n/**\n * Create a safe (approved) moderation result\n */ function createSafeResult(reason) {\n    return {\n        action: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.APPROVED,\n        flagged: false,\n        blocked: false,\n        confidence: 0,\n        reason,\n        categories: [],\n        source: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationSource.OPENAI_API,\n        moderatedAt: new Date(),\n        requiresHumanReview: false,\n        reviewPriority: 'LOW',\n        appealable: false\n    };\n}\n/**\n * Create a blocked moderation result\n */ function createBlockedResult(reason, category) {\n    return {\n        action: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.BLOCKED,\n        flagged: true,\n        blocked: true,\n        confidence: 1,\n        reason,\n        categories: [\n            {\n                category,\n                severity: 3,\n                confidence: 1,\n                description: reason\n            }\n        ],\n        source: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationSource.OPENAI_API,\n        moderatedAt: new Date(),\n        requiresHumanReview: false,\n        reviewPriority: 'HIGH',\n        appealable: true\n    };\n}\n/**\n * Get human-readable description for violation category\n */ function getCategoryDescription(category) {\n    const descriptions = {\n        'sexual': 'Sexual content or suggestive material',\n        'sexual/minors': 'Sexual content involving minors',\n        'hate': 'Hateful or discriminatory language',\n        'hate/threatening': 'Threatening hate speech',\n        'harassment': 'Harassment or bullying behavior',\n        'harassment/threatening': 'Threatening harassment',\n        'self-harm': 'Self-harm related content',\n        'self-harm/intent': 'Intent to self-harm',\n        'self-harm/instructions': 'Instructions for self-harm',\n        'violence': 'Violent content or language',\n        'violence/graphic': 'Graphic violent content'\n    };\n    return descriptions[category] || `Violation: ${category}`;\n}\n/**\n * Generate human-readable reason for moderation action\n */ function generateReason(categories, action) {\n    if (categories.length === 0) {\n        return action === _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.APPROVED ? 'Content approved' : 'Content flagged';\n    }\n    const primaryCategory = categories.reduce((max, cat)=>cat.severity > max.severity ? cat : max);\n    const actionText = {\n        [_prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.APPROVED]: 'approved',\n        [_prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.FLAGGED]: 'flagged for review',\n        [_prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.BLOCKED]: 'blocked',\n        [_prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.EDITED]: 'edited'\n    }[action];\n    return `Content ${actionText} due to: ${primaryCategory.description}`;\n}\n/**\n * Chunk array into smaller arrays\n */ function chunkArray(array, size) {\n    const chunks = [];\n    for(let i = 0; i < array.length; i += size){\n        chunks.push(array.slice(i, i + size));\n    }\n    return chunks;\n}\n// ============================================================================\n// EXPORT API\n// ============================================================================\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/moderation/openai.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/moderation/rules.ts":
/*!******************************************!*\
  !*** ./src/services/moderation/rules.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FITNESS_VIOLATION_PATTERNS: () => (/* binding */ FITNESS_VIOLATION_PATTERNS),\n/* harmony export */   applyCustomRules: () => (/* binding */ applyCustomRules),\n/* harmony export */   detectPositiveFitnessContent: () => (/* binding */ detectPositiveFitnessContent),\n/* harmony export */   getActiveRules: () => (/* binding */ getActiveRules),\n/* harmony export */   getRuleStats: () => (/* binding */ getRuleStats),\n/* harmony export */   updateRule: () => (/* binding */ updateRule)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * Custom Moderation Rules for Massimino\n * Fitness-specific content moderation rules and pattern matching\n */ \n// ============================================================================\n// FITNESS-SPECIFIC VIOLATION PATTERNS\n// ============================================================================\n/**\n   * Patterns that are specifically problematic in fitness contexts\n   * These go beyond general content moderation to catch fitness-specific issues\n   */ const FITNESS_VIOLATION_PATTERNS = {\n    INAPPROPRIATE_PERSONAL_COMMENTS: {\n        id: 'inappropriate-personal',\n        name: 'Inappropriate Personal Comments',\n        description: 'Comments focusing on appearance rather than fitness performance',\n        category: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ViolationType.INAPPROPRIATE_CONTENT,\n        enabled: true,\n        severity: 4,\n        confidence: 0.8,\n        patterns: [\n            'nice body',\n            'sexy',\n            'hot',\n            'beautiful body',\n            'gorgeous',\n            'stunning',\n            'attractive',\n            'cute butt',\n            'nice curves'\n        ],\n        keywords: [\n            'body',\n            'sexy',\n            'hot',\n            'beautiful',\n            'gorgeous',\n            'stunning',\n            'attractive',\n            'cute',\n            'curves',\n            'butt',\n            'chest',\n            'legs'\n        ],\n        regexPatterns: [\n            '\\\\b(nice|great|amazing|sexy|hot)\\\\s+(body|figure|physique|curves|butt|chest|legs)\\\\b',\n            '\\\\b(you\\\\s+look|looking)\\\\s+(sexy|hot|amazing|gorgeous|stunning)\\\\b',\n            '\\\\b(beautiful|gorgeous|stunning)\\\\s+(woman|girl|lady|man|guy)\\\\b'\n        ],\n        contexts: [\n            'POST',\n            'COMMENT',\n            'MESSAGE'\n        ],\n        userRoles: [\n            'CLIENT',\n            'TRAINER'\n        ],\n        communityTypes: [\n            'PUBLIC',\n            'PRIVATE'\n        ],\n        action: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.FLAGGED,\n        autoBlock: false,\n        requireHumanReview: true,\n        createdBy: 'system',\n        createdAt: new Date(),\n        lastModified: new Date(),\n        usageCount: 0\n    },\n    UNSOLICITED_PERSONAL_ATTENTION: {\n        id: 'unsolicited-attention',\n        name: 'Unsolicited Personal Attention',\n        description: 'Unwanted personal attention or creepy behavior',\n        category: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ViolationType.HARASSMENT,\n        enabled: true,\n        severity: 5,\n        confidence: 0.9,\n        patterns: [\n            'want to meet',\n            'hook up',\n            'private session',\n            'one on one',\n            'dm me',\n            'text me',\n            'my number is',\n            'call me',\n            'date',\n            'dinner',\n            'drinks'\n        ],\n        keywords: [\n            'meet',\n            'hook',\n            'private',\n            'personal',\n            'dm',\n            'text',\n            'call',\n            'number',\n            'date',\n            'dinner',\n            'drinks',\n            'relationship'\n        ],\n        regexPatterns: [\n            '\\\\b(want\\\\s+to|let\\'s)\\\\s+(meet|hook\\\\s+up|get\\\\s+together)\\\\b',\n            '\\\\b(private|personal)\\\\s+(session|training|meeting)\\\\b',\n            '\\\\b(dm|text|call)\\\\s+me\\\\b',\n            '\\\\b\\\\d{3}[-.]?\\\\d{3}[-.]?\\\\d{4}\\\\b',\n            '\\\\b[\\\\w._%+-]+@[\\\\w.-]+\\\\.[A-Z]{2,}\\\\b'\n        ],\n        contexts: [\n            'COMMENT',\n            'MESSAGE',\n            'POST'\n        ],\n        userRoles: [\n            'CLIENT',\n            'TRAINER'\n        ],\n        communityTypes: [\n            'PUBLIC',\n            'PRIVATE'\n        ],\n        action: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.BLOCKED,\n        autoBlock: true,\n        requireHumanReview: true,\n        createdBy: 'system',\n        createdAt: new Date(),\n        lastModified: new Date(),\n        usageCount: 0\n    },\n    FAKE_TRAINER_CREDENTIALS: {\n        id: 'fake-credentials',\n        name: 'Fake Trainer Credentials',\n        description: 'False claims about certifications or credentials',\n        category: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ViolationType.IMPERSONATION,\n        enabled: true,\n        severity: 4,\n        confidence: 0.7,\n        patterns: [\n            'certified trainer',\n            'NASM certified',\n            'ACE certified',\n            'ACSM certified',\n            'personal trainer license',\n            'nutrition specialist',\n            'registered dietitian'\n        ],\n        keywords: [\n            'certified',\n            'certification',\n            'license',\n            'credential',\n            'specialist',\n            'NASM',\n            'ACE',\n            'ACSM',\n            'NSCA',\n            'RD',\n            'registered',\n            'dietitian'\n        ],\n        regexPatterns: [\n            '\\\\b(certified|licensed)\\\\s+(trainer|nutritionist|dietitian)\\\\b',\n            '\\\\b(NASM|ACE|ACSM|NSCA)\\\\s+certified\\\\b',\n            '\\\\bregistered\\\\s+dietitian\\\\b'\n        ],\n        contexts: [\n            'PROFILE',\n            'POST',\n            'COMMENT'\n        ],\n        userRoles: [\n            'CLIENT'\n        ],\n        communityTypes: [\n            'PUBLIC',\n            'PRIVATE'\n        ],\n        action: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.FLAGGED,\n        autoBlock: false,\n        requireHumanReview: true,\n        createdBy: 'system',\n        createdAt: new Date(),\n        lastModified: new Date(),\n        usageCount: 0\n    },\n    UNSAFE_EXERCISE_ADVICE: {\n        id: 'unsafe-advice',\n        name: 'Unsafe Exercise Advice',\n        description: 'Potentially dangerous exercise recommendations',\n        category: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ViolationType.OFF_TOPIC,\n        enabled: true,\n        severity: 4,\n        confidence: 0.6,\n        patterns: [\n            'no pain no gain',\n            'push through the pain',\n            'pain is weakness leaving',\n            'ignore the pain',\n            'max out every day',\n            'train every day',\n            'no rest days',\n            'more is always better'\n        ],\n        keywords: [\n            'pain',\n            'ignore',\n            'push',\n            'through',\n            'max',\n            'every',\n            'day',\n            'no',\n            'rest',\n            'dangerous',\n            'extreme',\n            'hardcore'\n        ],\n        regexPatterns: [\n            '\\\\b(no\\\\s+pain\\\\s+no\\\\s+gain|push\\\\s+through\\\\s+the\\\\s+pain)\\\\b',\n            '\\\\b(ignore\\\\s+the\\\\s+pain|pain\\\\s+is\\\\s+weakness)\\\\b',\n            '\\\\b(train|workout)\\\\s+every\\\\s+day\\\\b',\n            '\\\\bno\\\\s+rest\\\\s+days?\\\\b'\n        ],\n        contexts: [\n            'POST',\n            'COMMENT',\n            'MESSAGE'\n        ],\n        userRoles: [\n            'CLIENT',\n            'TRAINER'\n        ],\n        communityTypes: [\n            'PUBLIC',\n            'PRIVATE'\n        ],\n        action: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.FLAGGED,\n        autoBlock: false,\n        requireHumanReview: true,\n        createdBy: 'system',\n        createdAt: new Date(),\n        lastModified: new Date(),\n        usageCount: 0\n    },\n    SUPPLEMENT_SPAM: {\n        id: 'supplement-spam',\n        name: 'Supplement Spam',\n        description: 'Unauthorized supplement promotions or MLM content',\n        category: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ViolationType.SPAM,\n        enabled: true,\n        severity: 3,\n        confidence: 0.8,\n        patterns: [\n            'buy now',\n            'limited time',\n            'special offer',\n            'discount code',\n            'affiliate link',\n            'earn money',\n            'join my team',\n            'business opportunity',\n            'work from home',\n            'supplement deal'\n        ],\n        keywords: [\n            'buy',\n            'sale',\n            'discount',\n            'offer',\n            'deal',\n            'affiliate',\n            'earn',\n            'money',\n            'team',\n            'business',\n            'opportunity',\n            'MLM'\n        ],\n        regexPatterns: [\n            '\\\\b(buy\\\\s+now|limited\\\\s+time|special\\\\s+offer)\\\\b',\n            '\\\\b(discount\\\\s+code|promo\\\\s+code)\\\\b',\n            '\\\\b(join\\\\s+my\\\\s+team|business\\\\s+opportunity)\\\\b',\n            '\\\\b(work\\\\s+from\\\\s+home|earn\\\\s+money)\\\\b'\n        ],\n        contexts: [\n            'POST',\n            'COMMENT',\n            'MESSAGE'\n        ],\n        userRoles: [\n            'CLIENT',\n            'TRAINER'\n        ],\n        communityTypes: [\n            'PUBLIC'\n        ],\n        action: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.BLOCKED,\n        autoBlock: true,\n        requireHumanReview: false,\n        createdBy: 'system',\n        createdAt: new Date(),\n        lastModified: new Date(),\n        usageCount: 0\n    },\n    BODY_SHAMING: {\n        id: 'body-shaming',\n        name: 'Body Shaming',\n        description: 'Negative comments about body size, shape, or appearance',\n        category: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ViolationType.HARASSMENT,\n        enabled: true,\n        severity: 4,\n        confidence: 0.9,\n        patterns: [\n            'too fat',\n            'too skinny',\n            'gross',\n            'disgusting',\n            'ugly',\n            'pathetic',\n            'weak',\n            'lazy',\n            'no excuse',\n            'just eat less',\n            'try harder'\n        ],\n        keywords: [\n            'fat',\n            'skinny',\n            'gross',\n            'disgusting',\n            'ugly',\n            'pathetic',\n            'weak',\n            'lazy',\n            'excuse',\n            'eat',\n            'less',\n            'harder'\n        ],\n        regexPatterns: [\n            '\\\\b(too\\\\s+(fat|skinny|weak)|gross|disgusting|ugly)\\\\b',\n            '\\\\b(just\\\\s+(eat\\\\s+less|try\\\\s+harder)|no\\\\s+excuse)\\\\b',\n            '\\\\b(lazy|pathetic|weak)\\\\s+(person|people)\\\\b'\n        ],\n        contexts: [\n            'POST',\n            'COMMENT',\n            'MESSAGE'\n        ],\n        userRoles: [\n            'CLIENT',\n            'TRAINER'\n        ],\n        communityTypes: [\n            'PUBLIC',\n            'PRIVATE'\n        ],\n        action: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.BLOCKED,\n        autoBlock: true,\n        requireHumanReview: true,\n        createdBy: 'system',\n        createdAt: new Date(),\n        lastModified: new Date(),\n        usageCount: 0\n    },\n    NUTRITION_MISINFORMATION: {\n        id: 'nutrition-misinfo',\n        name: 'Nutrition Misinformation',\n        description: 'False or dangerous nutritional advice',\n        category: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ViolationType.OFF_TOPIC,\n        enabled: true,\n        severity: 3,\n        confidence: 0.6,\n        patterns: [\n            'detox tea',\n            'cleanse',\n            'magic pill',\n            'lose weight fast',\n            'burn fat instantly',\n            'no exercise needed',\n            'eat whatever you want',\n            'miracle cure'\n        ],\n        keywords: [\n            'detox',\n            'cleanse',\n            'magic',\n            'pill',\n            'fast',\n            'instant',\n            'miracle',\n            'cure',\n            'secret',\n            'trick'\n        ],\n        regexPatterns: [\n            '\\\\b(detox|cleanse|magic\\\\s+pill)\\\\b',\n            '\\\\b(lose\\\\s+weight\\\\s+fast|burn\\\\s+fat\\\\s+instantly)\\\\b',\n            '\\\\b(no\\\\s+exercise\\\\s+needed|eat\\\\s+whatever)\\\\b',\n            '\\\\b(miracle\\\\s+cure|secret\\\\s+trick)\\\\b'\n        ],\n        contexts: [\n            'POST',\n            'COMMENT'\n        ],\n        userRoles: [\n            'CLIENT',\n            'TRAINER'\n        ],\n        communityTypes: [\n            'PUBLIC'\n        ],\n        action: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.FLAGGED,\n        autoBlock: false,\n        requireHumanReview: true,\n        createdBy: 'system',\n        createdAt: new Date(),\n        lastModified: new Date(),\n        usageCount: 0\n    },\n    PREDATORY_TRAINING_OFFERS: {\n        id: 'predatory-offers',\n        name: 'Predatory Training Offers',\n        description: 'Exploitative or manipulative business practices',\n        category: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ViolationType.HARASSMENT,\n        enabled: true,\n        severity: 4,\n        confidence: 0.8,\n        patterns: [\n            'pay upfront',\n            'no refunds',\n            'must decide now',\n            'pressure',\n            'guilt',\n            'shame',\n            'failure',\n            'only way',\n            'guaranteed results'\n        ],\n        keywords: [\n            'upfront',\n            'refunds',\n            'decide',\n            'now',\n            'pressure',\n            'guilt',\n            'shame',\n            'failure',\n            'only',\n            'way',\n            'guaranteed'\n        ],\n        regexPatterns: [\n            '\\\\b(pay\\\\s+upfront|no\\\\s+refunds)\\\\b',\n            '\\\\b(must\\\\s+decide\\\\s+now|limited\\\\s+spots)\\\\b',\n            '\\\\b(guaranteed\\\\s+results|only\\\\s+way)\\\\b'\n        ],\n        contexts: [\n            'MESSAGE',\n            'POST'\n        ],\n        userRoles: [\n            'TRAINER'\n        ],\n        communityTypes: [\n            'PRIVATE',\n            'PUBLIC'\n        ],\n        action: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.FLAGGED,\n        autoBlock: false,\n        requireHumanReview: true,\n        createdBy: 'system',\n        createdAt: new Date(),\n        lastModified: new Date(),\n        usageCount: 0\n    },\n    OFF_TOPIC_CONTENT: {\n        id: 'off-topic',\n        name: 'Off-Topic Content',\n        description: 'Content not related to fitness, health, or wellness',\n        category: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ViolationType.OFF_TOPIC,\n        enabled: true,\n        severity: 2,\n        confidence: 0.5,\n        patterns: [\n            'politics',\n            'religion',\n            'cryptocurrency',\n            'stock market',\n            'real estate',\n            'dating',\n            'relationship',\n            'celebrity gossip'\n        ],\n        keywords: [\n            'politics',\n            'political',\n            'religion',\n            'religious',\n            'crypto',\n            'bitcoin',\n            'stocks',\n            'investment',\n            'real',\n            'estate',\n            'dating',\n            'relationship',\n            'celebrity',\n            'gossip'\n        ],\n        regexPatterns: [\n            '\\\\b(politics|political|religion|religious)\\\\b',\n            '\\\\b(crypto|bitcoin|stock\\\\s+market)\\\\b',\n            '\\\\b(real\\\\s+estate|dating|relationship)\\\\b'\n        ],\n        contexts: [\n            'POST',\n            'COMMENT'\n        ],\n        userRoles: [\n            'CLIENT',\n            'TRAINER'\n        ],\n        communityTypes: [\n            'PUBLIC'\n        ],\n        action: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.FLAGGED,\n        autoBlock: false,\n        requireHumanReview: false,\n        createdBy: 'system',\n        createdAt: new Date(),\n        lastModified: new Date(),\n        usageCount: 0\n    },\n    PRIVACY_INVASION: {\n        id: 'privacy-invasion',\n        name: 'Privacy Invasion',\n        description: 'Sharing personal information without consent',\n        category: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ViolationType.PRIVACY_VIOLATION,\n        enabled: true,\n        severity: 5,\n        confidence: 0.9,\n        patterns: [\n            'real name is',\n            'address is',\n            'phone number',\n            'works at',\n            'lives in',\n            'goes to gym'\n        ],\n        keywords: [\n            'name',\n            'address',\n            'phone',\n            'number',\n            'works',\n            'lives',\n            'gym',\n            'location',\n            'personal',\n            'private'\n        ],\n        regexPatterns: [\n            '\\\\b(real\\\\s+name|full\\\\s+name)\\\\s+is\\\\b',\n            '\\\\b(address|phone\\\\s+number)\\\\s+is\\\\b',\n            '\\\\b(works\\\\s+at|lives\\\\s+in|goes\\\\s+to)\\\\b'\n        ],\n        contexts: [\n            'POST',\n            'COMMENT',\n            'MESSAGE'\n        ],\n        userRoles: [\n            'CLIENT',\n            'TRAINER'\n        ],\n        communityTypes: [\n            'PUBLIC',\n            'PRIVATE'\n        ],\n        action: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.BLOCKED,\n        autoBlock: true,\n        requireHumanReview: true,\n        createdBy: 'system',\n        createdAt: new Date(),\n        lastModified: new Date(),\n        usageCount: 0\n    }\n};\n// ============================================================================\n// RULE APPLICATION ENGINE\n// ============================================================================\n/**\n   * Apply custom fitness-specific moderation rules\n   */ async function applyCustomRules(content, context) {\n    const violations = [];\n    // Check each rule against the content\n    for (const rule of Object.values(FITNESS_VIOLATION_PATTERNS)){\n        if (!rule.enabled) continue;\n        // Check if rule applies to this context\n        if (!isRuleApplicable(rule, context)) continue;\n        const matches = findRuleMatches(content, rule);\n        if (matches.length > 0) {\n            violations.push({\n                rule,\n                matches,\n                confidence: calculateRuleConfidence(rule, matches, content)\n            });\n        }\n    }\n    // If no violations found, approve the content\n    if (violations.length === 0) {\n        return createApprovedResult();\n    }\n    // Find the most severe violation\n    const primaryViolation = violations.reduce((max, current)=>current.rule.severity > max.rule.severity ? current : max);\n    // Create moderation result based on the primary violation\n    return createCustomRuleResult(primaryViolation, violations, content);\n}\n/**\n   * Check if a rule applies to the current context\n   */ function isRuleApplicable(rule, context) {\n    // Check content type context\n    const contentType = context.isInPrivateMessage ? 'MESSAGE' : 'POST';\n    if (!rule.contexts.includes(contentType)) {\n        return false;\n    }\n    // Check community type\n    if (!rule.communityTypes.includes(context.communityType)) {\n        return false;\n    }\n    // For trainer-specific rules, check if author is trainer\n    if (rule.userRoles.includes('TRAINER') && !rule.userRoles.includes('CLIENT')) {\n        return context.isTrainerToClient;\n    }\n    return true;\n}\n/**\n   * Find matches for a rule in content\n   */ function findRuleMatches(content, rule) {\n    const matches = [];\n    const lowerContent = content.toLowerCase();\n    // Check simple patterns\n    for (const pattern of rule.patterns){\n        if (lowerContent.includes(pattern.toLowerCase())) {\n            matches.push(pattern);\n        }\n    }\n    // Check keyword combinations\n    const contentWords = lowerContent.split(/\\s+/);\n    for (const keyword of rule.keywords){\n        if (contentWords.some((word)=>word.includes(keyword.toLowerCase()))) {\n            matches.push(keyword);\n        }\n    }\n    // Check regex patterns\n    if (rule.regexPatterns) {\n        for (const regex of rule.regexPatterns){\n            const regexMatches = content.match(regex);\n            if (regexMatches) {\n                matches.push(...regexMatches);\n            }\n        }\n    }\n    return [\n        ...new Set(matches)\n    ]; // Remove duplicates\n}\n/**\n   * Calculate confidence score for rule match\n   */ function calculateRuleConfidence(rule, _matches, _content) {\n    let confidence = rule.confidence;\n    // Increase confidence based on number of matches\n    const matchBonus = Math.min(_matches.length * 0.1, 0.3);\n    confidence += matchBonus;\n    // Decrease confidence for longer content (might be false positive)\n    if (_content.length > 500) {\n        confidence *= 0.9;\n    }\n    // Increase confidence for exact pattern matches\n    const exactMatches = _matches.filter((match)=>rule.patterns.some((pattern)=>match.toLowerCase() === pattern.toLowerCase()));\n    if (exactMatches.length > 0) {\n        confidence += 0.1;\n    }\n    return Math.min(confidence, 1.0);\n}\n/**\n   * Create moderation result for custom rule violation\n   */ function createCustomRuleResult(primaryViolation, allViolations, _content) {\n    const { rule, confidence } = primaryViolation;\n    const categories = allViolations.map((v)=>({\n            category: v.rule.name,\n            subcategory: v.rule.category,\n            severity: v.rule.severity,\n            confidence: v.confidence,\n            description: v.rule.description\n        }));\n    return {\n        action: rule.action,\n        flagged: rule.action !== _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.APPROVED,\n        blocked: rule.action === _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.BLOCKED,\n        confidence,\n        reason: `Content flagged for: ${rule.description}`,\n        categories,\n        source: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationSource.CUSTOM_RULES,\n        moderatedAt: new Date(),\n        requiresHumanReview: rule.requireHumanReview,\n        reviewPriority: rule.severity >= 4 ? 'HIGH' : rule.severity >= 3 ? 'MEDIUM' : 'LOW',\n        suggestedAction: rule.severity >= 4 ? 'SUSPEND_3D' : 'WARN',\n        appealable: rule.action !== _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.APPROVED\n    };\n}\n/**\n   * Create approved result for content that passes all rules\n   */ function createApprovedResult() {\n    return {\n        action: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationAction.APPROVED,\n        flagged: false,\n        blocked: false,\n        confidence: 0,\n        reason: 'Content approved by custom rules',\n        categories: [],\n        source: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ModerationSource.CUSTOM_RULES,\n        moderatedAt: new Date(),\n        requiresHumanReview: false,\n        reviewPriority: 'LOW',\n        appealable: false\n    };\n}\n// ============================================================================\n// POSITIVE CONTENT DETECTION\n// ============================================================================\n/**\n   * Detect positive fitness content to boost confidence in approval\n   */ function detectPositiveFitnessContent(content) {\n    const positiveKeywords = [\n        'workout',\n        'exercise',\n        'fitness',\n        'training',\n        'health',\n        'wellness',\n        'nutrition',\n        'diet',\n        'protein',\n        'cardio',\n        'strength',\n        'muscle',\n        'motivation',\n        'progress',\n        'goals',\n        'achievement',\n        'improvement',\n        'coach',\n        'trainer',\n        'guidance',\n        'support',\n        'community',\n        'journey'\n    ];\n    const encouragingPhrases = [\n        'great job',\n        'well done',\n        'keep going',\n        'you can do it',\n        'proud of you',\n        'amazing progress',\n        'inspiring',\n        'motivated',\n        'helpful',\n        'supportive'\n    ];\n    const foundKeywords = positiveKeywords.filter((keyword)=>content.toLowerCase().includes(keyword));\n    const foundPhrases = encouragingPhrases.filter((phrase)=>content.toLowerCase().includes(phrase));\n    const isFitnessRelated = foundKeywords.length >= 1;\n    const positiveIndicators = [\n        ...foundKeywords,\n        ...foundPhrases\n    ];\n    // Calculate confidence bonus (0-0.3)\n    const confidenceBonus = Math.min(foundKeywords.length * 0.1 + foundPhrases.length * 0.15, 0.3);\n    return {\n        isFitnessRelated,\n        positiveIndicators,\n        confidenceBonus\n    };\n}\n// ============================================================================\n// RULE MANAGEMENT\n// ============================================================================\n/**\n   * Get all active custom rules\n   */ function getActiveRules() {\n    return Object.values(FITNESS_VIOLATION_PATTERNS).filter((rule)=>rule.enabled);\n}\n/**\n   * Update rule configuration\n   */ function updateRule(ruleId, updates) {\n    const rule = Object.values(FITNESS_VIOLATION_PATTERNS).find((r)=>r.id === ruleId);\n    if (!rule) return false;\n    Object.assign(rule, updates, {\n        lastModified: new Date()\n    });\n    return true;\n}\n/**\n   * Get rule statistics\n   */ function getRuleStats() {\n    const stats = {};\n    Object.entries(FITNESS_VIOLATION_PATTERNS).forEach(([key, rule])=>{\n        stats[key] = {\n            usageCount: rule.usageCount,\n            severity: rule.severity,\n            enabled: rule.enabled\n        };\n    });\n    return stats;\n}\n// ============================================================================\n// EXPORT UTILITIES\n// ============================================================================\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/moderation/rules.ts\n");

/***/ }),

/***/ "(rsc)/./src/types/workout.ts":
/*!******************************!*\
  !*** ./src/types/workout.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EXERCISE_CATEGORIES: () => (/* binding */ EXERCISE_CATEGORIES),\n/* harmony export */   MUSCLE_GROUPS: () => (/* binding */ MUSCLE_GROUPS),\n/* harmony export */   SET_TYPE_CONFIGS: () => (/* binding */ SET_TYPE_CONFIGS),\n/* harmony export */   calculateAverageWeight: () => (/* binding */ calculateAverageWeight),\n/* harmony export */   calculateTrainingVolume: () => (/* binding */ calculateTrainingVolume),\n/* harmony export */   convertKgToLb: () => (/* binding */ convertKgToLb),\n/* harmony export */   convertLbToKg: () => (/* binding */ convertLbToKg),\n/* harmony export */   formatDuration: () => (/* binding */ formatDuration),\n/* harmony export */   generateOrder: () => (/* binding */ generateOrder),\n/* harmony export */   isExercise: () => (/* binding */ isExercise),\n/* harmony export */   isWorkoutLogEntry: () => (/* binding */ isWorkoutLogEntry),\n/* harmony export */   isWorkoutSession: () => (/* binding */ isWorkoutSession),\n/* harmony export */   parseDuration: () => (/* binding */ parseDuration),\n/* harmony export */   parseWeightString: () => (/* binding */ parseWeightString)\n/* harmony export */ });\n/**\n * Workout Log Type Definitions for Massimino\n * Comprehensive type system for workout tracking and management\n */ // ============================================================================\n// ENUMS\n// ============================================================================\n// ============================================================================\n// CONSTANTS\n// ============================================================================\n/**\n * Set type configurations\n */ const SET_TYPE_CONFIGS = {\n    STRAIGHT: {\n        type: 'STRAIGHT',\n        label: 'Straight Sets',\n        description: 'Regular sets with consistent weight',\n        orderPattern: 'numeric',\n        weightHandling: 'single'\n    },\n    SUPERSET: {\n        type: 'SUPERSET',\n        label: 'Superset',\n        description: 'Two exercises performed back-to-back',\n        orderPattern: 'grouped',\n        maxGroupSize: 2,\n        weightHandling: 'single'\n    },\n    TRISET: {\n        type: 'TRISET',\n        label: 'Triset',\n        description: 'Three exercises performed back-to-back',\n        orderPattern: 'grouped',\n        maxGroupSize: 3,\n        weightHandling: 'single'\n    },\n    GIANT_SET: {\n        type: 'GIANT_SET',\n        label: 'Giant Set',\n        description: 'Four or more exercises performed back-to-back',\n        orderPattern: 'grouped',\n        maxGroupSize: 4,\n        weightHandling: 'single'\n    },\n    PYRAMID: {\n        type: 'PYRAMID',\n        label: 'Pyramid',\n        description: 'Increasing weight with each set',\n        orderPattern: 'numeric',\n        weightHandling: 'progressive'\n    },\n    REVERSE_PYRAMID: {\n        type: 'REVERSE_PYRAMID',\n        label: 'Reverse Pyramid',\n        description: 'Decreasing weight with each set',\n        orderPattern: 'numeric',\n        weightHandling: 'progressive'\n    },\n    DROP_SET: {\n        type: 'DROP_SET',\n        label: 'Drop Set',\n        description: 'Decreasing weight within the same set',\n        orderPattern: 'numeric',\n        weightHandling: 'multiple'\n    },\n    REST_PAUSE: {\n        type: 'REST_PAUSE',\n        label: 'Rest-Pause',\n        description: 'Short rest periods within a set',\n        orderPattern: 'numeric',\n        weightHandling: 'single'\n    },\n    CLUSTER: {\n        type: 'CLUSTER',\n        label: 'Cluster',\n        description: 'Short rest periods between reps',\n        orderPattern: 'numeric',\n        weightHandling: 'single'\n    },\n    EMOM: {\n        type: 'EMOM',\n        label: 'EMOM',\n        description: 'Every Minute on the Minute',\n        orderPattern: 'numeric',\n        weightHandling: 'single'\n    },\n    AMRAP: {\n        type: 'AMRAP',\n        label: 'AMRAP',\n        description: 'As Many Rounds As Possible',\n        orderPattern: 'numeric',\n        weightHandling: 'single'\n    }\n};\n/**\n * Exercise categories\n */ const EXERCISE_CATEGORIES = [\n    {\n        name: 'Compound',\n        description: 'Multi-joint movements that work multiple muscle groups',\n        muscleGroups: [\n            'chest',\n            'back',\n            'shoulders',\n            'legs'\n        ],\n        equipment: [\n            'barbell',\n            'dumbbell',\n            'kettlebell'\n        ],\n        difficulty: 'INTERMEDIATE'\n    },\n    {\n        name: 'Isolation',\n        description: 'Single-joint movements that target specific muscles',\n        muscleGroups: [\n            'biceps',\n            'triceps',\n            'calves',\n            'abs'\n        ],\n        equipment: [\n            'dumbbell',\n            'cable',\n            'machine'\n        ],\n        difficulty: 'BEGINNER'\n    },\n    {\n        name: 'Cardio',\n        description: 'Cardiovascular exercises for endurance and conditioning',\n        muscleGroups: [\n            'heart',\n            'lungs'\n        ],\n        equipment: [\n            'treadmill',\n            'bike',\n            'rower',\n            'elliptical'\n        ],\n        difficulty: 'BEGINNER'\n    },\n    {\n        name: 'Mobility',\n        description: 'Flexibility and mobility exercises',\n        muscleGroups: [\n            'joints',\n            'connective tissue'\n        ],\n        equipment: [\n            'bodyweight',\n            'foam_roller',\n            'band'\n        ],\n        difficulty: 'BEGINNER'\n    }\n];\n/**\n * Muscle groups\n */ const MUSCLE_GROUPS = [\n    {\n        name: 'Chest',\n        description: 'Pectoralis major and minor',\n        primaryExercises: [\n            'bench_press',\n            'push_ups',\n            'dumbbell_press'\n        ],\n        secondaryExercises: [\n            'dips',\n            'flyes',\n            'cable_crossovers'\n        ]\n    },\n    {\n        name: 'Back',\n        description: 'Latissimus dorsi, rhomboids, trapezius',\n        primaryExercises: [\n            'pull_ups',\n            'rows',\n            'deadlift'\n        ],\n        secondaryExercises: [\n            'lat_pulldowns',\n            'face_pulls',\n            'shrugs'\n        ]\n    },\n    {\n        name: 'Shoulders',\n        description: 'Deltoids (anterior, lateral, posterior)',\n        primaryExercises: [\n            'overhead_press',\n            'lateral_raises',\n            'rear_delt_flyes'\n        ],\n        secondaryExercises: [\n            'arnold_press',\n            'upright_rows',\n            'face_pulls'\n        ]\n    },\n    {\n        name: 'Arms',\n        description: 'Biceps and triceps',\n        primaryExercises: [\n            'bicep_curls',\n            'tricep_dips',\n            'hammer_curls'\n        ],\n        secondaryExercises: [\n            'preacher_curls',\n            'skull_crushers',\n            'concentration_curls'\n        ]\n    },\n    {\n        name: 'Legs',\n        description: 'Quadriceps, hamstrings, glutes, calves',\n        primaryExercises: [\n            'squats',\n            'deadlifts',\n            'lunges'\n        ],\n        secondaryExercises: [\n            'leg_press',\n            'leg_curls',\n            'calf_raises'\n        ]\n    },\n    {\n        name: 'Core',\n        description: 'Abdominals, obliques, lower back',\n        primaryExercises: [\n            'planks',\n            'crunches',\n            'dead_bugs'\n        ],\n        secondaryExercises: [\n            'russian_twists',\n            'leg_raises',\n            'mountain_climbers'\n        ]\n    }\n];\n// ============================================================================\n// TYPE GUARDS\n// ============================================================================\n/**\n * Type guard for workout log entry\n */ const isWorkoutLogEntry = (obj)=>{\n    return obj && typeof obj.id === 'string' && typeof obj.userId === 'string' && obj.date instanceof Date && typeof obj.exerciseId === 'string' && typeof obj.order === 'string' && typeof obj.setNumber === 'number' && typeof obj.reps === 'number' && typeof obj.weight === 'string' && typeof obj.unit === 'string';\n};\n/**\n * Type guard for exercise\n */ const isExercise = (obj)=>{\n    return obj && typeof obj.id === 'string' && typeof obj.name === 'string' && typeof obj.category === 'string' && Array.isArray(obj.muscleGroups) && Array.isArray(obj.equipment);\n};\n/**\n * Type guard for workout session\n */ const isWorkoutSession = (obj)=>{\n    return obj && typeof obj.id === 'string' && typeof obj.userId === 'string' && obj.date instanceof Date && obj.startTime instanceof Date;\n};\n// ============================================================================\n// HELPER FUNCTIONS\n// ============================================================================\n/**\n * Convert weight from lb to kg\n */ const convertLbToKg = (weight)=>{\n    return weight * 0.453592;\n};\n/**\n * Convert weight from kg to lb\n */ const convertKgToLb = (weight)=>{\n    return weight / 0.453592;\n};\n/**\n * Parse weight string to numbers\n */ const parseWeightString = (weight)=>{\n    return weight.split(',').map((w)=>w.trim()).filter((w)=>w.length > 0).map((w)=>parseFloat(w)).filter((w)=>!isNaN(w));\n};\n/**\n * Calculate average weight from weight string\n */ const calculateAverageWeight = (weight)=>{\n    const weights = parseWeightString(weight);\n    if (weights.length === 0) return 0;\n    return weights.reduce((sum, w)=>sum + w, 0) / weights.length;\n};\n/**\n * Calculate training volume\n */ const calculateTrainingVolume = (sets, reps, averageWeight, unit)=>{\n    const weightKg = unit === 'LB' ? convertLbToKg(averageWeight) : averageWeight;\n    return sets * reps * weightKg;\n};\n/**\n * Generate order string based on set type and context\n */ const generateOrder = (setType, context)=>{\n    const config = SET_TYPE_CONFIGS[setType];\n    if (config && config.orderPattern === 'numeric') {\n        return context.currentGroupNumber.toString();\n    } else {\n        // Grouped pattern (A, B, C, etc.)\n        return `${context.currentGroupNumber}${context.currentSubOrder}`;\n    }\n};\n/**\n * Format duration string\n */ const formatDuration = (seconds)=>{\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const secs = seconds % 60;\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n};\n/**\n * Parse duration string\n */ const parseDuration = (duration)=>{\n    const parts = duration.split(':').map(Number);\n    if (parts.length === 3) {\n        return (parts[0] || 0) * 3600 + (parts[1] || 0) * 60 + (parts[2] || 0);\n    }\n    return 0;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/types/workout.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "?4410":
/*!****************************!*\
  !*** bufferutil (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?ae40":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?c6f9":
/*!****************************!*\
  !*** bufferutil (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?c757":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@prisma/client");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "firebase-admin":
/*!*********************************!*\
  !*** external "firebase-admin" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("firebase-admin");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("fs/promises");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream/web");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "timers":
/*!*************************!*\
  !*** external "timers" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("timers");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/next-auth","vendor-chunks/@opentelemetry","vendor-chunks/@babel","vendor-chunks/zod","vendor-chunks/formdata-node","vendor-chunks/node-fetch","vendor-chunks/openai","vendor-chunks/jose","vendor-chunks/openid-client","vendor-chunks/web-streams-polyfill","vendor-chunks/bcryptjs","vendor-chunks/oauth","vendor-chunks/event-target-shim","vendor-chunks/agentkeepalive","vendor-chunks/object-hash","vendor-chunks/preact","vendor-chunks/uuid","vendor-chunks/form-data-encoder","vendor-chunks/preact-render-to-string","vendor-chunks/cookie","vendor-chunks/abort-controller","vendor-chunks/@panva","vendor-chunks/oidc-token-hash","vendor-chunks/ms","vendor-chunks/humanize-ms","vendor-chunks/@mollie","vendor-chunks/engine.io","vendor-chunks/socket.io-adapter","vendor-chunks/mime-db","vendor-chunks/socket.io","vendor-chunks/socket.io-parser","vendor-chunks/negotiator","vendor-chunks/engine.io-parser","vendor-chunks/cors","vendor-chunks/accepts","vendor-chunks/mime-types","vendor-chunks/@socket.io","vendor-chunks/vary","vendor-chunks/supports-color","vendor-chunks/base64id","vendor-chunks/object-assign","vendor-chunks/ruply","vendor-chunks/has-flag"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fmassichat%2Froute&page=%2Fapi%2Fmassichat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmassichat%2Froute.ts&appDir=%2FUsers%2Fvictorsole%2FDocuments%2FGitHub%2Fmassimino%2Fmassimino%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fvictorsole%2FDocuments%2FGitHub%2Fmassimino%2Fmassimino&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();